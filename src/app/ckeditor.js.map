{"version":3,"file":"ckeditor.js","mappings":"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","sources":["webpack://CustomEditor/webpack/universalModuleDefinition","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/node_modules/color-convert/conversions.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/node_modules/color-convert/index.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/node_modules/color-convert/route.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/node_modules/color-name/index.js","webpack://CustomEditor/./node_modules/color-name/index.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/theme/classiceditor.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/renderer.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-source-editing/theme/sourceediting.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorpicker/colorpicker.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/input/input.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css","webpack://CustomEditor/./node_modules/css-loader/dist/runtime/api.js","webpack://CustomEditor/./node_modules/css-loader/dist/runtime/cssWithMappingToString.js","webpack://CustomEditor/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://CustomEditor/webpack/bootstrap","webpack://CustomEditor/webpack/runtime/compat get default export","webpack://CustomEditor/webpack/runtime/define property getters","webpack://CustomEditor/webpack/runtime/global","webpack://CustomEditor/webpack/runtime/hasOwnProperty shorthand","webpack://CustomEditor/webpack/runtime/nonce","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/env.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/diff.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/spy.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/uid.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/inserttopriorityarray.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/version.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","webpack://CustomEditor/./node_modules/lodash-es/isObject.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/elementreplacer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/count.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js","webpack://CustomEditor/./node_modules/lodash-es/_freeGlobal.js","webpack://CustomEditor/./node_modules/lodash-es/_root.js","webpack://CustomEditor/./node_modules/lodash-es/_Symbol.js","webpack://CustomEditor/./node_modules/lodash-es/_getRawTag.js","webpack://CustomEditor/./node_modules/lodash-es/_objectToString.js","webpack://CustomEditor/./node_modules/lodash-es/_baseGetTag.js","webpack://CustomEditor/./node_modules/lodash-es/isArray.js","webpack://CustomEditor/./node_modules/lodash-es/isObjectLike.js","webpack://CustomEditor/./node_modules/lodash-es/isString.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/createelement.js","webpack://CustomEditor/./node_modules/lodash-es/_overArg.js","webpack://CustomEditor/./node_modules/lodash-es/_getPrototype.js","webpack://CustomEditor/./node_modules/lodash-es/isPlainObject.js","webpack://CustomEditor/./node_modules/lodash-es/eq.js","webpack://CustomEditor/./node_modules/lodash-es/_assocIndexOf.js","webpack://CustomEditor/./node_modules/lodash-es/_listCacheDelete.js","webpack://CustomEditor/./node_modules/lodash-es/_ListCache.js","webpack://CustomEditor/./node_modules/lodash-es/_listCacheClear.js","webpack://CustomEditor/./node_modules/lodash-es/_listCacheGet.js","webpack://CustomEditor/./node_modules/lodash-es/_listCacheHas.js","webpack://CustomEditor/./node_modules/lodash-es/_listCacheSet.js","webpack://CustomEditor/./node_modules/lodash-es/isFunction.js","webpack://CustomEditor/./node_modules/lodash-es/_coreJsData.js","webpack://CustomEditor/./node_modules/lodash-es/_isMasked.js","webpack://CustomEditor/./node_modules/lodash-es/_toSource.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsNative.js","webpack://CustomEditor/./node_modules/lodash-es/_getNative.js","webpack://CustomEditor/./node_modules/lodash-es/_getValue.js","webpack://CustomEditor/./node_modules/lodash-es/_Map.js","webpack://CustomEditor/./node_modules/lodash-es/_nativeCreate.js","webpack://CustomEditor/./node_modules/lodash-es/_hashGet.js","webpack://CustomEditor/./node_modules/lodash-es/_hashHas.js","webpack://CustomEditor/./node_modules/lodash-es/_Hash.js","webpack://CustomEditor/./node_modules/lodash-es/_hashClear.js","webpack://CustomEditor/./node_modules/lodash-es/_hashDelete.js","webpack://CustomEditor/./node_modules/lodash-es/_hashSet.js","webpack://CustomEditor/./node_modules/lodash-es/_getMapData.js","webpack://CustomEditor/./node_modules/lodash-es/_isKeyable.js","webpack://CustomEditor/./node_modules/lodash-es/_MapCache.js","webpack://CustomEditor/./node_modules/lodash-es/_mapCacheClear.js","webpack://CustomEditor/./node_modules/lodash-es/_mapCacheDelete.js","webpack://CustomEditor/./node_modules/lodash-es/_mapCacheGet.js","webpack://CustomEditor/./node_modules/lodash-es/_mapCacheHas.js","webpack://CustomEditor/./node_modules/lodash-es/_mapCacheSet.js","webpack://CustomEditor/./node_modules/lodash-es/_Stack.js","webpack://CustomEditor/./node_modules/lodash-es/_stackClear.js","webpack://CustomEditor/./node_modules/lodash-es/_stackDelete.js","webpack://CustomEditor/./node_modules/lodash-es/_stackGet.js","webpack://CustomEditor/./node_modules/lodash-es/_stackHas.js","webpack://CustomEditor/./node_modules/lodash-es/_stackSet.js","webpack://CustomEditor/./node_modules/lodash-es/_defineProperty.js","webpack://CustomEditor/./node_modules/lodash-es/_baseAssignValue.js","webpack://CustomEditor/./node_modules/lodash-es/_assignValue.js","webpack://CustomEditor/./node_modules/lodash-es/_copyObject.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsArguments.js","webpack://CustomEditor/./node_modules/lodash-es/isArguments.js","webpack://CustomEditor/./node_modules/lodash-es/isBuffer.js","webpack://CustomEditor/./node_modules/lodash-es/stubFalse.js","webpack://CustomEditor/./node_modules/lodash-es/_isIndex.js","webpack://CustomEditor/./node_modules/lodash-es/isLength.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://CustomEditor/./node_modules/lodash-es/_baseUnary.js","webpack://CustomEditor/./node_modules/lodash-es/_nodeUtil.js","webpack://CustomEditor/./node_modules/lodash-es/isTypedArray.js","webpack://CustomEditor/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://CustomEditor/./node_modules/lodash-es/_baseTimes.js","webpack://CustomEditor/./node_modules/lodash-es/_isPrototype.js","webpack://CustomEditor/./node_modules/lodash-es/_nativeKeys.js","webpack://CustomEditor/./node_modules/lodash-es/_baseKeys.js","webpack://CustomEditor/./node_modules/lodash-es/isArrayLike.js","webpack://CustomEditor/./node_modules/lodash-es/keys.js","webpack://CustomEditor/./node_modules/lodash-es/_baseKeysIn.js","webpack://CustomEditor/./node_modules/lodash-es/_nativeKeysIn.js","webpack://CustomEditor/./node_modules/lodash-es/keysIn.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneBuffer.js","webpack://CustomEditor/./node_modules/lodash-es/_copyArray.js","webpack://CustomEditor/./node_modules/lodash-es/stubArray.js","webpack://CustomEditor/./node_modules/lodash-es/_getSymbols.js","webpack://CustomEditor/./node_modules/lodash-es/_arrayFilter.js","webpack://CustomEditor/./node_modules/lodash-es/_arrayPush.js","webpack://CustomEditor/./node_modules/lodash-es/_getSymbolsIn.js","webpack://CustomEditor/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://CustomEditor/./node_modules/lodash-es/_getAllKeys.js","webpack://CustomEditor/./node_modules/lodash-es/_getAllKeysIn.js","webpack://CustomEditor/./node_modules/lodash-es/_DataView.js","webpack://CustomEditor/./node_modules/lodash-es/_Promise.js","webpack://CustomEditor/./node_modules/lodash-es/_Set.js","webpack://CustomEditor/./node_modules/lodash-es/_WeakMap.js","webpack://CustomEditor/./node_modules/lodash-es/_getTag.js","webpack://CustomEditor/./node_modules/lodash-es/_initCloneArray.js","webpack://CustomEditor/./node_modules/lodash-es/_Uint8Array.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneRegExp.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneSymbol.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneTypedArray.js","webpack://CustomEditor/./node_modules/lodash-es/_initCloneByTag.js","webpack://CustomEditor/./node_modules/lodash-es/_cloneDataView.js","webpack://CustomEditor/./node_modules/lodash-es/_baseCreate.js","webpack://CustomEditor/./node_modules/lodash-es/_initCloneObject.js","webpack://CustomEditor/./node_modules/lodash-es/isMap.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsMap.js","webpack://CustomEditor/./node_modules/lodash-es/isSet.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsSet.js","webpack://CustomEditor/./node_modules/lodash-es/_baseClone.js","webpack://CustomEditor/./node_modules/lodash-es/_copySymbolsIn.js","webpack://CustomEditor/./node_modules/lodash-es/_baseAssignIn.js","webpack://CustomEditor/./node_modules/lodash-es/_copySymbols.js","webpack://CustomEditor/./node_modules/lodash-es/_baseAssign.js","webpack://CustomEditor/./node_modules/lodash-es/_arrayEach.js","webpack://CustomEditor/./node_modules/lodash-es/cloneDeepWith.js","webpack://CustomEditor/./node_modules/lodash-es/isElement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/config.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getancestors.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/resizeobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/indexof.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/insertat.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/iscomment.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isvisible.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/remove.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/scroll.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/toarray.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/language.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/locale.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/collection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/first.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/objecttomap.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/delay.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/unicode.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css?9ffd","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/view.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/template.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/bodycollection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css?d134","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css?e9d2","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css?aaf0","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css?2704","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css?8d4e","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/label/labelview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css?2832","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/input/input.css?edfa","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css?1880","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarlinebreakview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/command.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/context.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/contextplugin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css?b8f9","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/typecheckable.js","webpack://CustomEditor/./node_modules/lodash-es/clone.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js","webpack://CustomEditor/./node_modules/lodash-es/isSymbol.js","webpack://CustomEditor/./node_modules/lodash-es/_isKey.js","webpack://CustomEditor/./node_modules/lodash-es/memoize.js","webpack://CustomEditor/./node_modules/lodash-es/_stringToPath.js","webpack://CustomEditor/./node_modules/lodash-es/_memoizeCapped.js","webpack://CustomEditor/./node_modules/lodash-es/_baseToString.js","webpack://CustomEditor/./node_modules/lodash-es/_arrayMap.js","webpack://CustomEditor/./node_modules/lodash-es/_castPath.js","webpack://CustomEditor/./node_modules/lodash-es/toString.js","webpack://CustomEditor/./node_modules/lodash-es/_toKey.js","webpack://CustomEditor/./node_modules/lodash-es/_baseGet.js","webpack://CustomEditor/./node_modules/lodash-es/_parent.js","webpack://CustomEditor/./node_modules/lodash-es/_baseSlice.js","webpack://CustomEditor/./node_modules/lodash-es/unset.js","webpack://CustomEditor/./node_modules/lodash-es/_baseUnset.js","webpack://CustomEditor/./node_modules/lodash-es/last.js","webpack://CustomEditor/./node_modules/lodash-es/get.js","webpack://CustomEditor/./node_modules/lodash-es/_assignMergeValue.js","webpack://CustomEditor/./node_modules/lodash-es/_baseFor.js","webpack://CustomEditor/./node_modules/lodash-es/_createBaseFor.js","webpack://CustomEditor/./node_modules/lodash-es/_safeGet.js","webpack://CustomEditor/./node_modules/lodash-es/_baseMergeDeep.js","webpack://CustomEditor/./node_modules/lodash-es/isArrayLikeObject.js","webpack://CustomEditor/./node_modules/lodash-es/toPlainObject.js","webpack://CustomEditor/./node_modules/lodash-es/_baseMerge.js","webpack://CustomEditor/./node_modules/lodash-es/identity.js","webpack://CustomEditor/./node_modules/lodash-es/_apply.js","webpack://CustomEditor/./node_modules/lodash-es/_overRest.js","webpack://CustomEditor/./node_modules/lodash-es/_baseSetToString.js","webpack://CustomEditor/./node_modules/lodash-es/constant.js","webpack://CustomEditor/./node_modules/lodash-es/_shortOut.js","webpack://CustomEditor/./node_modules/lodash-es/_setToString.js","webpack://CustomEditor/./node_modules/lodash-es/_baseRest.js","webpack://CustomEditor/./node_modules/lodash-es/_createAssigner.js","webpack://CustomEditor/./node_modules/lodash-es/_isIterateeCall.js","webpack://CustomEditor/./node_modules/lodash-es/merge.js","webpack://CustomEditor/./node_modules/lodash-es/set.js","webpack://CustomEditor/./node_modules/lodash-es/_baseSet.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/stylesmap.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/rooteditableelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/bubblingemittermixin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/rawelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/renderer.css?d589","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isvalidattributename.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js","webpack://CustomEditor/./node_modules/lodash-es/assignIn.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/keyobserver.js","webpack://CustomEditor/./node_modules/lodash-es/now.js","webpack://CustomEditor/./node_modules/lodash-es/_trimmedEndIndex.js","webpack://CustomEditor/./node_modules/lodash-es/_baseTrim.js","webpack://CustomEditor/./node_modules/lodash-es/toNumber.js","webpack://CustomEditor/./node_modules/lodash-es/debounce.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack://CustomEditor/./node_modules/lodash-es/_SetCache.js","webpack://CustomEditor/./node_modules/lodash-es/_setCacheAdd.js","webpack://CustomEditor/./node_modules/lodash-es/_setCacheHas.js","webpack://CustomEditor/./node_modules/lodash-es/_arraySome.js","webpack://CustomEditor/./node_modules/lodash-es/_cacheHas.js","webpack://CustomEditor/./node_modules/lodash-es/_equalArrays.js","webpack://CustomEditor/./node_modules/lodash-es/_mapToArray.js","webpack://CustomEditor/./node_modules/lodash-es/_setToArray.js","webpack://CustomEditor/./node_modules/lodash-es/_equalByTag.js","webpack://CustomEditor/./node_modules/lodash-es/_equalObjects.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsEqualDeep.js","webpack://CustomEditor/./node_modules/lodash-es/_baseIsEqual.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack://CustomEditor/./node_modules/lodash-es/isEqualWith.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/datatransfer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/inputobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/arrowkeysobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/tabobserver.js","webpack://CustomEditor/./node_modules/lodash-es/cloneDeep.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/typecheckable.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/splicearray.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/autoparagraphing.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js","webpack://CustomEditor/./node_modules/lodash-es/isEqual.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operationfactory.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/differ.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/history.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/document.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/writer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/modifyselection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertobject.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/findoptimalinsertionrange.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/styles/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/commandcollection.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/cancel.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/index.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/bold.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/caption.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/check.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/cog.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/eraser.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/image.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/low-vision.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/importexport.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/paragraph.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/plus.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/text.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-bottom.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-middle.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-top.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-left.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-center.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-right.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/align-justify.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-inline-left.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-center.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-inline-right.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-inline.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-left.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-right.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-size-full.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-size-large.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-size-small.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-size-medium.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/pencil.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/quote.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css?0211","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/preventdefault.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css?cbd7","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css?0497","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css?347c","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css?1a4d","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/utils/math.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/utils/convert.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/utils/compare.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/utils/dom.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/components/slider.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/components/hue.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/components/saturation.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/styles/color-picker.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/components/color-picker.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/styles/hue.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/styles/saturation.js","webpack://CustomEditor/./node_modules/vanilla-colorful/lib/entrypoints/hex.js","webpack://CustomEditor/./node_modules/vanilla-colorful/hex-color-picker.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorpicker/colorpicker.css?53be","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/componentfactory.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css?7831","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css?a08c","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/tooltipmanager.js","webpack://CustomEditor/./node_modules/lodash-es/throttle.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/poweredby.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/verifylicense.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/project-logo.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/findclosestscrollableancestor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/editorui.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css?2a16","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/editoruiview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/editableuiview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css?0cda","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/model.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css?1baf","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css?17b0","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css?009d","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/balloon/balloontoolbar.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css?45fd","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/block/blockbuttonview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditorui.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/theme/classiceditor.css?97f1","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditoruiview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-watchdog/src/watchdog.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-watchdog/src/utils/getsubnodes.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-watchdog/src/utils/areconnectedthroughproperties.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-watchdog/src/contextwatchdog.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getdatafromelement.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/attachtoform.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-source-editing/src/utils/formathtml.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-source-editing/theme/sourceediting.css?8d2b","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-source-editing/src/sourceediting.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardpipeline.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/inserttextcommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/inserttextobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/input.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deleteobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/delete.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/typing.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/textwatcher.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-typing/src/texttransformation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/entercommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enter.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftentercommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftenter.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/utils.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css?abb1","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/icons/return-arrow.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/verticalnavigation.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css?47b7","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widget.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css?24e6","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css?0a95","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/dragdrop.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/pasteplaintext.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/lineview.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-select-all/src/selectallcommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-select-all/src/selectallediting.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-select-all/src/selectallui.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-select-all/theme/icons/select-all.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-select-all/src/selectall.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undocommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/redocommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoediting.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/undo.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/redo.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoui.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undo.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/italic.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js","webpack://CustomEditor/./ckeditor.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-essentials/src/essentials.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-source-editing/theme/icons/source-editing.svg","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js","webpack://CustomEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomEditor\"] = factory();\n\telse\n\t\troot[\"CustomEditor\"] = factory();\n})(self, () => {\nreturn ","/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-editor__editable .ck.ck-clipboard-drop-target-position{display:inline;pointer-events:none;position:relative}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span{position:absolute;width:0}.ck.ck-editor__editable .ck-widget:-webkit-drag>.ck-widget__selection-handle,.ck.ck-editor__editable .ck-widget:-webkit-drag>.ck-widget__type-around{display:none}.ck.ck-clipboard-drop-target-line{pointer-events:none;position:absolute}:root{--ck-clipboard-drop-target-dot-width:12px;--ck-clipboard-drop-target-dot-height:8px;--ck-clipboard-drop-target-color:var(--ck-color-focus-border)}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span{background:var(--ck-clipboard-drop-target-color);border:1px solid var(--ck-clipboard-drop-target-color);bottom:calc(var(--ck-clipboard-drop-target-dot-height)*-.5);margin-left:-1px;top:calc(var(--ck-clipboard-drop-target-dot-height)*-.5)}.ck.ck-editor__editable .ck.ck-clipboard-drop-target-position span:after{border-color:var(--ck-clipboard-drop-target-color) transparent transparent transparent;border-style:solid;border-width:calc(var(--ck-clipboard-drop-target-dot-height)) calc(var(--ck-clipboard-drop-target-dot-width)*.5) 0 calc(var(--ck-clipboard-drop-target-dot-width)*.5);content:\\\"\\\";display:block;height:0;left:50%;position:absolute;top:calc(var(--ck-clipboard-drop-target-dot-height)*-.5);transform:translateX(-50%);width:0}.ck.ck-editor__editable .ck-widget.ck-clipboard-drop-target-range{outline:var(--ck-widget-outline-thickness) solid var(--ck-clipboard-drop-target-color)!important}.ck.ck-editor__editable .ck-widget:-webkit-drag{zoom:.6;outline:none!important}.ck.ck-clipboard-drop-target-line{background:var(--ck-clipboard-drop-target-color);border:1px solid var(--ck-clipboard-drop-target-color);height:0;margin-top:-1px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-clipboard/theme/clipboard.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-clipboard/clipboard.css\"],\"names\":[],\"mappings\":\"AASC,8DACC,cAAe,CAEf,mBAAoB,CADpB,iBAOD,CAJC,mEACC,iBAAkB,CAClB,OACD,CAWA,qJACC,YACD,CAIF,kCAEC,mBAAoB,CADpB,iBAED,CChCA,MACC,yCAA0C,CAC1C,yCAA0C,CAC1C,6DACD,CAOE,mEAIC,gDAAiD,CADjD,sDAAuD,CAFvD,2DAA8D,CAI9D,gBAAiB,CAHjB,wDAqBD,CAfC,yEAWC,sFAAuF,CAEvF,kBAAmB,CADnB,qKAA0K,CAX1K,UAAW,CAIX,aAAc,CAFd,QAAS,CAIT,QAAS,CADT,iBAAkB,CAElB,wDAA2D,CAE3D,0BAA2B,CAR3B,OAYD,CAOF,kEACC,gGACD,CAKA,gDACC,OAAS,CACT,sBACD,CAGD,kCAGC,gDAAiD,CADjD,sDAAuD,CADvD,QAAS,CAGT,eACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-editor__editable {\\n\\t/*\\n\\t * Vertical drop target (in text).\\n\\t */\\n\\t& .ck.ck-clipboard-drop-target-position {\\n\\t\\tdisplay: inline;\\n\\t\\tposition: relative;\\n\\t\\tpointer-events: none;\\n\\n\\t\\t& span {\\n\\t\\t\\tposition: absolute;\\n\\t\\t\\twidth: 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles of the widget being dragged (its preview).\\n\\t */\\n\\t& .ck-widget:-webkit-drag {\\n\\t\\t& > .ck-widget__selection-handle {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\n\\t\\t& > .ck-widget__type-around {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t}\\n}\\n\\n.ck.ck-clipboard-drop-target-line {\\n\\tposition: absolute;\\n\\tpointer-events: none;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-clipboard-drop-target-dot-width: 12px;\\n\\t--ck-clipboard-drop-target-dot-height: 8px;\\n\\t--ck-clipboard-drop-target-color: var(--ck-color-focus-border)\\n}\\n\\n.ck.ck-editor__editable {\\n\\t/*\\n\\t * Vertical drop target (in text).\\n\\t */\\n\\t& .ck.ck-clipboard-drop-target-position {\\n\\t\\t& span {\\n\\t\\t\\tbottom: calc(-.5 * var(--ck-clipboard-drop-target-dot-height));\\n\\t\\t\\ttop: calc(-.5 * var(--ck-clipboard-drop-target-dot-height));\\n\\t\\t\\tborder: 1px solid var(--ck-clipboard-drop-target-color);\\n\\t\\t\\tbackground: var(--ck-clipboard-drop-target-color);\\n\\t\\t\\tmargin-left: -1px;\\n\\n\\t\\t\\t/* The triangle above the marker */\\n\\t\\t\\t&::after {\\n\\t\\t\\t\\tcontent: \\\"\\\";\\n\\t\\t\\t\\twidth: 0;\\n\\t\\t\\t\\theight: 0;\\n\\n\\t\\t\\t\\tdisplay: block;\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\tleft: 50%;\\n\\t\\t\\t\\ttop: calc(var(--ck-clipboard-drop-target-dot-height) * -.5);\\n\\n\\t\\t\\t\\ttransform: translateX(-50%);\\n\\t\\t\\t\\tborder-color: var(--ck-clipboard-drop-target-color) transparent transparent transparent;\\n\\t\\t\\t\\tborder-width: calc(var(--ck-clipboard-drop-target-dot-height)) calc(.5 * var(--ck-clipboard-drop-target-dot-width)) 0 calc(.5 * var(--ck-clipboard-drop-target-dot-width));\\n\\t\\t\\t\\tborder-style: solid;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles of the widget that it a drop target.\\n\\t */\\n\\t& .ck-widget.ck-clipboard-drop-target-range {\\n\\t\\toutline: var(--ck-widget-outline-thickness) solid var(--ck-clipboard-drop-target-color) !important;\\n\\t}\\n\\n\\t/*\\n\\t * Styles of the widget being dragged (its preview).\\n\\t */\\n\\t& .ck-widget:-webkit-drag {\\n\\t\\tzoom: 0.6;\\n\\t\\toutline: none !important;\\n\\t}\\n}\\n\\n.ck.ck-clipboard-drop-target-line {\\n\\theight: 0;\\n\\tborder: 1px solid var(--ck-clipboard-drop-target-color);\\n\\tbackground: var(--ck-clipboard-drop-target-color);\\n\\tmargin-top: -1px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-editor{position:relative}.ck.ck-editor .ck-editor__top .ck-sticky-panel .ck-toolbar{z-index:var(--ck-z-modal)}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-bottom-width:0}.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar{border-bottom-width:1px;border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:0}.ck.ck-editor__main>.ck-editor__editable{background:var(--ck-color-base-background);border-radius:0}.ck-rounded-corners .ck.ck-editor__main>.ck-editor__editable,.ck.ck-editor__main>.ck-editor__editable.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}.ck.ck-editor__main>.ck-editor__editable:not(.ck-focused){border-color:var(--ck-color-base-border)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-editor-classic/theme/classiceditor.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-editor-classic/classiceditor.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAKA,cAIC,iBAMD,CAJC,2DAEC,yBACD,CCLC,gDCED,eDKC,CAPA,uICMA,qCAAsC,CDJpC,2BAA4B,CAC5B,4BAIF,CAPA,gDAMC,qBACD,CAEA,iFACC,uBAAwB,CCR1B,eDaC,CANA,yMCHA,qCAAsC,CDOpC,eAEF,CAKF,yCAEC,0CAA2C,CCpB3C,eD8BD,CAZA,yHCdE,qCAAsC,CDmBtC,wBAAyB,CACzB,yBAMF,CAHC,0DACC,wCACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-editor {\\n\\t/* All the elements within `.ck-editor` are positioned relatively to it.\\n\\t If any element needs to be positioned with respect to the <body>, etc.,\\n\\t it must land outside of the `.ck-editor` in DOM. */\\n\\tposition: relative;\\n\\n\\t& .ck-editor__top .ck-sticky-panel .ck-toolbar {\\n\\t\\t/* https://github.com/ckeditor/ckeditor5-editor-classic/issues/62 */\\n\\t\\tz-index: var(--ck-z-modal);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../mixins/_rounded.css\\\";\\n\\n.ck.ck-editor__top {\\n\\t& .ck-sticky-panel {\\n\\t\\t& .ck-toolbar {\\n\\t\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tborder-bottom-width: 0;\\n\\t\\t}\\n\\n\\t\\t& .ck-sticky-panel__content_sticky .ck-toolbar {\\n\\t\\t\\tborder-bottom-width: 1px;\\n\\n\\t\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t\\tborder-radius: 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/* Note: Use ck-editor__main to make sure these styles don't apply to other editor types */\\n.ck.ck-editor__main > .ck-editor__editable {\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/113 */\\n\\tbackground: var(--ck-color-base-background);\\n\\n\\t@mixin ck-rounded-corners {\\n\\t\\tborder-top-left-radius: 0;\\n\\t\\tborder-top-right-radius: 0;\\n\\t}\\n\\n\\t&:not(.ck-focused) {\\n\\t\\tborder-color: var(--ck-color-base-border);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck .ck-placeholder,.ck.ck-placeholder{position:relative}.ck .ck-placeholder:before,.ck.ck-placeholder:before{content:attr(data-placeholder);left:0;pointer-events:none;position:absolute;right:0}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-reset_all .ck-placeholder{position:relative}.ck .ck-placeholder:before,.ck.ck-placeholder:before{color:var(--ck-color-engine-placeholder-text);cursor:text}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-engine/placeholder.css\"],\"names\":[],\"mappings\":\"AAMA,uCAEC,iBAWD,CATC,qDAIC,8BAA+B,CAF/B,MAAO,CAKP,mBAAoB,CANpB,iBAAkB,CAElB,OAKD,CAKA,wCACC,YACD,CAQD,iCACC,iBACD,CC5BC,qDAEC,6CAA8C,CAD9C,WAED\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/* See ckeditor/ckeditor5#936. */\\n.ck.ck-placeholder,\\n.ck .ck-placeholder {\\n\\tposition: relative;\\n\\n\\t&::before {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\tright: 0;\\n\\t\\tcontent: attr(data-placeholder);\\n\\n\\t\\t/* See ckeditor/ckeditor5#469. */\\n\\t\\tpointer-events: none;\\n\\t}\\n}\\n\\n/* See ckeditor/ckeditor5#1987. */\\n.ck.ck-read-only .ck-placeholder {\\n\\t&::before {\\n\\t\\tdisplay: none;\\n\\t}\\n}\\n\\n/*\\n * Rules for the `ck-placeholder` are loaded before the rules for `ck-reset_all` in the base CKEditor 5 DLL build.\\n * This fix overwrites the incorrectly set `position: static` from `ck-reset_all`.\\n * See https://github.com/ckeditor/ckeditor5/issues/11418.\\n */\\n.ck.ck-reset_all .ck-placeholder {\\n\\tposition: relative;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/* See ckeditor/ckeditor5#936. */\\n.ck.ck-placeholder, .ck .ck-placeholder {\\n\\t&::before {\\n\\t\\tcursor: text;\\n\\t\\tcolor: var(--ck-color-engine-placeholder-text);\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-editor__editable span[data-ck-unsafe-element]{display:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-engine/theme/renderer.css\"],\"names\":[],\"mappings\":\"AAMA,qDACC,YACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/* Elements marked by the Renderer as hidden should be invisible in the editor. */\\n.ck.ck-editor__editable span[data-ck-unsafe-element] {\\n\\tdisplay: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck-source-editing-area{overflow:hidden;position:relative}.ck-source-editing-area textarea,.ck-source-editing-area:after{border:1px solid transparent;font-family:monospace;font-size:var(--ck-font-size-normal);line-height:var(--ck-line-height-base);margin:0;padding:var(--ck-spacing-large);white-space:pre-wrap}.ck-source-editing-area:after{content:attr(data-value) \\\" \\\";display:block;visibility:hidden}.ck-source-editing-area textarea{border-color:var(--ck-color-base-border);border-radius:0;box-sizing:border-box;height:100%;outline:none;overflow:hidden;position:absolute;resize:none;width:100%}.ck-rounded-corners .ck-source-editing-area textarea,.ck-source-editing-area textarea.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}.ck-source-editing-area textarea:not([readonly]):focus{border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-source-editing/theme/sourceediting.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AASA,wBAEC,eAAgB,CADhB,iBAED,CAEA,+DAIC,4BAA6B,CAG7B,qBAAsB,CADtB,oCAAqC,CADrC,sCAAuC,CAFvC,QAAS,CADT,+BAAgC,CAMhC,oBACD,CAEA,8BACC,4BAA6B,CAE7B,aAAc,CADd,iBAED,CAEA,iCASC,wCAAyC,CC7BzC,eAAgB,CD2BhB,qBAAsB,CAJtB,WAAY,CAEZ,YAAa,CACb,eAAgB,CALhB,iBAAkB,CAGlB,WAAY,CAFZ,UAkBD,CApBA,yGChBE,qCAAsC,CD4BtC,wBAAyB,CACzB,yBAOF,CAJC,uDEpCA,2BAA2B,CCF3B,qCAA8B,CDC9B,YFwCA\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\\\";\\n@import \\\"@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\\\";\\n@import \\\"@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\\\";\\n\\n.ck-source-editing-area {\\n\\tposition: relative;\\n\\toverflow: hidden;\\n}\\n\\n.ck-source-editing-area::after,\\n.ck-source-editing-area textarea {\\n\\tpadding: var(--ck-spacing-large);\\n\\tmargin: 0;\\n\\tborder: 1px solid transparent;\\n\\tline-height: var(--ck-line-height-base);\\n\\tfont-size: var(--ck-font-size-normal);\\n\\tfont-family: monospace;\\n\\twhite-space: pre-wrap;\\n}\\n\\n.ck-source-editing-area::after {\\n\\tcontent: attr(data-value) \\\" \\\";\\n\\tvisibility: hidden;\\n\\tdisplay: block;\\n}\\n\\n.ck-source-editing-area textarea {\\n\\tposition: absolute;\\n\\twidth: 100%;\\n\\theight: 100%;\\n\\tresize: none;\\n\\toutline: none;\\n\\toverflow: hidden;\\n\\tbox-sizing: border-box;\\n\\n\\tborder-color: var(--ck-color-base-border);\\n\\n\\t@mixin ck-rounded-corners {\\n\\t\\tborder-top-left-radius: 0;\\n\\t\\tborder-top-right-radius: 0;\\n\\t}\\n\\n\\t&:not([readonly]):focus {\\n\\t\\t@mixin ck-focus-ring;\\n\\t\\t@mixin ck-box-shadow var(--ck-inner-shadow);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A visual style of focused element's border.\\n */\\n@define-mixin ck-focus-ring {\\n\\t/* Disable native outline. */\\n\\toutline: none;\\n\\tborder: var(--ck-focus-ring)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-button,a.ck.ck-button{align-items:center;display:inline-flex;justify-content:left;position:relative;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{-webkit-appearance:none;border:1px solid transparent;cursor:default;font-size:inherit;line-height:1;min-height:var(--ck-ui-component-min-height);min-width:var(--ck-ui-component-min-height);padding:var(--ck-spacing-tiny);text-align:center;transition:box-shadow .2s ease-in-out,border .2s ease-in-out;vertical-align:middle;white-space:nowrap}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;outline:none}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{color:inherit;cursor:inherit;font-size:inherit;font-weight:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{color:inherit}[dir=ltr] .ck.ck-button .ck-button__keystroke,[dir=ltr] a.ck.ck-button .ck-button__keystroke{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-button .ck-button__keystroke,[dir=rtl] a.ck.ck-button .ck-button__keystroke{margin-right:var(--ck-spacing-large)}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{font-weight:700;opacity:.7}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__keystroke,a.ck.ck-button.ck-disabled .ck-button__keystroke{opacity:.3}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(var(--ck-spacing-small)*-1);margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:var(--ck-spacing-small);margin-right:calc(var(--ck-spacing-small)*-1)}.ck.ck-button.ck-button_with-keystroke .ck-button__label,a.ck.ck-button.ck-button_with-keystroke .ck-button__label{flex-grow:1}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{color:var(--ck-color-button-on-color)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/mixins/_unselectable.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/button/button.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/mixins/_button.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_disabled.css\"],\"names\":[],\"mappings\":\"AAOA,6BAMC,kBAAmB,CADnB,mBAAoB,CAEpB,oBAAqB,CAHrB,iBAAkB,CCFlB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CACrB,gBDkBD,CAdC,iEACC,YACD,CAGC,yGACC,oBACD,CAID,iFACC,sBACD,CEjBD,6BCAC,oDD4ID,CCzIE,6EACC,0DACD,CAEA,+EACC,2DACD,CAID,qDACC,6DACD,CDfD,6BEDC,eF6ID,CA5IA,wIEGE,qCFyIF,CA5IA,6BA6BC,uBAAwB,CANxB,4BAA6B,CAjB7B,cAAe,CAcf,iBAAkB,CAHlB,aAAc,CAJd,4CAA6C,CAD7C,2CAA4C,CAJ5C,8BAA+B,CAC/B,iBAAkB,CAiBlB,4DAA8D,CAnB9D,qBAAsB,CAFtB,kBAuID,CA7GC,oFGhCA,2BAA2B,CCF3B,2CAA8B,CDC9B,YHqCA,CAIC,kJAEC,aACD,CAGD,iEAIC,aAAc,CACd,cAAe,CAHf,iBAAkB,CAClB,mBAAoB,CAMpB,qBASD,CAlBA,qFAYE,eAMF,CAlBA,qFAgBE,gBAEF,CAEA,yEACC,aAYD,CAbA,6FAIE,mCASF,CAbA,6FAQE,oCAKF,CAbA,yEAWC,eAAiB,CACjB,UACD,CAIC,oIIrFD,oDJyFC,CAOA,gLKhGD,kCLkGC,CAEA,iGACC,UACD,CAGD,qEACC,yDAcD,CAXC,2HAEE,4CAA+C,CAC/C,oCAOF,CAVA,2HAQE,mCAAoC,CADpC,6CAGF,CAKA,mHACC,WACD,CAID,yCC/HA,+CDmIA,CChIC,yFACC,qDACD,CAEA,2FACC,sDACD,CAID,iEACC,wDACD,CDgHA,yCAGC,qCACD,CAEA,2DACC,iCACD,CAEA,+DACC,mCACD,CAID,2CC/IC,mDDoJD,CCjJE,2FACC,yDACD,CAEA,6FACC,0DACD,CAID,mEACC,4DACD,CDgID,2CAIC,wCACD,CAEA,uCAEC,eACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../mixins/_unselectable.css\\\";\\n\\n.ck.ck-button,\\na.ck.ck-button {\\n\\t@mixin ck-unselectable;\\n\\n\\tposition: relative;\\n\\tdisplay: inline-flex;\\n\\talign-items: center;\\n\\tjustify-content: left;\\n\\n\\t& .ck-button__label {\\n\\t\\tdisplay: none;\\n\\t}\\n\\n\\t&.ck-button_with-text {\\n\\t\\t& .ck-button__label {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\t}\\n\\n\\t/* Center the icon horizontally in a button without text. */\\n\\t&:not(.ck-button_with-text)  {\\n\\t\\tjustify-content: center;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Makes element unselectable.\\n */\\n@define-mixin ck-unselectable {\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n\\t-ms-user-select: none;\\n\\tuser-select: none\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_focus.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n@import \\\"../../../mixins/_disabled.css\\\";\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../mixins/_button.css\\\";\\n@import \\\"@ckeditor/ckeditor5-ui/theme/mixins/_dir.css\\\";\\n\\n.ck.ck-button,\\na.ck.ck-button {\\n\\t@mixin ck-button-colors --ck-color-button-default;\\n\\t@mixin ck-rounded-corners;\\n\\n\\twhite-space: nowrap;\\n\\tcursor: default;\\n\\tvertical-align: middle;\\n\\tpadding: var(--ck-spacing-tiny);\\n\\ttext-align: center;\\n\\n\\t/* A very important piece of styling. Go to variable declaration to learn more. */\\n\\tmin-width: var(--ck-ui-component-min-height);\\n\\tmin-height: var(--ck-ui-component-min-height);\\n\\n\\t/* Normalize the height of the line. Removing this will break consistent height\\n\\tamong text and text-less buttons (with icons). */\\n\\tline-height: 1;\\n\\n\\t/* Enable font size inheritance, which allows fluid UI scaling. */\\n\\tfont-size: inherit;\\n\\n\\t/* Avoid flickering when the foucs border shows up. */\\n\\tborder: 1px solid transparent;\\n\\n\\t/* Apply some smooth transition to the box-shadow and border. */\\n\\ttransition: box-shadow .2s ease-in-out, border .2s ease-in-out;\\n\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/189 */\\n\\t-webkit-appearance: none;\\n\\n\\t&:active,\\n\\t&:focus {\\n\\t\\t@mixin ck-focus-ring;\\n\\t\\t@mixin ck-box-shadow var(--ck-focus-outer-shadow);\\n\\t}\\n\\n\\t/* Allow icon coloring using the text \\\"color\\\" property. */\\n\\t& .ck-button__icon {\\n\\t\\t& use,\\n\\t\\t& use * {\\n\\t\\t\\tcolor: inherit;\\n\\t\\t}\\n\\t}\\n\\n\\t& .ck-button__label {\\n\\t\\t/* Enable font size inheritance, which allows fluid UI scaling. */\\n\\t\\tfont-size: inherit;\\n\\t\\tfont-weight: inherit;\\n\\t\\tcolor: inherit;\\n\\t\\tcursor: inherit;\\n\\n\\t\\t/* Must be consistent with .ck-icon's vertical align. Otherwise, buttons with and\\n\\t\\twithout labels (but with icons) have different sizes in Chrome */\\n\\t\\tvertical-align: middle;\\n\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\ttext-align: left;\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\ttext-align: right;\\n\\t\\t}\\n\\t}\\n\\n\\t& .ck-button__keystroke {\\n\\t\\tcolor: inherit;\\n\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\tmargin-left: var(--ck-spacing-large);\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\tmargin-right: var(--ck-spacing-large);\\n\\t\\t}\\n\\n\\t\\tfont-weight: bold;\\n\\t\\topacity: .7;\\n\\t}\\n\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/70 */\\n\\t&.ck-disabled {\\n\\t\\t&:active,\\n\\t\\t&:focus {\\n\\t\\t\\t/* The disabled button should have a slightly less visible shadow when focused. */\\n\\t\\t\\t@mixin ck-box-shadow var(--ck-focus-disabled-outer-shadow);\\n\\t\\t}\\n\\n\\t\\t& .ck-button__icon {\\n\\t\\t\\t@mixin ck-disabled;\\n\\t\\t}\\n\\n\\t\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/98 */\\n\\t\\t& .ck-button__label {\\n\\t\\t\\t@mixin ck-disabled;\\n\\t\\t}\\n\\n\\t\\t& .ck-button__keystroke {\\n\\t\\t\\topacity: .3;\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-button_with-text {\\n\\t\\tpadding: var(--ck-spacing-tiny) var(--ck-spacing-standard);\\n\\n\\t\\t/* stylelint-disable-next-line no-descending-specificity */\\n\\t\\t& .ck-button__icon {\\n\\t\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t\\tmargin-left: calc(-1 * var(--ck-spacing-small));\\n\\t\\t\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t\\t\\t}\\n\\n\\t\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t\\tmargin-right: calc(-1 * var(--ck-spacing-small));\\n\\t\\t\\t\\tmargin-left: var(--ck-spacing-small);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-button_with-keystroke {\\n\\t\\t/* stylelint-disable-next-line no-descending-specificity */\\n\\t\\t& .ck-button__label {\\n\\t\\t\\tflex-grow: 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/* A style of the button which is currently on, e.g. its feature is active. */\\n\\t&.ck-on {\\n\\t\\t@mixin ck-button-colors --ck-color-button-on;\\n\\n\\t\\tcolor: var(--ck-color-button-on-color);\\n\\t}\\n\\n\\t&.ck-button-save {\\n\\t\\tcolor: var(--ck-color-button-save);\\n\\t}\\n\\n\\t&.ck-button-cancel {\\n\\t\\tcolor: var(--ck-color-button-cancel);\\n\\t}\\n}\\n\\n/* A style of the button which handles the primary action. */\\n.ck.ck-button-action,\\na.ck.ck-button-action {\\n\\t@mixin ck-button-colors --ck-color-button-action;\\n\\n\\tcolor: var(--ck-color-button-action-text);\\n}\\n\\n.ck.ck-button-bold,\\na.ck.ck-button-bold {\\n\\tfont-weight: bold;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements a button of given background color.\\n *\\n * @param {String} $background - Background color of the button.\\n * @param {String} $border - Border color of the button.\\n */\\n@define-mixin ck-button-colors $prefix {\\n\\tbackground: var($(prefix)-background);\\n\\n\\t&:not(.ck-disabled) {\\n\\t\\t&:hover {\\n\\t\\t\\tbackground: var($(prefix)-hover-background);\\n\\t\\t}\\n\\n\\t\\t&:active {\\n\\t\\t\\tbackground: var($(prefix)-active-background);\\n\\t\\t}\\n\\t}\\n\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/98 */\\n\\t&.ck-disabled {\\n\\t\\tbackground: var($(prefix)-disabled-background);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A visual style of focused element's border.\\n */\\n@define-mixin ck-focus-ring {\\n\\t/* Disable native outline. */\\n\\toutline: none;\\n\\tborder: var(--ck-focus-ring)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A class which indicates that an element holding it is disabled.\\n */\\n@define-mixin ck-disabled {\\n\\topacity: var(--ck-disabled-opacity);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:calc(1.07692em + 1px);--ck-switch-button-translation:calc(var(--ck-switch-button-toggle-width) - var(--ck-switch-button-toggle-inner-size) - 2px);--ck-switch-button-inner-hover-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton,.ck.ck-button.ck-switchbutton.ck-on:active,.ck.ck-button.ck-switchbutton.ck-on:focus,.ck.ck-button.ck-switchbutton.ck-on:hover,.ck.ck-button.ck-switchbutton:active,.ck.ck-button.ck-switchbutton:focus,.ck.ck-button.ck-switchbutton:hover{background:transparent;color:inherit}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(var(--ck-spacing-large)*2)}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(var(--ck-spacing-large)*2)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{background:var(--ck-color-switch-button-off-background);border:1px solid transparent;transition:background .4s ease,box-shadow .2s ease-in-out,outline .2s ease-in-out;width:var(--ck-switch-button-toggle-width)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(var(--ck-border-radius)*.5)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{background:var(--ck-color-switch-button-inner-background);height:var(--ck-switch-button-toggle-inner-size);transition:all .3s ease;width:var(--ck-switch-button-toggle-inner-size)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:var(--ck-switch-button-inner-hover-shadow)}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton:focus{border-color:transparent;box-shadow:none;outline:none}.ck.ck-button.ck-switchbutton:focus .ck-button__toggle{box-shadow:0 0 0 1px var(--ck-color-base-background),0 0 0 5px var(--ck-color-focus-outer-shadow);outline:var(--ck-focus-ring);outline-offset:1px}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var( --ck-switch-button-translation ))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(var( --ck-switch-button-translation )*-1))}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/button/switchbutton.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_disabled.css\"],\"names\":[],\"mappings\":\"AASE,4HACC,aACD,CCCF,MAEC,8CAA+C,CAE/C,0DAAgE,CAChE,2HAIC,CACD,0FACD,CAOC,0QAEC,sBAAuB,CADvB,aAED,CAEA,0DAGE,4CAOF,CAVA,0DAQE,2CAEF,CAEA,iDCpCA,eD4EA,CAxCA,yIChCC,qCDwED,CAxCA,2DAKE,gBAmCF,CAxCA,2DAUE,iBA8BF,CAxCA,iDAkBC,uDAAwD,CAFxD,4BAA6B,CAD7B,iFAAsF,CAEtF,0CAuBD,CApBC,2ECxDD,eDmEC,CAXA,6LCpDA,qCAAsC,CDsDpC,8CASF,CAXA,2EAOC,yDAA0D,CAD1D,gDAAiD,CAIjD,uBAA0B,CAL1B,+CAMD,CAEA,uDACC,6DAKD,CAHC,iFACC,qDACD,CAIF,6DEhFA,kCFkFA,CAGA,oCACC,wBAAyB,CAEzB,eAAgB,CADhB,YAQD,CALC,uDACC,iGAAmG,CAEnG,4BAA6B,CAD7B,kBAED,CAKA,uDACC,sDAkBD,CAhBC,6DACC,4DACD,CAEA,2FAKE,2DAMF,CAXA,2FASE,oEAEF\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-button.ck-switchbutton {\\n\\t& .ck-button__toggle {\\n\\t\\tdisplay: block;\\n\\n\\t\\t& .ck-button__toggle__inner {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_disabled.css\\\";\\n@import \\\"@ckeditor/ckeditor5-ui/theme/mixins/_dir.css\\\";\\n\\n/* Note: To avoid rendering issues (aliasing) but to preserve the responsive nature\\nof the component, floating–point numbers have been used which, for the default font size\\n(see: --ck-font-size-base), will generate simple integers. */\\n:root {\\n\\t/* 34px at 13px font-size */\\n\\t--ck-switch-button-toggle-width: 2.6153846154em;\\n\\t/* 14px at 13px font-size */\\n\\t--ck-switch-button-toggle-inner-size: calc(1.0769230769em + 1px);\\n\\t--ck-switch-button-translation: calc(\\n\\t\\tvar(--ck-switch-button-toggle-width) -\\n\\t\\tvar(--ck-switch-button-toggle-inner-size) -\\n\\t\\t2px /* Border */\\n\\t);\\n\\t--ck-switch-button-inner-hover-shadow: 0 0 0 5px var(--ck-color-switch-button-inner-shadow);\\n}\\n\\n.ck.ck-button.ck-switchbutton {\\n\\t/* Unlike a regular button, the switch button text color and background should never change.\\n\\t * Changing toggle switch (background, outline) is enough to carry the information about the\\n\\t * state of the entire component (https://github.com/ckeditor/ckeditor5/issues/12519)\\n\\t */\\n\\t&, &:hover, &:focus, &:active, &.ck-on:hover, &.ck-on:focus, &.ck-on:active {\\n\\t\\tcolor: inherit;\\n\\t\\tbackground: transparent;\\n\\t}\\n\\n\\t& .ck-button__label {\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t/* Separate the label from the switch */\\n\\t\\t\\tmargin-right: calc(2 * var(--ck-spacing-large));\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t/* Separate the label from the switch */\\n\\t\\t\\tmargin-left: calc(2 * var(--ck-spacing-large));\\n\\t\\t}\\n\\t}\\n\\n\\t& .ck-button__toggle {\\n\\t\\t@mixin ck-rounded-corners;\\n\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t/* Make sure the toggle is always to the right as far as possible. */\\n\\t\\t\\tmargin-left: auto;\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t/* Make sure the toggle is always to the left as far as possible. */\\n\\t\\t\\tmargin-right: auto;\\n\\t\\t}\\n\\n\\t\\t/* Apply some smooth transition to the box-shadow and border. */\\n\\t\\t/* Gently animate the background color of the toggle switch */\\n\\t\\ttransition: background 400ms ease, box-shadow .2s ease-in-out, outline .2s ease-in-out;\\n\\t\\tborder: 1px solid transparent;\\n\\t\\twidth: var(--ck-switch-button-toggle-width);\\n\\t\\tbackground: var(--ck-color-switch-button-off-background);\\n\\n\\t\\t& .ck-button__toggle__inner {\\n\\t\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t\\tborder-radius: calc(.5 * var(--ck-border-radius));\\n\\t\\t\\t}\\n\\n\\t\\t\\twidth: var(--ck-switch-button-toggle-inner-size);\\n\\t\\t\\theight: var(--ck-switch-button-toggle-inner-size);\\n\\t\\t\\tbackground: var(--ck-color-switch-button-inner-background);\\n\\n\\t\\t\\t/* Gently animate the inner part of the toggle switch */\\n\\t\\t\\ttransition: all 300ms ease;\\n\\t\\t}\\n\\n\\t\\t&:hover {\\n\\t\\t\\tbackground: var(--ck-color-switch-button-off-hover-background);\\n\\n\\t\\t\\t& .ck-button__toggle__inner {\\n\\t\\t\\t\\tbox-shadow: var(--ck-switch-button-inner-hover-shadow);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-disabled .ck-button__toggle {\\n\\t\\t@mixin ck-disabled;\\n\\t}\\n\\n\\t/* Overriding default .ck-button:focus styles + an outline around the toogle */\\n\\t&:focus {\\n\\t\\tborder-color: transparent;\\n\\t\\toutline: none;\\n\\t\\tbox-shadow: none;\\n\\n\\t\\t& .ck-button__toggle {\\n\\t\\t\\tbox-shadow: 0 0 0 1px var(--ck-color-base-background), 0 0 0 5px var(--ck-color-focus-outer-shadow);\\n\\t\\t\\toutline-offset: 1px;\\n\\t\\t\\toutline: var(--ck-focus-ring);\\n\\t\\t}\\n\\t}\\n\\n\\t/* stylelint-disable-next-line no-descending-specificity */\\n\\t&.ck-on {\\n\\t\\t& .ck-button__toggle {\\n\\t\\t\\tbackground: var(--ck-color-switch-button-on-background);\\n\\n\\t\\t\\t&:hover {\\n\\t\\t\\t\\tbackground: var(--ck-color-switch-button-on-hover-background);\\n\\t\\t\\t}\\n\\n\\t\\t\\t& .ck-button__toggle__inner {\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\t* Move the toggle switch to the right. It will be animated.\\n\\t\\t\\t\\t*/\\n\\t\\t\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t\\t\\ttransform: translateX( var( --ck-switch-button-translation ) );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t\\t\\ttransform: translateX( calc( -1 * var( --ck-switch-button-translation ) ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A class which indicates that an element holding it is disabled.\\n */\\n@define-mixin ck-disabled {\\n\\topacity: var(--ck-disabled-opacity);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:24px;--ck-color-color-grid-check-icon:#166fd4}.ck.ck-color-grid{grid-gap:5px;padding:8px}.ck.ck-color-grid__tile{border:0;height:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;width:var(--ck-color-grid-tile-size)}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{color:var(--ck-color-color-grid-check-icon);display:none}.ck.ck-color-grid__tile.ck-on{box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile.ck-on,.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){border:0}.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/colorgrid/colorgrid.css\"],\"names\":[],\"mappings\":\"AAKA,kBACC,YACD,CCAA,MACC,8BAA+B,CAK/B,wCACD,CAEA,kBACC,YAAa,CACb,WACD,CAEA,wBAOC,QAAS,CALT,qCAAsC,CAEtC,yCAA0C,CAD1C,wCAAyC,CAEzC,SAAU,CACV,8BAA+B,CAL/B,oCAyCD,CAjCC,oCACC,YAAa,CACb,gBACD,CAEA,4DACC,gDACD,CAEA,oCAEC,2CAA4C,CAD5C,YAED,CAEA,8BACC,8FAKD,CAHC,0CACC,aACD,CAGD,8HAIC,QACD,CAEA,gGAEC,iGACD,CAGD,yBACC,oCACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-color-grid {\\n\\tdisplay: grid;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n\\n:root {\\n\\t--ck-color-grid-tile-size: 24px;\\n\\n\\t/* Not using global colors here because these may change but some colors in a pallette\\n\\t * require special treatment. For instance, this ensures no matter what the UI text color is,\\n\\t * the check icon will look good on the black color tile. */\\n\\t--ck-color-color-grid-check-icon: hsl(212, 81%, 46%);\\n}\\n\\n.ck.ck-color-grid {\\n\\tgrid-gap: 5px;\\n\\tpadding: 8px;\\n}\\n\\n.ck.ck-color-grid__tile {\\n\\twidth: var(--ck-color-grid-tile-size);\\n\\theight: var(--ck-color-grid-tile-size);\\n\\tmin-width: var(--ck-color-grid-tile-size);\\n\\tmin-height: var(--ck-color-grid-tile-size);\\n\\tpadding: 0;\\n\\ttransition: .2s ease box-shadow;\\n\\tborder: 0;\\n\\n\\t&.ck-disabled {\\n\\t\\tcursor: unset;\\n\\t\\ttransition: unset;\\n\\t}\\n\\n\\t&.ck-color-table__color-tile_bordered {\\n\\t\\tbox-shadow: 0 0 0 1px var(--ck-color-base-border);\\n\\t}\\n\\n\\t& .ck.ck-icon {\\n\\t\\tdisplay: none;\\n\\t\\tcolor: var(--ck-color-color-grid-check-icon);\\n\\t}\\n\\n\\t&.ck-on {\\n\\t\\tbox-shadow: inset 0 0 0 1px var(--ck-color-base-background), 0 0 0 2px var(--ck-color-base-text);\\n\\n\\t\\t& .ck.ck-icon {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-on,\\n\\t&:focus:not( .ck-disabled ),\\n\\t&:hover:not( .ck-disabled ) {\\n\\t\\t/* Disable the default .ck-button's border ring. */\\n\\t\\tborder: 0;\\n\\t}\\n\\n\\t&:focus:not( .ck-disabled ),\\n\\t&:hover:not( .ck-disabled ) {\\n\\t\\tbox-shadow: inset 0 0 0 1px var(--ck-color-base-background), 0 0 0 2px var(--ck-color-focus-border);\\n\\t}\\n}\\n\\n.ck.ck-color-grid__label {\\n\\tpadding: 0 var(--ck-spacing-standard);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".color-picker-hex-input{width:max-content}.color-picker-hex-input .ck.ck-input{min-width:unset}.ck.ck-color-picker__row{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}.ck.ck-color-picker__row .ck-color-picker__hash-view{padding-right:var(--ck-spacing-medium);padding-top:var(--ck-spacing-tiny)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorpicker/colorpicker.css\"],\"names\":[],\"mappings\":\"AAKA,wBACC,iBAKD,CAHC,qCACC,eACD,CAGD,yBACC,YAAa,CACb,kBAAmB,CACnB,gBAAiB,CACjB,6BAMD,CAJC,qDAEC,sCAAuC,CADvC,kCAED\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.color-picker-hex-input {\\n\\twidth: max-content;\\n\\n\\t& .ck.ck-input {\\n\\t\\tmin-width: unset;\\n\\t}\\n}\\n\\n.ck.ck-color-picker__row {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tflex-wrap: nowrap;\\n\\tjustify-content: space-between;\\n\\n\\t& .ck-color-picker__hash-view {\\n\\t\\tpadding-top: var(--ck-spacing-tiny);\\n\\t\\tpadding-right: var(--ck-spacing-medium);\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-dropdown-max-width:75vw}.ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-dropdown__panel{display:none;max-width:var(--ck-dropdown-max-width);position:absolute;z-index:var(--ck-z-modal)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{bottom:auto;top:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s{left:50%;transform:translateX(-50%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw{left:75%;transform:translateX(-75%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme{left:25%;transform:translateX(-25%)}.ck.ck-toolbar .ck-dropdown__panel{z-index:calc(var(--ck-z-modal) + 1)}:root{--ck-dropdown-arrow-size:calc(var(--ck-icon-size)*0.5)}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{margin-left:var(--ck-spacing-standard);right:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{overflow:hidden;text-overflow:ellipsis;width:7em}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-dropdown__button_label-width_auto .ck-button__label{width:auto}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active{box-shadow:none}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active:focus,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active:focus{box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-dropdown__panel{border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-dropdown__panel{background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;box-shadow:var(--ck-drop-shadow),0 0;min-width:100%}.ck.ck-dropdown__panel.ck-dropdown__panel_se{border-top-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_sw{border-top-right-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_ne{border-bottom-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_nw{border-bottom-right-radius:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/dropdown/dropdown.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_disabled.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAKA,MACC,4BACD,CAEA,gBACC,oBAAqB,CACrB,iBA2ED,CAzEC,oCACC,mBAAoB,CACpB,2BACD,CAGA,+CACC,UACD,CAEA,oCACC,YAAa,CAEb,sCAAuC,CAEvC,iBAAkB,CAHlB,yBA4DD,CAvDC,+DACC,oBACD,CAEA,mSAKC,WACD,CAEA,mSAUC,WAAY,CADZ,QAED,CAEA,oHAEC,MACD,CAEA,oHAEC,OACD,CAEA,kHAGC,QAAS,CACT,0BACD,CAEA,sHAGC,QAAS,CACT,0BACD,CAEA,sHAGC,QAAS,CACT,0BACD,CAQF,mCACC,mCACD,CCpFA,MACC,sDACD,CAEA,gBAEC,iBA2ED,CAzEC,oCACC,mCACD,CAGC,8CAIC,sCAAuC,CAHvC,gCAID,CAIA,8CACC,+BAAgC,CAGhC,oCACD,CAGD,gDC/BA,kCDiCA,CAIE,mFAEC,oCACD,CAIA,mFAEC,qCACD,CAID,iEAEC,eAAgB,CAChB,sBAAuB,CAFvB,SAGD,CAGA,6EC1DD,kCD4DC,CAGA,qDACC,2BAA4B,CAC5B,4BACD,CAEA,sGACC,UACD,CAGA,yHAEC,eAKD,CAHC,qIE7EF,2CF+EE,CAKH,uBGlFC,eH8GD,CA5BA,qFG9EE,qCH0GF,CA5BA,uBAIC,oDAAqD,CACrD,sDAAuD,CACvD,QAAS,CE1FT,oCAA8B,CF6F9B,cAmBD,CAfC,6CACC,wBACD,CAEA,6CACC,yBACD,CAEA,6CACC,2BACD,CAEA,6CACC,4BACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-dropdown-max-width: 75vw;\\n}\\n\\n.ck.ck-dropdown {\\n\\tdisplay: inline-block;\\n\\tposition: relative;\\n\\n\\t& .ck-dropdown__arrow {\\n\\t\\tpointer-events: none;\\n\\t\\tz-index: var(--ck-z-default);\\n\\t}\\n\\n\\t/* Dropdown button should span horizontally, e.g. in vertical toolbars */\\n\\t& .ck-button.ck-dropdown__button {\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\t& .ck-dropdown__panel {\\n\\t\\tdisplay: none;\\n\\t\\tz-index: var(--ck-z-modal);\\n\\t\\tmax-width: var(--ck-dropdown-max-width);\\n\\n\\t\\tposition: absolute;\\n\\n\\t\\t&.ck-dropdown__panel-visible {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_ne,\\n\\t\\t&.ck-dropdown__panel_nw,\\n\\t\\t&.ck-dropdown__panel_n,\\n\\t\\t&.ck-dropdown__panel_nmw,\\n\\t\\t&.ck-dropdown__panel_nme {\\n\\t\\t\\tbottom: 100%;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_se,\\n\\t\\t&.ck-dropdown__panel_sw,\\n\\t\\t&.ck-dropdown__panel_smw,\\n\\t\\t&.ck-dropdown__panel_sme,\\n\\t\\t&.ck-dropdown__panel_s {\\n\\t\\t\\t/*\\n\\t\\t\\t * Using transform: translate3d( 0, 100%, 0 ) causes blurry dropdown on Chrome 67-78+ on non-retina displays.\\n\\t\\t\\t * See https://github.com/ckeditor/ckeditor5/issues/1053.\\n\\t\\t\\t */\\n\\t\\t\\ttop: 100%;\\n\\t\\t\\tbottom: auto;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_ne,\\n\\t\\t&.ck-dropdown__panel_se {\\n\\t\\t\\tleft: 0px;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_nw,\\n\\t\\t&.ck-dropdown__panel_sw {\\n\\t\\t\\tright: 0px;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_s,\\n\\t\\t&.ck-dropdown__panel_n {\\n\\t\\t\\t/* Positioning panels relative to the center of the button */\\n\\t\\t\\tleft: 50%;\\n\\t\\t\\ttransform: translateX(-50%);\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_nmw,\\n\\t\\t&.ck-dropdown__panel_smw {\\n\\t\\t\\t/* Positioning panels relative to the middle-west of the button */\\n\\t\\t\\tleft: 75%;\\n\\t\\t\\ttransform: translateX(-75%);\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__panel_nme,\\n\\t\\t&.ck-dropdown__panel_sme {\\n\\t\\t\\t/* Positioning panels relative to the middle-east of the button */\\n\\t\\t\\tleft: 25%;\\n\\t\\t\\ttransform: translateX(-25%);\\n\\t\\t}\\n\\t}\\n}\\n\\n/*\\n * Toolbar dropdown panels should be always above the UI (eg. other dropdown panels) from the editor's content.\\n * See https://github.com/ckeditor/ckeditor5/issues/7874\\n */\\n.ck.ck-toolbar .ck-dropdown__panel {\\n\\tz-index: calc( var(--ck-z-modal) + 1 );\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_disabled.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n@import \\\"@ckeditor/ckeditor5-ui/theme/mixins/_dir.css\\\";\\n\\n:root {\\n\\t--ck-dropdown-arrow-size: calc(0.5 * var(--ck-icon-size));\\n}\\n\\n.ck.ck-dropdown {\\n\\t/* Enable font size inheritance, which allows fluid UI scaling. */\\n\\tfont-size: inherit;\\n\\n\\t& .ck-dropdown__arrow {\\n\\t\\twidth: var(--ck-dropdown-arrow-size);\\n\\t}\\n\\n\\t@mixin ck-dir ltr {\\n\\t\\t& .ck-dropdown__arrow {\\n\\t\\t\\tright: var(--ck-spacing-standard);\\n\\n\\t\\t\\t/* A space to accommodate the triangle. */\\n\\t\\t\\tmargin-left: var(--ck-spacing-standard);\\n\\t\\t}\\n\\t}\\n\\n\\t@mixin ck-dir rtl {\\n\\t\\t& .ck-dropdown__arrow {\\n\\t\\t\\tleft: var(--ck-spacing-standard);\\n\\n\\t\\t\\t/* A space to accommodate the triangle. */\\n\\t\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-disabled .ck-dropdown__arrow {\\n\\t\\t@mixin ck-disabled;\\n\\t}\\n\\n\\t& .ck-button.ck-dropdown__button {\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t&:not(.ck-button_with-text) {\\n\\t\\t\\t\\t/* Make sure dropdowns with just an icon have the right inner spacing */\\n\\t\\t\\t\\tpadding-left: var(--ck-spacing-small);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t&:not(.ck-button_with-text) {\\n\\t\\t\\t\\t/* Make sure dropdowns with just an icon have the right inner spacing */\\n\\t\\t\\t\\tpadding-right: var(--ck-spacing-small);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/* #23 */\\n\\t\\t& .ck-button__label {\\n\\t\\t\\twidth: 7em;\\n\\t\\t\\toverflow: hidden;\\n\\t\\t\\ttext-overflow: ellipsis;\\n\\t\\t}\\n\\n\\t\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/70 */\\n\\t\\t&.ck-disabled .ck-button__label {\\n\\t\\t\\t@mixin ck-disabled;\\n\\t\\t}\\n\\n\\t\\t/* https://github.com/ckeditor/ckeditor5/issues/816 */\\n\\t\\t&.ck-on {\\n\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t}\\n\\n\\t\\t&.ck-dropdown__button_label-width_auto .ck-button__label {\\n\\t\\t\\twidth: auto;\\n\\t\\t}\\n\\n\\t\\t/* https://github.com/ckeditor/ckeditor5/issues/8699 */\\n\\t\\t&.ck-off:active,\\n\\t\\t&.ck-on:active {\\n\\t\\t\\tbox-shadow: none;\\n\\t\\t\\t\\n\\t\\t\\t&:focus {\\n\\t\\t\\t\\t@mixin ck-box-shadow var(--ck-focus-outer-shadow);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n.ck.ck-dropdown__panel {\\n\\t@mixin ck-rounded-corners;\\n\\t@mixin ck-drop-shadow;\\n\\n\\tbackground: var(--ck-color-dropdown-panel-background);\\n\\tborder: 1px solid var(--ck-color-dropdown-panel-border);\\n\\tbottom: 0;\\n\\n\\t/* Make sure the panel is at least as wide as the drop-down's button. */\\n\\tmin-width: 100%;\\n\\n\\t/* Disabled corner border radius to be consistent with the .dropdown__button\\n\\thttps://github.com/ckeditor/ckeditor5/issues/816 */\\n\\t&.ck-dropdown__panel_se {\\n\\t\\tborder-top-left-radius: 0;\\n\\t}\\n\\n\\t&.ck-dropdown__panel_sw {\\n\\t\\tborder-top-right-radius: 0;\\n\\t}\\n\\n\\t&.ck-dropdown__panel_ne {\\n\\t\\tborder-bottom-left-radius: 0;\\n\\t}\\n\\n\\t&.ck-dropdown__panel_nw {\\n\\t\\tborder-bottom-right-radius: 0;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A class which indicates that an element holding it is disabled.\\n */\\n@define-mixin ck-disabled {\\n\\topacity: var(--ck-disabled-opacity);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0;border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/dropdown/listdropdown.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAOA,6CCIC,eDqBD,CAzBA,iICQE,qCAAsC,CDJtC,wBAqBF,CAfE,mFCND,eDYC,CANA,6MCFA,qCAAsC,CDKpC,2BAA4B,CAC5B,4BAA6B,CAF7B,wBAIF,CAEA,kFCdD,eDmBC,CALA,2MCVA,qCAAsC,CDYpC,wBAAyB,CACzB,yBAEF\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n\\n.ck.ck-dropdown .ck-dropdown__panel .ck-list {\\n\\t/* Disabled radius of top-left border to be consistent with .dropdown__button\\n\\thttps://github.com/ckeditor/ckeditor5/issues/816 */\\n\\t@mixin ck-rounded-corners {\\n\\t\\tborder-top-left-radius: 0;\\n\\t}\\n\\n\\t/* Make sure the button belonging to the first/last child of the list goes well with the\\n\\tborder radius of the entire panel. */\\n\\t& .ck-list__item {\\n\\t\\t&:first-child .ck-button {\\n\\t\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t\\tborder-top-left-radius: 0;\\n\\t\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t&:last-child .ck-button {\\n\\t\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t\\tborder-top-left-radius: 0;\\n\\t\\t\\t\\tborder-top-right-radius: 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-splitbutton{font-size:inherit}.ck.ck-splitbutton .ck-splitbutton__action:focus{z-index:calc(var(--ck-z-default) + 1)}:root{--ck-color-split-button-hover-background:#ebebeb;--ck-color-split-button-hover-border:#b3b3b3}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__action{border-bottom-right-radius:unset;border-top-right-radius:unset}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__action{border-bottom-left-radius:unset;border-top-left-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow{min-width:unset}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-bottom-left-radius:unset;border-top-left-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-bottom-right-radius:unset;border-top-right-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow svg{width:var(--ck-dropdown-arrow-size)}.ck.ck-splitbutton>.ck-splitbutton__arrow:not(:focus){border-bottom-width:0;border-top-width:0}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover),.ck.ck-splitbutton:hover>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover){background:var(--ck-color-split-button-hover-background)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,.ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{background-color:var(--ck-color-split-button-hover-border);content:\\\"\\\";height:100%;position:absolute;width:1px}.ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:focus:after,.ck.ck-splitbutton:hover>.ck-splitbutton__arrow:focus:after{--ck-color-split-button-hover-border:var(--ck-color-focus-border)}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{left:-1px}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled):after,[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled):after{right:-1px}.ck.ck-splitbutton.ck-splitbutton_open{border-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__action{border-bottom-left-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__arrow{border-bottom-right-radius:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/dropdown/splitbutton.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAKA,mBAEC,iBAKD,CAHC,iDACC,qCACD,CCJD,MACC,gDAAyD,CACzD,4CACD,CAMC,oIAKE,gCAAiC,CADjC,6BASF,CAbA,oIAWE,+BAAgC,CADhC,4BAGF,CAEA,0CAGC,eAiBD,CApBA,oDAQE,+BAAgC,CADhC,4BAaF,CApBA,oDAcE,gCAAiC,CADjC,6BAOF,CAHC,8CACC,mCACD,CAKD,sDAEC,qBAAwB,CADxB,kBAED,CAQC,0KACC,wDACD,CAIA,8JAKC,0DAA2D,CAJ3D,UAAW,CAGX,WAAY,CAFZ,iBAAkB,CAClB,SAGD,CAGA,sIACC,iEACD,CAGC,kLACC,SACD,CAIA,kLACC,UACD,CAMF,uCCzFA,eDmGA,CAVA,qHCrFC,qCD+FD,CARE,qKACC,2BACD,CAEA,mKACC,4BACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-splitbutton {\\n\\t/* Enable font size inheritance, which allows fluid UI scaling. */\\n\\tfont-size: inherit;\\n\\n\\t& .ck-splitbutton__action:focus {\\n\\t\\tz-index: calc(var(--ck-z-default) + 1);\\n\\t}\\n}\\n\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n\\n:root {\\n\\t--ck-color-split-button-hover-background: hsl(0, 0%, 92%);\\n\\t--ck-color-split-button-hover-border: hsl(0, 0%, 70%);\\n}\\n\\n.ck.ck-splitbutton {\\n\\t/*\\n\\t * Note: ck-rounded and ck-dir mixins don't go together (because they both use @nest).\\n\\t */\\n\\t&:hover > .ck-splitbutton__action,\\n\\t&.ck-splitbutton_open > .ck-splitbutton__action {\\n\\t\\t@nest [dir=\\\"ltr\\\"] & {\\n\\t\\t\\t/* Don't round the action button on the right side */\\n\\t\\t\\tborder-top-right-radius: unset;\\n\\t\\t\\tborder-bottom-right-radius: unset;\\n\\t\\t}\\n\\n\\t\\t@nest [dir=\\\"rtl\\\"] & {\\n\\t\\t\\t/* Don't round the action button on the left side */\\n\\t\\t\\tborder-top-left-radius: unset;\\n\\t\\t\\tborder-bottom-left-radius: unset;\\n\\t\\t}\\n\\t}\\n\\n\\t& > .ck-splitbutton__arrow {\\n\\t\\t/* It's a text-less button and since the icon is positioned absolutely in such situation,\\n\\t\\tit must get some arbitrary min-width. */\\n\\t\\tmin-width: unset;\\n\\n\\t\\t@nest [dir=\\\"ltr\\\"] & {\\n\\t\\t\\t/* Don't round the arrow button on the left side */\\n\\t\\t\\tborder-top-left-radius: unset;\\n\\t\\t\\tborder-bottom-left-radius: unset;\\n\\t\\t}\\n\\n\\t\\t@nest [dir=\\\"rtl\\\"] & {\\n\\t\\t\\t/* Don't round the arrow button on the right side */\\n\\t\\t\\tborder-top-right-radius: unset;\\n\\t\\t\\tborder-bottom-right-radius: unset;\\n\\t\\t}\\n\\n\\t\\t& svg {\\n\\t\\t\\twidth: var(--ck-dropdown-arrow-size);\\n\\t\\t}\\n\\t}\\n\\n\\t/* Make sure the divider stretches 100% height of the button\\n\\thttps://github.com/ckeditor/ckeditor5/issues/10936 */\\n\\t& > .ck-splitbutton__arrow:not(:focus) {\\n\\t\\tborder-top-width: 0px;\\n\\t\\tborder-bottom-width: 0px;\\n\\t}\\n\\n\\t/* When the split button is \\\"open\\\" (the arrow is on) or being hovered, it should get some styling\\n\\tas a whole. The background of both buttons should stand out and there should be a visual\\n\\tseparation between both buttons. */\\n\\t&.ck-splitbutton_open,\\n\\t&:hover {\\n\\t\\t/* When the split button hovered as a whole, not as individual buttons. */\\n\\t\\t& > .ck-button:not(.ck-on):not(.ck-disabled):not(:hover) {\\n\\t\\t\\tbackground: var(--ck-color-split-button-hover-background);\\n\\t\\t}\\n\\n\\t\\t/* Splitbutton separator needs to be set with the ::after pseudoselector\\n\\t\\tto display properly the borders on focus */\\n\\t\\t& > .ck-splitbutton__arrow:not(.ck-disabled)::after {\\n\\t\\t\\tcontent: '';\\n\\t\\t\\tposition: absolute;\\n\\t\\t\\twidth: 1px;\\n\\t\\t\\theight: 100%;\\n\\t\\t\\tbackground-color: var(--ck-color-split-button-hover-border);\\n\\t\\t}\\n\\n\\t\\t/* Make sure the divider between the buttons looks fine when the button is focused */\\n\\t\\t& > .ck-splitbutton__arrow:focus::after {\\n\\t\\t\\t--ck-color-split-button-hover-border: var(--ck-color-focus-border);\\n\\t\\t}\\n\\n\\t\\t@nest [dir=\\\"ltr\\\"] & {\\n\\t\\t\\t& > .ck-splitbutton__arrow:not(.ck-disabled)::after {\\n\\t\\t\\t\\tleft: -1px;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t@nest [dir=\\\"rtl\\\"] & {\\n\\t\\t\\t& > .ck-splitbutton__arrow:not(.ck-disabled)::after {\\n\\t\\t\\t\\tright: -1px;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/* Don't round the bottom left and right corners of the buttons when \\\"open\\\"\\n\\thttps://github.com/ckeditor/ckeditor5/issues/816 */\\n\\t&.ck-splitbutton_open {\\n\\t\\t@mixin ck-rounded-corners {\\n\\t\\t\\t& > .ck-splitbutton__action {\\n\\t\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t& > .ck-splitbutton__arrow {\\n\\t\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-toolbar-dropdown-max-width:60vw}.ck.ck-toolbar-dropdown>.ck-dropdown__panel{max-width:var(--ck-toolbar-dropdown-max-width);width:max-content}.ck.ck-toolbar-dropdown>.ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/dropdown/toolbardropdown.css\"],\"names\":[],\"mappings\":\"AAKA,MACC,oCACD,CAEA,4CAGC,8CAA+C,CAD/C,iBAQD,CAJE,6DACC,qCACD,CCZF,oCACC,QACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-toolbar-dropdown-max-width: 60vw;\\n}\\n\\n.ck.ck-toolbar-dropdown > .ck-dropdown__panel {\\n\\t/* https://github.com/ckeditor/ckeditor5/issues/5586 */\\n\\twidth: max-content;\\n\\tmax-width: var(--ck-toolbar-dropdown-max-width);\\n\\n\\t& .ck-button {\\n\\t\\t&:focus {\\n\\t\\t\\tz-index: calc(var(--ck-z-default) + 1);\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-toolbar-dropdown .ck-toolbar {\\n\\tborder: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-color-editable-blur-selection:#d9d9d9}.ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable.ck-rounded-corners:not(.ck-editor__nested-editable){border-radius:var(--ck-border-radius)}.ck.ck-editor__editable.ck-focused:not(.ck-editor__nested-editable){border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;outline:none}.ck.ck-editor__editable_inline{border:1px solid transparent;overflow:auto;padding:0 var(--ck-spacing-standard)}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-editor__editable_inline.ck-blurred ::selection{background:var(--ck-color-editable-blur-selection)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/editorui/editorui.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AAWA,MACC,0CACD,CAEA,yDCJC,eDWD,CAPA,yJCAE,qCDOF,CAJC,oEEPA,2BAA2B,CCF3B,qCAA8B,CDC9B,YFWA,CAGD,+BAGC,4BAA6B,CAF7B,aAAc,CACd,oCA6BD,CA1BC,wCACC,eACD,CAEA,wCACC,gBACD,CAGA,4CACC,kCACD,CAGA,2CAKC,qCACD,CAGA,sDACC,kDACD,CAKA,gEACC,mDACD,CAIA,gEACC,gDACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_disabled.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n@import \\\"../../../mixins/_focus.css\\\";\\n@import \\\"../../mixins/_button.css\\\";\\n\\n:root {\\n\\t--ck-color-editable-blur-selection: hsl(0, 0%, 85%);\\n}\\n\\n.ck.ck-editor__editable:not(.ck-editor__nested-editable) {\\n\\t@mixin ck-rounded-corners;\\n\\n\\t&.ck-focused {\\n\\t\\t@mixin ck-focus-ring;\\n\\t\\t@mixin ck-box-shadow var(--ck-inner-shadow);\\n\\t}\\n}\\n\\n.ck.ck-editor__editable_inline {\\n\\toverflow: auto;\\n\\tpadding: 0 var(--ck-spacing-standard);\\n\\tborder: 1px solid transparent;\\n\\n\\t&[dir=\\\"ltr\\\"] {\\n\\t\\ttext-align: left;\\n\\t}\\n\\n\\t&[dir=\\\"rtl\\\"] {\\n\\t\\ttext-align: right;\\n\\t}\\n\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/116 */\\n\\t& > *:first-child {\\n\\t\\tmargin-top: var(--ck-spacing-large);\\n\\t}\\n\\n\\t/* https://github.com/ckeditor/ckeditor5/issues/847 */\\n\\t& > *:last-child {\\n\\t\\t/*\\n\\t\\t * This value should match with the default margins of the block elements (like .media or .image)\\n\\t\\t * to avoid a content jumping when the fake selection container shows up (See https://github.com/ckeditor/ckeditor5/issues/9825).\\n\\t\\t */\\n\\t\\tmargin-bottom: var(--ck-spacing-large);\\n\\t}\\n\\n\\t/* https://github.com/ckeditor/ckeditor5/issues/6517 */\\n\\t&.ck-blurred ::selection {\\n\\t\\tbackground: var(--ck-color-editable-blur-selection);\\n\\t}\\n}\\n\\n/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/111 */\\n.ck.ck-balloon-panel.ck-toolbar-container[class*=\\\"arrow_n\\\"] {\\n\\t&::after {\\n\\t\\tborder-bottom-color: var(--ck-color-base-foreground);\\n\\t}\\n}\\n\\n.ck.ck-balloon-panel.ck-toolbar-container[class*=\\\"arrow_s\\\"] {\\n\\t&::after {\\n\\t\\tborder-top-color: var(--ck-color-base-foreground);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A visual style of focused element's border.\\n */\\n@define-mixin ck-focus-ring {\\n\\t/* Disable native outline. */\\n\\toutline: none;\\n\\tborder: var(--ck-focus-ring)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-form__header{align-items:center;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}:root{--ck-form-header-height:38px}.ck.ck-form__header{border-bottom:1px solid var(--ck-color-base-border);height:var(--ck-form-header-height);line-height:var(--ck-form-header-height);padding:var(--ck-spacing-small) var(--ck-spacing-large)}.ck.ck-form__header .ck-form__header__label{font-weight:700}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/formheader/formheader.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/formheader/formheader.css\"],\"names\":[],\"mappings\":\"AAKA,oBAIC,kBAAmB,CAHnB,YAAa,CACb,kBAAmB,CACnB,gBAAiB,CAEjB,6BACD,CCNA,MACC,4BACD,CAEA,oBAIC,mDAAoD,CAFpD,mCAAoC,CACpC,wCAAyC,CAFzC,uDAQD,CAHC,4CACC,eACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-form__header {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tflex-wrap: nowrap;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-form-header-height: 38px;\\n}\\n\\n.ck.ck-form__header {\\n\\tpadding: var(--ck-spacing-small) var(--ck-spacing-large);\\n\\theight: var(--ck-form-header-height);\\n\\tline-height: var(--ck-form-header-height);\\n\\tborder-bottom: 1px solid var(--ck-color-base-border);\\n\\n\\t& .ck-form__header__label {\\n\\t\\tfont-weight: bold;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{font-size:.8333350694em;height:var(--ck-icon-size);width:var(--ck-icon-size);will-change:transform}.ck.ck-icon,.ck.ck-icon *{cursor:inherit}.ck.ck-icon.ck-icon_inherit-color,.ck.ck-icon.ck-icon_inherit-color *{color:inherit}.ck.ck-icon.ck-icon_inherit-color :not([fill]){fill:currentColor}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/icon/icon.css\"],\"names\":[],\"mappings\":\"AAKA,YACC,qBACD,CCFA,MACC,0EACD,CAEA,YAKC,uBAAwB,CAHxB,0BAA2B,CAD3B,yBAA0B,CAU1B,qBAoBD,CAlBC,0BALA,cAQA,CAMC,sEACC,aAMD,CAJC,+CAEC,iBACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-icon {\\n\\tvertical-align: middle;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-icon-size: calc(var(--ck-line-height-base) * var(--ck-font-size-normal));\\n}\\n\\n.ck.ck-icon {\\n\\twidth: var(--ck-icon-size);\\n\\theight: var(--ck-icon-size);\\n\\n\\t/* Multiplied by the height of the line in \\\"px\\\" should give SVG \\\"viewport\\\" dimensions */\\n\\tfont-size: .8333350694em;\\n\\n\\t/* Inherit cursor style (#5). */\\n\\tcursor: inherit;\\n\\n\\t/* This will prevent blurry icons on Firefox. See #340. */\\n\\twill-change: transform;\\n\\n\\t& * {\\n\\t\\t/* Inherit cursor style (#5). */\\n\\t\\tcursor: inherit;\\n\\t}\\n\\n\\t/* Allows dynamic coloring of an icon by inheriting its color from the parent. */\\n\\t&.ck-icon_inherit-color {\\n\\t\\tcolor: inherit;\\n\\n\\t\\t& * {\\n\\t\\t\\tcolor: inherit;\\n\\n\\t\\t\\t&:not([fill]) {\\n\\t\\t\\t\\t/* Needed by FF. */\\n\\t\\t\\t\\tfill: currentColor;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-input-width:18em;--ck-input-text-width:var(--ck-input-width)}.ck.ck-input{border-radius:0}.ck-rounded-corners .ck.ck-input,.ck.ck-input.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input{background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);min-height:var(--ck-ui-component-min-height);min-width:var(--ck-input-width);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);transition:box-shadow .1s ease-in-out,border .1s ease-in-out}.ck.ck-input:focus{border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;outline:none}.ck.ck-input[readonly]{background:var(--ck-color-input-disabled-background);border:1px solid var(--ck-color-input-disabled-border);color:var(--ck-color-input-disabled-text)}.ck.ck-input[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-input.ck-error{animation:ck-input-shake .3s ease both;border-color:var(--ck-color-input-error-border)}.ck.ck-input.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),0 0}@keyframes ck-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/input/input.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AASA,MACC,qBAAsB,CAGtB,2CACD,CAEA,aCLC,eD2CD,CAtCA,iECDE,qCDuCF,CAtCA,aAGC,2CAA4C,CAC5C,6CAA8C,CAK9C,4CAA6C,CAH7C,+BAAgC,CADhC,6DAA8D,CAO9D,4DA0BD,CAxBC,mBEnBA,2BAA2B,CCF3B,2CAA8B,CDC9B,YFuBA,CAEA,uBAEC,oDAAqD,CADrD,sDAAuD,CAEvD,yCAMD,CAJC,6BG/BD,oDHkCC,CAGD,sBAEC,sCAAuC,CADvC,+CAMD,CAHC,4BGzCD,iDH2CC,CAIF,0BACC,IACC,0BACD,CAEA,IACC,yBACD,CAEA,IACC,0BACD,CAEA,IACC,yBACD,CACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_focus.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n\\n:root {\\n\\t--ck-input-width: 18em;\\n\\n\\t/* Backward compatibility. */\\n\\t--ck-input-text-width: var(--ck-input-width);\\n}\\n\\n.ck.ck-input {\\n\\t@mixin ck-rounded-corners;\\n\\n\\tbackground: var(--ck-color-input-background);\\n\\tborder: 1px solid var(--ck-color-input-border);\\n\\tpadding: var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);\\n\\tmin-width: var(--ck-input-width);\\n\\n\\t/* This is important to stay of the same height as surrounding buttons */\\n\\tmin-height: var(--ck-ui-component-min-height);\\n\\n\\t/* Apply some smooth transition to the box-shadow and border. */\\n\\ttransition: box-shadow .1s ease-in-out, border .1s ease-in-out;\\n\\n\\t&:focus {\\n\\t\\t@mixin ck-focus-ring;\\n\\t\\t@mixin ck-box-shadow var(--ck-focus-outer-shadow);\\n\\t}\\n\\n\\t&[readonly] {\\n\\t\\tborder: 1px solid var(--ck-color-input-disabled-border);\\n\\t\\tbackground: var(--ck-color-input-disabled-background);\\n\\t\\tcolor: var(--ck-color-input-disabled-text);\\n\\n\\t\\t&:focus {\\n\\t\\t\\t/* The read-only input should have a slightly less visible shadow when focused. */\\n\\t\\t\\t@mixin ck-box-shadow var(--ck-focus-disabled-outer-shadow);\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-error {\\n\\t\\tborder-color: var(--ck-color-input-error-border);\\n\\t\\tanimation: ck-input-shake .3s ease both;\\n\\n\\t\\t&:focus {\\n\\t\\t\\t@mixin ck-box-shadow var(--ck-focus-error-outer-shadow);\\n\\t\\t}\\n\\t}\\n}\\n\\n@keyframes ck-input-shake {\\n\\t20% {\\n\\t\\ttransform: translateX(-2px);\\n\\t}\\n\\n\\t40% {\\n\\t\\ttransform: translateX(2px);\\n\\t}\\n\\n\\t60% {\\n\\t\\ttransform: translateX(-1px);\\n\\t}\\n\\n\\t80% {\\n\\t\\ttransform: translateX(1px);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A visual style of focused element's border.\\n */\\n@define-mixin ck-focus-ring {\\n\\t/* Disable native outline. */\\n\\toutline: none;\\n\\tborder: var(--ck-focus-ring)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/label/label.css\"],\"names\":[],\"mappings\":\"AAKA,aACC,aACD,CAEA,mBACC,YACD,CCNA,aACC,eACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-label {\\n\\tdisplay: block;\\n}\\n\\n.ck.ck-voice-label {\\n\\tdisplay: none;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-label {\\n\\tfont-weight: bold;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{display:flex;position:relative}.ck.ck-labeled-field-view .ck.ck-label{display:block;position:absolute}:root{--ck-labeled-field-view-transition:.1s cubic-bezier(0,0,0.24,0.95);--ck-labeled-field-empty-unfocused-max-width:100% - 2 * var(--ck-spacing-medium);--ck-labeled-field-label-default-position-x:var(--ck-spacing-medium);--ck-labeled-field-label-default-position-y:calc(var(--ck-font-size-base)*0.6);--ck-color-labeled-field-label-background:var(--ck-color-base-background)}.ck.ck-labeled-field-view{border-radius:0}.ck-rounded-corners .ck.ck-labeled-field-view,.ck.ck-labeled-field-view.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{width:100%}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{top:0}[dir=ltr] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{left:0}[dir=rtl] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{right:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{background:var(--ck-color-labeled-field-label-background);font-weight:400;line-height:normal;max-width:100%;overflow:hidden;padding:0 calc(var(--ck-font-size-tiny)*.5);pointer-events:none;text-overflow:ellipsis;transform:translate(var(--ck-spacing-medium),-6px) scale(.75);transform-origin:0 0;transition:transform var(--ck-labeled-field-view-transition),padding var(--ck-labeled-field-view-transition),background var(--ck-labeled-field-view-transition)}.ck.ck-labeled-field-view.ck-error .ck-input:not([readonly])+.ck.ck-label,.ck.ck-labeled-field-view.ck-error>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view .ck-labeled-field-view__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-field-view .ck-labeled-field-view__status.ck-labeled-field-view__status_error{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-input-disabled-text)}[dir=ltr] .ck.ck-labeled-field-view.ck-disabled.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=ltr] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(var(--ck-labeled-field-label-default-position-x),var(--ck-labeled-field-label-default-position-y)) scale(1)}[dir=rtl] .ck.ck-labeled-field-view.ck-disabled.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=rtl] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(calc(var(--ck-labeled-field-label-default-position-x)*-1),var(--ck-labeled-field-label-default-position-y)) scale(1)}.ck.ck-labeled-field-view.ck-disabled.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{background:transparent;max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width));padding:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck.ck-button{background:transparent}.ck.ck-labeled-field-view.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck-button>.ck-button__label{opacity:0}.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown+.ck-label{max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width) - var(--ck-dropdown-arrow-size) - var(--ck-spacing-standard))}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledfield/labeledfieldview.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/labeledfield/labeledfieldview.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAMC,mEACC,YAAa,CACb,iBACD,CAEA,uCACC,aAAc,CACd,iBACD,CCND,MACC,kEAAsE,CACtE,gFAAiF,CACjF,oEAAqE,CACrE,8EAAiF,CACjF,yEACD,CAEA,0BCLC,eD8GD,CAzGA,2FCDE,qCD0GF,CAtGC,mEACC,UAmCD,CAjCC,gFACC,KA+BD,CAhCA,0FAIE,MA4BF,CAhCA,0FAQE,OAwBF,CAhCA,gFAiBC,yDAA0D,CAG1D,eAAmB,CADnB,kBAAoB,CAOpB,cAAe,CAFf,eAAgB,CANhB,2CAA8C,CAP9C,mBAAoB,CAYpB,sBAAuB,CARvB,6DAA+D,CAH/D,oBAAqB,CAgBrB,+JAID,CAQA,mKACC,gCACD,CAGD,yDACC,mCAAoC,CACpC,kCAAmC,CAInC,kBAKD,CAHC,6FACC,gCACD,CAID,4OAEC,yCACD,CAIA,oUAGE,+HAYF,CAfA,oUAOE,wIAQF,CAfA,gTAaC,sBAAuB,CAFvB,iEAAkE,CAGlE,SACD,CAKA,8FACC,sBACD,CAGA,yIACC,SACD,CAGA,kMACC,8HACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-labeled-field-view {\\n\\t& > .ck.ck-labeled-field-view__input-wrapper {\\n\\t\\tdisplay: flex;\\n\\t\\tposition: relative;\\n\\t}\\n\\n\\t& .ck.ck-label {\\n\\t\\tdisplay: block;\\n\\t\\tposition: absolute;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"@ckeditor/ckeditor5-ui/theme/mixins/_dir.css\\\";\\n@import \\\"../../../mixins/_rounded.css\\\";\\n\\n:root {\\n\\t--ck-labeled-field-view-transition: .1s cubic-bezier(0, 0, 0.24, 0.95);\\n\\t--ck-labeled-field-empty-unfocused-max-width: 100% - 2 * var(--ck-spacing-medium);\\n\\t--ck-labeled-field-label-default-position-x: var(--ck-spacing-medium);\\n\\t--ck-labeled-field-label-default-position-y: calc(0.6 * var(--ck-font-size-base));\\n\\t--ck-color-labeled-field-label-background: var(--ck-color-base-background);\\n}\\n\\n.ck.ck-labeled-field-view {\\n\\t@mixin ck-rounded-corners;\\n\\n\\t& > .ck.ck-labeled-field-view__input-wrapper {\\n\\t\\twidth: 100%;\\n\\n\\t\\t& > .ck.ck-label {\\n\\t\\t\\ttop: 0px;\\n\\n\\t\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\t\\tleft: 0px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\t\\tright: 0px;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpointer-events: none;\\n\\t\\t\\ttransform-origin: 0 0;\\n\\n\\t\\t\\t/* By default, display the label scaled down above the field. */\\n\\t\\t\\ttransform: translate(var(--ck-spacing-medium), -6px) scale(.75);\\n\\n\\t\\t\\tbackground: var(--ck-color-labeled-field-label-background);\\n\\t\\t\\tpadding: 0 calc(.5 * var(--ck-font-size-tiny));\\n\\t\\t\\tline-height: initial;\\n\\t\\t\\tfont-weight: normal;\\n\\n\\t\\t\\t/* Prevent overflow when the label is longer than the input */\\n\\t\\t\\ttext-overflow: ellipsis;\\n\\t\\t\\toverflow: hidden;\\n\\n\\t\\t\\tmax-width: 100%;\\n\\n\\t\\t\\ttransition:\\n\\t\\t\\t\\ttransform var(--ck-labeled-field-view-transition),\\n\\t\\t\\t\\tpadding var(--ck-labeled-field-view-transition),\\n\\t\\t\\t\\tbackground var(--ck-labeled-field-view-transition);\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-error {\\n\\t\\t& > .ck.ck-labeled-field-view__input-wrapper > .ck.ck-label {\\n\\t\\t\\tcolor: var(--ck-color-base-error);\\n\\t\\t}\\n\\n\\t\\t& .ck-input:not([readonly]) + .ck.ck-label {\\n\\t\\t\\tcolor: var(--ck-color-base-error);\\n\\t\\t}\\n\\t}\\n\\n\\t& .ck-labeled-field-view__status {\\n\\t\\tfont-size: var(--ck-font-size-small);\\n\\t\\tmargin-top: var(--ck-spacing-small);\\n\\n\\t\\t/* Let the info wrap to the next line to avoid stretching the layout horizontally.\\n\\t\\tThe status could be very long. */\\n\\t\\twhite-space: normal;\\n\\n\\t\\t&.ck-labeled-field-view__status_error {\\n\\t\\t\\tcolor: var(--ck-color-base-error);\\n\\t\\t}\\n\\t}\\n\\n\\t/* Disabled fields and fields that have no focus should fade out. */\\n\\t&.ck-disabled > .ck.ck-labeled-field-view__input-wrapper > .ck.ck-label,\\n\\t&.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused) > .ck.ck-labeled-field-view__input-wrapper > .ck.ck-label {\\n\\t\\tcolor: var(--ck-color-input-disabled-text);\\n\\t}\\n\\n\\t/* Fields that are disabled or not focused and without a placeholder should have full-sized labels. */\\n\\t/* stylelint-disable-next-line no-descending-specificity */\\n\\t&.ck-disabled.ck-labeled-field-view_empty > .ck.ck-labeled-field-view__input-wrapper > .ck.ck-label,\\n\\t&.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder) > .ck.ck-labeled-field-view__input-wrapper > .ck.ck-label {\\n\\t\\t@mixin ck-dir ltr {\\n\\t\\t\\ttransform: translate(var(--ck-labeled-field-label-default-position-x), var(--ck-labeled-field-label-default-position-y)) scale(1);\\n\\t\\t}\\n\\n\\t\\t@mixin ck-dir rtl {\\n\\t\\t\\ttransform: translate(calc(-1 * var(--ck-labeled-field-label-default-position-x)), var(--ck-labeled-field-label-default-position-y)) scale(1);\\n\\t\\t}\\n\\n\\t\\t/* Compensate for the default translate position. */\\n\\t\\tmax-width: calc(var(--ck-labeled-field-empty-unfocused-max-width));\\n\\n\\t\\tbackground: transparent;\\n\\t\\tpadding: 0;\\n\\t}\\n\\n\\t/*------ DropdownView integration ----------------------------------------------------------------------------------- */\\n\\n\\t/* Make sure dropdown' background color in any of dropdown's state does not collide with labeled field. */\\n\\t& > .ck.ck-labeled-field-view__input-wrapper > .ck-dropdown > .ck.ck-button {\\n\\t\\tbackground: transparent;\\n\\t}\\n\\n\\t/* When the dropdown is \\\"empty\\\", the labeled field label replaces its label. */\\n\\t&.ck-labeled-field-view_empty > .ck.ck-labeled-field-view__input-wrapper > .ck-dropdown > .ck-button > .ck-button__label {\\n\\t\\topacity: 0;\\n\\t}\\n\\n\\t/* Make sure the label of the empty, unfocused input does not cover the dropdown arrow. */\\n\\t&.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder) > .ck.ck-labeled-field-view__input-wrapper > .ck-dropdown + .ck-label {\\n\\t\\tmax-width: calc(var(--ck-labeled-field-empty-unfocused-max-width) - var(--ck-dropdown-arrow-size) - var(--ck-spacing-standard));\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-list{display:flex;flex-direction:column;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{background:var(--ck-color-list-background);list-style-type:none}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{border-radius:0;min-height:unset;padding:calc(var(--ck-line-height-base)*.2*var(--ck-font-size-base)) calc(var(--ck-line-height-base)*.4*var(--ck-font-size-base));text-align:left;width:100%}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(var(--ck-line-height-base)*1.2*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:focus:not(.ck-switchbutton):not(.ck-disabled){border-color:var(--ck-color-base-background)}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{background:var(--ck-color-base-border);height:1px;width:100%}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/mixins/_unselectable.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/list/list.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAOA,YAGC,YAAa,CACb,qBAAsB,CCFtB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CACrB,gBDaD,CAZC,2DAEC,aACD,CAKA,kCACC,iBAAkB,CAClB,2BACD,CEfD,YCEC,eDGD,CALA,+DCME,qCDDF,CALA,YAIC,0CAA2C,CAD3C,oBAED,CAEA,kBACC,cAAe,CACf,cA2DD,CAzDC,6BAIC,eAAgB,CAHhB,gBAAiB,CAQjB,iIAEiE,CARjE,eAAgB,CADhB,UAwCD,CA7BC,+CAEC,yEACD,CAEA,oCACC,eACD,CAEA,mCACC,oDAAqD,CACrD,yCAaD,CAXC,0CACC,eACD,CAEA,2DACC,0DACD,CAEA,iFACC,4CACD,CAGD,qDACC,uDACD,CAMA,yCACC,0CAA2C,CAC3C,aAMD,CAJC,iEACC,uDAAwD,CACxD,aACD,CAKH,uBAGC,sCAAuC,CAFvC,UAAW,CACX,UAED\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../mixins/_unselectable.css\\\";\\n\\n.ck.ck-list {\\n\\t@mixin ck-unselectable;\\n\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\n\\t& .ck-list__item,\\n\\t& .ck-list__separator {\\n\\t\\tdisplay: block;\\n\\t}\\n\\n\\t/* Make sure that whatever child of the list item gets focus, it remains on the\\n\\ttop. Thanks to that, styles like box-shadow, outline, etc. are not masked by\\n\\tadjacent list items. */\\n\\t& .ck-list__item > *:focus {\\n\\t\\tposition: relative;\\n\\t\\tz-index: var(--ck-z-default);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Makes element unselectable.\\n */\\n@define-mixin ck-unselectable {\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n\\t-ms-user-select: none;\\n\\tuser-select: none\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_disabled.css\\\";\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n\\n.ck.ck-list {\\n\\t@mixin ck-rounded-corners;\\n\\n\\tlist-style-type: none;\\n\\tbackground: var(--ck-color-list-background);\\n}\\n\\n.ck.ck-list__item {\\n\\tcursor: default;\\n\\tmin-width: 12em;\\n\\n\\t& .ck-button {\\n\\t\\tmin-height: unset;\\n\\t\\twidth: 100%;\\n\\t\\ttext-align: left;\\n\\t\\tborder-radius: 0;\\n\\n\\t\\t/* List items should have the same height. Use absolute units to make sure it is so\\n\\t\\t   because e.g. different heading styles may have different height\\n\\t\\t   https://github.com/ckeditor/ckeditor5-heading/issues/63 */\\n\\t\\tpadding:\\n\\t\\t\\tcalc(.2 * var(--ck-line-height-base) * var(--ck-font-size-base))\\n\\t\\t\\tcalc(.4 * var(--ck-line-height-base) * var(--ck-font-size-base));\\n\\n\\t\\t& .ck-button__label {\\n\\t\\t\\t/* https://github.com/ckeditor/ckeditor5-heading/issues/63 */\\n\\t\\t\\tline-height: calc(1.2 * var(--ck-line-height-base) * var(--ck-font-size-base));\\n\\t\\t}\\n\\n\\t\\t&:active {\\n\\t\\t\\tbox-shadow: none;\\n\\t\\t}\\n\\n\\t\\t&.ck-on {\\n\\t\\t\\tbackground: var(--ck-color-list-button-on-background);\\n\\t\\t\\tcolor: var(--ck-color-list-button-on-text);\\n\\n\\t\\t\\t&:active {\\n\\t\\t\\t\\tbox-shadow: none;\\n\\t\\t\\t}\\n\\n\\t\\t\\t&:hover:not(.ck-disabled) {\\n\\t\\t\\t\\tbackground: var(--ck-color-list-button-on-background-focus);\\n\\t\\t\\t}\\n\\n\\t\\t\\t&:focus:not(.ck-switchbutton):not(.ck-disabled) {\\n\\t\\t\\t\\tborder-color: var(--ck-color-base-background);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t&:hover:not(.ck-disabled) {\\n\\t\\t\\tbackground: var(--ck-color-list-button-hover-background);\\n\\t\\t}\\n\\t}\\n\\n\\t/* It's unnecessary to change the background/text of a switch toggle; it has different ways\\n\\tof conveying its state (like the switcher) */\\n\\t& .ck-switchbutton {\\n\\t\\t&.ck-on {\\n\\t\\t\\tbackground: var(--ck-color-list-background);\\n\\t\\t\\tcolor: inherit;\\n\\n\\t\\t\\t&:hover:not(.ck-disabled) {\\n\\t\\t\\t\\tbackground: var(--ck-color-list-button-hover-background);\\n\\t\\t\\t\\tcolor: inherit;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n.ck.ck-list__separator {\\n\\theight: 1px;\\n\\twidth: 100%;\\n\\tbackground: var(--ck-color-base-border);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:\\\"\\\";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-border-width:1px;--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px;--ck-balloon-arrow-drop-shadow:0 2px 2px var(--ck-color-shadow-drop)}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{background:var(--ck-color-panel-background);border:var(--ck-balloon-border-width) solid var(--ck-color-panel-border);box-shadow:var(--ck-drop-shadow),0 0;min-height:15px}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{border-style:solid;height:0;width:0}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-width:0 var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width)}.ck.ck-balloon-panel[class*=arrow_n]:before{border-color:transparent transparent var(--ck-color-panel-border) transparent;margin-top:calc(var(--ck-balloon-border-width)*-1)}.ck.ck-balloon-panel[class*=arrow_n]:after{border-color:transparent transparent var(--ck-color-panel-background) transparent;margin-top:calc(var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width))}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-width:var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width) 0 var(--ck-balloon-arrow-half-width)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-color:var(--ck-color-panel-border) transparent transparent;filter:drop-shadow(var(--ck-balloon-arrow-drop-shadow));margin-bottom:calc(var(--ck-balloon-border-width)*-1)}.ck.ck-balloon-panel[class*=arrow_s]:after{border-color:var(--ck-color-panel-background) transparent transparent transparent;margin-bottom:calc(var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width))}.ck.ck-balloon-panel[class*=arrow_e]:after,.ck.ck-balloon-panel[class*=arrow_e]:before{border-width:var(--ck-balloon-arrow-half-width) 0 var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_e]:before{border-color:transparent transparent transparent var(--ck-color-panel-border);margin-right:calc(var(--ck-balloon-border-width)*-1)}.ck.ck-balloon-panel[class*=arrow_e]:after{border-color:transparent transparent transparent var(--ck-color-panel-background);margin-right:calc(var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width))}.ck.ck-balloon-panel[class*=arrow_w]:after,.ck.ck-balloon-panel[class*=arrow_w]:before{border-width:var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width) 0}.ck.ck-balloon-panel[class*=arrow_w]:before{border-color:transparent var(--ck-color-panel-border) transparent transparent;margin-left:calc(var(--ck-balloon-border-width)*-1)}.ck.ck-balloon-panel[class*=arrow_w]:after{border-color:transparent var(--ck-color-panel-background) transparent transparent;margin-left:calc(var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{bottom:calc(var(--ck-balloon-arrow-height)*-1);left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{bottom:calc(var(--ck-balloon-arrow-height)*-1);left:calc(var(--ck-balloon-arrow-half-width)*2)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{bottom:calc(var(--ck-balloon-arrow-height)*-1);right:calc(var(--ck-balloon-arrow-half-width)*2)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:before{bottom:calc(var(--ck-balloon-arrow-height)*-1);margin-right:calc(var(--ck-balloon-arrow-half-width)*2);right:25%}.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:before{bottom:calc(var(--ck-balloon-arrow-height)*-1);left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:before{margin-right:calc(var(--ck-balloon-arrow-half-width)*2);right:25%;top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:before{left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_e:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_e:before{margin-top:calc(var(--ck-balloon-arrow-half-width)*-1);right:calc(var(--ck-balloon-arrow-height)*-1);top:50%}.ck.ck-balloon-panel.ck-balloon-panel_arrow_w:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_w:before{left:calc(var(--ck-balloon-arrow-height)*-1);margin-top:calc(var(--ck-balloon-arrow-half-width)*-1);top:50%}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/panel/balloonpanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AAKA,MAEC,8DACD,CAEA,qBACC,YAAa,CACb,iBAAkB,CAElB,yBAyCD,CAtCE,+GAEC,UAAW,CACX,iBACD,CAEA,wDACC,6CACD,CAEA,uDACC,uDACD,CAIA,4CACC,6CACD,CAEA,2CACC,uDACD,CAIA,4CACC,6CACD,CAEA,2CACC,uDACD,CAGD,8CACC,aACD,CC9CD,MACC,6BAA8B,CAC9B,6BAA8B,CAC9B,8BAA+B,CAC/B,iCAAkC,CAClC,oEACD,CAEA,qBCLC,eDmMD,CA9LA,iFCDE,qCD+LF,CA9LA,qBAMC,2CAA4C,CAC5C,wEAAyE,CEdzE,oCAA8B,CFW9B,eA0LD,CApLE,+GAIC,kBAAmB,CADnB,QAAS,CADT,OAGD,CAIA,uFAEC,mHACD,CAEA,4CACC,6EAA8E,CAC9E,kDACD,CAEA,2CACC,iFAAkF,CAClF,gFACD,CAIA,uFAEC,mHACD,CAEA,4CACC,iEAAkE,CAClE,uDAAwD,CACxD,qDACD,CAEA,2CACC,iFAAkF,CAClF,mFACD,CAIA,uFAEC,mHACD,CAEA,4CACC,6EAA8E,CAC9E,oDACD,CAEA,2CACC,iFAAkF,CAClF,kFACD,CAIA,uFAEC,mHACD,CAEA,4CACC,6EAA8E,CAC9E,mDACD,CAEA,2CACC,iFAAkF,CAClF,iFACD,CAIA,yGAEC,QAAS,CACT,uDAA0D,CAC1D,2CACD,CAIA,2GAEC,+CAAkD,CAClD,2CACD,CAIA,2GAEC,gDAAmD,CACnD,2CACD,CAIA,yGAIC,8CAAiD,CAFjD,QAAS,CACT,uDAED,CAIA,2GAGC,8CAAiD,CADjD,+CAED,CAIA,2GAGC,8CAAiD,CADjD,gDAED,CAIA,6GAIC,8CAAiD,CADjD,uDAA0D,CAD1D,SAGD,CAIA,6GAIC,8CAAiD,CAFjD,QAAS,CACT,sDAED,CAIA,6GAGC,uDAA0D,CAD1D,SAAU,CAEV,2CACD,CAIA,6GAEC,QAAS,CACT,sDAAyD,CACzD,2CACD,CAIA,yGAGC,sDAAyD,CADzD,6CAAgD,CAEhD,OACD,CAIA,yGAEC,4CAA+C,CAC/C,sDAAyD,CACzD,OACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t/* Make sure the balloon arrow does not float over its children. */\\n\\t--ck-balloon-panel-arrow-z-index: calc(var(--ck-z-default) - 3);\\n}\\n\\n.ck.ck-balloon-panel {\\n\\tdisplay: none;\\n\\tposition: absolute;\\n\\n\\tz-index: var(--ck-z-modal);\\n\\n\\t&.ck-balloon-panel_with-arrow {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tcontent: \\\"\\\";\\n\\t\\t\\tposition: absolute;\\n\\t\\t}\\n\\n\\t\\t&::before {\\n\\t\\t\\tz-index: var(--ck-balloon-panel-arrow-z-index);\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tz-index: calc(var(--ck-balloon-panel-arrow-z-index) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_n\\\"] {\\n\\t\\t&::before {\\n\\t\\t\\tz-index: var(--ck-balloon-panel-arrow-z-index);\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tz-index: calc(var(--ck-balloon-panel-arrow-z-index) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_s\\\"] {\\n\\t\\t&::before {\\n\\t\\t\\tz-index: var(--ck-balloon-panel-arrow-z-index);\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tz-index: calc(var(--ck-balloon-panel-arrow-z-index) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_visible {\\n\\t\\tdisplay: block;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"../../../mixins/_shadow.css\\\";\\n\\n:root {\\n\\t--ck-balloon-border-width: 1px;\\n\\t--ck-balloon-arrow-offset: 2px;\\n\\t--ck-balloon-arrow-height: 10px;\\n\\t--ck-balloon-arrow-half-width: 8px;\\n\\t--ck-balloon-arrow-drop-shadow: 0 2px 2px var(--ck-color-shadow-drop);\\n}\\n\\n.ck.ck-balloon-panel {\\n\\t@mixin ck-rounded-corners;\\n\\t@mixin ck-drop-shadow;\\n\\n\\tmin-height: 15px;\\n\\n\\tbackground: var(--ck-color-panel-background);\\n\\tborder: var(--ck-balloon-border-width) solid var(--ck-color-panel-border);\\n\\n\\t&.ck-balloon-panel_with-arrow {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\twidth: 0;\\n\\t\\t\\theight: 0;\\n\\t\\t\\tborder-style: solid;\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_n\\\"] {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tborder-width: 0 var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width);\\n\\t\\t}\\n\\n\\t\\t&::before {\\n\\t\\t\\tborder-color: transparent transparent var(--ck-color-panel-border) transparent;\\n\\t\\t\\tmargin-top: calc( -1 * var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tborder-color: transparent transparent var(--ck-color-panel-background) transparent;\\n\\t\\t\\tmargin-top: calc( var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_s\\\"] {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tborder-width: var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width) 0 var(--ck-balloon-arrow-half-width);\\n\\t\\t}\\n\\n\\t\\t&::before {\\n\\t\\t\\tborder-color: var(--ck-color-panel-border) transparent transparent;\\n\\t\\t\\tfilter: drop-shadow(var(--ck-balloon-arrow-drop-shadow));\\n\\t\\t\\tmargin-bottom: calc( -1 * var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tborder-color: var(--ck-color-panel-background) transparent transparent transparent;\\n\\t\\t\\tmargin-bottom: calc( var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_e\\\"] {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tborder-width: var(--ck-balloon-arrow-half-width) 0 var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height);\\n\\t\\t}\\n\\n\\t\\t&::before {\\n\\t\\t\\tborder-color: transparent transparent transparent var(--ck-color-panel-border);\\n\\t\\t\\tmargin-right: calc( -1 * var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tborder-color: transparent transparent transparent var(--ck-color-panel-background);\\n\\t\\t\\tmargin-right: calc( var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"arrow_w\\\"] {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tborder-width: var(--ck-balloon-arrow-half-width) var(--ck-balloon-arrow-height) var(--ck-balloon-arrow-half-width) 0;\\n\\t\\t}\\n\\n\\t\\t&::before {\\n\\t\\t\\tborder-color: transparent var(--ck-color-panel-border) transparent transparent;\\n\\t\\t\\tmargin-left: calc( -1 * var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\n\\t\\t&::after {\\n\\t\\t\\tborder-color: transparent var(--ck-color-panel-background) transparent transparent;\\n\\t\\t\\tmargin-left: calc( var(--ck-balloon-arrow-offset) - var(--ck-balloon-border-width) );\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_n {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: 50%;\\n\\t\\t\\tmargin-left: calc(-1 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_nw {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_ne {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tright: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_s {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: 50%;\\n\\t\\t\\tmargin-left: calc(-1 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\tbottom: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_sw {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\tbottom: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_se {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tright: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\tbottom: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_sme {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tright: 25%;\\n\\t\\t\\tmargin-right: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\tbottom: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_smw {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: 25%;\\n\\t\\t\\tmargin-left: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\tbottom: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_nme {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tright: 25%;\\n\\t\\t\\tmargin-right: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_nmw {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: 25%;\\n\\t\\t\\tmargin-left: calc(2 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_e {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tright: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t\\tmargin-top: calc(-1 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: 50%;\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-balloon-panel_arrow_w {\\n\\t\\t&::before,\\n\\t\\t&::after {\\n\\t\\t\\tleft: calc(-1 * var(--ck-balloon-arrow-height));\\n\\t\\t\\tmargin-top: calc(-1 * var(--ck-balloon-arrow-half-width));\\n\\t\\t\\ttop: 50%;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck .ck-balloon-rotator__navigation{align-items:center;display:flex;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-bottom:var(--ck-spacing-small);margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-left:var(--ck-spacing-small);margin-right:var(--ck-spacing-standard)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/panel/balloonrotator.css\"],\"names\":[],\"mappings\":\"AAKA,oCAEC,kBAAmB,CADnB,YAAa,CAEb,sBACD,CAKA,6CACC,sBACD,CCXA,oCACC,6CAA8C,CAC9C,sDAAuD,CACvD,iCAgBD,CAbC,sCAGC,qCAAsC,CAFtC,oCAAqC,CACrC,kCAED,CAGA,iEAIC,mCAAoC,CAHpC,uCAID,CAMA,2DACC,eACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck .ck-balloon-rotator__navigation {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n}\\n\\n/* Buttons inside a toolbar should be centered when rotator bar is wider.\\n * See: https://github.com/ckeditor/ckeditor5-ui/issues/495\\n */\\n.ck .ck-balloon-rotator__content .ck-toolbar {\\n\\tjustify-content: center;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck .ck-balloon-rotator__navigation {\\n\\tbackground: var(--ck-color-toolbar-background);\\n\\tborder-bottom: 1px solid var(--ck-color-toolbar-border);\\n\\tpadding: 0 var(--ck-spacing-small);\\n\\n\\t/* Let's keep similar appearance to `ck-toolbar`. */\\n\\t& > * {\\n\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t\\tmargin-top: var(--ck-spacing-small);\\n\\t\\tmargin-bottom: var(--ck-spacing-small);\\n\\t}\\n\\n\\t/* Gives counter more breath than buttons. */\\n\\t& .ck-balloon-rotator__counter {\\n\\t\\tmargin-right: var(--ck-spacing-standard);\\n\\n\\t\\t/* We need to use smaller margin because of previous button's right margin. */\\n\\t\\tmargin-left: var(--ck-spacing-small);\\n\\t}\\n}\\n\\n.ck .ck-balloon-rotator__content {\\n\\n\\t/* Disable default annotation shadow inside rotator with fake panels. */\\n\\t& .ck.ck-annotation-wrapper {\\n\\t\\tbox-shadow: none;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);box-shadow:var(--ck-drop-shadow),0 0;height:100%;min-height:15px;width:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/panel/fakepanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AAKA,mBACC,iBAAkB,CAGlB,mCACD,CAEA,uBACC,iBACD,CAEA,mCACC,SACD,CAEA,oCACC,SACD,CCfA,MACC,6CAA8C,CAC9C,2CACD,CAGA,uBAKC,2CAA4C,CAC5C,6CAA8C,CAC9C,qCAAsC,CCXtC,oCAA8B,CDc9B,WAAY,CAPZ,eAAgB,CAMhB,UAED,CAEA,mCACC,0DAA2D,CAC3D,uDACD,CAEA,oCACC,kEAAqE,CACrE,+DACD,CACA,oCACC,kEAAqE,CACrE,+DACD,CAGA,yIAGC,4CACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck .ck-fake-panel {\\n\\tposition: absolute;\\n\\n\\t/* Fake panels should be placed under main balloon content. */\\n\\tz-index: calc(var(--ck-z-modal) - 1);\\n}\\n\\n.ck .ck-fake-panel div {\\n\\tposition: absolute;\\n}\\n\\n.ck .ck-fake-panel div:nth-child( 1 ) {\\n\\tz-index: 2;\\n}\\n\\n.ck .ck-fake-panel div:nth-child( 2 ) {\\n\\tz-index: 1;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_shadow.css\\\";\\n\\n:root {\\n\\t--ck-balloon-fake-panel-offset-horizontal: 6px;\\n\\t--ck-balloon-fake-panel-offset-vertical: 6px;\\n}\\n\\n/* Let's use `.ck-balloon-panel` appearance. See: balloonpanel.css. */\\n.ck .ck-fake-panel div {\\n\\t@mixin ck-drop-shadow;\\n\\n\\tmin-height: 15px;\\n\\n\\tbackground: var(--ck-color-panel-background);\\n\\tborder: 1px solid var(--ck-color-panel-border);\\n\\tborder-radius: var(--ck-border-radius);\\n\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.ck .ck-fake-panel div:nth-child( 1 ) {\\n\\tmargin-left: var(--ck-balloon-fake-panel-offset-horizontal);\\n\\tmargin-top: var(--ck-balloon-fake-panel-offset-vertical);\\n}\\n\\n.ck .ck-fake-panel div:nth-child( 2 ) {\\n\\tmargin-left: calc(var(--ck-balloon-fake-panel-offset-horizontal) * 2);\\n\\tmargin-top: calc(var(--ck-balloon-fake-panel-offset-vertical) * 2);\\n}\\n.ck .ck-fake-panel div:nth-child( 3 ) {\\n\\tmargin-left: calc(var(--ck-balloon-fake-panel-offset-horizontal) * 3);\\n\\tmargin-top: calc(var(--ck-balloon-fake-panel-offset-vertical) * 3);\\n}\\n\\n/* If balloon is positioned above element, we need to move fake panel to the top. */\\n.ck .ck-balloon-panel_arrow_s + .ck-fake-panel,\\n.ck .ck-balloon-panel_arrow_se + .ck-fake-panel,\\n.ck .ck-balloon-panel_arrow_sw + .ck-fake-panel {\\n\\t--ck-balloon-fake-panel-offset-vertical: -6px;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-sticky-panel .ck-sticky-panel__content_sticky{position:fixed;top:0;z-index:var(--ck-z-modal)}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky_bottom-limit{position:absolute;top:auto}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky{border-top-left-radius:0;border-top-right-radius:0;border-width:0 1px 1px;box-shadow:var(--ck-drop-shadow),0 0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/stickypanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/panel/stickypanel.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AAMC,qDAEC,cAAe,CACf,KAAM,CAFN,yBAGD,CAEA,kEAEC,iBAAkB,CADlB,QAED,CCPA,qDAIC,wBAAyB,CACzB,yBAA0B,CAF1B,sBAAuB,CCFxB,oCDKA\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-sticky-panel {\\n\\t& .ck-sticky-panel__content_sticky {\\n\\t\\tz-index: var(--ck-z-modal); /* #315 */\\n\\t\\tposition: fixed;\\n\\t\\ttop: 0;\\n\\t}\\n\\n\\t& .ck-sticky-panel__content_sticky_bottom-limit {\\n\\t\\ttop: auto;\\n\\t\\tposition: absolute;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_shadow.css\\\";\\n\\n.ck.ck-sticky-panel {\\n\\t& .ck-sticky-panel__content_sticky {\\n\\t\\t@mixin ck-drop-shadow;\\n\\n\\t\\tborder-width: 0 1px 1px;\\n\\t\\tborder-top-left-radius: 0;\\n\\t\\tborder-top-right-radius: 0;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-block-toolbar-button{position:absolute;z-index:var(--ck-z-default)}:root{--ck-color-block-toolbar-button:var(--ck-color-text);--ck-block-toolbar-button-size:var(--ck-font-size-normal)}.ck.ck-block-toolbar-button{color:var(--ck-color-block-toolbar-button);font-size:var(--ck-block-toolbar-size)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/blocktoolbar.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/toolbar/blocktoolbar.css\"],\"names\":[],\"mappings\":\"AAKA,4BACC,iBAAkB,CAClB,2BACD,CCHA,MACC,oDAAqD,CACrD,yDACD,CAEA,4BACC,0CAA2C,CAC3C,sCACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-block-toolbar-button {\\n\\tposition: absolute;\\n\\tz-index: var(--ck-z-default);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-color-block-toolbar-button: var(--ck-color-text);\\n\\t--ck-block-toolbar-button-size: var(--ck-font-size-normal);\\n}\\n\\n.ck.ck-block-toolbar-button {\\n\\tcolor: var(--ck-color-block-toolbar-button);\\n\\tfont-size: var(--ck-block-toolbar-size);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-toolbar{align-items:center;display:flex;flex-flow:row nowrap;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-toolbar>.ck-toolbar__items{align-items:center;display:flex;flex-flow:row wrap;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar .ck-toolbar__line-break{flex-basis:100%}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);border:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;background:var(--ck-color-toolbar-border);margin-bottom:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);min-width:1px;width:1px}.ck.ck-toolbar .ck-toolbar__line-break{height:0}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break){margin-right:var(--ck-spacing-small)}.ck.ck-toolbar>.ck-toolbar__items:empty+.ck.ck-toolbar__separator{display:none}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break),.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-bottom:var(--ck-spacing-small);margin-top:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{border-radius:0;margin:0;width:100%}.ck.ck-toolbar.ck-toolbar_compact{padding:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>*{margin:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>:not(:first-child):not(:last-child){border-radius:0}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck.ck-toolbar .ck-toolbar__nested-toolbar-dropdown>.ck-dropdown__panel{min-width:auto}.ck.ck-toolbar .ck-toolbar__nested-toolbar-dropdown>.ck-button>.ck-button__label{max-width:7em;width:auto}.ck.ck-toolbar:focus{outline:none}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck{margin-right:0}.ck.ck-toolbar[dir=rtl]:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-left:0}.ck.ck-toolbar.ck-toolbar_compact[dir=rtl]>.ck-toolbar__items>.ck:first-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.ck.ck-toolbar.ck-toolbar_compact[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-bottom-right-radius:0;border-top-right-radius:0}.ck.ck-toolbar.ck-toolbar_grouping[dir=rtl]>.ck-toolbar__items:not(:empty):not(:only-child),.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__separator,[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-right:0}.ck.ck-toolbar.ck-toolbar_compact[dir=ltr]>.ck-toolbar__items>.ck:first-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-bottom-right-radius:0;border-top-right-radius:0}.ck.ck-toolbar.ck-toolbar_compact[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-bottom-left-radius:0;border-top-left-radius:0}.ck.ck-toolbar.ck-toolbar_grouping[dir=ltr]>.ck-toolbar__items:not(:empty):not(:only-child),.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__separator,[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-right:var(--ck-spacing-small)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/mixins/_unselectable.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/toolbar/toolbar.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_rounded.css\"],\"names\":[],\"mappings\":\"AAOA,eAKC,kBAAmB,CAFnB,YAAa,CACb,oBAAqB,CCFrB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CACrB,gBD6CD,CA3CC,kCAGC,kBAAmB,CAFnB,YAAa,CACb,kBAAmB,CAEnB,WAED,CAEA,yCACC,oBAWD,CAJC,yGAEC,YACD,CAGD,uCACC,eACD,CAEA,sDACC,gBACD,CAEA,sDACC,qBACD,CAEA,sDACC,gBACD,CAGC,yFACC,YACD,CE/CF,eCGC,eDwGD,CA3GA,qECOE,qCDoGF,CA3GA,eAGC,6CAA8C,CAE9C,+CAAgD,CADhD,iCAuGD,CApGC,yCACC,kBAAmB,CAGnB,yCAA0C,CAO1C,qCAAsC,CADtC,kCAAmC,CAPnC,aAAc,CADd,SAUD,CAEA,uCACC,QACD,CAGC,gEAEC,oCACD,CAIA,kEACC,YACD,CAGD,gHAIC,qCAAsC,CADtC,kCAED,CAEA,mCAEC,SAaD,CAVC,0DAQC,eAAgB,CAHhB,QAAS,CAHT,UAOD,CAGD,kCAEC,SAWD,CATC,uDAEC,QAMD,CAHC,yFACC,eACD,CASD,kFACC,mCACD,CAMA,wEACC,cACD,CAEA,iFACC,aAAc,CACd,UACD,CAGD,qBACC,YACD,CAtGD,qCAyGE,QAEF,CAYC,+FACC,cACD,CAEA,iJAEC,mCACD,CAEA,qHACC,aACD,CAIC,6JAEC,2BAA4B,CAD5B,wBAED,CAGA,2JAEC,4BAA6B,CAD7B,yBAED,CASD,8RACC,mCACD,CAWA,qHACC,cACD,CAIC,6JAEC,4BAA6B,CAD7B,yBAED,CAGA,2JAEC,2BAA4B,CAD5B,wBAED,CASD,8RACC,oCACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../mixins/_unselectable.css\\\";\\n\\n.ck.ck-toolbar {\\n\\t@mixin ck-unselectable;\\n\\n\\tdisplay: flex;\\n\\tflex-flow: row nowrap;\\n\\talign-items: center;\\n\\n\\t& > .ck-toolbar__items {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-flow: row wrap;\\n\\t\\talign-items: center;\\n\\t\\tflex-grow: 1;\\n\\n\\t}\\n\\n\\t& .ck.ck-toolbar__separator {\\n\\t\\tdisplay: inline-block;\\n\\n\\t\\t/*\\n\\t\\t * A leading or trailing separator makes no sense (separates from nothing on one side).\\n\\t\\t * For instance, it can happen when toolbar items (also separators) are getting grouped one by one and\\n\\t\\t * moved to another toolbar in the dropdown.\\n\\t\\t */\\n\\t\\t&:first-child,\\n\\t\\t&:last-child {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t}\\n\\n\\t& .ck-toolbar__line-break {\\n\\t\\tflex-basis: 100%;\\n\\t}\\n\\n\\t&.ck-toolbar_grouping > .ck-toolbar__items {\\n\\t\\tflex-wrap: nowrap;\\n\\t}\\n\\n\\t&.ck-toolbar_vertical > .ck-toolbar__items {\\n\\t\\tflex-direction: column;\\n\\t}\\n\\n\\t&.ck-toolbar_floating > .ck-toolbar__items {\\n\\t\\tflex-wrap: nowrap;\\n\\t}\\n\\n\\t& > .ck.ck-toolbar__grouped-dropdown {\\n\\t\\t& > .ck-dropdown__button .ck-dropdown__arrow {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Makes element unselectable.\\n */\\n@define-mixin ck-unselectable {\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n\\t-ms-user-select: none;\\n\\tuser-select: none\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n@import \\\"@ckeditor/ckeditor5-ui/theme/mixins/_dir.css\\\";\\n\\n.ck.ck-toolbar {\\n\\t@mixin ck-rounded-corners;\\n\\n\\tbackground: var(--ck-color-toolbar-background);\\n\\tpadding: 0 var(--ck-spacing-small);\\n\\tborder: 1px solid var(--ck-color-toolbar-border);\\n\\n\\t& .ck.ck-toolbar__separator {\\n\\t\\talign-self: stretch;\\n\\t\\twidth: 1px;\\n\\t\\tmin-width: 1px;\\n\\t\\tbackground: var(--ck-color-toolbar-border);\\n\\n\\t\\t/*\\n\\t\\t * These margins make the separators look better in balloon toolbars (when aligned with the \\\"tip\\\").\\n\\t\\t * See https://github.com/ckeditor/ckeditor5/issues/7493.\\n\\t\\t */\\n\\t\\tmargin-top: var(--ck-spacing-small);\\n\\t\\tmargin-bottom: var(--ck-spacing-small);\\n\\t}\\n\\n\\t& .ck-toolbar__line-break {\\n\\t\\theight: 0;\\n\\t}\\n\\n\\t& > .ck-toolbar__items {\\n\\t\\t& > *:not(.ck-toolbar__line-break) {\\n\\t\\t\\t/* (#11) Separate toolbar items. */\\n\\t\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t\\t}\\n\\n\\t\\t/* Don't display a separator after an empty items container, for instance,\\n\\t\\twhen all items were grouped */\\n\\t\\t&:empty + .ck.ck-toolbar__separator {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t}\\n\\n\\t& > .ck-toolbar__items > *:not(.ck-toolbar__line-break),\\n\\t& > .ck.ck-toolbar__grouped-dropdown {\\n\\t\\t/* Make sure items wrapped to the next line have v-spacing */\\n\\t\\tmargin-top: var(--ck-spacing-small);\\n\\t\\tmargin-bottom: var(--ck-spacing-small);\\n\\t}\\n\\n\\t&.ck-toolbar_vertical {\\n\\t\\t/* Items in a vertical toolbar span the entire width. */\\n\\t\\tpadding: 0;\\n\\n\\t\\t/* Specificity matters here. See https://github.com/ckeditor/ckeditor5-theme-lark/issues/168. */\\n\\t\\t& > .ck-toolbar__items > .ck {\\n\\t\\t\\t/* Items in a vertical toolbar should span the horizontal space. */\\n\\t\\t\\twidth: 100%;\\n\\n\\t\\t\\t/* Items in a vertical toolbar should have no margin. */\\n\\t\\t\\tmargin: 0;\\n\\n\\t\\t\\t/* Items in a vertical toolbar span the entire width so rounded corners are pointless. */\\n\\t\\t\\tborder-radius: 0;\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-toolbar_compact {\\n\\t\\t/* No spacing around items. */\\n\\t\\tpadding: 0;\\n\\n\\t\\t& > .ck-toolbar__items > * {\\n\\t\\t\\t/* Compact toolbar items have no spacing between them. */\\n\\t\\t\\tmargin: 0;\\n\\n\\t\\t\\t/* \\\"Middle\\\" children should have no rounded corners. */\\n\\t\\t\\t&:not(:first-child):not(:last-child) {\\n\\t\\t\\t\\tborder-radius: 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t& > .ck.ck-toolbar__grouped-dropdown {\\n\\t\\t/*\\n\\t\\t * Dropdown button has asymmetric padding to fit the arrow.\\n\\t\\t * This button has no arrow so let's revert that padding back to normal.\\n\\t\\t */\\n\\t\\t& > .ck.ck-button.ck-dropdown__button {\\n\\t\\t\\tpadding-left: var(--ck-spacing-tiny);\\n\\t\\t}\\n\\t}\\n\\n\\t/* A drop-down containing the nested toolbar with configured items. */\\n\\t& .ck-toolbar__nested-toolbar-dropdown {\\n\\t\\t/* Prevent empty space in the panel when the dropdown label is visible and long but the toolbar has few items. */\\n\\t\\t& > .ck-dropdown__panel {\\n\\t\\t\\tmin-width: auto;\\n\\t\\t}\\n\\n\\t\\t& > .ck-button > .ck-button__label {\\n\\t\\t\\tmax-width: 7em;\\n\\t\\t\\twidth: auto;\\n\\t\\t}\\n\\t}\\n\\n\\t&:focus {\\n\\t\\toutline: none;\\n\\t}\\n\\n\\t@nest .ck-toolbar-container & {\\n\\t\\tborder: 0;\\n\\t}\\n}\\n\\n/* stylelint-disable */\\n\\n/*\\n * Styles for RTL toolbars.\\n *\\n * Note: In some cases (e.g. a decoupled editor), the toolbar has its own \\\"dir\\\"\\n * because its parent is not controlled by the editor framework.\\n */\\n[dir=\\\"rtl\\\"] .ck.ck-toolbar,\\n.ck.ck-toolbar[dir=\\\"rtl\\\"] {\\n\\t& > .ck-toolbar__items > .ck {\\n\\t\\tmargin-right: 0;\\n\\t}\\n\\n\\t&:not(.ck-toolbar_compact) > .ck-toolbar__items > .ck {\\n\\t\\t/* (#11) Separate toolbar items. */\\n\\t\\tmargin-left: var(--ck-spacing-small);\\n\\t}\\n\\n\\t& > .ck-toolbar__items > .ck:last-child {\\n\\t\\tmargin-left: 0;\\n\\t}\\n\\n\\t&.ck-toolbar_compact > .ck-toolbar__items > .ck {\\n\\t\\t/* No rounded corners on the right side of the first child. */\\n\\t\\t&:first-child {\\n\\t\\t\\tborder-top-left-radius: 0;\\n\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t}\\n\\n\\t\\t/* No rounded corners on the left side of the last child. */\\n\\t\\t&:last-child {\\n\\t\\t\\tborder-top-right-radius: 0;\\n\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/* Separate the the separator form the grouping dropdown when some items are grouped. */\\n\\t& > .ck.ck-toolbar__separator {\\n\\t\\tmargin-left: var(--ck-spacing-small);\\n\\t}\\n\\n\\t/* Some spacing between the items and the separator before the grouped items dropdown. */\\n\\t&.ck-toolbar_grouping > .ck-toolbar__items:not(:empty):not(:only-child) {\\n\\t\\tmargin-left: var(--ck-spacing-small);\\n\\t}\\n}\\n\\n/*\\n * Styles for LTR toolbars.\\n *\\n * Note: In some cases (e.g. a decoupled editor), the toolbar has its own \\\"dir\\\"\\n * because its parent is not controlled by the editor framework.\\n */\\n[dir=\\\"ltr\\\"] .ck.ck-toolbar,\\n.ck.ck-toolbar[dir=\\\"ltr\\\"] {\\n\\t& > .ck-toolbar__items > .ck:last-child {\\n\\t\\tmargin-right: 0;\\n\\t}\\n\\n\\t&.ck-toolbar_compact > .ck-toolbar__items > .ck {\\n\\t\\t/* No rounded corners on the right side of the first child. */\\n\\t\\t&:first-child {\\n\\t\\t\\tborder-top-right-radius: 0;\\n\\t\\t\\tborder-bottom-right-radius: 0;\\n\\t\\t}\\n\\n\\t\\t/* No rounded corners on the left side of the last child. */\\n\\t\\t&:last-child {\\n\\t\\t\\tborder-top-left-radius: 0;\\n\\t\\t\\tborder-bottom-left-radius: 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/* Separate the the separator form the grouping dropdown when some items are grouped. */\\n\\t& > .ck.ck-toolbar__separator {\\n\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t}\\n\\n\\t/* Some spacing between the items and the separator before the grouped items dropdown. */\\n\\t&.ck-toolbar_grouping > .ck-toolbar__items:not(:empty):not(:only-child) {\\n\\t\\tmargin-right: var(--ck-spacing-small);\\n\\t}\\n}\\n\\n/* stylelint-enable */\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Implements rounded corner interface for .ck-rounded-corners class.\\n *\\n * @see $ck-border-radius\\n */\\n@define-mixin ck-rounded-corners {\\n\\tborder-radius: 0;\\n\\n\\t@nest .ck-rounded-corners &,\\n\\t&.ck-rounded-corners {\\n\\t\\tborder-radius: var(--ck-border-radius);\\n\\t\\t@mixin-content;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck.ck-balloon-panel.ck-tooltip{--ck-balloon-border-width:0px;--ck-balloon-arrow-offset:0px;--ck-balloon-arrow-half-width:4px;--ck-balloon-arrow-height:4px;--ck-color-panel-background:var(--ck-color-tooltip-background);padding:0 var(--ck-spacing-medium);pointer-events:none;z-index:calc(var(--ck-z-modal) + 100)}.ck.ck-balloon-panel.ck-tooltip .ck-tooltip__text{color:var(--ck-color-tooltip-text);font-size:.9em;line-height:1.5}.ck.ck-balloon-panel.ck-tooltip{box-shadow:none}.ck.ck-balloon-panel.ck-tooltip:before{display:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/components/tooltip/tooltip.css\"],\"names\":[],\"mappings\":\"AAKA,gCCGC,6BAA8B,CAC9B,6BAA8B,CAC9B,iCAAkC,CAClC,6BAA8B,CAC9B,8DAA+D,CAE/D,kCAAmC,CDPnC,mBAAoB,CAEpB,qCACD,CCMC,kDAGC,kCAAmC,CAFnC,cAAe,CACf,eAED,CAbD,gCAgBC,eAMD,CAHC,uCACC,YACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-balloon-panel.ck-tooltip {\\n\\t/* Keep tooltips transparent for any interactions. */\\n\\tpointer-events: none;\\n\\n\\tz-index: calc( var(--ck-z-modal) + 100 );\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../../../mixins/_rounded.css\\\";\\n\\n.ck.ck-balloon-panel.ck-tooltip {\\n\\t--ck-balloon-border-width: 0px;\\n\\t--ck-balloon-arrow-offset: 0px;\\n\\t--ck-balloon-arrow-half-width: 4px;\\n\\t--ck-balloon-arrow-height: 4px;\\n\\t--ck-color-panel-background: var(--ck-color-tooltip-background);\\n\\n\\tpadding: 0 var(--ck-spacing-medium);\\n\\n\\t& .ck-tooltip__text {\\n\\t\\tfont-size: .9em;\\n\\t\\tline-height: 1.5;\\n\\t\\tcolor: var(--ck-color-tooltip-text);\\n\\t}\\n\\n\\t/* Reset balloon panel styles */\\n\\tbox-shadow: none;\\n\\n\\t/* Hide the default shadow of the .ck-balloon-panel tip */\\n\\t&::before {\\n\\t\\tdisplay: none;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck-hidden{display:none!important}.ck-reset_all :not(.ck-reset_all-excluded *),.ck.ck-reset,.ck.ck-reset_all{box-sizing:border-box;height:auto;position:static;width:auto}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999)}.ck-transitions-disabled,.ck-transitions-disabled *{transition:none!important}:root{--ck-powered-by-line-height:10px;--ck-powered-by-padding-vertical:2px;--ck-powered-by-padding-horizontal:4px;--ck-powered-by-text-color:#4f4f4f;--ck-powered-by-border-radius:var(--ck-border-radius);--ck-powered-by-background:#fff;--ck-powered-by-border-color:var(--ck-color-focus-border)}.ck.ck-balloon-panel.ck-powered-by-balloon{--ck-border-radius:var(--ck-powered-by-border-radius);background:var(--ck-powered-by-background);box-shadow:none;min-height:unset;z-index:calc(var(--ck-z-modal) - 1)}.ck.ck-balloon-panel.ck-powered-by-balloon .ck.ck-powered-by{line-height:var(--ck-powered-by-line-height)}.ck.ck-balloon-panel.ck-powered-by-balloon .ck.ck-powered-by a{align-items:center;cursor:pointer;display:flex;filter:grayscale(80%);line-height:var(--ck-powered-by-line-height);opacity:.66;padding:var(--ck-powered-by-padding-vertical) var(--ck-powered-by-padding-horizontal)}.ck.ck-balloon-panel.ck-powered-by-balloon .ck.ck-powered-by .ck-powered-by__label{color:var(--ck-powered-by-text-color);cursor:pointer;font-size:7.5px;font-weight:700;letter-spacing:-.2px;line-height:normal;margin-right:4px;padding-left:2px;text-transform:uppercase}.ck.ck-balloon-panel.ck-powered-by-balloon .ck.ck-powered-by .ck-icon{cursor:pointer;display:block}.ck.ck-balloon-panel.ck-powered-by-balloon .ck.ck-powered-by:hover a{filter:grayscale(0);opacity:1}.ck.ck-balloon-panel.ck-powered-by-balloon[class*=position_inside]{border-color:transparent}.ck.ck-balloon-panel.ck-powered-by-balloon[class*=position_border]{border:var(--ck-focus-ring);border-color:var(--ck-powered-by-border-color)}:root{--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#ccced1;--ck-color-base-action:#53a336;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#2977ff;--ck-color-base-active-focus:#0d65ff;--ck-color-base-error:#db3700;--ck-color-focus-border-coordinates:218,81.8%,56.9%;--ck-color-focus-border:hsl(var(--ck-color-focus-border-coordinates));--ck-color-focus-outer-shadow:#cae1fc;--ck-color-focus-disabled-shadow:rgba(119,186,248,.3);--ck-color-focus-error-shadow:rgba(255,64,31,.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,.15);--ck-color-shadow-drop-active:rgba(0,0,0,.2);--ck-color-shadow-inner:rgba(0,0,0,.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#f0f0f0;--ck-color-button-default-active-background:#f0f0f0;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#f0f7ff;--ck-color-button-on-hover-background:#dbecff;--ck-color-button-on-active-background:#dbecff;--ck-color-button-on-disabled-background:#f0f2f4;--ck-color-button-on-color:#2977ff;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#4d9d30;--ck-color-button-action-active-background:#4d9d30;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#939393;--ck-color-switch-button-off-hover-background:#7d7d7d;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#4d9d30;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:var(--ck-color-base-border);--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:var(--ck-color-base-border);--ck-color-input-disabled-text:#757575;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-button-on-color);--ck-color-list-button-on-background-focus:var(--ck-color-button-on-color);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-background);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,176,255,.1);--ck-color-link-fake-selection:rgba(31,176,255,.3);--ck-color-highlight-background:#ff0;--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck-reset_all :not(.ck-reset_all-excluded *),.ck.ck-reset,.ck.ck-reset_all{word-wrap:break-word;background:transparent;border:0;margin:0;padding:0;text-decoration:none;transition:none;vertical-align:middle}.ck-reset_all :not(.ck-reset_all-excluded *),.ck.ck-reset_all{border-collapse:collapse;color:var(--ck-color-text);cursor:auto;float:none;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);text-align:left;white-space:nowrap}.ck-reset_all .ck-rtl :not(.ck-reset_all-excluded *){text-align:right}.ck-reset_all iframe:not(.ck-reset_all-excluded *){vertical-align:inherit}.ck-reset_all textarea:not(.ck-reset_all-excluded *){white-space:pre-wrap}.ck-reset_all input[type=password]:not(.ck-reset_all-excluded *),.ck-reset_all input[type=text]:not(.ck-reset_all-excluded *),.ck-reset_all textarea:not(.ck-reset_all-excluded *){cursor:text}.ck-reset_all input[type=password][disabled]:not(.ck-reset_all-excluded *),.ck-reset_all input[type=text][disabled]:not(.ck-reset_all-excluded *),.ck-reset_all textarea[disabled]:not(.ck-reset_all-excluded *){cursor:default}.ck-reset_all fieldset:not(.ck-reset_all-excluded *){border:2px groove #dfdee3;padding:10px}.ck-reset_all button:not(.ck-reset_all-excluded *)::-moz-focus-inner{border:0;padding:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/globals/_hidden.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/globals/_reset.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/globals/_zindex.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/globals/_transition.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-ui/theme/globals/_poweredby.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_colors.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_disabled.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_fonts.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_reset.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_rounded.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_shadow.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-ui/globals/_spacing.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A class which hides an element in DOM.\\n */\\n.ck-hidden {\\n\\t/* Override selector specificity. Otherwise, all elements with some display\\n\\tstyle defined will override this one, which is not a desired result. */\\n\\tdisplay: none !important;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck.ck-reset,\\n.ck.ck-reset_all,\\n.ck-reset_all *:not(.ck-reset_all-excluded *) {\\n\\tbox-sizing: border-box;\\n\\twidth: auto;\\n\\theight: auto;\\n\\tposition: static;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-z-default: 1;\\n\\t--ck-z-modal: calc( var(--ck-z-default) + 999 );\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A class that disables all transitions of the element and its children.\\n */\\n.ck-transitions-disabled,\\n.ck-transitions-disabled * {\\n\\ttransition: none !important;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-powered-by-line-height: 10px;\\n\\t--ck-powered-by-padding-vertical: 2px;\\n\\t--ck-powered-by-padding-horizontal: 4px;\\n\\t--ck-powered-by-text-color: hsl(0, 0%, 31%);\\n\\t--ck-powered-by-border-radius: var(--ck-border-radius);\\n\\t--ck-powered-by-background: hsl(0, 0%, 100%);\\n\\t--ck-powered-by-border-color: var(--ck-color-focus-border);\\n}\\n\\n.ck.ck-balloon-panel.ck-powered-by-balloon {\\n\\t--ck-border-radius: var(--ck-powered-by-border-radius);\\n\\n\\tbox-shadow: none;\\n\\tbackground: var(--ck-powered-by-background);\\n\\tmin-height: unset;\\n\\tz-index: calc( var(--ck-z-modal) - 1 );\\n\\n\\t& .ck.ck-powered-by {\\n\\t\\tline-height: var(--ck-powered-by-line-height);\\n\\n\\t\\t& a {\\n\\t\\t\\tcursor: pointer;\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\topacity: .66;\\n\\t\\t\\tfilter: grayscale(80%);\\n\\t\\t\\tline-height: var(--ck-powered-by-line-height);\\n\\t\\t\\tpadding: var(--ck-powered-by-padding-vertical) var(--ck-powered-by-padding-horizontal);\\n\\t\\t}\\n\\n\\t\\t& .ck-powered-by__label {\\n\\t\\t\\tfont-size: 7.5px;\\n\\t\\t\\tletter-spacing: -.2px;\\n\\t\\t\\tpadding-left: 2px;\\n\\t\\t\\ttext-transform: uppercase;\\n\\t\\t\\tfont-weight: bold;\\n\\t\\t\\tmargin-right: 4px;\\n\\t\\t\\tcursor: pointer;\\n\\t\\t\\tline-height: normal;\\n\\t\\t\\tcolor: var(--ck-powered-by-text-color);\\n\\n\\t\\t}\\n\\n\\t\\t& .ck-icon {\\n\\t\\t\\tdisplay: block;\\n\\t\\t\\tcursor: pointer;\\n\\t\\t}\\n\\n\\t\\t&:hover {\\n\\t\\t\\t& a {\\n\\t\\t\\t\\tfilter: grayscale(0%);\\n\\t\\t\\t\\topacity: 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t&[class*=\\\"position_inside\\\"] {\\n\\t\\tborder-color: transparent;\\n\\t}\\n\\n\\t&[class*=\\\"position_border\\\"] {\\n\\t\\tborder: var(--ck-focus-ring);\\n\\t\\tborder-color: var(--ck-powered-by-border-color);\\n\\t}\\n}\\n\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-color-base-foreground: \\t\\t\\t\\t\\t\\t\\t\\thsl(0, 0%, 98%);\\n\\t--ck-color-base-background: \\t\\t\\t\\t\\t\\t\\t\\thsl(0, 0%, 100%);\\n\\t--ck-color-base-border: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(220, 6%, 81%);\\n\\t--ck-color-base-action: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(104, 50.2%, 42.5%);\\n\\t--ck-color-base-focus: \\t\\t\\t\\t\\t\\t\\t\\t\\t\\thsl(209, 92%, 70%);\\n\\t--ck-color-base-text: \\t\\t\\t\\t\\t\\t\\t\\t\\t\\thsl(0, 0%, 20%);\\n\\t--ck-color-base-active: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(218.1, 100%, 58%);\\n\\t--ck-color-base-active-focus:\\t\\t\\t\\t\\t\\t\\t\\thsl(218.2, 100%, 52.5%);\\n\\t--ck-color-base-error:\\t\\t\\t\\t\\t\\t\\t\\t\\t\\thsl(15, 100%, 43%);\\n\\n\\t/* -- Generic colors ------------------------------------------------------------------------ */\\n\\n\\t--ck-color-focus-border-coordinates: \\t\\t\\t\\t\\t\\t218, 81.8%, 56.9%;\\n\\t--ck-color-focus-border: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(var(--ck-color-focus-border-coordinates));\\n\\t--ck-color-focus-outer-shadow:\\t\\t\\t\\t\\t\\t\\t\\thsl(212.4, 89.3%, 89%);\\n\\t--ck-color-focus-disabled-shadow:\\t\\t\\t\\t\\t\\t\\thsla(209, 90%, 72%,.3);\\n\\t--ck-color-focus-error-shadow:\\t\\t\\t\\t\\t\\t\\t\\thsla(9,100%,56%,.3);\\n\\t--ck-color-text: \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-text);\\n\\t--ck-color-shadow-drop: \\t\\t\\t\\t\\t\\t\\t\\t\\thsla(0, 0%, 0%, 0.15);\\n\\t--ck-color-shadow-drop-active:\\t\\t\\t\\t\\t\\t\\t\\thsla(0, 0%, 0%, 0.2);\\n\\t--ck-color-shadow-inner: \\t\\t\\t\\t\\t\\t\\t\\t\\thsla(0, 0%, 0%, 0.1);\\n\\n\\t/* -- Buttons ------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-button-default-background: \\t\\t\\t\\t\\t\\ttransparent;\\n\\t--ck-color-button-default-hover-background: \\t\\t\\t\\thsl(0, 0%, 94.1%);\\n\\t--ck-color-button-default-active-background: \\t\\t\\t\\thsl(0, 0%, 94.1%);\\n\\t--ck-color-button-default-disabled-background: \\t\\t\\t\\ttransparent;\\n\\n\\t--ck-color-button-on-background: \\t\\t\\t\\t\\t\\t\\thsl(212, 100%, 97.1%);\\n\\t--ck-color-button-on-hover-background: \\t\\t\\t\\t\\t\\thsl(211.7, 100%, 92.9%);\\n\\t--ck-color-button-on-active-background: \\t\\t\\t\\t\\thsl(211.7, 100%, 92.9%);\\n\\t--ck-color-button-on-disabled-background: \\t\\t\\t\\t\\thsl(211, 15%, 95%);\\n\\t--ck-color-button-on-color:\\t\\t\\t\\t\\t\\t\\t\\t\\thsl(218.1, 100%, 58%);\\n\\n\\n\\t--ck-color-button-action-background: \\t\\t\\t\\t\\t\\tvar(--ck-color-base-action);\\n\\t--ck-color-button-action-hover-background: \\t\\t\\t\\t\\thsl(104, 53.2%, 40.2%);\\n\\t--ck-color-button-action-active-background: \\t\\t\\t\\thsl(104, 53.2%, 40.2%);\\n\\t--ck-color-button-action-disabled-background: \\t\\t\\t\\thsl(104, 44%, 58%);\\n\\t--ck-color-button-action-text: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\n\\t--ck-color-button-save: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(120, 100%, 27%);\\n\\t--ck-color-button-cancel: \\t\\t\\t\\t\\t\\t\\t\\t\\thsl(15, 100%, 43%);\\n\\n\\t--ck-color-switch-button-off-background:\\t\\t\\t\\t\\thsl(0, 0%, 57.6%);\\n\\t--ck-color-switch-button-off-hover-background:\\t\\t\\t\\thsl(0, 0%, 49%);\\n\\t--ck-color-switch-button-on-background:\\t\\t\\t\\t\\t\\tvar(--ck-color-button-action-background);\\n\\t--ck-color-switch-button-on-hover-background:\\t\\t\\t\\thsl(104, 53.2%, 40.2%);\\n\\t--ck-color-switch-button-inner-background:\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-switch-button-inner-shadow:\\t\\t\\t\\t\\t\\thsla(0, 0%, 0%, 0.1);\\n\\n\\t/* -- Dropdown ------------------------------------------------------------------------------ */\\n\\n\\t--ck-color-dropdown-panel-background: \\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-dropdown-panel-border: \\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-border);\\n\\n\\t/* -- Input --------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-input-background: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-input-border: \\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-border);\\n\\t--ck-color-input-error-border:\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-error);\\n\\t--ck-color-input-text: \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-text);\\n\\t--ck-color-input-disabled-background: \\t\\t\\t\\t\\t\\thsl(0, 0%, 95%);\\n\\t--ck-color-input-disabled-border: \\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-border);\\n\\t--ck-color-input-disabled-text: \\t\\t\\t\\t\\t\\t\\thsl(0, 0%, 46%);\\n\\n\\t/* -- List ---------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-list-background: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-list-button-hover-background: \\t\\t\\t\\t\\tvar(--ck-color-button-default-hover-background);\\n\\t--ck-color-list-button-on-background: \\t\\t\\t\\t\\t\\tvar(--ck-color-button-on-color);\\n\\t--ck-color-list-button-on-background-focus: \\t\\t\\t\\tvar(--ck-color-button-on-color);\\n\\t--ck-color-list-button-on-text:\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\n\\t/* -- Panel --------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-panel-background: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-panel-border: \\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-border);\\n\\n\\t/* -- Toolbar ------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-toolbar-background: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\t--ck-color-toolbar-border: \\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-border);\\n\\n\\t/* -- Tooltip ------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-tooltip-background: \\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-text);\\n\\t--ck-color-tooltip-text: \\t\\t\\t\\t\\t\\t\\t\\t\\tvar(--ck-color-base-background);\\n\\n\\t/* -- Engine -------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-engine-placeholder-text: \\t\\t\\t\\t\\t\\thsl(0, 0%, 44%);\\n\\n\\t/* -- Upload -------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-upload-bar-background:\\t\\t \\t\\t\\t\\t\\thsl(209, 92%, 70%);\\n\\n\\t/* -- Link -------------------------------------------------------------------------------- */\\n\\n\\t--ck-color-link-default:\\t\\t\\t\\t\\t\\t\\t\\t\\thsl(240, 100%, 47%);\\n\\t--ck-color-link-selected-background:\\t\\t\\t\\t\\t\\thsla(201, 100%, 56%, 0.1);\\n\\t--ck-color-link-fake-selection:\\t\\t\\t\\t\\t\\t\\t\\thsla(201, 100%, 56%, 0.3);\\n\\n\\t/* -- Search result highlight ---------------------------------------------------------------- */\\n\\n\\t--ck-color-highlight-background:\\t\\t\\t\\t\\t\\t\\thsl(60, 100%, 50%)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t/**\\n\\t * An opacity value of disabled UI item.\\n\\t */\\n\\t--ck-disabled-opacity: .5;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t/**\\n\\t * The geometry of the of focused element's outer shadow.\\n\\t */\\n\\t--ck-focus-outer-shadow-geometry: 0 0 0 3px;\\n\\n\\t/**\\n\\t * A visual style of focused element's outer shadow.\\n\\t */\\n\\t--ck-focus-outer-shadow: var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);\\n\\n\\t/**\\n\\t * A visual style of focused element's outer shadow (when disabled).\\n\\t */\\n\\t--ck-focus-disabled-outer-shadow: var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);\\n\\n\\t/**\\n\\t * A visual style of focused element's outer shadow (when has errors).\\n\\t */\\n\\t--ck-focus-error-outer-shadow: var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);\\n\\n\\t/**\\n\\t * A visual style of focused element's border or outline.\\n\\t */\\n\\t--ck-focus-ring: 1px solid var(--ck-color-focus-border);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-font-size-base: 13px;\\n\\t--ck-line-height-base: 1.84615;\\n\\t--ck-font-face: Helvetica, Arial, Tahoma, Verdana, Sans-Serif;\\n\\n\\t--ck-font-size-tiny: 0.7em;\\n\\t--ck-font-size-small: 0.75em;\\n\\t--ck-font-size-normal: 1em;\\n\\t--ck-font-size-big: 1.4em;\\n\\t--ck-font-size-large: 1.8em;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t/* This is super-important. This is **manually** adjusted so a button without an icon\\n\\tis never smaller than a button with icon, additionally making sure that text-less buttons\\n\\tare perfect squares. The value is also shared by other components which should stay \\\"in-line\\\"\\n\\twith buttons. */\\n\\t--ck-ui-component-min-height: 2.3em;\\n}\\n\\n/**\\n * Resets an element, ignoring its children.\\n */\\n.ck.ck-reset,\\n.ck.ck-reset_all,\\n.ck-reset_all *:not(.ck-reset_all-excluded *) {\\n\\t/* Do not include inheritable rules here. */\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tborder: 0;\\n\\tbackground: transparent;\\n\\ttext-decoration: none;\\n\\tvertical-align: middle;\\n\\ttransition: none;\\n\\n\\t/* https://github.com/ckeditor/ckeditor5-theme-lark/issues/105 */\\n\\tword-wrap: break-word;\\n}\\n\\n/**\\n * Resets an element AND its children.\\n */\\n.ck.ck-reset_all,\\n.ck-reset_all *:not(.ck-reset_all-excluded *) {\\n\\t/* These are rule inherited by all children elements. */\\n\\tborder-collapse: collapse;\\n\\tfont: normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);\\n\\tcolor: var(--ck-color-text);\\n\\ttext-align: left;\\n\\twhite-space: nowrap;\\n\\tcursor: auto;\\n\\tfloat: none;\\n}\\n\\n.ck-reset_all {\\n\\t& .ck-rtl *:not(.ck-reset_all-excluded *) {\\n\\t\\ttext-align: right;\\n\\t}\\n\\n\\t& iframe:not(.ck-reset_all-excluded *) {\\n\\t\\t/* For IE */\\n\\t\\tvertical-align: inherit;\\n\\t}\\n\\n\\t& textarea:not(.ck-reset_all-excluded *) {\\n\\t\\twhite-space: pre-wrap;\\n\\t}\\n\\n\\t& textarea:not(.ck-reset_all-excluded *),\\n\\t& input[type=\\\"text\\\"]:not(.ck-reset_all-excluded *),\\n\\t& input[type=\\\"password\\\"]:not(.ck-reset_all-excluded *) {\\n\\t\\tcursor: text;\\n\\t}\\n\\n\\t& textarea[disabled]:not(.ck-reset_all-excluded *),\\n\\t& input[type=\\\"text\\\"][disabled]:not(.ck-reset_all-excluded *),\\n\\t& input[type=\\\"password\\\"][disabled]:not(.ck-reset_all-excluded *) {\\n\\t\\tcursor: default;\\n\\t}\\n\\n\\t& fieldset:not(.ck-reset_all-excluded *) {\\n\\t\\tpadding: 10px;\\n\\t\\tborder: 2px groove hsl(255, 7%, 88%);\\n\\t}\\n\\n\\t& button:not(.ck-reset_all-excluded *)::-moz-focus-inner {\\n\\t\\t/* See http://stackoverflow.com/questions/5517744/remove-extra-button-spacing-padding-in-firefox */\\n\\t\\tpadding: 0;\\n\\t\\tborder: 0\\n\\t}\\n}\\n\\n/**\\n * Default UI rules for RTL languages.\\n */\\n.ck[dir=\\\"rtl\\\"],\\n.ck[dir=\\\"rtl\\\"] .ck {\\n\\ttext-align: right;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * Default border-radius value.\\n */\\n:root{\\n\\t--ck-border-radius: 2px;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t/**\\n\\t * A visual style of element's inner shadow (i.e. input).\\n\\t */\\n\\t--ck-inner-shadow: 2px 2px 3px var(--ck-color-shadow-inner) inset;\\n\\n\\t/**\\n\\t * A visual style of element's drop shadow (i.e. panel).\\n\\t */\\n\\t--ck-drop-shadow: 0 1px 2px 1px var(--ck-color-shadow-drop);\\n\\n\\t/**\\n\\t * A visual style of element's active shadow (i.e. comment or suggestion).\\n\\t */\\n\\t--ck-drop-shadow-active: 0 3px 6px 1px var(--ck-color-shadow-drop-active);\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-spacing-unit: \\t\\t\\t\\t\\t\\t0.6em;\\n\\t--ck-spacing-large: \\t\\t\\t\\t\\tcalc(var(--ck-spacing-unit) * 1.5);\\n\\t--ck-spacing-standard: \\t\\t\\t\\t\\tvar(--ck-spacing-unit);\\n\\t--ck-spacing-medium: \\t\\t\\t\\t\\tcalc(var(--ck-spacing-unit) * 0.8);\\n\\t--ck-spacing-small: \\t\\t\\t\\t\\tcalc(var(--ck-spacing-unit) * 0.5);\\n\\t--ck-spacing-tiny: \\t\\t\\t\\t\\t\\tcalc(var(--ck-spacing-unit) * 0.3);\\n\\t--ck-spacing-extra-tiny: \\t\\t\\t\\tcalc(var(--ck-spacing-unit) * 0.16);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2;--ck-resizer-border-radius:var(--ck-border-radius);--ck-resizer-tooltip-offset:10px;--ck-resizer-tooltip-height:calc(var(--ck-spacing-small)*2 + 10px)}.ck .ck-widget,.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);color:var(--ck-color-resizer-tooltip-text);display:block;font-size:var(--ck-font-size-tiny);height:var(--ck-resizer-tooltip-height);line-height:var(--ck-resizer-tooltip-height);padding:0 var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-above-center,.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{left:var(--ck-resizer-tooltip-offset);top:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{right:var(--ck-resizer-tooltip-offset);top:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-above-center{left:50%;top:calc(var(--ck-resizer-tooltip-height)*-1);transform:translate(-50%)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-color:transparent;outline-style:solid;outline-width:var(--ck-widget-outline-thickness);transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{background-color:var(--ck-color-widget-editable-focus-background);border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;outline:none}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{background-color:transparent;border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;box-sizing:border-box;left:calc(0px - var(--ck-widget-outline-thickness));opacity:0;padding:4px;top:0;transform:translateY(-100%);transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{color:var(--ck-color-widget-drag-handler-icon-color);height:var(--ck-widget-handler-icon-size);width:var(--ck-widget-handler-icon-size)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle{background-color:var(--ck-color-widget-hover-border);opacity:1}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle{background-color:var(--ck-color-focus-border);opacity:1}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck.ck-editor__editable.ck-read-only .ck-widget{transition:none}.ck.ck-editor__editable.ck-read-only .ck-widget:not(.ck-widget_selected){--ck-widget-outline-thickness:0px}.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle:hover>.ck-widget__selection-handle:hover,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle>.ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle>.ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child,.ck.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-widget/widget.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_focus.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/mixins/_shadow.css\"],\"names\":[],\"mappings\":\"AAKA,MACC,+CAAgD,CAChD,6CAAsD,CACtD,uCAAgD,CAEhD,kDAAmD,CACnD,gCAAiC,CACjC,kEACD,CAOA,8DAEC,iBAqBD,CAnBC,4EACC,iBAOD,CALC,qFAGC,aACD,CASD,iLACC,kBACD,CAGD,kBACC,qDAAsD,CAEtD,qDAAsD,CACtD,6CAA8C,CAF9C,0CAA2C,CAI3C,aAAc,CADd,kCAAmC,CAGnC,uCAAwC,CACxC,4CAA6C,CAF7C,iCAsCD,CAlCC,8NAKC,iBACD,CAEA,0CAEC,qCAAsC,CADtC,oCAED,CAEA,2CAEC,sCAAuC,CADvC,oCAED,CAEA,8CACC,uCAAwC,CACxC,sCACD,CAEA,6CACC,uCAAwC,CACxC,qCACD,CAGA,8CAEC,QAAS,CADT,6CAAgD,CAEhD,yBACD,CCjFD,MACC,iCAAkC,CAClC,kCAAmC,CACnC,4CAA6C,CAC7C,wCAAyC,CAEzC,wCAAiD,CACjD,sCAAkD,CAClD,2EAA4E,CAC5E,yEACD,CAEA,eAGC,yBAA0B,CAD1B,mBAAoB,CADpB,gDAAiD,CAGjD,6GAUD,CARC,0EAEC,6EACD,CAEA,qBACC,iDACD,CAGD,gCACC,4BAWD,CAPC,yGAKC,iEAAkE,CCnCnE,2BAA2B,CCF3B,qCAA8B,CDC9B,YDqCA,CAIA,4EAKC,4BAA6B,CAa7B,iEAAkE,CAhBlE,qBAAsB,CAoBtB,mDAAoD,CAhBpD,SAAU,CALV,WAAY,CAsBZ,KAAM,CAFN,2BAA4B,CAT5B,6SAgCD,CAnBC,qFAIC,oDAAqD,CADrD,yCAA0C,CAD1C,wCAWD,CANC,kHACC,SAAU,CAGV,+DACD,CAID,wHACC,SACD,CAID,kFAEC,oDAAqD,CADrD,SAED,CAKC,oMAEC,6CAA8C,CAD9C,SAOD,CAHC,gRACC,SACD,CAOH,qFACC,SAAU,CACV,oDACD,CAGA,gDAEC,eAkBD,CAhBC,yEAOC,iCACD,CAGC,gOAEC,gDACD,CAOD,wIAEC,mDAQD,CALE,ghBAEC,gDACD,CAKH,yKAOC,yDACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-color-resizer: var(--ck-color-focus-border);\\n\\t--ck-color-resizer-tooltip-background: hsl(0, 0%, 15%);\\n\\t--ck-color-resizer-tooltip-text: hsl(0, 0%, 95%);\\n\\n\\t--ck-resizer-border-radius: var(--ck-border-radius);\\n\\t--ck-resizer-tooltip-offset: 10px;\\n\\t--ck-resizer-tooltip-height: calc(var(--ck-spacing-small) * 2 + 10px);\\n}\\n\\n.ck .ck-widget {\\n\\t/* This is neccessary for type around UI to be positioned properly. */\\n\\tposition: relative;\\n}\\n\\n.ck .ck-widget.ck-widget_with-selection-handle {\\n\\t/* Make the widget wrapper a relative positioning container for the drag handle. */\\n\\tposition: relative;\\n\\n\\t& .ck-widget__selection-handle {\\n\\t\\tposition: absolute;\\n\\n\\t\\t& .ck-icon {\\n\\t\\t\\t/* Make sure the icon in not a subject to font-size or line-height to avoid\\n\\t\\t\\tunnecessary spacing around it. */\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t}\\n\\n\\t/* Show the selection handle on mouse hover over the widget, but not for nested widgets. */\\n\\t&:hover > .ck-widget__selection-handle {\\n\\t\\tvisibility: visible;\\n\\t}\\n\\n\\t/* Show the selection handle when the widget is selected, but not for nested widgets. */\\n\\t&.ck-widget_selected > .ck-widget__selection-handle {\\n\\t\\tvisibility: visible;\\n\\t}\\n}\\n\\n.ck .ck-size-view {\\n\\tbackground: var(--ck-color-resizer-tooltip-background);\\n\\tcolor: var(--ck-color-resizer-tooltip-text);\\n\\tborder: 1px solid var(--ck-color-resizer-tooltip-text);\\n\\tborder-radius: var(--ck-resizer-border-radius);\\n\\tfont-size: var(--ck-font-size-tiny);\\n\\tdisplay: block;\\n\\tpadding: 0 var(--ck-spacing-small);\\n\\theight: var(--ck-resizer-tooltip-height);\\n\\tline-height: var(--ck-resizer-tooltip-height);\\n\\n\\t&.ck-orientation-top-left,\\n\\t&.ck-orientation-top-right,\\n\\t&.ck-orientation-bottom-right,\\n\\t&.ck-orientation-bottom-left,\\n\\t&.ck-orientation-above-center {\\n\\t\\tposition: absolute;\\n\\t}\\n\\n\\t&.ck-orientation-top-left {\\n\\t\\ttop: var(--ck-resizer-tooltip-offset);\\n\\t\\tleft: var(--ck-resizer-tooltip-offset);\\n\\t}\\n\\n\\t&.ck-orientation-top-right {\\n\\t\\ttop: var(--ck-resizer-tooltip-offset);\\n\\t\\tright: var(--ck-resizer-tooltip-offset);\\n\\t}\\n\\n\\t&.ck-orientation-bottom-right {\\n\\t\\tbottom: var(--ck-resizer-tooltip-offset);\\n\\t\\tright: var(--ck-resizer-tooltip-offset);\\n\\t}\\n\\n\\t&.ck-orientation-bottom-left {\\n\\t\\tbottom: var(--ck-resizer-tooltip-offset);\\n\\t\\tleft: var(--ck-resizer-tooltip-offset);\\n\\t}\\n\\n\\t/* Class applied if the widget is too small to contain the size label */\\n\\t&.ck-orientation-above-center {\\n\\t\\ttop: calc(var(--ck-resizer-tooltip-height) * -1);\\n\\t\\tleft: 50%;\\n\\t\\ttransform: translate(-50%);\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n@import \\\"../mixins/_focus.css\\\";\\n@import \\\"../mixins/_shadow.css\\\";\\n\\n:root {\\n\\t--ck-widget-outline-thickness: 3px;\\n\\t--ck-widget-handler-icon-size: 16px;\\n\\t--ck-widget-handler-animation-duration: 200ms;\\n\\t--ck-widget-handler-animation-curve: ease;\\n\\n\\t--ck-color-widget-blurred-border: hsl(0, 0%, 87%);\\n\\t--ck-color-widget-hover-border: hsl(43, 100%, 62%);\\n\\t--ck-color-widget-editable-focus-background: var(--ck-color-base-background);\\n\\t--ck-color-widget-drag-handler-icon-color: var(--ck-color-base-background);\\n}\\n\\n.ck .ck-widget {\\n\\toutline-width: var(--ck-widget-outline-thickness);\\n\\toutline-style: solid;\\n\\toutline-color: transparent;\\n\\ttransition: outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);\\n\\n\\t&.ck-widget_selected,\\n\\t&.ck-widget_selected:hover {\\n\\t\\toutline: var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border);\\n\\t}\\n\\n\\t&:hover {\\n\\t\\toutline-color: var(--ck-color-widget-hover-border);\\n\\t}\\n}\\n\\n.ck .ck-editor__nested-editable {\\n\\tborder: 1px solid transparent;\\n\\n\\t/* The :focus style is applied before .ck-editor__nested-editable_focused class is rendered in the view.\\n\\tThese styles show a different border for a blink of an eye, so `:focus` need to have same styles applied. */\\n\\t&.ck-editor__nested-editable_focused,\\n\\t&:focus {\\n\\t\\t@mixin ck-focus-ring;\\n\\t\\t@mixin ck-box-shadow var(--ck-inner-shadow);\\n\\n\\t\\tbackground-color: var(--ck-color-widget-editable-focus-background);\\n\\t}\\n}\\n\\n.ck .ck-widget.ck-widget_with-selection-handle {\\n\\t& .ck-widget__selection-handle {\\n\\t\\tpadding: 4px;\\n\\t\\tbox-sizing: border-box;\\n\\n\\t\\t/* Background and opacity will be animated as the handler shows up or the widget gets selected. */\\n\\t\\tbackground-color: transparent;\\n\\t\\topacity: 0;\\n\\n\\t\\t/* Transition:\\n\\t\\t   * background-color for the .ck-widget_selected state change,\\n\\t\\t   * visibility for hiding the handler,\\n\\t\\t   * opacity for the proper look of the icon when the handler disappears. */\\n\\t\\ttransition:\\n\\t\\t\\tbackground-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),\\n\\t\\t\\tvisibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),\\n\\t\\t\\topacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);\\n\\n\\t\\t/* Make only top corners round. */\\n\\t\\tborder-radius: var(--ck-border-radius) var(--ck-border-radius) 0 0;\\n\\n\\t\\t/* Place the drag handler outside the widget wrapper. */\\n\\t\\ttransform: translateY(-100%);\\n\\t\\tleft: calc(0px - var(--ck-widget-outline-thickness));\\n\\t\\ttop: 0;\\n\\n\\t\\t& .ck-icon {\\n\\t\\t\\t/* Make sure the dimensions of the icon are independent of the fon-size of the content. */\\n\\t\\t\\twidth: var(--ck-widget-handler-icon-size);\\n\\t\\t\\theight: var(--ck-widget-handler-icon-size);\\n\\t\\t\\tcolor: var(--ck-color-widget-drag-handler-icon-color);\\n\\n\\t\\t\\t/* The \\\"selected\\\" part of the icon is invisible by default */\\n\\t\\t\\t& .ck-icon__selected-indicator {\\n\\t\\t\\t\\topacity: 0;\\n\\n\\t\\t\\t\\t/* Note: The animation is longer on purpose. Simply feels better. */\\n\\t\\t\\t\\ttransition: opacity 300ms var(--ck-widget-handler-animation-curve);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/* Advertise using the look of the icon that once clicked the handler, the widget will be selected. */\\n\\t\\t&:hover .ck-icon .ck-icon__selected-indicator {\\n\\t\\t\\topacity: 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/* Show the selection handler on mouse hover over the widget, but not for nested widgets. */\\n\\t&:hover > .ck-widget__selection-handle {\\n\\t\\topacity: 1;\\n\\t\\tbackground-color: var(--ck-color-widget-hover-border);\\n\\t}\\n\\n\\t/* Show the selection handler when the widget is selected, but not for nested widgets. */\\n\\t&.ck-widget_selected,\\n\\t&.ck-widget_selected:hover {\\n\\t\\t& > .ck-widget__selection-handle {\\n\\t\\t\\topacity: 1;\\n\\t\\t\\tbackground-color: var(--ck-color-focus-border);\\n\\n\\t\\t\\t/* When the widget is selected, notify the user using the proper look of the icon. */\\n\\t\\t\\t& .ck-icon .ck-icon__selected-indicator {\\n\\t\\t\\t\\topacity: 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/* In a RTL environment, align the selection handler to the right side of the widget */\\n/* stylelint-disable-next-line no-descending-specificity */\\n.ck[dir=\\\"rtl\\\"] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle {\\n\\tleft: auto;\\n\\tright: calc(0px - var(--ck-widget-outline-thickness));\\n}\\n\\n/* https://github.com/ckeditor/ckeditor5/issues/6415 */\\n.ck.ck-editor__editable.ck-read-only .ck-widget {\\n\\t/* Prevent the :hover outline from showing up because of the used outline-color transition. */\\n\\ttransition: none;\\n\\n\\t&:not(.ck-widget_selected) {\\n\\t\\t/* Disable visual effects of hover/active widget when CKEditor is in readOnly mode.\\n\\t\\t * See: https://github.com/ckeditor/ckeditor5/issues/1261\\n\\t\\t *\\n\\t\\t * Leave the unit because this custom property is used in calc() by other features.\\n\\t\\t * See: https://github.com/ckeditor/ckeditor5/issues/6775\\n\\t\\t */\\n\\t\\t--ck-widget-outline-thickness: 0px;\\n\\t}\\n\\n\\t&.ck-widget_with-selection-handle {\\n\\t\\t& .ck-widget__selection-handle,\\n\\t\\t& .ck-widget__selection-handle:hover {\\n\\t\\t\\tbackground: var(--ck-color-widget-blurred-border);\\n\\t\\t}\\n\\t}\\n}\\n\\n/* Style the widget when it's selected but the editable it belongs to lost focus. */\\n/* stylelint-disable-next-line no-descending-specificity */\\n.ck.ck-editor__editable.ck-blurred .ck-widget {\\n\\t&.ck-widget_selected,\\n\\t&.ck-widget_selected:hover {\\n\\t\\toutline-color: var(--ck-color-widget-blurred-border);\\n\\n\\t\\t&.ck-widget_with-selection-handle {\\n\\t\\t\\t& > .ck-widget__selection-handle,\\n\\t\\t\\t& > .ck-widget__selection-handle:hover {\\n\\t\\t\\t\\tbackground: var(--ck-color-widget-blurred-border);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n.ck.ck-editor__editable > .ck-widget.ck-widget_with-selection-handle:first-child,\\n.ck.ck-editor__editable blockquote > .ck-widget.ck-widget_with-selection-handle:first-child {\\n\\t/* Do not crop selection handler if a widget is a first-child in the blockquote or in the root editable.\\n\\tIn fact, anything with overflow: hidden.\\n\\thttps://github.com/ckeditor/ckeditor5-block-quote/issues/28\\n\\thttps://github.com/ckeditor/ckeditor5-widget/issues/44\\n\\thttps://github.com/ckeditor/ckeditor5-widget/issues/66 */\\n\\tmargin-top: calc(1em + var(--ck-widget-handler-icon-size));\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A visual style of focused element's border.\\n */\\n@define-mixin ck-focus-ring {\\n\\t/* Disable native outline. */\\n\\toutline: none;\\n\\tborder: var(--ck-focus-ring)\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n/**\\n * A helper to combine multiple shadows.\\n */\\n@define-mixin ck-box-shadow $shadowA, $shadowB: 0 0 {\\n\\tbox-shadow: $shadowA, $shadowB;\\n}\\n\\n/**\\n * Gives an element a drop shadow so it looks like a floating panel.\\n */\\n@define-mixin ck-drop-shadow {\\n\\t@mixin ck-box-shadow var(--ck-drop-shadow);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;left:0;pointer-events:none;position:absolute;top:0}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{pointer-events:all;position:absolute}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{cursor:nesw-resize}:root{--ck-resizer-size:10px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-border-width:1px}.ck .ck-widget__resizer{outline:1px solid var(--ck-color-resizer)}.ck .ck-widget__resizer__handle{background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius);height:var(--ck-resizer-size);width:var(--ck-resizer-size)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{left:var(--ck-resizer-offset);top:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{right:var(--ck-resizer-offset);top:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-widget/widgetresize.css\"],\"names\":[],\"mappings\":\"AAKA,4BAEC,iBACD,CAEA,wBACC,YAAa,CAMb,MAAO,CAFP,mBAAoB,CAHpB,iBAAkB,CAMlB,KACD,CAGC,2EACC,aACD,CAGD,gCAIC,kBAAmB,CAHnB,iBAcD,CATC,4IAEC,kBACD,CAEA,4IAEC,kBACD,CCpCD,MACC,sBAAuB,CAGvB,yDAAiE,CACjE,6BACD,CAEA,wBACC,yCACD,CAEA,gCAGC,uCAAwC,CACxC,gDAA6D,CAC7D,6CAA8C,CAH9C,6BAA8B,CAD9B,4BAyBD,CAnBC,oEAEC,6BAA8B,CAD9B,4BAED,CAEA,qEAEC,8BAA+B,CAD/B,4BAED,CAEA,wEACC,+BAAgC,CAChC,8BACD,CAEA,uEACC,+BAAgC,CAChC,6BACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck .ck-widget_with-resizer {\\n\\t/* Make the widget wrapper a relative positioning container for the drag handle. */\\n\\tposition: relative;\\n}\\n\\n.ck .ck-widget__resizer {\\n\\tdisplay: none;\\n\\tposition: absolute;\\n\\n\\t/* The wrapper itself should not interfere with the pointer device, only the handles should. */\\n\\tpointer-events: none;\\n\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.ck-focused .ck-widget_with-resizer.ck-widget_selected {\\n\\t& > .ck-widget__resizer {\\n\\t\\tdisplay: block;\\n\\t}\\n}\\n\\n.ck .ck-widget__resizer__handle {\\n\\tposition: absolute;\\n\\n\\t/* Resizers are the only UI elements that should interfere with a pointer device. */\\n\\tpointer-events: all;\\n\\n\\t&.ck-widget__resizer__handle-top-left,\\n\\t&.ck-widget__resizer__handle-bottom-right {\\n\\t\\tcursor: nwse-resize;\\n\\t}\\n\\n\\t&.ck-widget__resizer__handle-top-right,\\n\\t&.ck-widget__resizer__handle-bottom-left {\\n\\t\\tcursor: nesw-resize;\\n\\t}\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-resizer-size: 10px;\\n\\n\\t/* Set the resizer with a 50% offset. */\\n\\t--ck-resizer-offset: calc( ( var(--ck-resizer-size) / -2 ) - 2px);\\n\\t--ck-resizer-border-width: 1px;\\n}\\n\\n.ck .ck-widget__resizer {\\n\\toutline: 1px solid var(--ck-color-resizer);\\n}\\n\\n.ck .ck-widget__resizer__handle {\\n\\twidth: var(--ck-resizer-size);\\n\\theight: var(--ck-resizer-size);\\n\\tbackground: var(--ck-color-focus-border);\\n\\tborder: var(--ck-resizer-border-width) solid hsl(0, 0%, 100%);\\n\\tborder-radius: var(--ck-resizer-border-radius);\\n\\n\\t&.ck-widget__resizer__handle-top-left {\\n\\t\\ttop: var(--ck-resizer-offset);\\n\\t\\tleft: var(--ck-resizer-offset);\\n\\t}\\n\\n\\t&.ck-widget__resizer__handle-top-right {\\n\\t\\ttop: var(--ck-resizer-offset);\\n\\t\\tright: var(--ck-resizer-offset);\\n\\t}\\n\\n\\t&.ck-widget__resizer__handle-bottom-right {\\n\\t\\tbottom: var(--ck-resizer-offset);\\n\\t\\tright: var(--ck-resizer-offset);\\n\\t}\\n\\n\\t&.ck-widget__resizer__handle-bottom-left {\\n\\t\\tbottom: var(--ck-resizer-offset);\\n\\t\\tleft: var(--ck-resizer-offset);\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ck .ck-widget .ck-widget__type-around__button{display:block;overflow:hidden;position:absolute;z-index:var(--ck-z-default)}.ck .ck-widget .ck-widget__type-around__button svg{left:50%;position:absolute;top:50%;z-index:calc(var(--ck-z-default) + 2)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_before{left:min(10%,30px);top:calc(var(--ck-widget-outline-thickness)*-.5);transform:translateY(-50%)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_after{bottom:calc(var(--ck-widget-outline-thickness)*-.5);right:min(10%,30px);transform:translateY(50%)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{content:\\\"\\\";display:block;left:1px;position:absolute;top:1px;z-index:calc(var(--ck-z-default) + 1)}.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__fake-caret{display:none;left:0;position:absolute;right:0}.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__fake-caret{left:calc(var(--ck-widget-outline-thickness)*-1);right:calc(var(--ck-widget-outline-thickness)*-1)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__fake-caret{display:block;top:calc(var(--ck-widget-outline-thickness)*-1 - 1px)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__fake-caret{bottom:calc(var(--ck-widget-outline-thickness)*-1 - 1px);display:block}.ck.ck-editor__editable.ck-read-only .ck-widget__type-around,.ck.ck-editor__editable.ck-restricted-editing_mode_restricted .ck-widget__type-around,.ck.ck-editor__editable.ck-widget__type-around_disabled .ck-widget__type-around{display:none}:root{--ck-widget-type-around-button-size:20px;--ck-color-widget-type-around-button-active:var(--ck-color-focus-border);--ck-color-widget-type-around-button-hover:var(--ck-color-widget-hover-border);--ck-color-widget-type-around-button-blurred-editable:var(--ck-color-widget-blurred-border);--ck-color-widget-type-around-button-radar-start-alpha:0;--ck-color-widget-type-around-button-radar-end-alpha:.3;--ck-color-widget-type-around-button-icon:var(--ck-color-base-background)}.ck .ck-widget .ck-widget__type-around__button{background:var(--ck-color-widget-type-around-button);border-radius:100px;height:var(--ck-widget-type-around-button-size);opacity:0;pointer-events:none;transition:opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),background var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);width:var(--ck-widget-type-around-button-size)}.ck .ck-widget .ck-widget__type-around__button svg{height:8px;margin-top:1px;transform:translate(-50%,-50%);transition:transform .5s ease;width:10px}.ck .ck-widget .ck-widget__type-around__button svg *{stroke-dasharray:10;stroke-dashoffset:0;fill:none;stroke:var(--ck-color-widget-type-around-button-icon);stroke-width:1.5px;stroke-linecap:round;stroke-linejoin:round}.ck .ck-widget .ck-widget__type-around__button svg line{stroke-dasharray:7}.ck .ck-widget .ck-widget__type-around__button:hover{animation:ck-widget-type-around-button-sonar 1s ease infinite}.ck .ck-widget .ck-widget__type-around__button:hover svg polyline{animation:ck-widget-type-around-arrow-dash 2s linear}.ck .ck-widget .ck-widget__type-around__button:hover svg line{animation:ck-widget-type-around-arrow-tip-dash 2s linear}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:1;pointer-events:auto}.ck .ck-widget:not(.ck-widget_selected)>.ck-widget__type-around>.ck-widget__type-around__button{background:var(--ck-color-widget-type-around-button-hover)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover{background:var(--ck-color-widget-type-around-button-active)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{background:linear-gradient(135deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.3));border-radius:100px;height:calc(var(--ck-widget-type-around-button-size) - 2px);width:calc(var(--ck-widget-type-around-button-size) - 2px)}.ck .ck-widget.ck-widget_with-selection-handle>.ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:20px}.ck .ck-widget .ck-widget__type-around__fake-caret{animation:ck-widget-type-around-fake-caret-pulse 1s linear infinite normal forwards;background:var(--ck-color-base-text);height:1px;outline:1px solid hsla(0,0%,100%,.5);pointer-events:none}.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_after,.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_before{outline-color:transparent}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected:hover,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer,.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle{opacity:0}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:0;margin-right:20px}.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover){background:var(--ck-color-widget-type-around-button-blurred-editable)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover) svg *{stroke:#999}@keyframes ck-widget-type-around-arrow-dash{0%{stroke-dashoffset:10}20%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-arrow-tip-dash{0%,20%{stroke-dashoffset:7}40%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-button-sonar{0%{box-shadow:0 0 0 0 hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}50%{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-end-alpha))}to{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}}@keyframes ck-widget-type-around-fake-caret-pulse{0%{opacity:1}49%{opacity:1}50%{opacity:0}99%{opacity:0}to{opacity:1}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@ckeditor/ckeditor5-widget/theme/widgettypearound.css\",\"webpack://./node_modules/@ckeditor/ckeditor5-theme-lark/theme/ckeditor5-widget/widgettypearound.css\"],\"names\":[],\"mappings\":\"AASC,+CACC,aAAc,CAEd,eAAgB,CADhB,iBAAkB,CAElB,2BAwBD,CAtBC,mDAGC,QAAS,CAFT,iBAAkB,CAClB,OAAQ,CAER,qCACD,CAEA,qFAGC,kBAAoB,CADpB,gDAAoD,CAGpD,0BACD,CAEA,oFAEC,mDAAuD,CACvD,mBAAqB,CAErB,yBACD,CAUA,mLACC,UAAW,CACX,aAAc,CAGd,QAAS,CAFT,iBAAkB,CAClB,OAAQ,CAER,qCACD,CAMD,2EACC,YAAa,CAEb,MAAO,CADP,iBAAkB,CAElB,OACD,CAOA,iFACC,gDAAqD,CACrD,iDACD,CAKA,wHAEC,aAAc,CADd,qDAED,CAKA,uHACC,wDAA6D,CAC7D,aACD,CAoBD,mOACC,YACD,CC3GA,MACC,wCAAyC,CACzC,wEAAyE,CACzE,8EAA+E,CAC/E,2FAA4F,CAC5F,wDAAyD,CACzD,uDAAwD,CACxD,yEACD,CAgBC,+CAGC,oDAAqD,CACrD,mBAAoB,CAFpB,+CAAgD,CAVjD,SAAU,CACV,mBAAoB,CAYnB,uMAAyM,CAJzM,8CAkDD,CA1CC,mDAEC,UAAW,CAGX,cAAe,CAFf,8BAA+B,CAC/B,6BAA8B,CAH9B,UAoBD,CAdC,qDACC,mBAAoB,CACpB,mBAAoB,CAEpB,SAAU,CACV,qDAAsD,CACtD,kBAAmB,CACnB,oBAAqB,CACrB,qBACD,CAEA,wDACC,kBACD,CAGD,qDAIC,6DAcD,CARE,kEACC,oDACD,CAEA,8DACC,wDACD,CAUF,uKAvED,SAAU,CACV,mBAwEC,CAOD,gGACC,0DACD,CAOA,uKAEC,2DAQD,CANC,mLAIC,uEAAkF,CADlF,mBAAoB,CADpB,2DAA4D,CAD5D,0DAID,CAOD,8GACC,gBACD,CAKA,mDAGC,mFAAoF,CAOpF,oCAAqC,CARrC,UAAW,CAOX,oCAAwC,CARxC,mBAUD,CAOC,6JAEC,yBACD,CAUA,yKACC,iDACD,CAMA,uOAlJD,SAAU,CACV,mBAmJC,CAoBA,6yBACC,SACD,CASF,uHACC,aAAc,CACd,iBACD,CAYG,iRAlMF,SAAU,CACV,mBAmME,CAQH,kIACC,qEAKD,CAHC,wIACC,WACD,CAGD,4CACC,GACC,oBACD,CACA,OACC,mBACD,CACD,CAEA,gDACC,OACC,mBACD,CACA,OACC,mBACD,CACD,CAEA,8CACC,GACC,6HACD,CACA,IACC,6HACD,CACA,GACC,+HACD,CACD,CAEA,kDACC,GACC,SACD,CACA,IACC,SACD,CACA,IACC,SACD,CACA,IACC,SACD,CACA,GACC,SACD,CACD\",\"sourcesContent\":[\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n.ck .ck-widget {\\n\\t/*\\n\\t * Styles of the type around buttons\\n\\t */\\n\\t& .ck-widget__type-around__button {\\n\\t\\tdisplay: block;\\n\\t\\tposition: absolute;\\n\\t\\toverflow: hidden;\\n\\t\\tz-index: var(--ck-z-default);\\n\\n\\t\\t& svg {\\n\\t\\t\\tposition: absolute;\\n\\t\\t\\ttop: 50%;\\n\\t\\t\\tleft: 50%;\\n\\t\\t\\tz-index: calc(var(--ck-z-default) + 2);\\n\\t\\t}\\n\\n\\t\\t&.ck-widget__type-around__button_before {\\n\\t\\t\\t/* Place it in the middle of the outline */\\n\\t\\t\\ttop: calc(-0.5 * var(--ck-widget-outline-thickness));\\n\\t\\t\\tleft: min(10%, 30px);\\n\\n\\t\\t\\ttransform: translateY(-50%);\\n\\t\\t}\\n\\n\\t\\t&.ck-widget__type-around__button_after {\\n\\t\\t\\t/* Place it in the middle of the outline */\\n\\t\\t\\tbottom: calc(-0.5 * var(--ck-widget-outline-thickness));\\n\\t\\t\\tright: min(10%, 30px);\\n\\n\\t\\t\\ttransform: translateY(50%);\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the buttons when:\\n\\t * - the widget is selected,\\n\\t * - or the button is being hovered (regardless of the widget state).\\n\\t */\\n\\t&.ck-widget_selected > .ck-widget__type-around > .ck-widget__type-around__button,\\n\\t& > .ck-widget__type-around > .ck-widget__type-around__button:hover {\\n\\t\\t&::after {\\n\\t\\t\\tcontent: \\\"\\\";\\n\\t\\t\\tdisplay: block;\\n\\t\\t\\tposition: absolute;\\n\\t\\t\\ttop: 1px;\\n\\t\\t\\tleft: 1px;\\n\\t\\t\\tz-index: calc(var(--ck-z-default) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the horizontal \\\"fake caret\\\" which is displayed when the user navigates using the keyboard.\\n\\t */\\n\\t& > .ck-widget__type-around > .ck-widget__type-around__fake-caret {\\n\\t\\tdisplay: none;\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\tright: 0;\\n\\t}\\n\\n\\t/*\\n\\t * When the widget is hovered the \\\"fake caret\\\" would normally be narrower than the\\n\\t * extra outline displayed around the widget. Let's extend the \\\"fake caret\\\" to match\\n\\t * the full width of the widget.\\n\\t */\\n\\t&:hover > .ck-widget__type-around > .ck-widget__type-around__fake-caret {\\n\\t\\tleft: calc( -1 * var(--ck-widget-outline-thickness) );\\n\\t\\tright: calc( -1 * var(--ck-widget-outline-thickness) );\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the horizontal \\\"fake caret\\\" when it should be displayed before the widget (backward keyboard navigation).\\n\\t */\\n\\t&.ck-widget_type-around_show-fake-caret_before > .ck-widget__type-around > .ck-widget__type-around__fake-caret {\\n\\t\\ttop: calc( -1 * var(--ck-widget-outline-thickness) - 1px );\\n\\t\\tdisplay: block;\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the horizontal \\\"fake caret\\\" when it should be displayed after the widget (forward keyboard navigation).\\n\\t */\\n\\t&.ck-widget_type-around_show-fake-caret_after > .ck-widget__type-around > .ck-widget__type-around__fake-caret {\\n\\t\\tbottom: calc( -1 * var(--ck-widget-outline-thickness) - 1px );\\n\\t\\tdisplay: block;\\n\\t}\\n}\\n\\n/*\\n * Integration with the read-only mode of the editor.\\n */\\n.ck.ck-editor__editable.ck-read-only .ck-widget__type-around {\\n\\tdisplay: none;\\n}\\n\\n/*\\n * Integration with the restricted editing mode (feature) of the editor.\\n */\\n.ck.ck-editor__editable.ck-restricted-editing_mode_restricted .ck-widget__type-around {\\n\\tdisplay: none;\\n}\\n\\n/*\\n * Integration with the #isEnabled property of the WidgetTypeAround plugin.\\n */\\n.ck.ck-editor__editable.ck-widget__type-around_disabled .ck-widget__type-around {\\n\\tdisplay: none;\\n}\\n\",\"/*\\n * Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\\n */\\n\\n:root {\\n\\t--ck-widget-type-around-button-size: 20px;\\n\\t--ck-color-widget-type-around-button-active: var(--ck-color-focus-border);\\n\\t--ck-color-widget-type-around-button-hover: var(--ck-color-widget-hover-border);\\n\\t--ck-color-widget-type-around-button-blurred-editable: var(--ck-color-widget-blurred-border);\\n\\t--ck-color-widget-type-around-button-radar-start-alpha: 0;\\n\\t--ck-color-widget-type-around-button-radar-end-alpha: .3;\\n\\t--ck-color-widget-type-around-button-icon: var(--ck-color-base-background);\\n}\\n\\n@define-mixin ck-widget-type-around-button-visible {\\n\\topacity: 1;\\n\\tpointer-events: auto;\\n}\\n\\n@define-mixin ck-widget-type-around-button-hidden {\\n\\topacity: 0;\\n\\tpointer-events: none;\\n}\\n\\n.ck .ck-widget {\\n\\t/*\\n\\t * Styles of the type around buttons\\n\\t */\\n\\t& .ck-widget__type-around__button {\\n\\t\\twidth: var(--ck-widget-type-around-button-size);\\n\\t\\theight: var(--ck-widget-type-around-button-size);\\n\\t\\tbackground: var(--ck-color-widget-type-around-button);\\n\\t\\tborder-radius: 100px;\\n\\t\\ttransition: opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve), background var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);\\n\\n\\t\\t@mixin ck-widget-type-around-button-hidden;\\n\\n\\t\\t& svg {\\n\\t\\t\\twidth: 10px;\\n\\t\\t\\theight: 8px;\\n\\t\\t\\ttransform: translate(-50%,-50%);\\n\\t\\t\\ttransition: transform .5s ease;\\n\\t\\t\\tmargin-top: 1px;\\n\\n\\t\\t\\t& * {\\n\\t\\t\\t\\tstroke-dasharray: 10;\\n\\t\\t\\t\\tstroke-dashoffset: 0;\\n\\n\\t\\t\\t\\tfill: none;\\n\\t\\t\\t\\tstroke: var(--ck-color-widget-type-around-button-icon);\\n\\t\\t\\t\\tstroke-width: 1.5px;\\n\\t\\t\\t\\tstroke-linecap: round;\\n\\t\\t\\t\\tstroke-linejoin: round;\\n\\t\\t\\t}\\n\\n\\t\\t\\t& line {\\n\\t\\t\\t\\tstroke-dasharray: 7;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t&:hover {\\n\\t\\t\\t/*\\n\\t\\t\\t * Display the \\\"sonar\\\" around the button when hovered.\\n\\t\\t\\t */\\n\\t\\t\\tanimation: ck-widget-type-around-button-sonar 1s ease infinite;\\n\\n\\t\\t\\t/*\\n\\t\\t\\t * Animate active button's icon.\\n\\t\\t\\t */\\n\\t\\t\\t& svg {\\n\\t\\t\\t\\t& polyline {\\n\\t\\t\\t\\t\\tanimation: ck-widget-type-around-arrow-dash 2s linear;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t& line {\\n\\t\\t\\t\\t\\tanimation: ck-widget-type-around-arrow-tip-dash 2s linear;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Show type around buttons when the widget gets selected or being hovered.\\n\\t */\\n\\t&.ck-widget_selected,\\n\\t&:hover {\\n\\t\\t& > .ck-widget__type-around > .ck-widget__type-around__button {\\n\\t\\t\\t@mixin ck-widget-type-around-button-visible;\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the buttons when the widget is NOT selected (but the buttons are visible\\n\\t * and still can be hovered).\\n\\t */\\n\\t&:not(.ck-widget_selected) > .ck-widget__type-around > .ck-widget__type-around__button {\\n\\t\\tbackground: var(--ck-color-widget-type-around-button-hover);\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the buttons when:\\n\\t * - the widget is selected,\\n\\t * - or the button is being hovered (regardless of the widget state).\\n\\t */\\n\\t&.ck-widget_selected > .ck-widget__type-around > .ck-widget__type-around__button,\\n\\t& > .ck-widget__type-around > .ck-widget__type-around__button:hover {\\n\\t\\tbackground: var(--ck-color-widget-type-around-button-active);\\n\\n\\t\\t&::after {\\n\\t\\t\\twidth: calc(var(--ck-widget-type-around-button-size) - 2px);\\n\\t\\t\\theight: calc(var(--ck-widget-type-around-button-size) - 2px);\\n\\t\\t\\tborder-radius: 100px;\\n\\t\\t\\tbackground: linear-gradient(135deg, hsla(0,0%,100%,0) 0%, hsla(0,0%,100%,.3) 100%);\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the \\\"before\\\" button when the widget has a selection handle. Because some space\\n\\t * is consumed by the handle, the button must be moved slightly to the right to let it breathe.\\n\\t */\\n\\t&.ck-widget_with-selection-handle > .ck-widget__type-around > .ck-widget__type-around__button_before {\\n\\t\\tmargin-left: 20px;\\n\\t}\\n\\n\\t/*\\n\\t * Styles for the horizontal \\\"fake caret\\\" which is displayed when the user navigates using the keyboard.\\n\\t */\\n\\t& .ck-widget__type-around__fake-caret {\\n\\t\\tpointer-events: none;\\n\\t\\theight: 1px;\\n\\t\\tanimation: ck-widget-type-around-fake-caret-pulse linear 1s infinite normal forwards;\\n\\n\\t\\t/*\\n\\t\\t * The semi-transparent-outline+background combo improves the contrast\\n\\t\\t * when the background underneath the fake caret is dark.\\n\\t\\t */\\n\\t\\toutline: solid 1px hsla(0, 0%, 100%, .5);\\n\\t\\tbackground: var(--ck-color-base-text);\\n\\t}\\n\\n\\t/*\\n\\t * Styles of the widget when the \\\"fake caret\\\" is blinking (e.g. upon keyboard navigation).\\n\\t * Despite the widget being physically selected in the model, its outline should disappear.\\n\\t */\\n\\t&.ck-widget_selected {\\n\\t\\t&.ck-widget_type-around_show-fake-caret_before,\\n\\t\\t&.ck-widget_type-around_show-fake-caret_after {\\n\\t\\t\\toutline-color: transparent;\\n\\t\\t}\\n\\t}\\n\\n\\t&.ck-widget_type-around_show-fake-caret_before,\\n\\t&.ck-widget_type-around_show-fake-caret_after {\\n\\t\\t/*\\n\\t\\t * When the \\\"fake caret\\\" is visible we simulate that the widget is not selected\\n\\t\\t * (despite being physically selected), so the outline color should be for the\\n\\t\\t * unselected widget.\\n\\t\\t */\\n\\t\\t&.ck-widget_selected:hover {\\n\\t\\t\\toutline-color: var(--ck-color-widget-hover-border);\\n\\t\\t}\\n\\n\\t\\t/*\\n\\t\\t * Styles of the type around buttons when the \\\"fake caret\\\" is blinking (e.g. upon keyboard navigation).\\n\\t\\t * In this state, the type around buttons would collide with the fake carets so they should disappear.\\n\\t\\t */\\n\\t\\t& > .ck-widget__type-around > .ck-widget__type-around__button {\\n\\t\\t\\t@mixin ck-widget-type-around-button-hidden;\\n\\t\\t}\\n\\n\\t\\t/*\\n\\t\\t * Fake horizontal caret integration with the selection handle. When the caret is visible, simply\\n\\t\\t * hide the handle because it intersects with the caret (and does not make much sense anyway).\\n\\t\\t */\\n\\t\\t&.ck-widget_with-selection-handle {\\n\\t\\t\\t&.ck-widget_selected,\\n\\t\\t\\t&.ck-widget_selected:hover {\\n\\t\\t\\t\\t& > .ck-widget__selection-handle {\\n\\t\\t\\t\\t\\topacity: 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/*\\n\\t\\t * Fake horizontal caret integration with the resize UI. When the caret is visible, simply\\n\\t\\t * hide the resize UI because it creates too much noise. It can be visible when the user\\n\\t\\t * hovers the widget, though.\\n\\t\\t */\\n\\t\\t&.ck-widget_selected.ck-widget_with-resizer > .ck-widget__resizer {\\n\\t\\t\\topacity: 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/*\\n * Styles for the \\\"before\\\" button when the widget has a selection handle in an RTL environment.\\n * The selection handler is aligned to the right side of the widget so there is no need to create\\n * additional space for it next to the \\\"before\\\" button.\\n */\\n.ck[dir=\\\"rtl\\\"] .ck-widget.ck-widget_with-selection-handle .ck-widget__type-around > .ck-widget__type-around__button_before {\\n\\tmargin-left: 0;\\n\\tmargin-right: 20px;\\n}\\n\\n/*\\n * Hide type around buttons when the widget is selected as a child of a selected\\n * nested editable (e.g. mulit-cell table selection).\\n *\\n * See https://github.com/ckeditor/ckeditor5/issues/7263.\\n */\\n.ck-editor__nested-editable.ck-editor__editable_selected {\\n\\t& .ck-widget {\\n\\t\\t&.ck-widget_selected,\\n\\t\\t&:hover {\\n\\t\\t\\t& > .ck-widget__type-around > .ck-widget__type-around__button {\\n\\t\\t\\t\\t@mixin ck-widget-type-around-button-hidden;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/*\\n * Styles for the buttons when the widget is selected but the user clicked outside of the editor (blurred the editor).\\n */\\n.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected > .ck-widget__type-around > .ck-widget__type-around__button:not(:hover) {\\n\\tbackground: var(--ck-color-widget-type-around-button-blurred-editable);\\n\\n\\t& svg * {\\n\\t\\tstroke: hsl(0,0%,60%);\\n\\t}\\n}\\n\\n@keyframes ck-widget-type-around-arrow-dash {\\n\\t0% {\\n\\t\\tstroke-dashoffset: 10;\\n\\t}\\n\\t20%, 100% {\\n\\t\\tstroke-dashoffset: 0;\\n\\t}\\n}\\n\\n@keyframes ck-widget-type-around-arrow-tip-dash {\\n\\t0%, 20% {\\n\\t\\tstroke-dashoffset: 7;\\n\\t}\\n\\t40%, 100% {\\n\\t\\tstroke-dashoffset: 0;\\n\\t}\\n}\\n\\n@keyframes ck-widget-type-around-button-sonar {\\n\\t0% {\\n\\t\\tbox-shadow: 0 0 0 0 hsla(var(--ck-color-focus-border-coordinates), var(--ck-color-widget-type-around-button-radar-start-alpha));\\n\\t}\\n\\t50% {\\n\\t\\tbox-shadow: 0 0 0 5px hsla(var(--ck-color-focus-border-coordinates), var(--ck-color-widget-type-around-button-radar-end-alpha));\\n\\t}\\n\\t100% {\\n\\t\\tbox-shadow: 0 0 0 5px hsla(var(--ck-color-focus-border-coordinates), var(--ck-color-widget-type-around-button-radar-start-alpha));\\n\\t}\\n}\\n\\n@keyframes ck-widget-type-around-fake-caret-pulse {\\n\\t0% {\\n\\t\\topacity: 1;\\n\\t}\\n\\t49% {\\n\\t\\topacity: 1;\\n\\t}\\n\\t50% {\\n\\t\\topacity: 0;\\n\\t}\\n\\t99% {\\n\\t\\topacity: 0;\\n\\t}\\n\\t100% {\\n\\t\\topacity: 1;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals navigator:false */\n/**\n * @module utils/env\n */\n/**\n * Safely returns `userAgent` from browser's navigator API in a lower case.\n * If navigator API is not available it will return an empty string.\n */\nexport function getUserAgent() {\n    // In some environments navigator API might not be available.\n    try {\n        return navigator.userAgent.toLowerCase();\n    }\n    catch (e) {\n        return '';\n    }\n}\nconst userAgent = getUserAgent();\n/**\n * A namespace containing environment and browser information.\n */\nconst env = {\n    isMac: isMac(userAgent),\n    isWindows: isWindows(userAgent),\n    isGecko: isGecko(userAgent),\n    isSafari: isSafari(userAgent),\n    isiOS: isiOS(userAgent),\n    isAndroid: isAndroid(userAgent),\n    isBlink: isBlink(userAgent),\n    features: {\n        isRegExpUnicodePropertySupported: isRegExpUnicodePropertySupported()\n    }\n};\nexport default env;\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is running on Macintosh or not.\n */\nexport function isMac(userAgent) {\n    return userAgent.indexOf('macintosh') > -1;\n}\n/**\n * Checks if User Agent represented by the string is running on Windows.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is running on Windows or not.\n */\nexport function isWindows(userAgent) {\n    return userAgent.indexOf('windows') > -1;\n}\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is Firefox or not.\n */\nexport function isGecko(userAgent) {\n    return !!userAgent.match(/gecko\\/\\d+/);\n}\n/**\n * Checks if User Agent represented by the string is Safari.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is Safari or not.\n */\nexport function isSafari(userAgent) {\n    return userAgent.indexOf(' applewebkit/') > -1 && userAgent.indexOf('chrome') === -1;\n}\n/**\n * Checks if User Agent represented by the string is running in iOS.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is running in iOS or not.\n */\nexport function isiOS(userAgent) {\n    // \"Request mobile site\" || \"Request desktop site\".\n    return !!userAgent.match(/iphone|ipad/i) || (isMac(userAgent) && navigator.maxTouchPoints > 0);\n}\n/**\n * Checks if User Agent represented by the string is Android mobile device.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is Safari or not.\n */\nexport function isAndroid(userAgent) {\n    return userAgent.indexOf('android') > -1;\n}\n/**\n * Checks if User Agent represented by the string is Blink engine.\n *\n * @param userAgent **Lowercase** `navigator.userAgent` string.\n * @returns Whether User Agent is Blink engine or not.\n */\nexport function isBlink(userAgent) {\n    // The Edge browser before switching to the Blink engine used to report itself as Chrome (and \"Edge/\")\n    // but after switching to the Blink it replaced \"Edge/\" with \"Edg/\".\n    return userAgent.indexOf('chrome/') > -1 && userAgent.indexOf('edge/') < 0;\n}\n/**\n * Checks if the current environment supports ES2018 Unicode properties like `\\p{P}` or `\\p{L}`.\n * More information about unicode properties might be found\n * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n */\nexport function isRegExpUnicodePropertySupported() {\n    let isSupported = false;\n    // Feature detection for Unicode properties. Added in ES2018. Currently Firefox does not support it.\n    // See https://github.com/ckeditor/ckeditor5-mention/issues/44#issuecomment-487002174.\n    try {\n        // Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n        isSupported = 'ć'.search(new RegExp('[\\\\p{L}]', 'u')) === 0;\n    }\n    catch (error) {\n        // Firefox throws a SyntaxError when the group is unsupported.\n    }\n    return isSupported;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/fastdiff\n */\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n * ```ts\n * fastDiff( '12a', '12xyza' );\n * // [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n * fastDiff( '12a', '12aa' );\n * // [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n * fastDiff( '12xyza', '12a' );\n * // [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n * fastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n * // [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n * fastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n * // [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n * ```\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n * ```ts\n * fastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n * \treturn a.value === b.value;\n * } );\n * // [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n * ```\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n * ```ts\n * let input = '12abc3';\n * const output = '2ab';\n * const changes = fastDiff( input, output );\n *\n * changes.forEach( change => {\n * \tif ( change.type == 'insert' ) {\n * \t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n * \t} else if ( change.type == 'delete' ) {\n * \t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n * \t}\n * } );\n *\n * // input equals output now\n * ```\n *\n * or in case of arrays:\n *\n * ```ts\n * let input = [ '1', '2', 'a', 'b', 'c', '3' ];\n * const output = [ '2', 'a', 'b' ];\n * const changes = fastDiff( input, output );\n *\n * changes.forEach( change => {\n * \tif ( change.type == 'insert' ) {\n * \t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n * \t} else if ( change.type == 'delete' ) {\n * \t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n * \t}\n * } );\n *\n * // input equals output now\n * ```\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n * ```ts\n * fastDiff( '12a', '12xyza', undefined, true );\n * // [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n * ```\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n * ```ts\n * const a = '1234';\n * const b = '12xyz34';\n *\n * // Both calls will return the same results (grouped changes format).\n * fastDiff( a, b );\n * diffToChanges( diff( a, b ) );\n *\n * // Again, both calls will return the same results (atomic changes format).\n * fastDiff( a, b, undefined, true );\n * diff( a, b );\n * ```\n *\n * @typeParam T The type of array elements.\n * @typeParam AtomicChanges The type of `atomicChanges` parameter (selects the result type).\n * @param a Input array or string.\n * @param b Input array or string.\n * @param cmp Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param atomicChanges Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * Defaults to `false`.\n * @returns Array of changes. The elements are either {@link module:utils/diff~DiffResult} or {@link module:utils/difftochanges~Change},\n * depending on `atomicChanges` parameter.\n */\nexport default function fastDiff(a, b, cmp, atomicChanges) {\n    // Set the comparator function.\n    cmp = cmp || function (a, b) {\n        return a === b;\n    };\n    // Convert the string (or any array-like object - eg. NodeList) to an array by using the slice() method because,\n    // unlike Array.from(), it returns array of UTF-16 code units instead of the code points of a string.\n    // One code point might be a surrogate pair of two code units. All text offsets are expected to be in code units.\n    // See ckeditor/ckeditor5#3147.\n    //\n    // We need to make sure here that fastDiff() works identical to diff().\n    const arrayA = Array.isArray(a) ? a : Array.prototype.slice.call(a);\n    const arrayB = Array.isArray(b) ? b : Array.prototype.slice.call(b);\n    // Find first and last change.\n    const changeIndexes = findChangeBoundaryIndexes(arrayA, arrayB, cmp);\n    // Transform into changes array.\n    const result = atomicChanges ?\n        changeIndexesToAtomicChanges(changeIndexes, arrayB.length) :\n        changeIndexesToChanges(arrayB, changeIndexes);\n    return result;\n}\n/**\n * Finds position of the first and last change in the given arrays. For example:\n *\n * ```ts\n * const indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n * console.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n * ```\n *\n * The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n * Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n * can be generated.\n */\nfunction findChangeBoundaryIndexes(arr1, arr2, cmp) {\n    // Find the first difference between passed values.\n    const firstIndex = findFirstDifferenceIndex(arr1, arr2, cmp);\n    // If arrays are equal return -1 indexes object.\n    if (firstIndex === -1) {\n        return { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };\n    }\n    // Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n    const oldArrayReversed = cutAndReverse(arr1, firstIndex);\n    const newArrayReversed = cutAndReverse(arr2, firstIndex);\n    // Find the first difference between reversed values.\n    // It should be treated as \"how many elements from the end the last difference occurred\".\n    //\n    // For example:\n    //\n    // \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n    // oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n    // newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n    // lastIndex:\t\t\t\t\t\t\t-> 2\n    //\n    // So the last change occurred two characters from the end of the arrays.\n    const lastIndex = findFirstDifferenceIndex(oldArrayReversed, newArrayReversed, cmp);\n    // Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n    const lastIndexOld = arr1.length - lastIndex;\n    const lastIndexNew = arr2.length - lastIndex;\n    return { firstIndex, lastIndexOld, lastIndexNew };\n}\n/**\n * Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n */\nfunction findFirstDifferenceIndex(arr1, arr2, cmp) {\n    for (let i = 0; i < Math.max(arr1.length, arr2.length); i++) {\n        if (arr1[i] === undefined || arr2[i] === undefined || !cmp(arr1[i], arr2[i])) {\n            return i;\n        }\n    }\n    return -1; // Return -1 if arrays are equal.\n}\n/**\n * Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n *\n * @param arr Array to be processed.\n * @param howMany How many elements from array beginning to remove.\n * @returns Shortened and reversed array.\n */\nfunction cutAndReverse(arr, howMany) {\n    return arr.slice(howMany).reverse();\n}\n/**\n * Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n * generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n *\n * @param newArray New array for which change indexes were calculated.\n * @param changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n * @returns Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\n */\nfunction changeIndexesToChanges(newArray, changeIndexes) {\n    const result = [];\n    const { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n    // Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n    // in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n    // (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n    if (lastIndexNew - firstIndex > 0) {\n        result.push({\n            index: firstIndex,\n            type: 'insert',\n            values: newArray.slice(firstIndex, lastIndexNew)\n        });\n    }\n    if (lastIndexOld - firstIndex > 0) {\n        result.push({\n            index: firstIndex + (lastIndexNew - firstIndex),\n            type: 'delete',\n            howMany: lastIndexOld - firstIndex\n        });\n    }\n    return result;\n}\n/**\n * Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n *\n * @param changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n * @param newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n * @returns Array of changes compatible with {@link module:utils/diff~diff} format.\n */\nfunction changeIndexesToAtomicChanges(changeIndexes, newLength) {\n    const { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n    // No changes.\n    if (firstIndex === -1) {\n        return Array(newLength).fill('equal');\n    }\n    let result = [];\n    if (firstIndex > 0) {\n        result = result.concat(Array(firstIndex).fill('equal'));\n    }\n    if (lastIndexNew - firstIndex > 0) {\n        result = result.concat(Array(lastIndexNew - firstIndex).fill('insert'));\n    }\n    if (lastIndexOld - firstIndex > 0) {\n        result = result.concat(Array(lastIndexOld - firstIndex).fill('delete'));\n    }\n    if (lastIndexNew < newLength) {\n        result = result.concat(Array(newLength - lastIndexNew).fill('equal'));\n    }\n    return result;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/diff\n */\nimport fastDiff from './fastdiff';\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n * ```ts\n * diff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n * ```\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param a Input array or string.\n * @param b Output array or string.\n * @param cmp Optional function used to compare array values, by default === is used.\n * @returns Array of changes.\n */\nexport default function diff(a, b, cmp) {\n    // Set the comparator function.\n    cmp = cmp || function (a, b) {\n        return a === b;\n    };\n    const aLength = a.length;\n    const bLength = b.length;\n    // Perform `fastDiff` for longer strings/arrays (see #269).\n    if (aLength > 200 || bLength > 200 || aLength + bLength > 300) {\n        return diff.fastDiff(a, b, cmp, true);\n    }\n    // Temporary action type statics.\n    let _insert, _delete;\n    // Swapped the arrays to use the shorter one as the first one.\n    if (bLength < aLength) {\n        const tmp = a;\n        a = b;\n        b = tmp;\n        // We swap the action types as well.\n        _insert = 'delete';\n        _delete = 'insert';\n    }\n    else {\n        _insert = 'insert';\n        _delete = 'delete';\n    }\n    const m = a.length;\n    const n = b.length;\n    const delta = n - m;\n    // Edit scripts, for each diagonal.\n    const es = {};\n    // Furthest points, the furthest y we can get on each diagonal.\n    const fp = {};\n    function snake(k) {\n        // We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n        // Furthest points (y) on the diagonal below k.\n        const y1 = (fp[k - 1] !== undefined ? fp[k - 1] : -1) + 1;\n        // Furthest points (y) on the diagonal above k.\n        const y2 = fp[k + 1] !== undefined ? fp[k + 1] : -1;\n        // The way we should go to get further.\n        const dir = y1 > y2 ? -1 : 1;\n        // Clone previous changes array (if any).\n        if (es[k + dir]) {\n            es[k] = es[k + dir].slice(0);\n        }\n        // Create changes array.\n        if (!es[k]) {\n            es[k] = [];\n        }\n        // Push the action.\n        es[k].push(y1 > y2 ? _insert : _delete);\n        // Set the beginning coordinates.\n        let y = Math.max(y1, y2);\n        let x = y - k;\n        // Traverse the diagonal as long as the values match.\n        while (x < m && y < n && cmp(a[x], b[y])) {\n            x++;\n            y++;\n            // Push no change action.\n            es[k].push('equal');\n        }\n        return y;\n    }\n    let p = 0;\n    let k;\n    // Traverse the graph until we reach the end of the longer string.\n    do {\n        // Updates furthest points and edit scripts for diagonals below delta.\n        for (k = -p; k < delta; k++) {\n            fp[k] = snake(k);\n        }\n        // Updates furthest points and edit scripts for diagonals above delta.\n        for (k = delta + p; k > delta; k--) {\n            fp[k] = snake(k);\n        }\n        // Updates furthest point and edit script for the delta diagonal.\n        // note that the delta diagonal is the one which goes through the sink (m, n).\n        fp[delta] = snake(delta);\n        p++;\n    } while (fp[delta] !== n);\n    // Return the final list of edit changes.\n    // We remove the first item that represents the action for the injected nulls.\n    return es[delta].slice(1);\n}\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/eventinfo\n */\nimport spy from './spy';\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n    /**\n     * @param source The emitter.\n     * @param name The event name.\n     */\n    constructor(source, name) {\n        this.source = source;\n        this.name = name;\n        this.path = [];\n        // The following methods are defined in the constructor because they must be re-created per instance.\n        this.stop = spy();\n        this.off = spy();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/spy\n */\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns The spy function.\n */\nfunction spy() {\n    return function spy() {\n        spy.called = true;\n    };\n}\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/uid\n */\n/**\n * A hash table of hex numbers to avoid using toString() in uid() which is costly.\n * [ '00', '01', '02', ..., 'fe', 'ff' ]\n */\nconst HEX_NUMBERS = new Array(256).fill('')\n    .map((_, index) => ('0' + (index).toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nexport default function uid() {\n    // Let's create some positive random 32bit integers first.\n    //\n    // 1. Math.random() is a float between 0 and 1.\n    // 2. 0x100000000 is 2^32 = 4294967296.\n    // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n    //\n    // For instance:\n    //\t\tMath.random() * 0x100000000 = 3366450031.853859\n    // but\n    //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n    const r1 = Math.random() * 0x100000000 >>> 0;\n    const r2 = Math.random() * 0x100000000 >>> 0;\n    const r3 = Math.random() * 0x100000000 >>> 0;\n    const r4 = Math.random() * 0x100000000 >>> 0;\n    // Make sure that id does not start with number.\n    return 'e' +\n        HEX_NUMBERS[r1 >> 0 & 0xFF] +\n        HEX_NUMBERS[r1 >> 8 & 0xFF] +\n        HEX_NUMBERS[r1 >> 16 & 0xFF] +\n        HEX_NUMBERS[r1 >> 24 & 0xFF] +\n        HEX_NUMBERS[r2 >> 0 & 0xFF] +\n        HEX_NUMBERS[r2 >> 8 & 0xFF] +\n        HEX_NUMBERS[r2 >> 16 & 0xFF] +\n        HEX_NUMBERS[r2 >> 24 & 0xFF] +\n        HEX_NUMBERS[r3 >> 0 & 0xFF] +\n        HEX_NUMBERS[r3 >> 8 & 0xFF] +\n        HEX_NUMBERS[r3 >> 16 & 0xFF] +\n        HEX_NUMBERS[r3 >> 24 & 0xFF] +\n        HEX_NUMBERS[r4 >> 0 & 0xFF] +\n        HEX_NUMBERS[r4 >> 8 & 0xFF] +\n        HEX_NUMBERS[r4 >> 16 & 0xFF] +\n        HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n */\nconst priorities = {\n    get(priority = 'normal') {\n        if (typeof priority != 'number') {\n            return this[priority] || this.normal;\n        }\n        else {\n            return priority;\n        }\n    },\n    highest: 100000,\n    high: 1000,\n    normal: 0,\n    low: -1000,\n    lowest: -100000\n};\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport priorities from './priorities';\n/**\n * Inserts any object with priority at correct index by priority so registered objects are always sorted from highest to lowest priority.\n *\n * @param objects Array of objects with priority to insert object to.\n * @param objectToInsert Object with `priority` property.\n */\nexport default function insertToPriorityArray(objects, objectToInsert) {\n    const priority = priorities.get(objectToInsert.priority);\n    for (let i = 0; i < objects.length; i++) {\n        if (priorities.get(objects[i].priority) < priority) {\n            objects.splice(i, 0, objectToInsert);\n            return;\n        }\n    }\n    objects.push(objectToInsert);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/ckeditorerror\n */\n/* globals console */\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n * ```ts\n * /**\n *  * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *  *\n *  * @error plugin-load\n *  * @param pluginName The name of the plugin that could not be loaded.\n *  * @param moduleName The name of the module which tried to load this plugin.\n *  *\\/\n * throw new CKEditorError( 'plugin-load', {\n * \tpluginName: 'foo',\n * \tmoduleName: 'bar'\n * } );\n * ```\n */\nexport default class CKEditorError extends Error {\n    /**\n     * Creates an instance of the CKEditorError class.\n     *\n     * @param errorName The error id in an `error-name` format. A link to this error documentation page will be added\n     * to the thrown error's `message`.\n     * @param context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n     * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n     * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n     * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n     * to check if the object works as the context.\n     * @param data Additional data describing the error. A stringified version of this object\n     * will be appended to the error message, so the data are quickly visible in the console. The original\n     * data object will also be later available under the {@link #data} property.\n     */\n    constructor(errorName, context, data) {\n        super(getErrorMessage(errorName, data));\n        this.name = 'CKEditorError';\n        this.context = context;\n        this.data = data;\n    }\n    /**\n     * Checks if the error is of the `CKEditorError` type.\n     */\n    is(type) {\n        return type === 'CKEditorError';\n    }\n    /**\n     * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n     * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n     * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n     *\n     * @param err The error to rethrow.\n     * @param context An object connected through properties with the editor instance. This context will be used\n     * by the watchdog to verify which editor should be restarted.\n     */\n    static rethrowUnexpectedError(err, context) {\n        if (err.is && err.is('CKEditorError')) {\n            throw err;\n        }\n        /**\n         * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n         * to make the debugging easier.\n         *\n         * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n         * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n         *\n         * @error unexpected-error\n         */\n        const error = new CKEditorError(err.message, context);\n        // Restore the original stack trace to make the error look like the original one.\n        // See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n        error.stack = err.stack;\n        throw error;\n    }\n}\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n * ```ts\n * /**\n *  * There was a problem processing the configuration of the toolbar. The item with the given\n *  * name does not exist, so it was omitted when rendering the toolbar.\n *  *\n *  * @error toolbarview-item-unavailable\n *  * @param {String} name The name of the component.\n *  *\\/\n * logWarning( 'toolbarview-item-unavailable', { name } );\n * ```\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param errorName The error name to be logged.\n * @param data Additional data to be logged.\n */\nexport function logWarning(errorName, data) {\n    console.warn(...formatConsoleArguments(errorName, data));\n}\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n * ```ts\n * /**\n *  * There was a problem processing the configuration of the toolbar. The item with the given\n *  * name does not exist, so it was omitted when rendering the toolbar.\n *  *\n *  * @error toolbarview-item-unavailable\n *  * @param {String} name The name of the component.\n *  *\\/\n *  logError( 'toolbarview-item-unavailable', { name } );\n * ```\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param errorName The error name to be logged.\n * @param data Additional data to be logged.\n */\nexport function logError(errorName, data) {\n    console.error(...formatConsoleArguments(errorName, data));\n}\n/**\n * Returns formatted link to documentation message.\n */\nfunction getLinkToDocumentationMessage(errorName) {\n    return `\\nRead more: ${DOCUMENTATION_URL}#error-${errorName}`;\n}\n/**\n * Returns formatted error message.\n */\nfunction getErrorMessage(errorName, data) {\n    const processedObjects = new WeakSet();\n    const circularReferencesReplacer = (key, value) => {\n        if (typeof value === 'object' && value !== null) {\n            if (processedObjects.has(value)) {\n                return `[object ${value.constructor.name}]`;\n            }\n            processedObjects.add(value);\n        }\n        return value;\n    };\n    const stringifiedData = data ? ` ${JSON.stringify(data, circularReferencesReplacer)}` : '';\n    const documentationLink = getLinkToDocumentationMessage(errorName);\n    return errorName + stringifiedData + documentationLink;\n}\n/**\n * Returns formatted console error arguments.\n */\nfunction formatConsoleArguments(errorName, data) {\n    const documentationMessage = getLinkToDocumentationMessage(errorName);\n    return data ? [errorName, data, documentationMessage] : [errorName, documentationMessage];\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/version\n */\n/* globals window, global */\nimport CKEditorError from './ckeditorerror';\nconst version = '38.1.0';\nexport default version;\n// The second argument is not a month. It is `monthIndex` and starts from `0`.\nexport const releaseDate = new Date(2023, 5, 28);\n/* istanbul ignore next -- @preserve */\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n/* istanbul ignore next -- @preserve */\nif (windowOrGlobal.CKEDITOR_VERSION) {\n    /**\n     * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n     * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n     * errors.\n     *\n     * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n     * you may need to check your project for each of these issues and fix them all.\n     *\n     * # Trying to add a plugin to an existing build\n     *\n     * If you import an existing CKEditor 5 build and a plugin like this:\n     *\n     * ```ts\n     * import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n     * import Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n     * ```\n     *\n     * Then your project loads some CKEditor 5 packages twice. How does it happen?\n     *\n     * The build package contains a file which is already compiled with webpack. This means\n     * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n     *\n     * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n     * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n     * included inside the build package, and second, because they are required by the `Highlight` plugin.\n     *\n     * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n     *\n     * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n     * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n     *\n     * Read more in the {@glink installation/plugins/installing-plugins Installing plugins} guide.\n     *\n     * # Confused an editor build with an editor implementation\n     *\n     * This scenario is very similar to the previous one, but has a different origin.\n     *\n     * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n     * {@glink installation/advanced/alternative-setups/integrating-from-source-webpack \"Building from source\"} section\n     * or in the {@glink framework/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n     *\n     * The correct way to do so is to import an editor and plugins and run them together like this:\n     *\n     * ```ts\n     * import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n     * import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n     * import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n     * import Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n     * import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n     *\n     * ClassicEditor\n     * \t.create( document.querySelector( '#editor' ), {\n     * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n     * \t\ttoolbar: [ 'bold', 'italic' ]\n     * \t} )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     * \t} )\n     * \t.catch( error => {\n     * \t\tconsole.error( error.stack );\n     * \t} );\n     * ```\n     *\n     * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n     * your imports will look like this:\n     *\n     * ```ts\n     * import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n     * import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n     * import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n     * import Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n     * import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n     * ```\n     *\n     * This creates the same situation as in the previous section because you use a build together with source plugins.\n     *\n     * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n     *\n     * # Loading two or more builds on one page\n     *\n     * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n     * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n     *\n     * If you want to use two different types of editors at once, see the\n     * {@glink installation/advanced/using-two-editors \"Using two different editors\"}\n     * section.\n     *\n     * # Using outdated packages\n     *\n     * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n     * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n     * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n     * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n     * different versions of the core package.\n     *\n     * The solution to this issue is to update all packages to their latest version. We recommend\n     * using tools like [`npm-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n     *\n     * # Conflicting version of dependencies\n     *\n     * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n     * it may happen that even if you use the latest versions of the official packages and the latest version of\n     * these third-party packages, there will be a conflict between some of their dependencies.\n     *\n     * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n     * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n     *\n     * **Note:** All official CKEditor 5 packages (excluding integrations and `ckeditor5-dev-*` packages) are released in the\n     * same major version. This is &mdash; in the `x.y.z`, the `x` is the same for all packages. This is the simplest way to check\n     * whether you use packages coming from the same CKEditor 5 version. You can read more about versioning in the\n     * {@glink updating/versioning-policy Versioning policy} guide.\n     *\n     * # Packages were duplicated in `node_modules`\n     *\n     * In some situations, especially when calling `npm install` multiple times, it may happen\n     * that npm will not correctly \"deduplicate\" packages.\n     *\n     * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n     * However, it is known to fail to do so from time to time.\n     *\n     * We recommend checking if any of the steps listed below help:\n     *\n     * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n     * is known to help in most cases.\n     * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n     * * Check whether all CKEditor 5 packages are up to date and reinstall them\n     * if you changed anything (`rm -rf node_modules && npm install`).\n     *\n     * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n     * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n     *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n     *\n     * @error ckeditor-duplicated-modules\n     */\n    throw new CKEditorError('ckeditor-duplicated-modules', null);\n}\nelse {\n    windowOrGlobal.CKEDITOR_VERSION = version;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/emittermixin\n */\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\nimport insertToPriorityArray from './inserttopriorityarray';\n// To check if component is loaded more than once.\nimport './version';\nimport CKEditorError from './ckeditorerror';\nconst _listeningTo = Symbol('listeningTo');\nconst _emitterId = Symbol('emitterId');\nconst _delegations = Symbol('delegations');\nconst defaultEmitterClass = EmitterMixin(Object);\nexport default function EmitterMixin(base) {\n    if (!base) {\n        return defaultEmitterClass;\n    }\n    class Mixin extends base {\n        on(event, callback, options) {\n            this.listenTo(this, event, callback, options);\n        }\n        once(event, callback, options) {\n            let wasFired = false;\n            const onceCallback = (event, ...args) => {\n                // Ensure the callback is called only once even if the callback itself leads to re-firing the event\n                // (which would call the callback again).\n                if (!wasFired) {\n                    wasFired = true;\n                    // Go off() at the first call.\n                    event.off();\n                    // Go with the original callback.\n                    callback.call(this, event, ...args);\n                }\n            };\n            // Make a similar on() call, simply replacing the callback.\n            this.listenTo(this, event, onceCallback, options);\n        }\n        off(event, callback) {\n            this.stopListening(this, event, callback);\n        }\n        listenTo(emitter, event, callback, options = {}) {\n            let emitterInfo, eventCallbacks;\n            // _listeningTo contains a list of emitters that this object is listening to.\n            // This list has the following format:\n            //\n            // _listeningTo: {\n            //     emitterId: {\n            //         emitter: emitter,\n            //         callbacks: {\n            //             event1: [ callback1, callback2, ... ]\n            //             ....\n            //         }\n            //     },\n            //     ...\n            // }\n            if (!this[_listeningTo]) {\n                this[_listeningTo] = {};\n            }\n            const emitters = this[_listeningTo];\n            if (!_getEmitterId(emitter)) {\n                _setEmitterId(emitter);\n            }\n            const emitterId = _getEmitterId(emitter);\n            if (!(emitterInfo = emitters[emitterId])) {\n                emitterInfo = emitters[emitterId] = {\n                    emitter,\n                    callbacks: {}\n                };\n            }\n            if (!(eventCallbacks = emitterInfo.callbacks[event])) {\n                eventCallbacks = emitterInfo.callbacks[event] = [];\n            }\n            eventCallbacks.push(callback);\n            // Finally register the callback to the event.\n            addEventListener(this, emitter, event, callback, options);\n        }\n        stopListening(emitter, event, callback) {\n            const emitters = this[_listeningTo];\n            let emitterId = emitter && _getEmitterId(emitter);\n            const emitterInfo = (emitters && emitterId) ? emitters[emitterId] : undefined;\n            const eventCallbacks = (emitterInfo && event) ? emitterInfo.callbacks[event] : undefined;\n            // Stop if nothing has been listened.\n            if (!emitters || (emitter && !emitterInfo) || (event && !eventCallbacks)) {\n                return;\n            }\n            // All params provided. off() that single callback.\n            if (callback) {\n                removeEventListener(this, emitter, event, callback);\n                // We must remove callbacks as well in order to prevent memory leaks.\n                // See https://github.com/ckeditor/ckeditor5/pull/8480\n                const index = eventCallbacks.indexOf(callback);\n                if (index !== -1) {\n                    if (eventCallbacks.length === 1) {\n                        delete emitterInfo.callbacks[event];\n                    }\n                    else {\n                        removeEventListener(this, emitter, event, callback);\n                    }\n                }\n            }\n            // Only `emitter` and `event` provided. off() all callbacks for that event.\n            else if (eventCallbacks) {\n                while ((callback = eventCallbacks.pop())) {\n                    removeEventListener(this, emitter, event, callback);\n                }\n                delete emitterInfo.callbacks[event];\n            }\n            // Only `emitter` provided. off() all events for that emitter.\n            else if (emitterInfo) {\n                for (event in emitterInfo.callbacks) {\n                    this.stopListening(emitter, event);\n                }\n                delete emitters[emitterId];\n            }\n            // No params provided. off() all emitters.\n            else {\n                for (emitterId in emitters) {\n                    this.stopListening(emitters[emitterId].emitter);\n                }\n                delete this[_listeningTo];\n            }\n        }\n        fire(eventOrInfo, ...args) {\n            try {\n                const eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo(this, eventOrInfo);\n                const event = eventInfo.name;\n                let callbacks = getCallbacksForEvent(this, event);\n                // Record that the event passed this emitter on its path.\n                eventInfo.path.push(this);\n                // Handle event listener callbacks first.\n                if (callbacks) {\n                    // Arguments passed to each callback.\n                    const callbackArgs = [eventInfo, ...args];\n                    // Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n                    // are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n                    // failed if callbacks were added to the queue before currently processed callback.\n                    // If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n                    // event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n                    callbacks = Array.from(callbacks);\n                    for (let i = 0; i < callbacks.length; i++) {\n                        callbacks[i].callback.apply(this, callbackArgs);\n                        // Remove the callback from future requests if off() has been called.\n                        if (eventInfo.off.called) {\n                            // Remove the called mark for the next calls.\n                            delete eventInfo.off.called;\n                            this._removeEventListener(event, callbacks[i].callback);\n                        }\n                        // Do not execute next callbacks if stop() was called.\n                        if (eventInfo.stop.called) {\n                            break;\n                        }\n                    }\n                }\n                // Delegate event to other emitters if needed.\n                const delegations = this[_delegations];\n                if (delegations) {\n                    const destinations = delegations.get(event);\n                    const passAllDestinations = delegations.get('*');\n                    if (destinations) {\n                        fireDelegatedEvents(destinations, eventInfo, args);\n                    }\n                    if (passAllDestinations) {\n                        fireDelegatedEvents(passAllDestinations, eventInfo, args);\n                    }\n                }\n                return eventInfo.return;\n            }\n            catch (err) {\n                // @if CK_DEBUG // throw err;\n                /* istanbul ignore next -- @preserve */\n                CKEditorError.rethrowUnexpectedError(err, this);\n            }\n        }\n        delegate(...events) {\n            return {\n                to: (emitter, nameOrFunction) => {\n                    if (!this[_delegations]) {\n                        this[_delegations] = new Map();\n                    }\n                    // Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n                    // build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n                    events.forEach(eventName => {\n                        const destinations = this[_delegations].get(eventName);\n                        if (!destinations) {\n                            this[_delegations].set(eventName, new Map([[emitter, nameOrFunction]]));\n                        }\n                        else {\n                            destinations.set(emitter, nameOrFunction);\n                        }\n                    });\n                }\n            };\n        }\n        stopDelegating(event, emitter) {\n            if (!this[_delegations]) {\n                return;\n            }\n            if (!event) {\n                this[_delegations].clear();\n            }\n            else if (!emitter) {\n                this[_delegations].delete(event);\n            }\n            else {\n                const destinations = this[_delegations].get(event);\n                if (destinations) {\n                    destinations.delete(emitter);\n                }\n            }\n        }\n        _addEventListener(event, callback, options) {\n            createEventNamespace(this, event);\n            const lists = getCallbacksListsForNamespace(this, event);\n            const priority = priorities.get(options.priority);\n            const callbackDefinition = {\n                callback,\n                priority\n            };\n            // Add the callback to all callbacks list.\n            for (const callbacks of lists) {\n                // Add the callback to the list in the right priority position.\n                insertToPriorityArray(callbacks, callbackDefinition);\n            }\n        }\n        _removeEventListener(event, callback) {\n            const lists = getCallbacksListsForNamespace(this, event);\n            for (const callbacks of lists) {\n                for (let i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i].callback == callback) {\n                        // Remove the callback from the list (fixing the next index).\n                        callbacks.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`\n([\n    'on', 'once', 'off', 'listenTo',\n    'stopListening', 'fire', 'delegate', 'stopDelegating',\n    '_addEventListener', '_removeEventListener'\n]).forEach(key => {\n    EmitterMixin[key] = defaultEmitterClass.prototype[key];\n});\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @internal\n * @param listeningEmitter An emitter that listens.\n * @param listenedToEmitterId Unique emitter id of emitter listened to.\n */\nexport function _getEmitterListenedTo(listeningEmitter, listenedToEmitterId) {\n    const listeningTo = listeningEmitter[_listeningTo];\n    if (listeningTo && listeningTo[listenedToEmitterId]) {\n        return listeningTo[listenedToEmitterId].emitter;\n    }\n    return null;\n}\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @internal\n * @param emitter An emitter for which id will be set.\n * @param id Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId(emitter, id) {\n    if (!emitter[_emitterId]) {\n        emitter[_emitterId] = id || uid();\n    }\n}\n/**\n * Returns emitter's unique id.\n *\n * @internal\n * @param emitter An emitter which id will be returned.\n */\nexport function _getEmitterId(emitter) {\n    return emitter[_emitterId];\n}\n/**\n * Gets the internal `_events` property of the given object.\n * `_events` property store all lists with callbacks for registered event names.\n * If there were no events registered on the object, empty `_events` object is created.\n */\nfunction getEvents(source) {\n    if (!source._events) {\n        Object.defineProperty(source, '_events', {\n            value: {}\n        });\n    }\n    return source._events;\n}\n/**\n * Creates event node for generic-specific events relation architecture.\n */\nfunction makeEventNode() {\n    return {\n        callbacks: [],\n        childEvents: []\n    };\n}\n/**\n * Creates an architecture for generic-specific events relation.\n * If needed, creates all events for given eventName, i.e. if the first registered event\n * is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n * It also copies callbacks from more generic events to more specific events when\n * specific events are created.\n */\nfunction createEventNamespace(source, eventName) {\n    const events = getEvents(source);\n    // First, check if the event we want to add to the structure already exists.\n    if (events[eventName]) {\n        // If it exists, we don't have to do anything.\n        return;\n    }\n    // In other case, we have to create the structure for the event.\n    // Note, that we might need to create intermediate events too.\n    // I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n    // we need to also register foo:bar.\n    // Currently processed event name.\n    let name = eventName;\n    // Name of the event that is a child event for currently processed event.\n    let childEventName = null;\n    // Array containing all newly created specific events.\n    const newEventNodes = [];\n    // While loop can't check for ':' index because we have to handle generic events too.\n    // In each loop, we truncate event name, going from the most specific name to the generic one.\n    // I.e. foo:bar:abc -> foo:bar -> foo.\n    while (name !== '') {\n        if (events[name]) {\n            // If the currently processed event name is already registered, we can be sure\n            // that it already has all the structure created, so we can break the loop here\n            // as no more events need to be registered.\n            break;\n        }\n        // If this event is not yet registered, create a new object for it.\n        events[name] = makeEventNode();\n        // Add it to the array with newly created events.\n        newEventNodes.push(events[name]);\n        // Add previously processed event name as a child of this event.\n        if (childEventName) {\n            events[name].childEvents.push(childEventName);\n        }\n        childEventName = name;\n        // If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n        name = name.substr(0, name.lastIndexOf(':'));\n    }\n    if (name !== '') {\n        // If name is not empty, we found an already registered event that was a parent of the\n        // event we wanted to register.\n        // Copy that event's callbacks to newly registered events.\n        for (const node of newEventNodes) {\n            node.callbacks = events[name].callbacks.slice();\n        }\n        // Add last newly created event to the already registered event.\n        events[name].childEvents.push(childEventName);\n    }\n}\n/**\n * Gets an array containing callbacks list for a given event and it's more specific events.\n * I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n * return callback list of foo:bar and foo:bar:abc (but not foo).\n */\nfunction getCallbacksListsForNamespace(source, eventName) {\n    const eventNode = getEvents(source)[eventName];\n    if (!eventNode) {\n        return [];\n    }\n    let callbacksLists = [eventNode.callbacks];\n    for (let i = 0; i < eventNode.childEvents.length; i++) {\n        const childCallbacksLists = getCallbacksListsForNamespace(source, eventNode.childEvents[i]);\n        callbacksLists = callbacksLists.concat(childCallbacksLists);\n    }\n    return callbacksLists;\n}\n/**\n * Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n * If there are no callbacks registered for given event, it checks if this is a specific event and looks\n * for callbacks for it's more generic version.\n */\nfunction getCallbacksForEvent(source, eventName) {\n    let event;\n    if (!source._events || !(event = source._events[eventName]) || !event.callbacks.length) {\n        // There are no callbacks registered for specified eventName.\n        // But this could be a specific-type event that is in a namespace.\n        if (eventName.indexOf(':') > -1) {\n            // If the eventName is specific, try to find callback lists for more generic event.\n            return getCallbacksForEvent(source, eventName.substr(0, eventName.lastIndexOf(':')));\n        }\n        else {\n            // If this is a top-level generic event, return null;\n            return null;\n        }\n    }\n    return event.callbacks;\n}\n/**\n * Fires delegated events for given map of destinations.\n *\n * @param destinations A map containing `[ {@link module:utils/emittermixin~Emitter}, \"event name\" ]` pair destinations.\n * @param eventInfo The original event info object.\n * @param fireArgs Arguments the original event was fired with.\n */\nfunction fireDelegatedEvents(destinations, eventInfo, fireArgs) {\n    for (let [emitter, name] of destinations) {\n        if (!name) {\n            name = eventInfo.name;\n        }\n        else if (typeof name == 'function') {\n            name = name(eventInfo.name);\n        }\n        const delegatedInfo = new EventInfo(eventInfo.source, name);\n        delegatedInfo.path = [...eventInfo.path];\n        emitter.fire(delegatedInfo, ...fireArgs);\n    }\n}\n/**\n * Helper for registering event callback on the emitter.\n */\nfunction addEventListener(listener, emitter, event, callback, options) {\n    if (emitter._addEventListener) {\n        emitter._addEventListener(event, callback, options);\n    }\n    else {\n        // Allow listening on objects that do not implement Emitter interface.\n        // This is needed in some tests that are using mocks instead of the real objects with EmitterMixin mixed.\n        (listener._addEventListener).call(emitter, event, callback, options);\n    }\n}\n/**\n * Helper for removing event callback from the emitter.\n */\nfunction removeEventListener(listener, emitter, event, callback) {\n    if (emitter._removeEventListener) {\n        emitter._removeEventListener(event, callback);\n    }\n    else {\n        // Allow listening on objects that do not implement Emitter interface.\n        // This is needed in some tests that are using mocks instead of the real objects with EmitterMixin mixed.\n        listener._removeEventListener.call(emitter, event, callback);\n    }\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/unified-signatures */\n/**\n * @module utils/observablemixin\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { isObject } from 'lodash-es';\nconst observablePropertiesSymbol = Symbol('observableProperties');\nconst boundObservablesSymbol = Symbol('boundObservables');\nconst boundPropertiesSymbol = Symbol('boundProperties');\nconst decoratedMethods = Symbol('decoratedMethods');\nconst decoratedOriginal = Symbol('decoratedOriginal');\nconst defaultObservableClass = ObservableMixin(EmitterMixin());\nexport default function ObservableMixin(base) {\n    if (!base) {\n        return defaultObservableClass;\n    }\n    class Mixin extends base {\n        set(name, value) {\n            // If the first parameter is an Object, iterate over its properties.\n            if (isObject(name)) {\n                Object.keys(name).forEach(property => {\n                    this.set(property, name[property]);\n                }, this);\n                return;\n            }\n            initObservable(this);\n            const properties = this[observablePropertiesSymbol];\n            if ((name in this) && !properties.has(name)) {\n                /**\n                 * Cannot override an existing property.\n                 *\n                 * This error is thrown when trying to {@link module:utils/observablemixin~Observable#set set} a property with\n                 * a name of an already existing property. For example:\n                 *\n                 * ```ts\n                 * let observable = new Model();\n                 * observable.property = 1;\n                 * observable.set( 'property', 2 );\t\t\t// throws\n                 *\n                 * observable.set( 'property', 1 );\n                 * observable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n                 * ```\n                 *\n                 * @error observable-set-cannot-override\n                 */\n                throw new CKEditorError('observable-set-cannot-override', this);\n            }\n            Object.defineProperty(this, name, {\n                enumerable: true,\n                configurable: true,\n                get() {\n                    return properties.get(name);\n                },\n                set(value) {\n                    const oldValue = properties.get(name);\n                    // Fire `set` event before the new value will be set to make it possible\n                    // to override observable property without affecting `change` event.\n                    // See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n                    let newValue = this.fire(`set:${name}`, name, value, oldValue);\n                    if (newValue === undefined) {\n                        newValue = value;\n                    }\n                    // Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n                    // Note: When properties map has no such own property, then its value is undefined.\n                    if (oldValue !== newValue || !properties.has(name)) {\n                        properties.set(name, newValue);\n                        this.fire(`change:${name}`, name, newValue, oldValue);\n                    }\n                }\n            });\n            this[name] = value;\n        }\n        bind(...bindProperties) {\n            if (!bindProperties.length || !isStringArray(bindProperties)) {\n                /**\n                 * All properties must be strings.\n                 *\n                 * @error observable-bind-wrong-properties\n                 */\n                throw new CKEditorError('observable-bind-wrong-properties', this);\n            }\n            if ((new Set(bindProperties)).size !== bindProperties.length) {\n                /**\n                 * Properties must be unique.\n                 *\n                 * @error observable-bind-duplicate-properties\n                 */\n                throw new CKEditorError('observable-bind-duplicate-properties', this);\n            }\n            initObservable(this);\n            const boundProperties = this[boundPropertiesSymbol];\n            bindProperties.forEach(propertyName => {\n                if (boundProperties.has(propertyName)) {\n                    /**\n                     * Cannot bind the same property more than once.\n                     *\n                     * @error observable-bind-rebind\n                     */\n                    throw new CKEditorError('observable-bind-rebind', this);\n                }\n            });\n            const bindings = new Map();\n            bindProperties.forEach(a => {\n                const binding = { property: a, to: [] };\n                boundProperties.set(a, binding);\n                bindings.set(a, binding);\n            });\n            return {\n                to: bindTo,\n                toMany: bindToMany,\n                _observable: this,\n                _bindProperties: bindProperties,\n                _to: [],\n                _bindings: bindings\n            };\n        }\n        unbind(...unbindProperties) {\n            // Nothing to do here if not inited yet.\n            if (!(this[observablePropertiesSymbol])) {\n                return;\n            }\n            const boundProperties = this[boundPropertiesSymbol];\n            const boundObservables = this[boundObservablesSymbol];\n            if (unbindProperties.length) {\n                if (!isStringArray(unbindProperties)) {\n                    /**\n                     * Properties must be strings.\n                     *\n                     * @error observable-unbind-wrong-properties\n                     */\n                    throw new CKEditorError('observable-unbind-wrong-properties', this);\n                }\n                unbindProperties.forEach(propertyName => {\n                    const binding = boundProperties.get(propertyName);\n                    // Nothing to do if the binding is not defined\n                    if (!binding) {\n                        return;\n                    }\n                    binding.to.forEach(([toObservable, toProperty]) => {\n                        const toProperties = boundObservables.get(toObservable);\n                        const toPropertyBindings = toProperties[toProperty];\n                        toPropertyBindings.delete(binding);\n                        if (!toPropertyBindings.size) {\n                            delete toProperties[toProperty];\n                        }\n                        if (!Object.keys(toProperties).length) {\n                            boundObservables.delete(toObservable);\n                            this.stopListening(toObservable, 'change');\n                        }\n                    });\n                    boundProperties.delete(propertyName);\n                });\n            }\n            else {\n                boundObservables.forEach((bindings, boundObservable) => {\n                    this.stopListening(boundObservable, 'change');\n                });\n                boundObservables.clear();\n                boundProperties.clear();\n            }\n        }\n        decorate(methodName) {\n            initObservable(this);\n            const originalMethod = this[methodName];\n            if (!originalMethod) {\n                /**\n                 * Cannot decorate an undefined method.\n                 *\n                 * @error observablemixin-cannot-decorate-undefined\n                 * @param {Object} object The object which method should be decorated.\n                 * @param {String} methodName Name of the method which does not exist.\n                 */\n                throw new CKEditorError('observablemixin-cannot-decorate-undefined', this, { object: this, methodName });\n            }\n            this.on(methodName, (evt, args) => {\n                evt.return = originalMethod.apply(this, args);\n            });\n            this[methodName] = function (...args) {\n                return this.fire(methodName, args);\n            };\n            this[methodName][decoratedOriginal] = originalMethod;\n            if (!this[decoratedMethods]) {\n                this[decoratedMethods] = [];\n            }\n            this[decoratedMethods].push(methodName);\n        }\n        // Override the EmitterMixin stopListening method to be able to clean (and restore) decorated methods.\n        // This is needed in case of:\n        //  1. Have x.foo() decorated.\n        //  2. Call x.stopListening()\n        //  3. Call x.foo(). Problem: nothing happens (the original foo() method is not executed)\n        stopListening(emitter, event, callback) {\n            // Removing all listeners so let's clean the decorated methods to the original state.\n            if (!emitter && this[decoratedMethods]) {\n                for (const methodName of this[decoratedMethods]) {\n                    this[methodName] = this[methodName][decoratedOriginal];\n                }\n                delete this[decoratedMethods];\n            }\n            super.stopListening(emitter, event, callback);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`\n([\n    'set', 'bind', 'unbind', 'decorate',\n    'on', 'once', 'off', 'listenTo',\n    'stopListening', 'fire', 'delegate', 'stopDelegating',\n    '_addEventListener', '_removeEventListener'\n]).forEach(key => {\n    ObservableMixin[key] = defaultObservableClass.prototype[key];\n});\n// Init symbol properties needed for the observable mechanism to work.\nfunction initObservable(observable) {\n    // Do nothing if already inited.\n    if (observable[observablePropertiesSymbol]) {\n        return;\n    }\n    // The internal hash containing the observable's state.\n    Object.defineProperty(observable, observablePropertiesSymbol, {\n        value: new Map()\n    });\n    // Map containing bindings to external observables. It shares the binding objects\n    // (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~Observable#_boundProperties} and\n    // it is used to observe external observables to update own properties accordingly.\n    // See {@link module:utils/observablemixin~Observable#bind}.\n    //\n    //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n    //\t\tconsole.log( A._boundObservables );\n    //\n    //\t\t\tMap( {\n    //\t\t\t\tB: {\n    //\t\t\t\t\tx: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n    //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n    //\t\t\t\t\t] ),\n    //\t\t\t\t\ty: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n    //\t\t\t\t\t] )\n    //\t\t\t\t}\n    //\t\t\t} )\n    //\n    //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n    //\t\tconsole.log( A._boundObservables );\n    //\n    //\t\t\tMap( {\n    //\t\t\t\tB: {\n    //\t\t\t\t\tx: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n    //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n    //\t\t\t\t\t] ),\n    //\t\t\t\t\ty: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n    //\t\t\t\t\t] ),\n    //\t\t\t\t\tz: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n    //\t\t\t\t\t] )\n    //\t\t\t\t},\n    //\t\t\t\tC: {\n    //\t\t\t\t\tw: Set( [\n    //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n    //\t\t\t\t\t] )\n    //\t\t\t\t}\n    //\t\t\t} )\n    //\n    Object.defineProperty(observable, boundObservablesSymbol, {\n        value: new Map()\n    });\n    // Object that stores which properties of this observable are bound and how. It shares\n    // the binding objects (`{ observable: A, property: 'a', to: ... }`) with\n    // {@link module:utils/observablemixin~Observable#_boundObservables}. This data structure is\n    // a reverse of {@link module:utils/observablemixin~Observable#_boundObservables} and it is helpful for\n    // {@link module:utils/observablemixin~Observable#unbind}.\n    //\n    // See {@link module:utils/observablemixin~Observable#bind}.\n    //\n    //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n    //\t\tconsole.log( A._boundProperties );\n    //\n    //\t\t\tMap( {\n    //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n    //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n    //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n    //\t\t\t} )\n    //\n    //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n    //\t\tconsole.log( A._boundProperties );\n    //\n    //\t\t\tMap( {\n    //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n    //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n    //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n    //\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n    //\t\t\t} )\n    Object.defineProperty(observable, boundPropertiesSymbol, {\n        value: new Map()\n    });\n}\n/**\n * A chaining for {@link module:utils/observablemixin~Observable#bind} providing `.to()` interface.\n *\n * @param args Arguments of the `.to( args )` binding.\n */\nfunction bindTo(...args) {\n    const parsedArgs = parseBindToArgs(...args);\n    const bindingsKeys = Array.from(this._bindings.keys());\n    const numberOfBindings = bindingsKeys.length;\n    // Eliminate A.bind( 'x' ).to( B, C )\n    if (!parsedArgs.callback && parsedArgs.to.length > 1) {\n        /**\n         * Binding multiple observables only possible with callback.\n         *\n         * @error observable-bind-to-no-callback\n         */\n        throw new CKEditorError('observable-bind-to-no-callback', this);\n    }\n    // Eliminate A.bind( 'x', 'y' ).to( B, callback )\n    if (numberOfBindings > 1 && parsedArgs.callback) {\n        /**\n         * Cannot bind multiple properties and use a callback in one binding.\n         *\n         * @error observable-bind-to-extra-callback\n         */\n        throw new CKEditorError('observable-bind-to-extra-callback', this);\n    }\n    parsedArgs.to.forEach(to => {\n        // Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n        if (to.properties.length && to.properties.length !== numberOfBindings) {\n            /**\n             * The number of properties must match.\n             *\n             * @error observable-bind-to-properties-length\n             */\n            throw new CKEditorError('observable-bind-to-properties-length', this);\n        }\n        // When no to.properties specified, observing source properties instead i.e.\n        // A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n        if (!to.properties.length) {\n            to.properties = this._bindProperties;\n        }\n    });\n    this._to = parsedArgs.to;\n    // Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n    if (parsedArgs.callback) {\n        this._bindings.get(bindingsKeys[0]).callback = parsedArgs.callback;\n    }\n    attachBindToListeners(this._observable, this._to);\n    // Update observable._boundProperties and observable._boundObservables.\n    updateBindToBound(this);\n    // Set initial values of bound properties.\n    this._bindProperties.forEach(propertyName => {\n        updateBoundObservableProperty(this._observable, propertyName);\n    });\n}\n/**\n * Binds to an attribute in a set of iterable observables.\n */\nfunction bindToMany(observables, attribute, callback) {\n    if (this._bindings.size > 1) {\n        /**\n         * Binding one attribute to many observables only possible with one attribute.\n         *\n         * @error observable-bind-to-many-not-one-binding\n         */\n        throw new CKEditorError('observable-bind-to-many-not-one-binding', this);\n    }\n    this.to(\n    // Bind to #attribute of each observable...\n    ...getBindingTargets(observables, attribute), \n    // ...using given callback to parse attribute values.\n    callback);\n}\n/**\n * Returns an array of binding components for\n * {@link Observable#bind} from a set of iterable observables.\n */\nfunction getBindingTargets(observables, attribute) {\n    const observableAndAttributePairs = observables.map(observable => [observable, attribute]);\n    // Merge pairs to one-dimension array of observables and attributes.\n    return Array.prototype.concat.apply([], observableAndAttributePairs);\n}\n/**\n * Check if all entries of the array are of `String` type.\n */\nfunction isStringArray(arr) {\n    return arr.every(a => typeof a == 'string');\n}\n/**\n * Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n * an object with a parsed structure. For example\n *\n * ```ts\n * A.bind( 'x' ).to( B, 'a', C, 'b', call );\n * ```\n *\n * becomes\n *\n * ```ts\n * {\n * \tto: [\n * \t\t{ observable: B, properties: [ 'a' ] },\n * \t\t{ observable: C, properties: [ 'b' ] },\n * \t],\n * \tcallback: call\n * }\n *\n * @param args Arguments of {@link Observable#bind}`.to( args )`.\n */\nfunction parseBindToArgs(...args) {\n    // Eliminate A.bind( 'x' ).to()\n    if (!args.length) {\n        /**\n         * Invalid argument syntax in `to()`.\n         *\n         * @error observable-bind-to-parse-error\n         */\n        throw new CKEditorError('observable-bind-to-parse-error', null);\n    }\n    const parsed = { to: [] };\n    let lastObservable;\n    if (typeof args[args.length - 1] == 'function') {\n        parsed.callback = args.pop();\n    }\n    args.forEach(a => {\n        if (typeof a == 'string') {\n            lastObservable.properties.push(a);\n        }\n        else if (typeof a == 'object') {\n            lastObservable = { observable: a, properties: [] };\n            parsed.to.push(lastObservable);\n        }\n        else {\n            throw new CKEditorError('observable-bind-to-parse-error', null);\n        }\n    });\n    return parsed;\n}\n/**\n * Synchronizes {@link module:utils/observable#_boundObservables} with {@link Binding}.\n *\n * @param binding A binding to store in {@link Observable#_boundObservables}.\n * @param toObservable A observable, which is a new component of `binding`.\n * @param toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\n */\nfunction updateBoundObservables(observable, binding, toObservable, toPropertyName) {\n    const boundObservables = observable[boundObservablesSymbol];\n    const bindingsToObservable = boundObservables.get(toObservable);\n    const bindings = bindingsToObservable || {};\n    if (!bindings[toPropertyName]) {\n        bindings[toPropertyName] = new Set();\n    }\n    // Pass the binding to a corresponding Set in `observable._boundObservables`.\n    bindings[toPropertyName].add(binding);\n    if (!bindingsToObservable) {\n        boundObservables.set(toObservable, bindings);\n    }\n}\n/**\n * Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n * with {@link BindChain}.\n *\n * Assuming the following binding being created\n *\n * ```ts\n * A.bind( 'a', 'b' ).to( B, 'x', 'y' );\n * ```\n *\n * the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n *\n * ```ts\n * {\n * \ta: { observable: A, property: 'a', to: [] },\n * \tb: { observable: A, property: 'b', to: [] },\n * }\n * ```\n *\n * Iterate over all bindings in this chain and fill their `to` properties with\n * corresponding to( ... ) arguments (components of the binding), so\n *\n * ```ts\n * {\n * \ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n * \tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n * }\n * ```\n *\n * Then update the structure of {@link Observable#_boundObservables} with updated\n * binding, so it becomes:\n *\n * ```ts\n * Map( {\n * \tB: {\n * \t\tx: Set( [\n * \t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n * \t\t] ),\n * \t\ty: Set( [\n * \t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n * \t\t] )\n * \t}\n * } )\n * ```\n *\n * @param chain The binding initialized by {@link Observable#bind}.\n */\nfunction updateBindToBound(chain) {\n    let toProperty;\n    chain._bindings.forEach((binding, propertyName) => {\n        // Note: For a binding without a callback, this will run only once\n        // like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n        // TODO: ES6 destructuring.\n        chain._to.forEach(to => {\n            toProperty = to.properties[binding.callback ? 0 : chain._bindProperties.indexOf(propertyName)];\n            binding.to.push([to.observable, toProperty]);\n            updateBoundObservables(chain._observable, binding, to.observable, toProperty);\n        });\n    });\n}\n/**\n * Updates an property of a {@link Observable} with a value\n * determined by an entry in {@link Observable#_boundProperties}.\n *\n * @param observable A observable which property is to be updated.\n * @param propertyName An property to be updated.\n */\nfunction updateBoundObservableProperty(observable, propertyName) {\n    const boundProperties = observable[boundPropertiesSymbol];\n    const binding = boundProperties.get(propertyName);\n    let propertyValue;\n    // When a binding with callback is created like\n    //\n    // \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n    //\n    // collect B.b and C.c, then pass them to callback to set A.a.\n    if (binding.callback) {\n        propertyValue = binding.callback.apply(observable, binding.to.map(to => to[0][to[1]]));\n    }\n    else {\n        propertyValue = binding.to[0];\n        propertyValue = propertyValue[0][propertyValue[1]];\n    }\n    if (Object.prototype.hasOwnProperty.call(observable, propertyName)) {\n        observable[propertyName] = propertyValue;\n    }\n    else {\n        observable.set(propertyName, propertyValue);\n    }\n}\n/**\n * Starts listening to changes in {@link BindChain._to} observables to update\n * {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n * initial state of {@link BindChain._observable}.\n *\n * @param chain The chain initialized by {@link Observable#bind}.\n */\nfunction attachBindToListeners(observable, toBindings) {\n    toBindings.forEach(to => {\n        const boundObservables = observable[boundObservablesSymbol];\n        let bindings;\n        // If there's already a chain between the observables (`observable` listens to\n        // `to.observable`), there's no need to create another `change` event listener.\n        if (!boundObservables.get(to.observable)) {\n            observable.listenTo(to.observable, 'change', (evt, propertyName) => {\n                bindings = boundObservables.get(to.observable)[propertyName];\n                // Note: to.observable will fire for any property change, react\n                // to changes of properties which are bound only.\n                if (bindings) {\n                    bindings.forEach(binding => {\n                        updateBoundObservableProperty(observable, binding.property);\n                    });\n                }\n            });\n        }\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/elementreplacer\n */\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n    constructor() {\n        this._replacedElements = [];\n    }\n    /**\n     * Hides the `element` and, if specified, inserts the the given element next to it.\n     *\n     * The effect of this method can be reverted by {@link #restore}.\n     *\n     * @param element The element to replace.\n     * @param newElement The replacement element. If not passed, then the `element` will just be hidden.\n     */\n    replace(element, newElement) {\n        this._replacedElements.push({ element, newElement });\n        element.style.display = 'none';\n        if (newElement) {\n            element.parentNode.insertBefore(newElement, element.nextSibling);\n        }\n    }\n    /**\n     * Restores what {@link #replace} did.\n     */\n    restore() {\n        this._replacedElements.forEach(({ element, newElement }) => {\n            element.style.display = '';\n            if (newElement) {\n                newElement.remove();\n            }\n        });\n        this._replacedElements = [];\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/count\n */\n/**\n * Returns the number of items return by the iterator.\n *\n * ```ts\n * count( [ 1, 2, 3, 4, 5 ] ); // 5;\n * ```\n *\n * @param iterable Any iterable.\n * @returns Number of items returned by that iterable.\n */\nexport default function count(iterable) {\n    let count = 0;\n    for (const _ of iterable) { // eslint-disable-line no-unused-vars\n        count++;\n    }\n    return count;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/comparearrays\n */\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n * ```ts\n * compareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n * compareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n * compareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n * compareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n * compareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n * ```\n *\n * @param a Array that is compared.\n * @param b Array to compare with.\n * @returns How array `a` is related to `b`.\n */\nexport default function compareArrays(a, b) {\n    const minLen = Math.min(a.length, b.length);\n    for (let i = 0; i < minLen; i++) {\n        if (a[i] != b[i]) {\n            // The arrays are different.\n            return i;\n        }\n    }\n    // Both arrays were same at all points.\n    if (a.length == b.length) {\n        // If their length is also same, they are the same.\n        return 'same';\n    }\n    else if (a.length < b.length) {\n        // Compared array is shorter so it is a prefix of the other array.\n        return 'prefix';\n    }\n    else {\n        // Compared array is longer so it is an extension of the other array.\n        return 'extension';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/isiterable\n */\n/**\n * Checks if value implements iterator interface.\n *\n * @param value The value to check.\n * @returns True if value implements iterator interface.\n */\nexport default function isIterable(value) {\n    return !!(value && value[Symbol.iterator]);\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/createelement\n */\nimport isIterable from '../isiterable';\nimport { isString } from 'lodash-es';\n/**\n * Creates an HTML or SVG element with attributes and children elements.\n *\n * ```ts\n * createElement( document, 'p' ); // <p>\n * createElement( document, 'mask', { xmlns: 'http://www.w3.org/2000/svg' } ); // <mask>\n * ```\n *\n * @param doc Document used to create the element.\n * @param name Name of the element.\n * @param attributes Object where keys represent attribute keys and values represent attribute values.\n * @param children Child or any iterable of children. Strings will be automatically turned into Text nodes.\n * @returns HTML or SVG element.\n */\nexport default function createElement(doc, name, attributes = {}, children = []) {\n    const namespace = attributes && attributes.xmlns;\n    const element = namespace ? doc.createElementNS(namespace, name) : doc.createElement(name);\n    for (const key in attributes) {\n        element.setAttribute(key, attributes[key]);\n    }\n    if (isString(children) || !isIterable(children)) {\n        children = [children];\n    }\n    for (let child of children) {\n        if (isString(child)) {\n            child = doc.createTextNode(child);\n        }\n        element.appendChild(child);\n    }\n    return element;\n}\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/config\n */\nimport { isPlainObject, isElement, cloneDeepWith } from 'lodash-es';\n/**\n * Handles a configuration dictionary.\n *\n * @typeParam Cfg A type of the configuration dictionary.\n */\nexport default class Config {\n    /**\n     * Creates an instance of the {@link ~Config} class.\n     *\n     * @param configurations The initial configurations to be set. Usually, provided by the user.\n     * @param defaultConfigurations The default configurations. Usually, provided by the system.\n     */\n    constructor(configurations, defaultConfigurations) {\n        this._config = {};\n        // Set default configuration.\n        if (defaultConfigurations) {\n            // Clone the configuration to make sure that the properties will not be shared\n            // between editors and make the watchdog feature work correctly.\n            this.define(cloneConfig(defaultConfigurations));\n        }\n        // Set initial configuration.\n        if (configurations) {\n            this._setObjectToTarget(this._config, configurations);\n        }\n    }\n    set(name, value) {\n        this._setToTarget(this._config, name, value);\n    }\n    define(name, value) {\n        const isDefine = true;\n        this._setToTarget(this._config, name, value, isDefine);\n    }\n    /**\n     * Gets the value for a configuration entry.\n     *\n     * ```ts\n     * config.get( 'name' );\n     * ```\n     *\n     * Deep configurations can be retrieved by separating each part with a dot.\n     *\n     * ```ts\n     * config.get( 'toolbar.collapsed' );\n     * ```\n     *\n     * @param name The configuration name. Configuration names are case-sensitive.\n     * @returns The configuration value or `undefined` if the configuration entry was not found.\n     */\n    get(name) {\n        return this._getFromSource(this._config, name);\n    }\n    /**\n     * Iterates over all top level configuration names.\n     */\n    *names() {\n        for (const name of Object.keys(this._config)) {\n            yield name;\n        }\n    }\n    /**\n     * Saves passed configuration to the specified target (nested object).\n     *\n     * @param target Nested config object.\n     * @param name The configuration name or an object from which take properties as\n     * configuration entries. Configuration names are case-sensitive.\n     * @param value The configuration value. Used if a name is passed.\n     * @param isDefine Define if passed configuration should overwrite existing one.\n     */\n    _setToTarget(target, name, value, isDefine = false) {\n        // In case of an object, iterate through it and call `_setToTarget` again for each property.\n        if (isPlainObject(name)) {\n            this._setObjectToTarget(target, name, isDefine);\n            return;\n        }\n        // The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n        const parts = name.split('.');\n        // Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n        name = parts.pop();\n        // Iterate over parts to check if currently stored configuration has proper structure.\n        for (const part of parts) {\n            // If there is no object for specified part then create one.\n            if (!isPlainObject(target[part])) {\n                target[part] = {};\n            }\n            // Nested object becomes a target.\n            target = target[part];\n        }\n        // In case of value is an object.\n        if (isPlainObject(value)) {\n            // We take care of proper config structure.\n            if (!isPlainObject(target[name])) {\n                target[name] = {};\n            }\n            target = target[name];\n            // And iterate through this object calling `_setToTarget` again for each property.\n            this._setObjectToTarget(target, value, isDefine);\n            return;\n        }\n        // Do nothing if we are defining configuration for non empty name.\n        if (isDefine && typeof target[name] != 'undefined') {\n            return;\n        }\n        target[name] = value;\n    }\n    /**\n     * Get specified configuration from specified source (nested object).\n     *\n     * @param source level of nested object.\n     * @param name The configuration name. Configuration names are case-sensitive.\n     * @returns The configuration value or `undefined` if the configuration entry was not found.\n     */\n    _getFromSource(source, name) {\n        // The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n        const parts = name.split('.');\n        // Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n        name = parts.pop();\n        // Iterate over parts to check if currently stored configuration has proper structure.\n        for (const part of parts) {\n            if (!isPlainObject(source[part])) {\n                source = null;\n                break;\n            }\n            // Nested object becomes a source.\n            source = source[part];\n        }\n        // Always returns undefined for non existing configuration.\n        return source ? cloneConfig(source[name]) : undefined;\n    }\n    /**\n     * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n     *\n     * @param target Nested config object.\n     * @param configuration Configuration data set\n     * @param isDefine Defines if passed configuration is default configuration or not.\n     */\n    _setObjectToTarget(target, configuration, isDefine) {\n        Object.keys(configuration).forEach(key => {\n            this._setToTarget(target, key, configuration[key], isDefine);\n        });\n    }\n}\n/**\n * Clones configuration object or value.\n */\nfunction cloneConfig(source) {\n    return cloneDeepWith(source, leaveDOMReferences);\n}\n/**\n * A customized function for cloneDeepWith.\n * It will leave references to DOM Elements instead of cloning them.\n */\nfunction leaveDOMReferences(value) {\n    return isElement(value) ? value : undefined;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/isnode\n */\n/**\n * Checks if the object is a native DOM Node.\n */\nexport default function isNode(obj) {\n    if (obj) {\n        if (obj.defaultView) {\n            return obj instanceof obj.defaultView.Document;\n        }\n        else if (obj.ownerDocument && obj.ownerDocument.defaultView) {\n            return obj instanceof obj.ownerDocument.defaultView.Node;\n        }\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/iswindow\n */\n/**\n * Checks if the object is a native DOM Window.\n */\nexport default function isWindow(obj) {\n    const stringifiedObject = Object.prototype.toString.apply(obj);\n    // Returns `true` for the `window` object in browser environments.\n    if (stringifiedObject == '[object Window]') {\n        return true;\n    }\n    // Returns `true` for the `window` object in the Electron environment.\n    if (stringifiedObject == '[object global]') {\n        return true;\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/emittermixin\n */\nimport EmitterMixin, { _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nconst defaultEmitterClass = DomEmitterMixin(EmitterMixin());\nexport default function DomEmitterMixin(base) {\n    if (!base) {\n        return defaultEmitterClass;\n    }\n    class Mixin extends base {\n        listenTo(emitter, event, callback, options = {}) {\n            // Check if emitter is an instance of DOM Node. If so, use corresponding ProxyEmitter (or create one if not existing).\n            if (isNode(emitter) || isWindow(emitter)) {\n                const proxyOptions = {\n                    capture: !!options.useCapture,\n                    passive: !!options.usePassive\n                };\n                const proxyEmitter = this._getProxyEmitter(emitter, proxyOptions) || new ProxyEmitter(emitter, proxyOptions);\n                this.listenTo(proxyEmitter, event, callback, options);\n            }\n            else {\n                // Execute parent class method with Emitter (or ProxyEmitter) instance.\n                super.listenTo(emitter, event, callback, options);\n            }\n        }\n        stopListening(emitter, event, callback) {\n            // Check if the emitter is an instance of DOM Node. If so, forward the call to the corresponding ProxyEmitters.\n            if (isNode(emitter) || isWindow(emitter)) {\n                const proxyEmitters = this._getAllProxyEmitters(emitter);\n                for (const proxy of proxyEmitters) {\n                    this.stopListening(proxy, event, callback);\n                }\n            }\n            else {\n                // Execute parent class method with Emitter (or ProxyEmitter) instance.\n                super.stopListening(emitter, event, callback);\n            }\n        }\n        /**\n         * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.\n         *\n         * @param node DOM Node of the ProxyEmitter.\n         * @param options Additional options.\n         * @param options.useCapture Indicates that events of this type will be dispatched to the registered\n         * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n         * @param options.usePassive Indicates that the function specified by listener will never call preventDefault()\n         * and prevents blocking browser's main thread by this event handler.\n         * @returns ProxyEmitter instance bound to the DOM Node.\n         */\n        _getProxyEmitter(node, options) {\n            return _getEmitterListenedTo(this, getProxyEmitterId(node, options));\n        }\n        /**\n         * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.\n         *\n         * @param node DOM Node of the ProxyEmitter.\n         */\n        _getAllProxyEmitters(node) {\n            return [\n                { capture: false, passive: false },\n                { capture: false, passive: true },\n                { capture: true, passive: false },\n                { capture: true, passive: true }\n            ].map(options => this._getProxyEmitter(node, options)).filter(proxy => !!proxy);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`\n([\n    '_getProxyEmitter', '_getAllProxyEmitters',\n    'on', 'once', 'off', 'listenTo',\n    'stopListening', 'fire', 'delegate', 'stopDelegating',\n    '_addEventListener', '_removeEventListener'\n]).forEach(key => {\n    DomEmitterMixin[key] = defaultEmitterClass.prototype[key];\n});\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~Emitter#on}.\n * There is a separate instance for each combination of modes (useCapture & usePassive). The mode is concatenated with\n * UID stored in HTMLElement to give each instance unique identifier.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID+mode: {              |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID+mode   |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n */\nclass ProxyEmitter extends EmitterMixin() {\n    /**\n     * @param node DOM Node that fires events.\n     * @param options Additional options.\n     * @param options.useCapture Indicates that events of this type will be dispatched to the registered\n     * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n     * @param options.usePassive Indicates that the function specified by listener will never call preventDefault()\n     * and prevents blocking browser's main thread by this event handler.\n     */\n    constructor(node, options) {\n        super();\n        // Set emitter ID to match DOM Node \"expando\" property.\n        _setEmitterId(this, getProxyEmitterId(node, options));\n        // Remember the DOM Node this ProxyEmitter is bound to.\n        this._domNode = node;\n        // And given options.\n        this._options = options;\n    }\n    /**\n     * Registers a callback function to be executed when an event is fired.\n     *\n     * It attaches a native DOM listener to the DOM Node. When fired,\n     * a corresponding Emitter event will also fire with DOM Event object as an argument.\n     *\n     * **Note**: This is automatically called by the\n     * {@link module:utils/emittermixin~Emitter#listenTo `Emitter#listenTo()`}.\n     *\n     * @param event The name of the event.\n     */\n    attach(event) {\n        // If the DOM Listener for given event already exist it is pointless\n        // to attach another one.\n        if (this._domListeners && this._domListeners[event]) {\n            return;\n        }\n        const domListener = this._createDomListener(event);\n        // Attach the native DOM listener to DOM Node.\n        this._domNode.addEventListener(event, domListener, this._options);\n        if (!this._domListeners) {\n            this._domListeners = {};\n        }\n        // Store the native DOM listener in this ProxyEmitter. It will be helpful\n        // when stopping listening to the event.\n        this._domListeners[event] = domListener;\n    }\n    /**\n     * Stops executing the callback on the given event.\n     *\n     * **Note**: This is automatically called by the\n     * {@link module:utils/emittermixin~Emitter#stopListening `Emitter#stopListening()`}.\n     *\n     * @param event The name of the event.\n     */\n    detach(event) {\n        let events;\n        // Remove native DOM listeners which are orphans. If no callbacks\n        // are awaiting given event, detach native DOM listener from DOM Node.\n        // See: {@link attach}.\n        if (this._domListeners[event] && (!(events = this._events[event]) || !events.callbacks.length)) {\n            this._domListeners[event].removeListener();\n        }\n    }\n    /**\n     * Adds callback to emitter for given event.\n     *\n     * @internal\n     * @param event The name of the event.\n     * @param callback The function to be called on event.\n     * @param options Additional options.\n     */\n    _addEventListener(event, callback, options) {\n        this.attach(event);\n        EmitterMixin().prototype._addEventListener.call(this, event, callback, options);\n    }\n    /**\n     * Removes callback from emitter for given event.\n     *\n     * @internal\n     * @param event The name of the event.\n     * @param callback The function to stop being called.\n     */\n    _removeEventListener(event, callback) {\n        EmitterMixin().prototype._removeEventListener.call(this, event, callback);\n        this.detach(event);\n    }\n    /**\n     * Creates a native DOM listener callback. When the native DOM event\n     * is fired it will fire corresponding event on this ProxyEmitter.\n     * Note: A native DOM Event is passed as an argument.\n     *\n     * @param event The name of the event.\n     * @returns The DOM listener callback.\n     */\n    _createDomListener(event) {\n        const domListener = (domEvt) => {\n            this.fire(event, domEvt);\n        };\n        // Supply the DOM listener callback with a function that will help\n        // detach it from the DOM Node, when it is no longer necessary.\n        // See: {@link detach}.\n        domListener.removeListener = () => {\n            this._domNode.removeEventListener(event, domListener, this._options);\n            delete this._domListeners[event];\n        };\n        return domListener;\n    }\n}\n/**\n * Gets an unique DOM Node identifier. The identifier will be set if not defined.\n *\n * @returns UID for given DOM Node.\n */\nfunction getNodeUID(node) {\n    return node['data-ck-expando'] || (node['data-ck-expando'] = uid());\n}\n/**\n * Gets id of the ProxyEmitter for the given node.\n */\nfunction getProxyEmitterId(node, options) {\n    let id = getNodeUID(node);\n    for (const option of Object.keys(options).sort()) {\n        if (options[option]) {\n            id += '-' + option;\n        }\n    }\n    return id;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n * ```ts\n * import { global } from 'ckeditor5/utils';\n *\n * // This stub will work for any code using global module.\n * testUtils.sinon.stub( global, 'window', {\n * \tinnerWidth: 10000\n * } );\n *\n * console.log( global.window.innerWidth );\n * ```\n */\nlet globalVar; // named globalVar instead of global: https://github.com/ckeditor/ckeditor5/issues/12971\n// In some environments window and document API might not be available.\ntry {\n    globalVar = { window, document };\n}\ncatch (e) {\n    // It's not possible to mock a window object to simulate lack of a window object without writing extremely convoluted code.\n    /* istanbul ignore next -- @preserve */\n    // Let's cast it to not change module's API.\n    // We only handle this so loading editor in environments without window and document doesn't fail.\n    // For better DX we shouldn't introduce mixed types and require developers to check the type manually.\n    // This module should not be used on purpose in any environment outside browser.\n    globalVar = { window: {}, document: {} };\n}\nexport default globalVar;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals Node */\n/**\n * @module utils/dom/getancestors\n */\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param node DOM node.\n * @returns Array of given `node` parents.\n */\nexport default function getAncestors(node) {\n    const nodes = [];\n    let currentNode = node;\n    // We are interested in `Node`s `DocumentFragment`s only.\n    while (currentNode && currentNode.nodeType != Node.DOCUMENT_NODE) {\n        nodes.unshift(currentNode);\n        currentNode = currentNode.parentNode;\n    }\n    return nodes;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/istext\n */\n/**\n * Checks if the object is a native DOM Text node.\n */\nexport default function isText(obj) {\n    return Object.prototype.toString.call(obj) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/isrange\n */\n/**\n * Checks if the object is a native DOM Range.\n */\nexport default function isRange(obj) {\n    return Object.prototype.toString.apply(obj) == '[object Range]';\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/getborderwidths\n */\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param element An element which has CSS borders.\n * @returns An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths(element) {\n    // Call getComputedStyle on the window the element document belongs to.\n    const style = element.ownerDocument.defaultView.getComputedStyle(element);\n    return {\n        top: parseInt(style.borderTopWidth, 10),\n        right: parseInt(style.borderRightWidth, 10),\n        bottom: parseInt(style.borderBottomWidth, 10),\n        left: parseInt(style.borderLeftWidth, 10)\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/rect\n */\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport isText from './istext';\nconst rectProperties = ['top', 'right', 'bottom', 'left', 'width', 'height'];\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n    /**\n     * Creates an instance of rect.\n     *\n     * ```ts\n     * // Rect of an HTMLElement.\n     * const rectA = new Rect( document.body );\n     *\n     * // Rect of a DOM Range.\n     * const rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n     *\n     * // Rect of a window (web browser viewport).\n     * const rectC = new Rect( window );\n     *\n     * // Rect out of an object.\n     * const rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n     *\n     * // Rect out of another Rect instance.\n     * const rectE = new Rect( rectD );\n     *\n     * // Rect out of a ClientRect.\n     * const rectF = new Rect( document.body.getClientRects().item( 0 ) );\n     * ```\n     *\n     * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n     * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n     * to get the inner part of the rect.\n     *\n     * @param source A source object to create the rect.\n     */\n    constructor(source) {\n        const isSourceRange = isRange(source);\n        Object.defineProperty(this, '_source', {\n            // If the source is a Rect instance, copy it's #_source.\n            value: source._source || source,\n            writable: true,\n            enumerable: false\n        });\n        if (isDomElement(source) || isSourceRange) {\n            // The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods. If the source\n            // of a rect in an HTML element or a DOM range but it does not belong to any rendered DOM tree, these methods\n            // will fail to obtain the geometry and the rect instance makes little sense to the features using it.\n            // To get rid of this warning make sure the source passed to the constructor is a descendant of `window.document.body`.\n            // @if CK_DEBUG // const sourceNode = isSourceRange ? source.startContainer : source;\n            // @if CK_DEBUG // if ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n            // @if CK_DEBUG // \tconsole.warn(\n            // @if CK_DEBUG // \t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n            // @if CK_DEBUG // \t\t{ source } );\n            // @if CK_DEBUG // }\n            if (isSourceRange) {\n                const rangeRects = Rect.getDomRangeRects(source);\n                copyRectProperties(this, Rect.getBoundingRect(rangeRects));\n            }\n            else {\n                copyRectProperties(this, source.getBoundingClientRect());\n            }\n        }\n        else if (isWindow(source)) {\n            const { innerWidth, innerHeight } = source;\n            copyRectProperties(this, {\n                top: 0,\n                right: innerWidth,\n                bottom: innerHeight,\n                left: 0,\n                width: innerWidth,\n                height: innerHeight\n            });\n        }\n        else {\n            copyRectProperties(this, source);\n        }\n    }\n    /**\n     * Returns a clone of the rect.\n     *\n     * @returns A cloned rect.\n     */\n    clone() {\n        return new Rect(this);\n    }\n    /**\n     * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n     *\n     * @param x Desired horizontal location.\n     * @param y Desired vertical location.\n     * @returns A rect which has been moved.\n     */\n    moveTo(x, y) {\n        this.top = y;\n        this.right = x + this.width;\n        this.bottom = y + this.height;\n        this.left = x;\n        return this;\n    }\n    /**\n     * Moves the rect in–place by a dedicated offset.\n     *\n     * @param x A horizontal offset.\n     * @param y A vertical offset\n     * @returns A rect which has been moved.\n     */\n    moveBy(x, y) {\n        this.top += y;\n        this.right += x;\n        this.left += x;\n        this.bottom += y;\n        return this;\n    }\n    /**\n     * Returns a new rect a a result of intersection with another rect.\n     */\n    getIntersection(anotherRect) {\n        const rect = {\n            top: Math.max(this.top, anotherRect.top),\n            right: Math.min(this.right, anotherRect.right),\n            bottom: Math.min(this.bottom, anotherRect.bottom),\n            left: Math.max(this.left, anotherRect.left),\n            width: 0,\n            height: 0\n        };\n        rect.width = rect.right - rect.left;\n        rect.height = rect.bottom - rect.top;\n        if (rect.width < 0 || rect.height < 0) {\n            return null;\n        }\n        else {\n            return new Rect(rect);\n        }\n    }\n    /**\n     * Returns the area of intersection with another rect.\n     *\n     * @returns Area of intersection.\n     */\n    getIntersectionArea(anotherRect) {\n        const rect = this.getIntersection(anotherRect);\n        if (rect) {\n            return rect.getArea();\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Returns the area of the rect.\n     */\n    getArea() {\n        return this.width * this.height;\n    }\n    /**\n     * Returns a new rect, a part of the original rect, which is actually visible to the user,\n     * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n     * other than `\"visible\"`.\n     *\n     * If there's no such visible rect, which is when the rect is limited by one or many of\n     * the ancestors, `null` is returned.\n     *\n     * **Note**: This method does not consider the boundaries of the viewport (window).\n     * To get a rect cropped by all ancestors and the viewport, use an intersection such as:\n     *\n     * ```ts\n     * const visibleInViewportRect = new Rect( window ).getIntersection( new Rect( source ).getVisible() );\n     * ```\n     *\n     * @returns A visible rect instance or `null`, if there's none.\n     */\n    getVisible() {\n        const source = this._source;\n        let visibleRect = this.clone();\n        // There's no ancestor to crop <body> with the overflow.\n        if (isBody(source)) {\n            return visibleRect;\n        }\n        let child = source;\n        let parent = source.parentNode || source.commonAncestorContainer;\n        let absolutelyPositionedChildElement;\n        // Check the ancestors all the way up to the <body>.\n        while (parent && !isBody(parent)) {\n            if (child instanceof HTMLElement && getElementPosition(child) === 'absolute') {\n                absolutelyPositionedChildElement = child;\n            }\n            // The child will be cropped only if it has `position: absolute` and the parent has `position: relative` + some overflow.\n            // Otherwise there's no chance of visual clipping and the parent can be skipped\n            // https://github.com/ckeditor/ckeditor5/issues/14107.\n            if (absolutelyPositionedChildElement &&\n                (getElementPosition(parent) !== 'relative' || getElementOverflow(parent) === 'visible')) {\n                child = parent;\n                parent = parent.parentNode;\n                continue;\n            }\n            const parentRect = new Rect(parent);\n            const intersectionRect = visibleRect.getIntersection(parentRect);\n            if (intersectionRect) {\n                if (intersectionRect.getArea() < visibleRect.getArea()) {\n                    // Reduce the visible rect to the intersection.\n                    visibleRect = intersectionRect;\n                }\n            }\n            else {\n                // There's no intersection, the rect is completely invisible.\n                return null;\n            }\n            child = parent;\n            parent = parent.parentNode;\n        }\n        return visibleRect;\n    }\n    /**\n     * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n     * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n     * instances.\n     *\n     * @param anotherRect A rect instance to compare with.\n     * @returns `true` when Rects are equal. `false` otherwise.\n     */\n    isEqual(anotherRect) {\n        for (const prop of rectProperties) {\n            if (this[prop] !== anotherRect[prop]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Checks whether a rect fully contains another rect instance.\n     *\n     * @param anotherRect\n     * @returns `true` if contains, `false` otherwise.\n     */\n    contains(anotherRect) {\n        const intersectRect = this.getIntersection(anotherRect);\n        return !!(intersectRect && intersectRect.isEqual(anotherRect));\n    }\n    /**\n     * Excludes scrollbars and CSS borders from the rect.\n     *\n     * * Borders are removed when {@link #_source} is an HTML element.\n     * * Scrollbars are excluded from HTML elements and the `window`.\n     *\n     * @returns A rect which has been updated.\n     */\n    excludeScrollbarsAndBorders() {\n        const source = this._source;\n        let scrollBarWidth, scrollBarHeight, direction;\n        if (isWindow(source)) {\n            scrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n            scrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n            direction = source.getComputedStyle(source.document.documentElement).direction;\n        }\n        else {\n            const borderWidths = getBorderWidths(source);\n            scrollBarWidth = source.offsetWidth - source.clientWidth - borderWidths.left - borderWidths.right;\n            scrollBarHeight = source.offsetHeight - source.clientHeight - borderWidths.top - borderWidths.bottom;\n            direction = source.ownerDocument.defaultView.getComputedStyle(source).direction;\n            this.left += borderWidths.left;\n            this.top += borderWidths.top;\n            this.right -= borderWidths.right;\n            this.bottom -= borderWidths.bottom;\n            this.width = this.right - this.left;\n            this.height = this.bottom - this.top;\n        }\n        this.width -= scrollBarWidth;\n        if (direction === 'ltr') {\n            this.right -= scrollBarWidth;\n        }\n        else {\n            this.left += scrollBarWidth;\n        }\n        this.height -= scrollBarHeight;\n        this.bottom -= scrollBarHeight;\n        return this;\n    }\n    /**\n     * Returns an array of rects of the given native DOM Range.\n     *\n     * @param range A native DOM range.\n     * @returns DOM Range rects.\n     */\n    static getDomRangeRects(range) {\n        const rects = [];\n        // Safari does not iterate over ClientRectList using for...of loop.\n        const clientRects = Array.from(range.getClientRects());\n        if (clientRects.length) {\n            for (const rect of clientRects) {\n                rects.push(new Rect(rect));\n            }\n        }\n        // If there's no client rects for the Range, use parent container's bounding rect\n        // instead and adjust rect's width to simulate the actual geometry of such range.\n        // https://github.com/ckeditor/ckeditor5-utils/issues/153\n        // https://github.com/ckeditor/ckeditor5-ui/issues/317\n        else {\n            let startContainer = range.startContainer;\n            if (isText(startContainer)) {\n                startContainer = startContainer.parentNode;\n            }\n            const rect = new Rect(startContainer.getBoundingClientRect());\n            rect.right = rect.left;\n            rect.width = 0;\n            rects.push(rect);\n        }\n        return rects;\n    }\n    /**\n     * Returns a bounding rectangle that contains all the given `rects`.\n     *\n     * @param rects A list of rectangles that should be contained in the result rectangle.\n     * @returns Bounding rectangle or `null` if no `rects` were given.\n     */\n    static getBoundingRect(rects) {\n        const boundingRectData = {\n            left: Number.POSITIVE_INFINITY,\n            top: Number.POSITIVE_INFINITY,\n            right: Number.NEGATIVE_INFINITY,\n            bottom: Number.NEGATIVE_INFINITY,\n            width: 0,\n            height: 0\n        };\n        let rectangleCount = 0;\n        for (const rect of rects) {\n            rectangleCount++;\n            boundingRectData.left = Math.min(boundingRectData.left, rect.left);\n            boundingRectData.top = Math.min(boundingRectData.top, rect.top);\n            boundingRectData.right = Math.max(boundingRectData.right, rect.right);\n            boundingRectData.bottom = Math.max(boundingRectData.bottom, rect.bottom);\n        }\n        if (rectangleCount == 0) {\n            return null;\n        }\n        boundingRectData.width = boundingRectData.right - boundingRectData.left;\n        boundingRectData.height = boundingRectData.bottom - boundingRectData.top;\n        return new Rect(boundingRectData);\n    }\n}\n/**\n * Acquires all the rect properties from the passed source.\n */\nfunction copyRectProperties(rect, source) {\n    for (const p of rectProperties) {\n        rect[p] = source[p];\n    }\n}\n/**\n * Checks if provided object is a <body> HTML element.\n */\nfunction isBody(value) {\n    if (!isDomElement(value)) {\n        return false;\n    }\n    return value === value.ownerDocument.body;\n}\n/**\n * Checks if provided object \"looks like\" a DOM Element and has API required by `Rect` class.\n */\nfunction isDomElement(value) {\n    // Note: earlier we used `isElement()` from lodash library, however that function is less performant because\n    // it makes complicated checks to make sure that given value is a DOM element.\n    return value !== null && typeof value === 'object' && value.nodeType === 1 && typeof value.getBoundingClientRect === 'function';\n}\n/**\n * Returns the value of the `position` style of an `HTMLElement`.\n */\nfunction getElementPosition(element) {\n    return element.ownerDocument.defaultView.getComputedStyle(element).position;\n}\n/**\n * Returns the value of the `overflow` style of an `HTMLElement`.\n */\nfunction getElementOverflow(element) {\n    return element.ownerDocument.defaultView.getComputedStyle(element).overflow;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/resizeobserver\n */\nimport global from './global';\n/**\n * A helper class which instances allow performing custom actions when native DOM elements are resized.\n *\n * ```ts\n * const editableElement = editor.editing.view.getDomRoot();\n *\n * const observer = new ResizeObserver( editableElement, entry => {\n * \tconsole.log( 'The editable element has been resized in DOM.' );\n * \tconsole.log( entry.target ); // -> editableElement\n * \tconsole.log( entry.contentRect.width ); // -> e.g. '423px'\n * } );\n * ```\n *\n * It uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood.\n */\nexport default class ResizeObserver {\n    /**\n     * Creates an instance of the `ResizeObserver` class.\n     *\n     * @param element A DOM element that is to be observed for resizing. Note that\n     * the element must be visible (i.e. not detached from DOM) for the observer to work.\n     * @param callback A function called when the observed element was resized. It passes\n     * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n     * object with information about the resize event.\n     */\n    constructor(element, callback) {\n        // **Note**: For the maximum performance, this class ensures only a single instance of the native\n        // observer is used no matter how many instances of this class were created.\n        if (!ResizeObserver._observerInstance) {\n            ResizeObserver._createObserver();\n        }\n        this._element = element;\n        this._callback = callback;\n        ResizeObserver._addElementCallback(element, callback);\n        ResizeObserver._observerInstance.observe(element);\n    }\n    /**\n     * The element observed by this observer.\n     */\n    get element() {\n        return this._element;\n    }\n    /**\n     * Destroys the observer which disables the `callback` passed to the {@link #constructor}.\n     */\n    destroy() {\n        ResizeObserver._deleteElementCallback(this._element, this._callback);\n    }\n    /**\n     * Registers a new resize callback for the DOM element.\n     */\n    static _addElementCallback(element, callback) {\n        if (!ResizeObserver._elementCallbacks) {\n            ResizeObserver._elementCallbacks = new Map();\n        }\n        let callbacks = ResizeObserver._elementCallbacks.get(element);\n        if (!callbacks) {\n            callbacks = new Set();\n            ResizeObserver._elementCallbacks.set(element, callbacks);\n        }\n        callbacks.add(callback);\n    }\n    /**\n     * Removes a resize callback from the DOM element. If no callbacks are left\n     * for the element, it removes the element from the native observer.\n     */\n    static _deleteElementCallback(element, callback) {\n        const callbacks = ResizeObserver._getElementCallbacks(element);\n        // Remove the element callback. Check if exist first in case someone\n        // called destroy() twice.\n        if (callbacks) {\n            callbacks.delete(callback);\n            // If no callbacks left for the element, also remove the element.\n            if (!callbacks.size) {\n                ResizeObserver._elementCallbacks.delete(element);\n                ResizeObserver._observerInstance.unobserve(element);\n            }\n        }\n        if (ResizeObserver._elementCallbacks && !ResizeObserver._elementCallbacks.size) {\n            ResizeObserver._observerInstance = null;\n            ResizeObserver._elementCallbacks = null;\n        }\n    }\n    /**\n     * Returns are registered resize callbacks for the DOM element.\n     */\n    static _getElementCallbacks(element) {\n        if (!ResizeObserver._elementCallbacks) {\n            return null;\n        }\n        return ResizeObserver._elementCallbacks.get(element);\n    }\n    /**\n     * Creates the single native observer shared across all `ResizeObserver` instances.\n     */\n    static _createObserver() {\n        ResizeObserver._observerInstance = new global.window.ResizeObserver(entries => {\n            for (const entry of entries) {\n                const callbacks = ResizeObserver._getElementCallbacks(entry.target);\n                if (callbacks) {\n                    for (const callback of callbacks) {\n                        callback(entry);\n                    }\n                }\n            }\n        });\n    }\n}\n/**\n * The single native observer instance shared across all {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n */\nResizeObserver._observerInstance = null;\n/**\n * A mapping of native DOM elements and their callbacks shared across all\n * {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n */\nResizeObserver._elementCallbacks = null;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/tounit\n */\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param unit An unit like \"px\" or \"em\".\n */\nexport default function toUnit(unit) {\n    return value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/indexof\n */\n/**\n * Returns index of the node in the parent element.\n *\n * @param node Node which index is tested.\n * @returns Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf(node) {\n    let index = 0;\n    while (node.previousSibling) {\n        node = node.previousSibling;\n        index++;\n    }\n    return index;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/insertat\n */\n/**\n * Inserts node to the parent at given index.\n *\n * @param parentElement Parent element.\n * @param index Insertions index.\n * @param nodeToInsert Node to insert.\n */\nexport default function insertAt(parentElement, index, nodeToInsert) {\n    parentElement.insertBefore(nodeToInsert, parentElement.childNodes[index] || null);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals Node */\n/**\n * @module utils/dom/iscomment\n */\n/**\n * Checks whether the object is a native DOM Comment node.\n */\nexport default function isComment(obj) {\n    return obj && obj.nodeType === Node.COMMENT_NODE;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/isvisible\n */\n/**\n * Checks whether the element is visible to the user in DOM:\n *\n * * connected to the root of the document,\n * * has no `display: none`,\n * * has no ancestors with `display: none`.\n *\n * **Note**: This helper does not check whether the element is hidden by cropping, overflow, etc..\n * To check that, use {@link module:utils/dom/rect~Rect} instead.\n */\nexport default function isVisible(element) {\n    return !!(element && element.getClientRects && element.getClientRects().length);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/position\n */\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n// @if CK_DEBUG_POSITION // const RectDrawer = require( '@ckeditor/ckeditor5-utils/tests/_utils/rectdrawer' ).default\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n * ```ts\n * // The element which is to be positioned.\n * const element = document.body.querySelector( '#toolbar' );\n *\n * // A target to which the element is positioned relatively.\n * const target = document.body.querySelector( '#container' );\n *\n * // Finding the optimal coordinates for the positioning.\n * const { left, top, name } = getOptimalPosition( {\n * \telement: element,\n * \ttarget: target,\n *\n * \t// The algorithm will chose among these positions to meet the requirements such\n * \t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t// in the order of the array.\n * \tpositions: [\n * \t\t//\n * \t \t//\t[ Target ]\n * \t\t//\t+-----------------+\n * \t\t//\t|     Element     |\n * \t\t//\t+-----------------+\n * \t\t//\n * \t\ttargetRect => ( {\n * \t\t\ttop: targetRect.bottom,\n * \t\t\tleft: targetRect.left,\n * \t\t\tname: 'mySouthEastPosition'\n * \t\t} ),\n *\n * \t\t//\n * \t\t//\t+-----------------+\n * \t\t//\t|     Element     |\n * \t\t//\t+-----------------+\n * \t\t//\t[ Target ]\n * \t\t//\n * \t\t( targetRect, elementRect ) => ( {\n * \t\t\ttop: targetRect.top - elementRect.height,\n * \t\t\tleft: targetRect.left,\n * \t\t\tname: 'myNorthEastPosition'\n * \t\t} )\n * \t],\n *\n * \t// Find a position such guarantees the element remains within visible boundaries of <body>.\n * \tlimiter: document.body,\n *\n * \t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n * \tfitInViewport: true\n * } );\n *\n * // The best position which fits into document.body and the viewport. May be useful\n * // to set proper class on the `element`.\n * console.log( name ); // -> \"myNorthEastPosition\"\n *\n * // Using the absolute coordinates which has been found to position the element\n * // as in the diagram depicting the \"myNorthEastPosition\" position.\n * element.style.top = top;\n * element.style.left = left;\n * ```\n *\n * @param options The input data and configuration of the helper.\n */\nexport function getOptimalPosition({ element, target, positions, limiter, fitInViewport, viewportOffsetConfig }) {\n    // If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n    // https://github.com/ckeditor/ckeditor5-utils/issues/157\n    if (isFunction(target)) {\n        target = target();\n    }\n    // If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n    // https://github.com/ckeditor/ckeditor5-ui/issues/260\n    if (isFunction(limiter)) {\n        limiter = limiter();\n    }\n    const positionedElementAncestor = getPositionedAncestor(element);\n    const elementRect = new Rect(element);\n    const targetRect = new Rect(target);\n    let bestPosition;\n    // @if CK_DEBUG_POSITION // RectDrawer.clear();\n    // @if CK_DEBUG_POSITION // RectDrawer.draw( targetRect, { outlineWidth: '5px' }, 'Target' );\n    const viewportRect = fitInViewport && getConstrainedViewportRect(viewportOffsetConfig) || null;\n    const positionOptions = { targetRect, elementRect, positionedElementAncestor, viewportRect };\n    // If there are no limits, just grab the very first position and be done with that drama.\n    if (!limiter && !fitInViewport) {\n        bestPosition = new PositionObject(positions[0], positionOptions);\n    }\n    else {\n        const limiterRect = limiter && new Rect(limiter).getVisible();\n        // @if CK_DEBUG_POSITION // if ( viewportRect ) {\n        // @if CK_DEBUG_POSITION //\t\tRectDrawer.draw( viewportRect, { outlineWidth: '5px' }, 'Viewport' );\n        // @if CK_DEBUG_POSITION // }\n        // @if CK_DEBUG_POSITION // if ( limiter ) {\n        // @if CK_DEBUG_POSITION // \tRectDrawer.draw( limiterRect, { outlineWidth: '5px', outlineColor: 'green' }, 'Visible limiter' );\n        // @if CK_DEBUG_POSITION // }\n        Object.assign(positionOptions, { limiterRect, viewportRect });\n        // If there's no best position found, i.e. when all intersections have no area because\n        // rects have no width or height, then just use the first available position.\n        bestPosition = getBestPosition(positions, positionOptions) || new PositionObject(positions[0], positionOptions);\n    }\n    return bestPosition;\n}\n/**\n * Returns a viewport `Rect` shrunk by the viewport offset config from all sides.\n */\nfunction getConstrainedViewportRect(viewportOffsetConfig) {\n    viewportOffsetConfig = Object.assign({ top: 0, bottom: 0, left: 0, right: 0 }, viewportOffsetConfig);\n    const viewportRect = new Rect(global.window);\n    viewportRect.top += viewportOffsetConfig.top;\n    viewportRect.height -= viewportOffsetConfig.top;\n    viewportRect.bottom -= viewportOffsetConfig.bottom;\n    viewportRect.height -= viewportOffsetConfig.bottom;\n    return viewportRect;\n}\n/**\n * For a given array of positioning functions, returns such that provides the best\n * fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n */\nfunction getBestPosition(positions, options) {\n    const { elementRect } = options;\n    // This is when element is fully visible.\n    const elementRectArea = elementRect.getArea();\n    const positionInstances = positions\n        .map(positioningFunction => new PositionObject(positioningFunction, options))\n        // Some positioning functions may return `null` if they don't want to participate.\n        .filter(position => !!position.name);\n    let maxFitFactor = 0;\n    let bestPosition = null;\n    for (const position of positionInstances) {\n        const { limiterIntersectionArea, viewportIntersectionArea } = position;\n        // If a such position is found that element is fully contained by the limiter then, obviously,\n        // there will be no better one, so finishing.\n        if (limiterIntersectionArea === elementRectArea) {\n            return position;\n        }\n        // To maximize both viewport and limiter intersection areas we use distance on _viewportIntersectionArea\n        // and _limiterIntersectionArea plane (without sqrt because we are looking for max value).\n        const fitFactor = viewportIntersectionArea ** 2 + limiterIntersectionArea ** 2;\n        if (fitFactor > maxFitFactor) {\n            maxFitFactor = fitFactor;\n            bestPosition = position;\n        }\n    }\n    return bestPosition;\n}\n/**\n * For a given absolute Rect coordinates object and a positioned element ancestor, it updates its\n * coordinates that make up for the position and the scroll of the ancestor.\n *\n * This is necessary because while Rects (and DOMRects) are relative to the browser's viewport, their coordinates\n * are used in real–life to position elements with `position: absolute`, which are scoped by any positioned\n * (and scrollable) ancestors.\n */\nfunction shiftRectToCompensatePositionedAncestor(rect, positionedElementAncestor) {\n    const ancestorPosition = getRectForAbsolutePositioning(new Rect(positionedElementAncestor));\n    const ancestorBorderWidths = getBorderWidths(positionedElementAncestor);\n    let moveX = 0;\n    let moveY = 0;\n    // (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n    // If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n    // consideration. `Rect` is always relative to the viewport while `position: absolute` works\n    // with respect to that positioned ancestor.\n    moveX -= ancestorPosition.left;\n    moveY -= ancestorPosition.top;\n    // (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n    // If there's some positioned ancestor of the panel, not only its position must be taken into\n    // consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n    // is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n    // must compensate that scrolling.\n    moveX += positionedElementAncestor.scrollLeft;\n    moveY += positionedElementAncestor.scrollTop;\n    // (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n    // If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n    // while `position: absolute` positioning does not consider it.\n    // E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n    // not upper-left corner of its border.\n    moveX -= ancestorBorderWidths.left;\n    moveY -= ancestorBorderWidths.top;\n    rect.moveBy(moveX, moveY);\n}\n/**\n * DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n * This function converts Rect to `position: absolute` coordinates.\n */\nfunction getRectForAbsolutePositioning(rect) {\n    const { scrollX, scrollY } = global.window;\n    return rect.clone().moveBy(scrollX, scrollY);\n}\n/**\n * A position class which instances are created and used by the {@link module:utils/dom/position~getOptimalPosition} helper.\n *\n * {@link module:utils/dom/position~Position#top} and {@link module:utils/dom/position~Position#left} properties of the position instance\n * translate directly to the `top` and `left` properties in CSS \"`position: absolute` coordinate system\". If set on the positioned element\n * in DOM, they will make it display it in the right place in the viewport.\n */\nclass PositionObject {\n    /**\n     * Creates an instance of the {@link module:utils/dom/position~PositionObject} class.\n     *\n     * @param positioningFunction function The function that defines the expected\n     * coordinates the positioned element should move to.\n     * @param options options object.\n     * @param options.elementRect The positioned element rect.\n     * @param options.targetRect The target element rect.\n     * @param options.viewportRect The viewport rect.\n     * @param options.limiterRect The limiter rect.\n     * @param options.positionedElementAncestor Nearest element ancestor element which CSS position is not \"static\".\n     */\n    constructor(positioningFunction, options) {\n        const positioningFunctionOutput = positioningFunction(options.targetRect, options.elementRect, options.viewportRect);\n        // Nameless position for a function that didn't participate.\n        if (!positioningFunctionOutput) {\n            return;\n        }\n        const { left, top, name, config } = positioningFunctionOutput;\n        this.name = name;\n        this.config = config;\n        this._positioningFunctionCorrdinates = { left, top };\n        this._options = options;\n    }\n    /**\n     * The left value in pixels in the CSS `position: absolute` coordinate system.\n     * Set it on the positioned element in DOM to move it to the position.\n     */\n    get left() {\n        return this._absoluteRect.left;\n    }\n    /**\n     * The top value in pixels in the CSS `position: absolute` coordinate system.\n     * Set it on the positioned element in DOM to move it to the position.\n     */\n    get top() {\n        return this._absoluteRect.top;\n    }\n    /**\n     * An intersection area between positioned element and limiter within viewport constraints.\n     */\n    get limiterIntersectionArea() {\n        const limiterRect = this._options.limiterRect;\n        if (limiterRect) {\n            const viewportRect = this._options.viewportRect;\n            if (viewportRect) {\n                // Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n                const limiterViewportIntersectRect = limiterRect.getIntersection(viewportRect);\n                if (limiterViewportIntersectRect) {\n                    // If the limiter is within the viewport, then check the intersection between that part of the\n                    // limiter and actual position.\n                    return limiterViewportIntersectRect.getIntersectionArea(this._rect);\n                }\n            }\n            else {\n                return limiterRect.getIntersectionArea(this._rect);\n            }\n        }\n        return 0;\n    }\n    /**\n     * An intersection area between positioned element and viewport.\n     */\n    get viewportIntersectionArea() {\n        const viewportRect = this._options.viewportRect;\n        if (viewportRect) {\n            return viewportRect.getIntersectionArea(this._rect);\n        }\n        return 0;\n    }\n    /**\n     * An already positioned element rect. A clone of the element rect passed to the constructor\n     * but placed in the viewport according to the positioning function.\n     */\n    get _rect() {\n        if (this._cachedRect) {\n            return this._cachedRect;\n        }\n        this._cachedRect = this._options.elementRect.clone().moveTo(this._positioningFunctionCorrdinates.left, this._positioningFunctionCorrdinates.top);\n        return this._cachedRect;\n    }\n    /**\n     * An already absolutely positioned element rect. See ({@link #_rect}).\n     */\n    get _absoluteRect() {\n        if (this._cachedAbsoluteRect) {\n            return this._cachedAbsoluteRect;\n        }\n        this._cachedAbsoluteRect = getRectForAbsolutePositioning(this._rect);\n        if (this._options.positionedElementAncestor) {\n            shiftRectToCompensatePositionedAncestor(this._cachedAbsoluteRect, this._options.positionedElementAncestor);\n        }\n        return this._cachedAbsoluteRect;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/getpositionedancestor\n */\nimport global from './global';\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param element The native DOM element to be checked.\n */\nexport default function getPositionedAncestor(element) {\n    if (!element || !element.parentNode) {\n        return null;\n    }\n    if (element.offsetParent === global.document.body) {\n        return null;\n    }\n    return element.offsetParent;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/remove\n */\n/**\n * Removes given node from parent.\n *\n * @param node Node to remove.\n */\nexport default function remove(node) {\n    const parent = node.parentNode;\n    if (parent) {\n        parent.removeChild(node);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/scroll\n */\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param options Additional configuration of the scrolling behavior.\n * @param options.target A target, which supposed to become visible to the user.\n * @param options.viewportOffset An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by if the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n * @param options.ancestorOffset An offset from the boundary of scrollable ancestors (if any)\n * the `target` will be moved by if the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the ancestors and thus making it easier to\n * read or edit by the user.\n * @param options.alignToTop When set `true`, the helper will make sure the `target` is scrolled up\n * to the top boundary of the viewport and/or scrollable ancestors if scrolled up. When not set\n * (default), the `target` will be revealed by scrolling as little as possible. This option will\n * not affect `targets` that must be scrolled down because they will appear at the top of the boundary\n * anyway.\n *\n * ```\n *                                             scrollViewportToShowTarget() with            scrollViewportToShowTarget() with\n *          Initial state                        alignToTop unset (default)                        alignToTop = true\n *\n * ┌────────────────────────────────┬─┐       ┌────────────────────────────────┬─┐        ┌────────────────────────────────┬─┐\n * │                                │▲│       │                                │▲│        │   [ Target to be revealed ]    │▲│\n * │                                │ │       │                                │ │        │                                │ │\n * │                                │█│       │                                │ │        │                                │ │\n * │                                │█│       │                                │ │        │                                │ │\n * │                                │ │       │                                │█│        │                                │ │\n * │                                │ │       │                                │█│        │                                │█│\n * │                                │ │       │                                │ │        │                                │█│\n * │                                │▼│       │   [ Target to be revealed ]    │▼│        │                                │▼│\n * └────────────────────────────────┴─┘       └────────────────────────────────┴─┘        └────────────────────────────────┴─┘\n *\n *\n *     [ Target to be revealed ]\n *```\n *\n * @param options.forceScroll When set `true`, the `target` will be aligned to the top of the viewport\n * and scrollable ancestors whether it is already visible or not. This option will only work when `alignToTop`\n * is `true`\n */\nexport function scrollViewportToShowTarget({ target, viewportOffset = 0, ancestorOffset = 0, alignToTop, forceScroll }) {\n    const targetWindow = getWindow(target);\n    let currentWindow = targetWindow;\n    let currentFrame = null;\n    viewportOffset = normalizeViewportOffset(viewportOffset);\n    // Iterate over all windows, starting from target's parent window up to window#top.\n    while (currentWindow) {\n        let firstAncestorToScroll;\n        // Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n        // settled down, the algorithm can eventually scroll the viewport of the current window.\n        //\n        // Note: If the current window is target's **original** window (e.g. the first one),\n        // start scrolling the closest parent of the target. If not, scroll the closest parent\n        // of an iframe that resides in the current window.\n        if (currentWindow == targetWindow) {\n            firstAncestorToScroll = getParentElement(target);\n        }\n        else {\n            firstAncestorToScroll = getParentElement(currentFrame);\n        }\n        // Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n        scrollAncestorsToShowRect({\n            parent: firstAncestorToScroll,\n            getRect: () => {\n                // Note: If the target does not belong to the current window **directly**,\n                // i.e. it resides in an iframe belonging to the window, obtain the target's rect\n                // in the coordinates of the current window. By default, a Rect returns geometry\n                // relative to the current window's viewport. To make it work in a parent window,\n                // it must be shifted.\n                return getRectRelativeToWindow(target, currentWindow);\n            },\n            alignToTop,\n            ancestorOffset,\n            forceScroll\n        });\n        // Obtain the rect of the target after it has been scrolled within its ancestors.\n        // It's time to scroll the viewport.\n        const targetRect = getRectRelativeToWindow(target, currentWindow);\n        scrollWindowToShowRect({\n            window: currentWindow,\n            rect: targetRect,\n            viewportOffset,\n            alignToTop,\n            forceScroll\n        });\n        if (currentWindow.parent != currentWindow) {\n            // Keep the reference to the <iframe> element the \"previous current window\" was\n            // rendered within. It will be useful to re–calculate the rect of the target\n            // in the parent window's relative geometry. The target's rect must be shifted\n            // by it's iframe's position.\n            currentFrame = currentWindow.frameElement;\n            currentWindow = currentWindow.parent;\n            // If the current window has some parent but frameElement is inaccessible, then they have\n            // different domains/ports and, due to security reasons, accessing and scrolling\n            // the parent window won't be possible.\n            // See https://github.com/ckeditor/ckeditor5/issues/930.\n            if (!currentFrame) {\n                return;\n            }\n        }\n        else {\n            currentWindow = null;\n        }\n    }\n}\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param target A target, which supposed to become visible to the user.\n * @param ancestorOffset An offset between the target and the boundary of scrollable ancestors\n * to be maintained while scrolling.\n */\nexport function scrollAncestorsToShowTarget(target, ancestorOffset) {\n    const targetParent = getParentElement(target);\n    scrollAncestorsToShowRect({\n        parent: targetParent,\n        getRect: () => new Rect(target),\n        ancestorOffset\n    });\n}\n/**\n * Makes a given rect visible within its parent window.\n *\n * Note: Avoid the situation where the caret is still in the viewport, but totally\n * at the edge of it. In such situation, if it moved beyond the viewport in the next\n * action e.g. after paste, the scrolling would move it to the viewportOffset level\n * and it all would look like the caret visually moved up/down:\n *\n * 1.\n * ```\n * | foo[]\n * |                                    <--- N px of space below the caret\n * +---------------------------------...\n * ```\n *\n * 2. *paste*\n * 3.\n * ```\n * |\n * |\n * +-foo-----------------------------...\n *   bar[]                              <--- caret below viewport, scrolling...\n * ```\n *\n * 4. *scrolling*\n * 5.\n * ```\n * |\n * | foo\n * | bar[]                              <--- caret precisely at the edge\n * +---------------------------------...\n * ```\n *\n * To prevent this, this method checks the rects moved by the viewportOffset to cover\n * the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n * no twitching – it's a purely visual improvement:\n *\n * 5. (after fix)\n * ```\n * |\n * | foo\n * | bar[]\n * |                                    <--- N px of space below the caret\n * +---------------------------------...\n * ```\n *\n * @param options Additional configuration of the scrolling behavior.\n * @param options.window A window which is scrolled to reveal the rect.\n * @param options.rect A rect which is to be revealed.\n * @param options.viewportOffset An offset from the edge of the viewport (in pixels) the `rect` will be\n * moved by if the viewport is scrolled.\n * @param options.alignToTop When set `true`, the helper will make sure the `rect` is scrolled up\n * to the top boundary of the viewport if scrolled up. When not set (default), the `rect` will be\n * revealed by scrolling as little as possible. This option will not affect rects that must be scrolled\n * down because they will appear at the top of the boundary anyway.\n * @param options.forceScroll When set `true`, the `rect` will be aligned to the top of the viewport\n * whether it is already visible or not. This option will only work when `alignToTop` is `true`\n */\nfunction scrollWindowToShowRect({ window, rect, alignToTop, forceScroll, viewportOffset }) {\n    const targetShiftedDownRect = rect.clone().moveBy(0, viewportOffset.bottom);\n    const targetShiftedUpRect = rect.clone().moveBy(0, -viewportOffset.top);\n    const viewportRect = new Rect(window).excludeScrollbarsAndBorders();\n    const rects = [targetShiftedUpRect, targetShiftedDownRect];\n    const forceScrollToTop = alignToTop && forceScroll;\n    const allRectsFitInViewport = rects.every(rect => viewportRect.contains(rect));\n    let { scrollX, scrollY } = window;\n    const initialScrollX = scrollX;\n    const initialScrollY = scrollY;\n    if (forceScrollToTop) {\n        scrollY -= (viewportRect.top - rect.top) + viewportOffset.top;\n    }\n    else if (!allRectsFitInViewport) {\n        if (isAbove(targetShiftedUpRect, viewportRect)) {\n            scrollY -= viewportRect.top - rect.top + viewportOffset.top;\n        }\n        else if (isBelow(targetShiftedDownRect, viewportRect)) {\n            if (alignToTop) {\n                scrollY += rect.top - viewportRect.top - viewportOffset.top;\n            }\n            else {\n                scrollY += rect.bottom - viewportRect.bottom + viewportOffset.bottom;\n            }\n        }\n    }\n    if (!allRectsFitInViewport) {\n        // TODO: Web browsers scroll natively to place the target in the middle\n        // of the viewport. It's not a very popular case, though.\n        if (isLeftOf(rect, viewportRect)) {\n            scrollX -= viewportRect.left - rect.left + viewportOffset.left;\n        }\n        else if (isRightOf(rect, viewportRect)) {\n            scrollX += rect.right - viewportRect.right + viewportOffset.right;\n        }\n    }\n    if (scrollX != initialScrollX || scrollY !== initialScrollY) {\n        window.scrollTo(scrollX, scrollY);\n    }\n}\n/**\n * Recursively scrolls element ancestors to visually reveal a rect.\n *\n * @param options Additional configuration of the scrolling behavior.\n * @param options.parent The first parent ancestor to start scrolling.\n * @param options.getRect A function which returns the Rect, which is to be revealed.\n * @param options.ancestorOffset An offset from the boundary of scrollable ancestors (if any)\n * the `Rect` instance will be moved by if the viewport is scrolled.\n * @param options.alignToTop When set `true`, the helper will make sure the `Rect` instance is scrolled up\n * to the top boundary of the scrollable ancestors if scrolled up. When not set (default), the `rect`\n * will be revealed by scrolling as little as possible. This option will not affect rects that must be\n * scrolled down because they will appear at the top of the boundary\n * anyway.\n * @param options.forceScroll When set `true`, the `rect` will be aligned to the top of scrollable ancestors\n * whether it is already visible or not. This option will only work when `alignToTop` is `true`\n */\nfunction scrollAncestorsToShowRect({ parent, getRect, alignToTop, forceScroll, ancestorOffset = 0 }) {\n    const parentWindow = getWindow(parent);\n    const forceScrollToTop = alignToTop && forceScroll;\n    let parentRect, targetRect, targetFitsInTarget;\n    while (parent != parentWindow.document.body) {\n        targetRect = getRect();\n        parentRect = new Rect(parent).excludeScrollbarsAndBorders();\n        targetFitsInTarget = parentRect.contains(targetRect);\n        if (forceScrollToTop) {\n            parent.scrollTop -= (parentRect.top - targetRect.top) + ancestorOffset;\n        }\n        else if (!targetFitsInTarget) {\n            if (isAbove(targetRect, parentRect)) {\n                parent.scrollTop -= parentRect.top - targetRect.top + ancestorOffset;\n            }\n            else if (isBelow(targetRect, parentRect)) {\n                if (alignToTop) {\n                    parent.scrollTop += targetRect.top - parentRect.top - ancestorOffset;\n                }\n                else {\n                    parent.scrollTop += targetRect.bottom - parentRect.bottom + ancestorOffset;\n                }\n            }\n        }\n        if (!targetFitsInTarget) {\n            if (isLeftOf(targetRect, parentRect)) {\n                parent.scrollLeft -= parentRect.left - targetRect.left + ancestorOffset;\n            }\n            else if (isRightOf(targetRect, parentRect)) {\n                parent.scrollLeft += targetRect.right - parentRect.right + ancestorOffset;\n            }\n        }\n        parent = parent.parentNode;\n    }\n}\n/**\n * Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n */\nfunction isBelow(firstRect, secondRect) {\n    return firstRect.bottom > secondRect.bottom;\n}\n/**\n * Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n */\nfunction isAbove(firstRect, secondRect) {\n    return firstRect.top < secondRect.top;\n}\n/**\n * Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n */\nfunction isLeftOf(firstRect, secondRect) {\n    return firstRect.left < secondRect.left;\n}\n/**\n * Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n */\nfunction isRightOf(firstRect, secondRect) {\n    return firstRect.right > secondRect.right;\n}\n/**\n * Returns the closest window of an element or range.\n */\nfunction getWindow(elementOrRange) {\n    if (isRange(elementOrRange)) {\n        return elementOrRange.startContainer.ownerDocument.defaultView;\n    }\n    else {\n        return elementOrRange.ownerDocument.defaultView;\n    }\n}\n/**\n * Returns the closest parent of an element or DOM range.\n */\nfunction getParentElement(elementOrRange) {\n    if (isRange(elementOrRange)) {\n        let parent = elementOrRange.commonAncestorContainer;\n        // If a Range is attached to the Text, use the closest element ancestor.\n        if (isText(parent)) {\n            parent = parent.parentNode;\n        }\n        return parent;\n    }\n    else {\n        return elementOrRange.parentNode;\n    }\n}\n/**\n * Returns the rect of an element or range residing in an iframe.\n * The result rect is relative to the geometry of the passed window instance.\n *\n * @param target Element or range which rect should be returned.\n * @param relativeWindow A window the rect should be relative to.\n */\nfunction getRectRelativeToWindow(target, relativeWindow) {\n    const targetWindow = getWindow(target);\n    const rect = new Rect(target);\n    if (targetWindow === relativeWindow) {\n        return rect;\n    }\n    else {\n        let currentWindow = targetWindow;\n        while (currentWindow != relativeWindow) {\n            const frame = currentWindow.frameElement;\n            const frameRect = new Rect(frame).excludeScrollbarsAndBorders();\n            rect.moveBy(frameRect.left, frameRect.top);\n            currentWindow = currentWindow.parent;\n        }\n    }\n    return rect;\n}\n/**\n * A helper that explodes the `viewportOffset` configuration if defined as a plain number into an object\n * with `top`, `bottom`, `left`, and `right` properties.\n *\n * If an object value is passed, this helper will pass it through.\n *\n * @param viewportOffset Viewport offset to be normalized.\n */\nfunction normalizeViewportOffset(viewportOffset) {\n    if (typeof viewportOffset === 'number') {\n        return {\n            top: viewportOffset,\n            bottom: viewportOffset,\n            left: viewportOffset,\n            right: viewportOffset\n        };\n    }\n    return viewportOffset;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\nconst modifiersToGlyphsMac = {\n    ctrl: '⌃',\n    cmd: '⌘',\n    alt: '⌥',\n    shift: '⇧'\n};\nconst modifiersToGlyphsNonMac = {\n    ctrl: 'Ctrl+',\n    alt: 'Alt+',\n    shift: 'Shift+'\n};\n/**\n * An object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `` ` ``, `-`, `=`, `[`, `]`, `;`, `'`, `,`, `.`, `/`, `\\`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\nconst keyCodeNames = Object.fromEntries(Object.entries(keyCodes).map(([name, code]) => [code, name.charAt(0).toUpperCase() + name.slice(1)]));\n/**\n * Converts a key name or {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard#keyCodes} in a case-insensitive way.\n *\n * @param key A key name (see {@link module:utils/keyboard#keyCodes}) or a keystroke data object.\n * @returns Key or keystroke code.\n */\nexport function getCode(key) {\n    let keyCode;\n    if (typeof key == 'string') {\n        keyCode = keyCodes[key.toLowerCase()];\n        if (!keyCode) {\n            /**\n             * Unknown key name. Only key names included in the {@link module:utils/keyboard#keyCodes} can be used.\n             *\n             * @error keyboard-unknown-key\n             * @param {String} key\n             */\n            throw new CKEditorError('keyboard-unknown-key', null, { key });\n        }\n    }\n    else {\n        keyCode = key.keyCode +\n            (key.altKey ? keyCodes.alt : 0) +\n            (key.ctrlKey ? keyCodes.ctrl : 0) +\n            (key.shiftKey ? keyCodes.shift : 0) +\n            (key.metaKey ? keyCodes.cmd : 0);\n    }\n    return keyCode;\n}\n/**\n * Parses the keystroke and returns a keystroke code that will match the code returned by\n * {@link module:utils/keyboard~getCode} for the corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard#keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * Note: On macOS, keystroke handling is translating the `Ctrl` key to the `Cmd` key and handling only that keystroke.\n * For example, a registered keystroke `Ctrl+A` will be translated to `Cmd+A` on macOS. To disable the translation of some keystroke,\n * use the forced modifier: `Ctrl!+A` (note the exclamation mark).\n *\n * @param keystroke The keystroke definition.\n * @returns Keystroke code.\n */\nexport function parseKeystroke(keystroke) {\n    if (typeof keystroke == 'string') {\n        keystroke = splitKeystrokeText(keystroke);\n    }\n    return keystroke\n        .map(key => (typeof key == 'string') ? getEnvKeyCode(key) : key)\n        .reduce((key, sum) => sum + key, 0);\n}\n/**\n * Translates any keystroke string text like `\"Ctrl+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on macOS.\n *\n * @param keystroke The keystroke text.\n * @returns The keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText(keystroke) {\n    let keystrokeCode = parseKeystroke(keystroke);\n    const modifiersToGlyphs = Object.entries(env.isMac ? modifiersToGlyphsMac : modifiersToGlyphsNonMac);\n    const modifiers = modifiersToGlyphs.reduce((modifiers, [name, glyph]) => {\n        // Modifier keys are stored as a bit mask so extract those from the keystroke code.\n        if ((keystrokeCode & keyCodes[name]) != 0) {\n            keystrokeCode &= ~keyCodes[name];\n            modifiers += glyph;\n        }\n        return modifiers;\n    }, '');\n    return modifiers + (keystrokeCode ? keyCodeNames[keystrokeCode] : '');\n}\n/**\n * Returns `true` if the provided key code represents one of the arrow keys.\n *\n * @param keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n */\nexport function isArrowKeyCode(keyCode) {\n    return keyCode == keyCodes.arrowright ||\n        keyCode == keyCodes.arrowleft ||\n        keyCode == keyCodes.arrowup ||\n        keyCode == keyCodes.arrowdown;\n}\n/**\n * Returns the direction in which the {@link module:engine/model/documentselection~DocumentSelection selection}\n * will move when the provided arrow key code is pressed considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) content languages, pressing the left arrow means moving the selection right (forward)\n * in the model structure. Similarly, pressing the right arrow moves the selection left (backward).\n *\n * @param keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n * @returns Localized arrow direction or `undefined` for non-arrow key codes.\n */\nexport function getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection) {\n    const isLtrContent = contentLanguageDirection === 'ltr';\n    switch (keyCode) {\n        case keyCodes.arrowleft:\n            return isLtrContent ? 'left' : 'right';\n        case keyCodes.arrowright:\n            return isLtrContent ? 'right' : 'left';\n        case keyCodes.arrowup:\n            return 'up';\n        case keyCodes.arrowdown:\n            return 'down';\n    }\n}\n/**\n * Converts a key name to the key code with mapping based on the env.\n *\n * See: {@link module:utils/keyboard~getCode}.\n *\n * @param key The key name (see {@link module:utils/keyboard#keyCodes}).\n * @returns Key code.\n */\nfunction getEnvKeyCode(key) {\n    // Don't remap modifier key for forced modifiers.\n    if (key.endsWith('!')) {\n        return getCode(key.slice(0, -1));\n    }\n    const code = getCode(key);\n    return env.isMac && code == keyCodes.ctrl ? keyCodes.cmd : code;\n}\n/**\n * Determines if the provided key code moves the {@link module:engine/model/documentselection~DocumentSelection selection}\n * forward or backward considering the language direction of the editor content.\n *\n * For instance, in right–to–left (RTL) languages, pressing the left arrow means moving forward\n * in the model structure. Similarly, pressing the right arrow moves the selection backward.\n *\n * @param keyCode A key code as in {@link module:utils/keyboard~KeystrokeInfo#keyCode}.\n * @param contentLanguageDirection The content language direction, corresponding to\n * {@link module:utils/locale~Locale#contentLanguageDirection}.\n */\nexport function isForwardArrowKeyCode(keyCode, contentLanguageDirection) {\n    const localizedKeyCodeDirection = getLocalizedArrowKeyCodeDirection(keyCode, contentLanguageDirection);\n    return localizedKeyCodeDirection === 'down' || localizedKeyCodeDirection === 'right';\n}\nfunction generateKnownKeyCodes() {\n    const keyCodes = {\n        arrowleft: 37,\n        arrowup: 38,\n        arrowright: 39,\n        arrowdown: 40,\n        backspace: 8,\n        delete: 46,\n        enter: 13,\n        space: 32,\n        esc: 27,\n        tab: 9,\n        // The idea about these numbers is that they do not collide with any real key codes, so we can use them\n        // like bit masks.\n        ctrl: 0x110000,\n        shift: 0x220000,\n        alt: 0x440000,\n        cmd: 0x880000\n    };\n    // a-z\n    for (let code = 65; code <= 90; code++) {\n        const letter = String.fromCharCode(code);\n        keyCodes[letter.toLowerCase()] = code;\n    }\n    // 0-9\n    for (let code = 48; code <= 57; code++) {\n        keyCodes[code - 48] = code;\n    }\n    // F1-F12\n    for (let code = 112; code <= 123; code++) {\n        keyCodes['f' + (code - 111)] = code;\n    }\n    // other characters\n    for (const char of '`-=[];\\',./\\\\') {\n        keyCodes[char] = char.charCodeAt(0);\n    }\n    return keyCodes;\n}\nfunction splitKeystrokeText(keystroke) {\n    return keystroke.split('+').map(key => key.trim());\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nexport default function toArray(data) {\n    return Array.isArray(data) ? data : [data];\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable no-var */\n/**\n * @module utils/translation-service\n */\nimport CKEditorError from './ckeditorerror';\nimport global from './dom/global';\n/* istanbul ignore else -- @preserve */\nif (!global.window.CKEDITOR_TRANSLATIONS) {\n    global.window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Adds translations to existing ones or overrides the existing translations. These translations will later\n * be available for the {@link module:utils/locale~Locale#t `t()`} function.\n *\n * The `translations` is an object which consists of `messageId: translation` pairs. Note that the message ID can be\n * either constructed from the message string or from the message ID if it was passed\n * (this happens rarely and mostly for short messages or messages with placeholders).\n * Since the editor displays only the message string, the message ID can be found either in the source code or in the\n * built translations for another language.\n *\n * ```ts\n * add( 'pl', {\n * \t'Cancel': 'Anuluj',\n * \t'IMAGE': 'obraz', // Note that the `IMAGE` comes from the message ID, while the string can be `image`.\n * } );\n * ```\n *\n * If the message is supposed to support various plural forms, make sure to provide an array with the singular form and all plural forms:\n *\n * ```ts\n * add( 'pl', {\n * \t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n * } );\n * ```\n *\n * You should also specify the third argument (the `getPluralForm()` function) that will be used to determine the plural form if no\n * language file was loaded for that language. All language files coming from CKEditor 5 sources will have this option set, so\n * these plural form rules will be reused by other translations added to the registered languages. The `getPluralForm()` function\n * can return either a Boolean or a number.\n *\n * ```ts\n * add( 'en', {\n * \t// ... Translations.\n * }, n => n !== 1 );\n * add( 'pl', {\n * \t// ... Translations.\n * }, n => n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && ( n % 100 < 10 || n % 100 >= 20 ) ? 1 : 2 );\n * ```\n *\n * All translations extend the global `window.CKEDITOR_TRANSLATIONS` object. An example of this object can be found below:\n *\n * ```ts\n * {\n * \tpl: {\n * \t\tdictionary: {\n * \t\t\t'Cancel': 'Anuluj',\n * \t\t\t'Add space': [ 'Dodaj spację', 'Dodaj %0 spacje', 'Dodaj %0 spacji' ]\n * \t\t},\n * \t\t// A function that returns the plural form index.\n * \t\tgetPluralForm: n => n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && ( n % 100 < 10 || n % 100 >= 20 ) ? 1 : 2 );\n * \t}\n * \t// Other languages.\n * \t}\n * ```\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n * ```ts\n * function addTranslations( language, translations, getPluralForm ) {\n * \tif ( !global.window.CKEDITOR_TRANSLATIONS ) {\n * \t\tglobal.window.CKEDITOR_TRANSLATIONS = {};\n * \t}\n\n * \tif ( !global.window.CKEDITOR_TRANSLATIONS[ language ] ) {\n * \t\tglobal.window.CKEDITOR_TRANSLATIONS[ language ] = {};\n * \t}\n *\n * \tconst languageTranslations = global.window.CKEDITOR_TRANSLATIONS[ language ];\n *\n * \tlanguageTranslations.dictionary = languageTranslations.dictionary || {};\n * \tlanguageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n *\n * \t// Extend the dictionary for the given language.\n * \tObject.assign( languageTranslations.dictionary, translations );\n * }\n * ```\n *\n * @param language Target language.\n * @param translations An object with translations which will be added to the dictionary.\n * For each message ID the value should be either a translation or an array of translations if the message\n * should support plural forms.\n * @param getPluralForm A function that returns the plural form index (a number).\n */\nexport function add(language, translations, getPluralForm) {\n    if (!global.window.CKEDITOR_TRANSLATIONS[language]) {\n        global.window.CKEDITOR_TRANSLATIONS[language] = {};\n    }\n    const languageTranslations = global.window.CKEDITOR_TRANSLATIONS[language];\n    languageTranslations.dictionary = languageTranslations.dictionary || {};\n    languageTranslations.getPluralForm = getPluralForm || languageTranslations.getPluralForm;\n    Object.assign(languageTranslations.dictionary, translations);\n}\n/**\n * **Note:** This method is internal, use {@link module:utils/locale~Locale#t the `t()` function} instead to translate\n * the editor UI parts.\n *\n * This function is responsible for translating messages to the specified language. It uses translations added perviously\n * by {@link module:utils/translation-service~add} (a translations dictionary and the `getPluralForm()` function\n * to provide accurate translations of plural forms).\n *\n * When no translation is defined in the dictionary or the dictionary does not exist, this function returns\n * the original message string or the message plural depending on the number of elements.\n *\n * ```ts\n * translate( 'pl', { string: 'Cancel' } ); // 'Cancel'\n * ```\n *\n * The third optional argument is the number of elements, based on which the single form or one of the plural forms\n * should be picked when the message is supposed to support various plural forms.\n *\n * ```ts\n * translate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space'\n * translate( 'en', { string: 'Add a space', plural: 'Add %0 spaces' }, 3 ); // 'Add %0 spaces'\n * ```\n *\n * The message should provide an ID using the `id` property when the message strings are not unique and their\n * translations should be different.\n *\n * ```ts\n * translate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n * translate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n * ```\n *\n * @internal\n * @param language Target language.\n * @param message A message that will be translated.\n * @param quantity The number of elements for which a plural form should be picked from the target language dictionary.\n * @returns Translated sentence.\n */\nexport function _translate(language, message, quantity = 1) {\n    if (typeof quantity !== 'number') {\n        /**\n         * An incorrect value was passed to the translation function. This was probably caused\n         * by an incorrect message interpolation of a plural form. Note that for messages supporting plural forms\n         * the second argument of the `t()` function should always be a number or an array with a number as the first element.\n         *\n         * @error translation-service-quantity-not-a-number\n         */\n        throw new CKEditorError('translation-service-quantity-not-a-number', null, { quantity });\n    }\n    const numberOfLanguages = getNumberOfLanguages();\n    if (numberOfLanguages === 1) {\n        // Override the language to the only supported one.\n        // This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n        language = Object.keys(global.window.CKEDITOR_TRANSLATIONS)[0];\n    }\n    const messageId = message.id || message.string;\n    if (numberOfLanguages === 0 || !hasTranslation(language, messageId)) {\n        if (quantity !== 1) {\n            // Return the default plural form that was passed in the `message.plural` parameter.\n            return message.plural;\n        }\n        return message.string;\n    }\n    const dictionary = global.window.CKEDITOR_TRANSLATIONS[language].dictionary;\n    const getPluralForm = global.window.CKEDITOR_TRANSLATIONS[language].getPluralForm || (n => n === 1 ? 0 : 1);\n    const translation = dictionary[messageId];\n    if (typeof translation === 'string') {\n        return translation;\n    }\n    const pluralFormIndex = Number(getPluralForm(quantity));\n    // Note: The `translate` function is not responsible for replacing `%0, %1, ...` with values.\n    return translation[pluralFormIndex];\n}\n/**\n * Clears dictionaries for test purposes.\n *\n * @internal\n */\nexport function _clear() {\n    global.window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Checks whether the dictionary exists and translation in that dictionary exists.\n */\nfunction hasTranslation(language, messageId) {\n    return (!!global.window.CKEDITOR_TRANSLATIONS[language] &&\n        !!global.window.CKEDITOR_TRANSLATIONS[language].dictionary[messageId]);\n}\nfunction getNumberOfLanguages() {\n    return Object.keys(global.window.CKEDITOR_TRANSLATIONS).length;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nconst RTL_LANGUAGE_CODES = [\n    'ar', 'ara',\n    'fa', 'per', 'fas',\n    'he', 'heb',\n    'ku', 'kur',\n    'ug', 'uig' // Uighur, Uyghur\n];\n/**\n * Helps determine whether a language text direction is LTR or RTL.\n *\n * @param languageCode The ISO 639-1 or ISO 639-2 language code.\n */\nexport function getLanguageDirection(languageCode) {\n    return RTL_LANGUAGE_CODES.includes(languageCode) ? 'rtl' : 'ltr';\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/locale\n */\n/* globals console */\nimport toArray from './toarray';\nimport { _translate } from './translation-service';\nimport { getLanguageDirection } from './language';\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n    /**\n     * Creates a new instance of the locale class. Learn more about\n     * {@glink features/ui-language configuring the language of the editor}.\n     *\n     * @param options Locale configuration.\n     * @param options.uiLanguage The editor UI language code in the\n     * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n     * @param options.contentLanguage The editor content language code in the\n     * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n     * See {@link #contentLanguage}.\n     */\n    constructor({ uiLanguage = 'en', contentLanguage } = {}) {\n        this.uiLanguage = uiLanguage;\n        this.contentLanguage = contentLanguage || this.uiLanguage;\n        this.uiLanguageDirection = getLanguageDirection(this.uiLanguage);\n        this.contentLanguageDirection = getLanguageDirection(this.contentLanguage);\n        this.t = (message, values) => this._t(message, values);\n    }\n    /**\n     * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * **Note**: This property was deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n     * properties instead.\n     *\n     * @deprecated\n     */\n    get language() {\n        /**\n         * The {@link module:utils/locale~Locale#language `Locale#language`} property was deprecated and will\n         * be removed in the near future. Please use the {@link module:utils/locale~Locale#uiLanguage `Locale#uiLanguage`} and\n         * {@link module:utils/locale~Locale#contentLanguage `Locale#contentLanguage`} properties instead.\n         *\n         * @error locale-deprecated-language-property\n         */\n        console.warn('locale-deprecated-language-property: ' +\n            'The Locale#language property has been deprecated and will be removed in the near future. ' +\n            'Please use #uiLanguage and #contentLanguage properties instead.');\n        return this.uiLanguage;\n    }\n    /**\n     * An unbound version of the {@link #t} method.\n     */\n    _t(message, values = []) {\n        values = toArray(values);\n        if (typeof message === 'string') {\n            message = { string: message };\n        }\n        const hasPluralForm = !!message.plural;\n        const quantity = hasPluralForm ? values[0] : 1;\n        const translatedString = _translate(this.uiLanguage, message, quantity);\n        return interpolateString(translatedString, values);\n    }\n}\n/**\n * Fills the `%0, %1, ...` string placeholders with values.\n */\nfunction interpolateString(string, values) {\n    return string.replace(/%(\\d+)/g, (match, index) => {\n        return (index < values.length) ? values[index] : match;\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/collection\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport isIterable from './isiterable';\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @typeParam T The type of the collection element.\n */\nexport default class Collection extends EmitterMixin() {\n    constructor(initialItemsOrOptions = {}, options = {}) {\n        super();\n        const hasInitialItems = isIterable(initialItemsOrOptions);\n        if (!hasInitialItems) {\n            options = initialItemsOrOptions;\n        }\n        this._items = [];\n        this._itemMap = new Map();\n        this._idProperty = options.idProperty || 'id';\n        this._bindToExternalToInternalMap = new WeakMap();\n        this._bindToInternalToExternalMap = new WeakMap();\n        this._skippedIndexesFromExternal = [];\n        // Set the initial content of the collection (if provided in the constructor).\n        if (hasInitialItems) {\n            for (const item of initialItemsOrOptions) {\n                this._items.push(item);\n                this._itemMap.set(this._getItemIdBeforeAdding(item), item);\n            }\n        }\n    }\n    /**\n     * The number of items available in the collection.\n     */\n    get length() {\n        return this._items.length;\n    }\n    /**\n     * Returns the first item from the collection or null when collection is empty.\n     */\n    get first() {\n        return this._items[0] || null;\n    }\n    /**\n     * Returns the last item from the collection or null when collection is empty.\n     */\n    get last() {\n        return this._items[this.length - 1] || null;\n    }\n    /**\n     * Adds an item into the collection.\n     *\n     * If the item does not have an id, then it will be automatically generated and set on the item.\n     *\n     * @param item\n     * @param index The position of the item in the collection. The item\n     * is pushed to the collection when `index` not specified.\n     * @fires add\n     * @fires change\n     */\n    add(item, index) {\n        return this.addMany([item], index);\n    }\n    /**\n     * Adds multiple items into the collection.\n     *\n     * Any item not containing an id will get an automatically generated one.\n     *\n     * @param items\n     * @param index The position of the insertion. Items will be appended if no `index` is specified.\n     * @fires add\n     * @fires change\n     */\n    addMany(items, index) {\n        if (index === undefined) {\n            index = this._items.length;\n        }\n        else if (index > this._items.length || index < 0) {\n            /**\n             * The `index` passed to {@link module:utils/collection~Collection#addMany `Collection#addMany()`}\n             * is invalid. It must be a number between 0 and the collection's length.\n             *\n             * @error collection-add-item-invalid-index\n             */\n            throw new CKEditorError('collection-add-item-invalid-index', this);\n        }\n        let offset = 0;\n        for (const item of items) {\n            const itemId = this._getItemIdBeforeAdding(item);\n            const currentItemIndex = index + offset;\n            this._items.splice(currentItemIndex, 0, item);\n            this._itemMap.set(itemId, item);\n            this.fire('add', item, currentItemIndex);\n            offset++;\n        }\n        this.fire('change', {\n            added: items,\n            removed: [],\n            index\n        });\n        return this;\n    }\n    /**\n     * Gets an item by its ID or index.\n     *\n     * @param idOrIndex The item ID or index in the collection.\n     * @returns The requested item or `null` if such item does not exist.\n     */\n    get(idOrIndex) {\n        let item;\n        if (typeof idOrIndex == 'string') {\n            item = this._itemMap.get(idOrIndex);\n        }\n        else if (typeof idOrIndex == 'number') {\n            item = this._items[idOrIndex];\n        }\n        else {\n            /**\n             * An index or ID must be given.\n             *\n             * @error collection-get-invalid-arg\n             */\n            throw new CKEditorError('collection-get-invalid-arg', this);\n        }\n        return item || null;\n    }\n    /**\n     * Returns a Boolean indicating whether the collection contains an item.\n     *\n     * @param itemOrId The item or its ID in the collection.\n     * @returns `true` if the collection contains the item, `false` otherwise.\n     */\n    has(itemOrId) {\n        if (typeof itemOrId == 'string') {\n            return this._itemMap.has(itemOrId);\n        }\n        else { // Object\n            const idProperty = this._idProperty;\n            const id = itemOrId[idProperty];\n            return id && this._itemMap.has(id);\n        }\n    }\n    /**\n     * Gets an index of an item in the collection.\n     * When an item is not defined in the collection, the index will equal -1.\n     *\n     * @param itemOrId The item or its ID in the collection.\n     * @returns The index of a given item.\n     */\n    getIndex(itemOrId) {\n        let item;\n        if (typeof itemOrId == 'string') {\n            item = this._itemMap.get(itemOrId);\n        }\n        else {\n            item = itemOrId;\n        }\n        return item ? this._items.indexOf(item) : -1;\n    }\n    /**\n     * Removes an item from the collection.\n     *\n     * @param subject The item to remove, its ID or index in the collection.\n     * @returns The removed item.\n     * @fires remove\n     * @fires change\n     */\n    remove(subject) {\n        const [item, index] = this._remove(subject);\n        this.fire('change', {\n            added: [],\n            removed: [item],\n            index\n        });\n        return item;\n    }\n    /**\n     * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n     *\n     * @typeParam U The result type of the callback.\n     * @param callback\n     * @param ctx Context in which the `callback` will be called.\n     * @returns The result of mapping.\n     */\n    map(callback, ctx) {\n        return this._items.map(callback, ctx);\n    }\n    /**\n     * Finds the first item in the collection for which the `callback` returns a true value.\n     *\n     * @param callback\n     * @param ctx Context in which the `callback` will be called.\n     * @returns The item for which `callback` returned a true value.\n     */\n    find(callback, ctx) {\n        return this._items.find(callback, ctx);\n    }\n    /**\n     * Returns an array with items for which the `callback` returned a true value.\n     *\n     * @param callback\n     * @param ctx Context in which the `callback` will be called.\n     * @returns The array with matching items.\n     */\n    filter(callback, ctx) {\n        return this._items.filter(callback, ctx);\n    }\n    /**\n     * Removes all items from the collection and destroys the binding created using\n     * {@link #bindTo}.\n     *\n     * @fires remove\n     * @fires change\n     */\n    clear() {\n        if (this._bindToCollection) {\n            this.stopListening(this._bindToCollection);\n            this._bindToCollection = null;\n        }\n        const removedItems = Array.from(this._items);\n        while (this.length) {\n            this._remove(0);\n        }\n        this.fire('change', {\n            added: [],\n            removed: removedItems,\n            index: 0\n        });\n    }\n    /**\n     * Binds and synchronizes the collection with another one.\n     *\n     * The binding can be a simple factory:\n     *\n     * ```ts\n     * class FactoryClass {\n     * \tpublic label: string;\n     *\n     * \tconstructor( data: { label: string } ) {\n     * \t\tthis.label = data.label;\n     * \t}\n     * }\n     *\n     * const source = new Collection<{ label: string }>( { idProperty: 'label' } );\n     * const target = new Collection<FactoryClass>();\n     *\n     * target.bindTo( source ).as( FactoryClass );\n     *\n     * source.add( { label: 'foo' } );\n     * source.add( { label: 'bar' } );\n     *\n     * console.log( target.length ); // 2\n     * console.log( target.get( 1 ).label ); // 'bar'\n     *\n     * source.remove( 0 );\n     * console.log( target.length ); // 1\n     * console.log( target.get( 0 ).label ); // 'bar'\n     * ```\n     *\n     * or the factory driven by a custom callback:\n     *\n     * ```ts\n     * class FooClass {\n     * \tpublic label: string;\n     *\n     * \tconstructor( data: { label: string } ) {\n     * \t\tthis.label = data.label;\n     * \t}\n     * }\n     *\n     * class BarClass {\n     * \tpublic label: string;\n     *\n     * \tconstructor( data: { label: string } ) {\n     * \t\tthis.label = data.label;\n     * \t}\n     * }\n     *\n     * const source = new Collection<{ label: string }>( { idProperty: 'label' } );\n     * const target = new Collection<FooClass | BarClass>();\n     *\n     * target.bindTo( source ).using( ( item ) => {\n     * \tif ( item.label == 'foo' ) {\n     * \t\treturn new FooClass( item );\n     * \t} else {\n     * \t\treturn new BarClass( item );\n     * \t}\n     * } );\n     *\n     * source.add( { label: 'foo' } );\n     * source.add( { label: 'bar' } );\n     *\n     * console.log( target.length ); // 2\n     * console.log( target.get( 0 ) instanceof FooClass ); // true\n     * console.log( target.get( 1 ) instanceof BarClass ); // true\n     * ```\n     *\n     * or the factory out of property name:\n     *\n     * ```ts\n     * const source = new Collection<{ nested: { value: string } }>();\n     * const target = new Collection<{ value: string }>();\n     *\n     * target.bindTo( source ).using( 'nested' );\n     *\n     * source.add( { nested: { value: 'foo' } } );\n     * source.add( { nested: { value: 'bar' } } );\n     *\n     * console.log( target.length ); // 2\n     * console.log( target.get( 0 ).value ); // 'foo'\n     * console.log( target.get( 1 ).value ); // 'bar'\n     * ```\n     *\n     * It's possible to skip specified items by returning null value:\n     *\n     * ```ts\n     * const source = new Collection<{ hidden: boolean }>();\n     * const target = new Collection<{ hidden: boolean }>();\n     *\n     * target.bindTo( source ).using( item => {\n     * \tif ( item.hidden ) {\n     * \t\treturn null;\n     * \t}\n     *\n     * \treturn item;\n     * } );\n     *\n     * source.add( { hidden: true } );\n     * source.add( { hidden: false } );\n     *\n     * console.log( source.length ); // 2\n     * console.log( target.length ); // 1\n     * ```\n     *\n     * **Note**: {@link #clear} can be used to break the binding.\n     *\n     * @typeParam S The type of `externalCollection` element.\n     * @param externalCollection A collection to be bound.\n     * @returns The binding chain object.\n     */\n    bindTo(externalCollection) {\n        if (this._bindToCollection) {\n            /**\n             * The collection cannot be bound more than once.\n             *\n             * @error collection-bind-to-rebind\n             */\n            throw new CKEditorError('collection-bind-to-rebind', this);\n        }\n        this._bindToCollection = externalCollection;\n        return {\n            as: Class => {\n                this._setUpBindToBinding(item => new Class(item));\n            },\n            using: callbackOrProperty => {\n                if (typeof callbackOrProperty == 'function') {\n                    this._setUpBindToBinding(callbackOrProperty);\n                }\n                else {\n                    this._setUpBindToBinding(item => item[callbackOrProperty]);\n                }\n            }\n        };\n    }\n    /**\n     * Finalizes and activates a binding initiated by {@link #bindTo}.\n     *\n     * @param factory A function which produces collection items.\n     */\n    _setUpBindToBinding(factory) {\n        const externalCollection = this._bindToCollection;\n        // Adds the item to the collection once a change has been done to the external collection.\n        const addItem = (evt, externalItem, index) => {\n            const isExternalBoundToThis = externalCollection._bindToCollection == this;\n            const externalItemBound = externalCollection._bindToInternalToExternalMap.get(externalItem);\n            // If an external collection is bound to this collection, which makes it a 2–way binding,\n            // and the particular external collection item is already bound, don't add it here.\n            // The external item has been created **out of this collection's item** and (re)adding it will\n            // cause a loop.\n            if (isExternalBoundToThis && externalItemBound) {\n                this._bindToExternalToInternalMap.set(externalItem, externalItemBound);\n                this._bindToInternalToExternalMap.set(externalItemBound, externalItem);\n            }\n            else {\n                const item = factory(externalItem);\n                // When there is no item we need to remember skipped index first and then we can skip this item.\n                if (!item) {\n                    this._skippedIndexesFromExternal.push(index);\n                    return;\n                }\n                // Lets try to put item at the same index as index in external collection\n                // but when there are a skipped items in one or both collections we need to recalculate this index.\n                let finalIndex = index;\n                // When we try to insert item after some skipped items from external collection we need\n                // to include this skipped items and decrease index.\n                //\n                // For the following example:\n                // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n                // internal -> [ A ]\n                //\n                // Another item is been added at the end of external collection:\n                // external.add( 'D' )\n                // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n                //\n                // We can't just add 'D' to internal at the same index as index in external because\n                // this will produce empty indexes what is invalid:\n                // internal -> [ 'A', empty, empty, 'D' ]\n                //\n                // So we need to include skipped items and decrease index\n                // internal -> [ 'A', 'D' ]\n                for (const skipped of this._skippedIndexesFromExternal) {\n                    if (index > skipped) {\n                        finalIndex--;\n                    }\n                }\n                // We need to take into consideration that external collection could skip some items from\n                // internal collection.\n                //\n                // For the following example:\n                // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n                // external -> [ A ]\n                //\n                // Another item is been added at the end of external collection:\n                // external.add( 'D' )\n                // external -> [ 'A', 'D' ]\n                //\n                // We need to include skipped items and place new item after them:\n                // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n                for (const skipped of externalCollection._skippedIndexesFromExternal) {\n                    if (finalIndex >= skipped) {\n                        finalIndex++;\n                    }\n                }\n                this._bindToExternalToInternalMap.set(externalItem, item);\n                this._bindToInternalToExternalMap.set(item, externalItem);\n                this.add(item, finalIndex);\n                // After adding new element to internal collection we need update indexes\n                // of skipped items in external collection.\n                for (let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++) {\n                    if (finalIndex <= externalCollection._skippedIndexesFromExternal[i]) {\n                        externalCollection._skippedIndexesFromExternal[i]++;\n                    }\n                }\n            }\n        };\n        // Load the initial content of the collection.\n        for (const externalItem of externalCollection) {\n            addItem(null, externalItem, externalCollection.getIndex(externalItem));\n        }\n        // Synchronize the with collection as new items are added.\n        this.listenTo(externalCollection, 'add', addItem);\n        // Synchronize the with collection as new items are removed.\n        this.listenTo(externalCollection, 'remove', (evt, externalItem, index) => {\n            const item = this._bindToExternalToInternalMap.get(externalItem);\n            if (item) {\n                this.remove(item);\n            }\n            // After removing element from external collection we need update/remove indexes\n            // of skipped items in internal collection.\n            this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce((result, skipped) => {\n                if (index < skipped) {\n                    result.push(skipped - 1);\n                }\n                if (index > skipped) {\n                    result.push(skipped);\n                }\n                return result;\n            }, []);\n        });\n    }\n    /**\n     * Returns an unique id property for a given `item`.\n     *\n     * The method will generate new id and assign it to the `item` if it doesn't have any.\n     *\n     * @param item Item to be added.\n     */\n    _getItemIdBeforeAdding(item) {\n        const idProperty = this._idProperty;\n        let itemId;\n        if ((idProperty in item)) {\n            itemId = item[idProperty];\n            if (typeof itemId != 'string') {\n                /**\n                 * This item's ID should be a string.\n                 *\n                 * @error collection-add-invalid-id\n                 */\n                throw new CKEditorError('collection-add-invalid-id', this);\n            }\n            if (this.get(itemId)) {\n                /**\n                 * This item already exists in the collection.\n                 *\n                 * @error collection-add-item-already-exists\n                 */\n                throw new CKEditorError('collection-add-item-already-exists', this);\n            }\n        }\n        else {\n            item[idProperty] = itemId = uid();\n        }\n        return itemId;\n    }\n    /**\n     * Core {@link #remove} method implementation shared in other functions.\n     *\n     * In contrast this method **does not** fire the {@link #event:change} event.\n     *\n     * @param subject The item to remove, its id or index in the collection.\n     * @returns Returns an array with the removed item and its index.\n     * @fires remove\n     */\n    _remove(subject) {\n        let index, id, item;\n        let itemDoesNotExist = false;\n        const idProperty = this._idProperty;\n        if (typeof subject == 'string') {\n            id = subject;\n            item = this._itemMap.get(id);\n            itemDoesNotExist = !item;\n            if (item) {\n                index = this._items.indexOf(item);\n            }\n        }\n        else if (typeof subject == 'number') {\n            index = subject;\n            item = this._items[index];\n            itemDoesNotExist = !item;\n            if (item) {\n                id = item[idProperty];\n            }\n        }\n        else {\n            item = subject;\n            id = item[idProperty];\n            index = this._items.indexOf(item);\n            itemDoesNotExist = (index == -1 || !this._itemMap.get(id));\n        }\n        if (itemDoesNotExist) {\n            /**\n             * Item not found.\n             *\n             * @error collection-remove-404\n             */\n            throw new CKEditorError('collection-remove-404', this);\n        }\n        this._items.splice(index, 1);\n        this._itemMap.delete(id);\n        const externalItem = this._bindToInternalToExternalMap.get(item);\n        this._bindToInternalToExternalMap.delete(item);\n        this._bindToExternalToInternalMap.delete(externalItem);\n        this.fire('remove', item, index);\n        return [item, index];\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this._items[Symbol.iterator]();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/first\n */\n/**\n * Returns first item of the given `iterator`.\n */\nexport default function first(iterator) {\n    const iteratorItem = iterator.next();\n    if (iteratorItem.done) {\n        return null;\n    }\n    return iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global setTimeout, clearTimeout */\n/**\n * @module utils/focustracker\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\n/**\n * Allows observing a group of `Element`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `Element`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * Check out the {@glink framework/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\"} guide to learn more.\n */\nexport default class FocusTracker extends DomEmitterMixin(ObservableMixin()) {\n    constructor() {\n        super();\n        /**\n         * List of registered elements.\n         */\n        this._elements = new Set();\n        /**\n         * Event loop timeout.\n         */\n        this._nextEventLoopTimeout = null;\n        this.set('isFocused', false);\n        this.set('focusedElement', null);\n    }\n    /**\n     * Starts tracking the specified element.\n     */\n    add(element) {\n        if (this._elements.has(element)) {\n            /**\n             * This element is already tracked by {@link module:utils/focustracker~FocusTracker}.\n             *\n             * @error focustracker-add-element-already-exist\n             */\n            throw new CKEditorError('focustracker-add-element-already-exist', this);\n        }\n        this.listenTo(element, 'focus', () => this._focus(element), { useCapture: true });\n        this.listenTo(element, 'blur', () => this._blur(), { useCapture: true });\n        this._elements.add(element);\n    }\n    /**\n     * Stops tracking the specified element and stops listening on this element.\n     */\n    remove(element) {\n        if (element === this.focusedElement) {\n            this._blur();\n        }\n        if (this._elements.has(element)) {\n            this.stopListening(element);\n            this._elements.delete(element);\n        }\n    }\n    /**\n     * Destroys the focus tracker by:\n     * - Disabling all event listeners attached to tracked elements.\n     * - Removing all tracked elements that were previously added.\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * Stores currently focused element and set {@link #isFocused} as `true`.\n     */\n    _focus(element) {\n        clearTimeout(this._nextEventLoopTimeout);\n        this.focusedElement = element;\n        this.isFocused = true;\n    }\n    /**\n     * Clears currently focused element and set {@link #isFocused} as `false`.\n     * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n     */\n    _blur() {\n        clearTimeout(this._nextEventLoopTimeout);\n        this._nextEventLoopTimeout = setTimeout(() => {\n            this.focusedElement = null;\n            this.isFocused = false;\n        }, 0);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/keystrokehandler\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n * ```ts\n * editor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n * \tconsole.log( 'Ctrl+A has been pressed' );\n * \tcancel();\n * } );\n * ```\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n * ```ts\n * class MyView extends View {\n * \tconstructor() {\n * \t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\tthis.keystrokes.set( 'tab', handleTabKey );\n * \t}\n *\n * \trender() {\n * \t\tsuper.render();\n *\n * \t\tthis.keystrokes.listenTo( this.element );\n * \t}\n * }\n * ```\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n    /**\n     * Creates an instance of the keystroke handler.\n     */\n    constructor() {\n        this._listener = new (DomEmitterMixin())();\n    }\n    /**\n     * Starts listening for `keydown` events from a given emitter.\n     */\n    listenTo(emitter) {\n        // The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n        // keystroke so the listeners can be attached to them with different priorities.\n        //\n        // E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n        // as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n        // method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n        // only with other listeners of this particular event, thus making it possible to prioritize\n        // the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n        // the KeystrokeHandler re–uses it to do its job.\n        this._listener.listenTo(emitter, 'keydown', (evt, keyEvtData) => {\n            this._listener.fire('_keydown:' + getCode(keyEvtData), keyEvtData);\n        });\n    }\n    /**\n     * Registers a handler for the specified keystroke.\n     *\n     * @param keystroke Keystroke defined in a format accepted by\n     * the {@link module:utils/keyboard~parseKeystroke} function.\n     * @param callback A function called with the\n     * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n     * a helper function to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n     * @param options Additional options.\n     * @param options.priority The priority of the keystroke\n     * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n     * are called in the order they were added.\n     */\n    set(keystroke, callback, options = {}) {\n        const keyCode = parseKeystroke(keystroke);\n        const priority = options.priority;\n        // Execute the passed callback on KeystrokeHandler#_keydown.\n        // TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n        this._listener.listenTo(this._listener, '_keydown:' + keyCode, (evt, keyEvtData) => {\n            callback(keyEvtData, () => {\n                // Stop the event in the DOM: no listener in the web page\n                // will be triggered by this event.\n                keyEvtData.preventDefault();\n                keyEvtData.stopPropagation();\n                // Stop the event in the KeystrokeHandler: no more callbacks\n                // will be executed for this keystroke.\n                evt.stop();\n            });\n            // Mark this keystroke as handled by the callback. See: #press.\n            evt.return = true;\n        }, { priority });\n    }\n    /**\n     * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n     *\n     * @param keyEvtData Key event data.\n     * @returns Whether the keystroke was handled.\n     */\n    press(keyEvtData) {\n        return !!this._listener.fire('_keydown:' + getCode(keyEvtData), keyEvtData);\n    }\n    /**\n     * Stops listening to `keydown` events from the given emitter.\n     */\n    stopListening(emitter) {\n        this._listener.stopListening(emitter);\n    }\n    /**\n     * Destroys the keystroke handler.\n     */\n    destroy() {\n        this.stopListening();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/tomap\n */\nimport objectToMap from './objecttomap';\nimport isIterable from './isiterable';\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n * ```ts\n * map = toMap( { 'foo': 1, 'bar': 2 } );\n * map = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n * map = toMap( anotherMap );\n * ```\n *\n * @param data Object or iterable to transform.\n * @returns Map created from data.\n */\nexport default function toMap(data) {\n    if (isIterable(data)) {\n        return new Map(data);\n    }\n    else {\n        return objectToMap(data);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/objecttomap\n */\n/**\n * Transforms object to map.\n *\n * ```ts\n * const map = objectToMap( { 'foo': 1, 'bar': 2 } );\n * map.get( 'foo' ); // 1\n * ```\n *\n * **Note**: For mixed data (`Object` or `Iterable`) there's a dedicated {@link module:utils/tomap~toMap} function.\n *\n * @param obj Object to transform.\n * @returns Map created from object.\n */\nexport default function objectToMap(obj) {\n    const map = new Map();\n    for (const key in obj) {\n        map.set(key, obj[key]);\n    }\n    return map;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/delay\n */\n/* globals setTimeout, clearTimeout */\n/**\n * Returns a function wrapper that will trigger a function after a specified wait time.\n * The timeout can be canceled by calling the cancel function on the returned wrapped function.\n *\n * @param func The function to wrap.\n * @param wait The timeout in ms.\n */\nexport default function delay(func, wait) {\n    let timer;\n    function delayed(...args) {\n        delayed.cancel();\n        timer = setTimeout(() => func(...args), wait);\n    }\n    delayed.cancel = () => {\n        clearTimeout(timer);\n    };\n    return delayed;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param character Character to check.\n */\nexport function isCombiningMark(character) {\n    // eslint-disable-next-line no-misleading-character-class\n    return !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(character);\n}\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param character Character to check.\n */\nexport function isHighSurrogateHalf(character) {\n    return !!character && character.length == 1 && /[\\ud800-\\udbff]/.test(character);\n}\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param character Character to check.\n */\nexport function isLowSurrogateHalf(character) {\n    return !!character && character.length == 1 && /[\\udc00-\\udfff]/.test(character);\n}\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param string String to check.\n * @param offset Offset to check.\n */\nexport function isInsideSurrogatePair(string, offset) {\n    return isHighSurrogateHalf(string.charAt(offset - 1)) && isLowSurrogateHalf(string.charAt(offset));\n}\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param string String to check.\n * @param offset Offset to check.\n */\nexport function isInsideCombinedSymbol(string, offset) {\n    return isCombiningMark(string.charAt(offset));\n}\nconst EMOJI_PATTERN = buildEmojiRegexp();\n/**\n * Checks whether given offset in a string is inside multi-character emoji sequence.\n *\n * @param string String to check.\n * @param offset Offset to check.\n */\nexport function isInsideEmojiSequence(string, offset) {\n    const matches = String(string).matchAll(EMOJI_PATTERN);\n    return Array.from(matches).some(match => match.index < offset && offset < match.index + match[0].length);\n}\nfunction buildEmojiRegexp() {\n    const parts = [\n        // Emoji Tag Sequence (ETS)\n        /\\p{Emoji}[\\u{E0020}-\\u{E007E}]+\\u{E007F}/u,\n        // Emoji Keycap Sequence\n        /\\p{Emoji}\\u{FE0F}?\\u{20E3}/u,\n        // Emoji Presentation Sequence\n        /\\p{Emoji}\\u{FE0F}/u,\n        // Single-Character Emoji / Emoji Modifier Sequence\n        /(?=\\p{General_Category=Other_Symbol})\\p{Emoji}\\p{Emoji_Modifier}*/u\n    ];\n    const flagSequence = /\\p{Regional_Indicator}{2}/u.source;\n    const emoji = '(?:' + parts.map(part => part.source).join('|') + ')';\n    const sequence = `${flagSequence}|${emoji}(?:\\u{200D}${emoji})*`;\n    return new RegExp(sequence, 'ug');\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/viewcollection\n */\nimport { CKEditorError, Collection } from '@ckeditor/ckeditor5-utils';\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n * ```ts\n * const parentView = new ParentView( locale );\n * const collection = new ViewCollection( locale );\n *\n * collection.setParent( parentView.element );\n *\n * const viewA = new ChildView( locale );\n * const viewB = new ChildView( locale );\n * ```\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n * ```ts\n * collection.add( viewA );\n * collection.add( viewB );\n *\n * console.log( parentView.element.firsChild ); // -> viewA.element\n * console.log( parentView.element.lastChild ); // -> viewB.element\n * ```\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n * ```ts\n * // Delegate #click and #keydown events from viewA and viewB to the parentView.\n * collection.delegate( 'click' ).to( parentView );\n *\n * parentView.on( 'click', ( evt ) => {\n * \tconsole.log( `${ evt.source } has been clicked.` );\n * } );\n *\n * // This event will be delegated to the parentView.\n * viewB.fire( 'click' );\n * ```\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n */\nexport default class ViewCollection extends Collection {\n    /**\n     * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n     *\n     * @param initialItems The initial items of the collection.\n     */\n    constructor(initialItems = []) {\n        super(initialItems, {\n            // An #id Number attribute should be legal and not break the `ViewCollection` instance.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/93\n            idProperty: 'viewUid'\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n        this.on('add', (evt, view, index) => {\n            this._renderViewIntoCollectionParent(view, index);\n        });\n        // Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n        this.on('remove', (evt, view) => {\n            if (view.element && this._parentElement) {\n                view.element.remove();\n            }\n        });\n        this._parentElement = null;\n    }\n    /**\n     * Destroys the view collection along with child views.\n     * See the view {@link module:ui/view~View#destroy} method.\n     */\n    destroy() {\n        this.map(view => view.destroy());\n    }\n    /**\n     * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n     * {@link #remove removing} views in the collection synchronizes their\n     * {@link module:ui/view~View#element elements} in the parent element.\n     *\n     * @param element A new parent element.\n     */\n    setParent(elementOrDocFragment) {\n        this._parentElement = elementOrDocFragment;\n        // Take care of the initial collection items passed to the constructor.\n        for (const view of this) {\n            this._renderViewIntoCollectionParent(view);\n        }\n    }\n    /**\n     * Delegates selected events coming from within views in the collection to any\n     * {@link module:utils/emittermixin~Emitter}.\n     *\n     * For the following views and collection:\n     *\n     * ```ts\n     * const viewA = new View();\n     * const viewB = new View();\n     * const viewC = new View();\n     *\n     * const views = parentView.createCollection();\n     *\n     * views.delegate( 'eventX' ).to( viewB );\n     * views.delegate( 'eventX', 'eventY' ).to( viewC );\n     *\n     * views.add( viewA );\n     * ```\n     *\n     * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventX', customData );\n     * ```\n     *\n     * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n     *\n     * ```ts\n     * viewA.fire( 'eventY', customData );\n     * ```\n     *\n     * See {@link module:utils/emittermixin~Emitter#delegate}.\n     *\n     * @param events {@link module:ui/view~View} event names to be delegated to another\n     * {@link module:utils/emittermixin~Emitter}.\n     * @returns Object with `to` property, a function which accepts the destination\n     * of {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n     */\n    delegate(...events) {\n        if (!events.length || !isStringArray(events)) {\n            /**\n             * All event names must be strings.\n             *\n             * @error ui-viewcollection-delegate-wrong-events\n             */\n            throw new CKEditorError('ui-viewcollection-delegate-wrong-events', this);\n        }\n        return {\n            to: dest => {\n                // Activate delegating on existing views in this collection.\n                for (const view of this) {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                }\n                // Activate delegating on future views in this collection.\n                this.on('add', (evt, view) => {\n                    for (const evtName of events) {\n                        view.delegate(evtName).to(dest);\n                    }\n                });\n                // Deactivate delegating when view is removed from this collection.\n                this.on('remove', (evt, view) => {\n                    for (const evtName of events) {\n                        view.stopDelegating(evtName, dest);\n                    }\n                });\n            }\n        };\n    }\n    /**\n     * This method {@link module:ui/view~View#render renders} a new view added to the collection.\n     *\n     * If the {@link #_parentElement parent element} of the collection is set, this method also adds\n     * the view's {@link module:ui/view~View#element} as a child of the parent in DOM at a specified index.\n     *\n     * **Note**: If index is not specified, the view's element is pushed as the last child\n     * of the parent element.\n     *\n     * @param view A new view added to the collection.\n     * @param index An index the view holds in the collection. When not specified,\n     * the view is added at the end.\n     */\n    _renderViewIntoCollectionParent(view, index) {\n        if (!view.isRendered) {\n            view.render();\n        }\n        if (view.element && this._parentElement) {\n            this._parentElement.insertBefore(view.element, this._parentElement.children[index]);\n        }\n    }\n    /**\n     * Removes a child view from the collection. If the {@link #setParent parent element} of the\n     * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n     * in DOM, reflecting the order of the collection.\n     *\n     * See the {@link #add} method.\n     *\n     * @param subject The view to remove, its id or index in the collection.\n     * @returns The removed view.\n     */\n    remove(subject) {\n        return super.remove(subject);\n    }\n}\n/**\n * Check if all entries of the array are of `String` type.\n *\n * @param arr An array to be checked.\n */\nfunction isStringArray(arr) {\n    return arr.every(a => typeof a == 'string');\n}\n","import api from \"!../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../css-loader/dist/cjs.js!../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./globals.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-invalid-void-type */\n/**\n * @module ui/view\n */\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport { CKEditorError, Collection, DomEmitterMixin, ObservableMixin, isIterable } from '@ckeditor/ckeditor5-utils';\nimport '../theme/globals/globals.css';\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n * ```ts\n * class SampleView extends View {\n * \tconstructor( locale ) {\n * \t\tsuper( locale );\n *\n * \t\tconst bind = this.bindTemplate;\n *\n * \t\t// Views define their interface (state) using observable attributes.\n * \t\tthis.set( 'elementClass', 'bar' );\n *\n * \t\tthis.setTemplate( {\n * \t\t\ttag: 'p',\n *\n * \t\t\t// The element of the view can be defined with its children.\n * \t\t\tchildren: [\n * \t\t\t\t'Hello',\n * \t\t\t\t{\n * \t\t\t\t\ttag: 'b',\n * \t\t\t\t\tchildren: [ 'world!' ]\n * \t\t\t\t}\n * \t\t\t],\n * \t\t\tattributes: {\n * \t\t\t\tclass: [\n * \t\t\t\t\t'foo',\n *\n * \t\t\t\t\t// Observable attributes control the state of the view in DOM.\n * \t\t\t\t\tbind.to( 'elementClass' )\n * \t\t\t\t]\n * \t\t\t},\n * \t\t\ton: {\n * \t\t\t\t// Views listen to DOM events and propagate them.\n * \t\t\t\tclick: bind.to( 'clicked' )\n * \t\t\t}\n * \t\t} );\n * \t}\n * }\n *\n * const view = new SampleView( locale );\n *\n * view.render();\n *\n * // Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n * document.body.appendChild( view.element );\n *\n * // Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n * view.elementClass = 'baz';\n *\n * // Respond to the \"click\" event in DOM by executing a custom action.\n * view.on( 'clicked', () => {\n * \tconsole.log( 'The view has been clicked!' );\n * } );\n * ```\n */\nexport default class View extends DomEmitterMixin(ObservableMixin()) {\n    /**\n     * Creates an instance of the {@link module:ui/view~View} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale) {\n        super();\n        this.element = null;\n        this.isRendered = false;\n        this.locale = locale;\n        this.t = locale && locale.t;\n        this._viewCollections = new Collection();\n        this._unboundChildren = this.createCollection();\n        // Pass parent locale to its children.\n        this._viewCollections.on('add', (evt, collection) => {\n            collection.locale = locale;\n            collection.t = locale && locale.t;\n        });\n        this.decorate('render');\n    }\n    /**\n     * Shorthand for {@link module:ui/template~Template.bind}, a binding\n     * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n     *\n     * It provides {@link module:ui/template~BindChain#to `to()`} and\n     * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n     * observable attributes and attach DOM listeners.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst bind = this.bindTemplate;\n     *\n     * \t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n     * \t\t// the state of the view in DOM.\n     * \t\tthis.set( {\n     * \t\t\telementClass: 'foo',\n     * \t\t \tisEnabled: true\n     * \t\t } );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\tattributes: {\n     * \t\t\t\t// The class HTML attribute will follow elementClass\n     * \t\t\t\t// and isEnabled view attributes.\n     * \t\t\t\tclass: [\n     * \t\t\t\t\tbind.to( 'elementClass' )\n     * \t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n     * \t\t\t\t]\n     * \t\t\t},\n     *\n     * \t\t\ton: {\n     * \t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n     * \t\t\t\tclick: bind.to( 'clicked' )\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     * ```\n     */\n    get bindTemplate() {\n        if (this._bindTemplate) {\n            return this._bindTemplate;\n        }\n        return (this._bindTemplate = Template.bind(this, this));\n    }\n    /**\n     * Creates a new collection of views, which can be used as\n     * {@link module:ui/template~Template#children} of this view.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tconst child = new ChildView( locale );\n     * \t\tthis.items = this.createCollection( [ child ] );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// `items` collection will render here.\n     * \t\t\tchildren: this.items\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     * view.render();\n     *\n     * // It will append <p><child#element></p> to the <body>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * @param views Initial views of the collection.\n     * @returns A new collection of view instances.\n     */\n    createCollection(views) {\n        const collection = new ViewCollection(views);\n        this._viewCollections.add(collection);\n        return collection;\n    }\n    /**\n     * Registers a new child view under the view instance. Once registered, a child\n     * view is managed by its parent, including {@link #render rendering}\n     * and {@link #destroy destruction}.\n     *\n     * To revert this, use {@link #deregisterChild}.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( { tag: 'p' } );\n     *\n     * \t\t// Register the children.\n     * \t\tthis.registerChild( [ this.childA, this.childB ] );\n     * \t}\n     *\n     * \trender() {\n     * \t\tsuper.render();\n     *\n     * \t\tthis.element.appendChild( this.childA.element );\n     * \t\tthis.element.appendChild( this.childB.element );\n     * \t}\n     * }\n     *\n     * const view = new SampleView( locale );\n     *\n     * view.render();\n     *\n     * // Will append <p><childA#element><b></b><childB#element></p>.\n     * document.body.appendChild( view.element );\n     * ```\n     *\n     * **Note**: There's no need to add child views if they're already referenced in the\n     * {@link #template}:\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor( locale ) {\n     * \t\tsuper( locale );\n     *\n     * \t\tthis.childA = new SomeChildView( locale );\n     * \t\tthis.childB = new SomeChildView( locale );\n     *\n     * \t\tthis.setTemplate( {\n     * \t\t\ttag: 'p',\n     *\n     * \t\t\t// These children will be added automatically. There's no\n     * \t\t\t// need to call {@link #registerChild} for any of them.\n     * \t\t\tchildren: [ this.childA, this.childB ]\n     * \t\t} );\n     * \t}\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param children Children views to be registered.\n     */\n    registerChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.add(child);\n        }\n    }\n    /**\n     * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n     * Once removed, the child is no longer managed by its parent, e.g. it can safely\n     * become a child of another parent view.\n     *\n     * @see #registerChild\n     * @param children Child views to be removed.\n     */\n    deregisterChild(children) {\n        if (!isIterable(children)) {\n            children = [children];\n        }\n        for (const child of children) {\n            this._unboundChildren.remove(child);\n        }\n    }\n    /**\n     * Sets the {@link #template} of the view with with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * view.setTemplate( definition );\n     * ```\n     *\n     * @param definition Definition of view's template.\n     */\n    setTemplate(definition) {\n        this.template = new Template(definition);\n    }\n    /**\n     * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n     * with given definition.\n     *\n     * A shorthand for:\n     *\n     * ```ts\n     * Template.extend( view.template, definition );\n     * ```\n     *\n     * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n     *\n     * @param definition Definition which extends the {@link #template}.\n     */\n    extendTemplate(definition) {\n        Template.extend(this.template, definition);\n    }\n    /**\n     * Recursively renders the view.\n     *\n     * Once the view is rendered:\n     * * the {@link #element} becomes an HTML element out of {@link #template},\n     * * the {@link #isRendered} flag is set `true`.\n     *\n     * **Note**: The children of the view:\n     * * defined directly in the {@link #template}\n     * * residing in collections created by the {@link #createCollection} method,\n     * * and added by {@link #registerChild}\n     * are also rendered in the process.\n     *\n     * In general, `render()` method is the right place to keep the code which refers to the\n     * {@link #element} and should be executed at the very beginning of the view's life cycle.\n     *\n     * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n     * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n     * such references should be done in `render()`.\n     *\n     * ```ts\n     * class SampleView extends View {\n     * \tconstructor() {\n     * \t\tthis.setTemplate( {\n     * \t\t\t// ...\n     * \t\t} );\n     * \t},\n     *\n     * \trender() {\n     * \t\t// View#element becomes available.\n     * \t\tsuper.render();\n     *\n     * \t\t// The \"scroll\" listener depends on #element.\n     * \t\tthis.listenTo( window, 'scroll', () => {\n     * \t\t\t// A reference to #element would render the #template and make it non-extendable.\n     * \t\t\tif ( window.scrollY > 0 ) {\n     * \t\t\t\tthis.element.scrollLeft = 100;\n     * \t\t\t} else {\n     * \t\t\t\tthis.element.scrollLeft = 0;\n     * \t\t\t}\n     * \t\t} );\n     * \t}\n     * }\n     *\n     * const view = new SampleView();\n     *\n     * // Let's customize the view before it gets rendered.\n     * view.extendTemplate( {\n     * \tattributes: {\n     * \t\tclass: [\n     * \t\t\t'additional-class'\n     * \t\t]\n     * \t}\n     * } );\n     *\n     * // Late rendering allows customization of the view.\n     * view.render();\n     * ```\n     */\n    render() {\n        if (this.isRendered) {\n            /**\n             * This View has already been rendered.\n             *\n             * @error ui-view-render-already-rendered\n             */\n            throw new CKEditorError('ui-view-render-already-rendered', this);\n        }\n        // Render #element of the view.\n        if (this.template) {\n            this.element = this.template.render();\n            // Auto–register view children from #template.\n            this.registerChild(this.template.getViews());\n        }\n        this.isRendered = true;\n    }\n    /**\n     * Recursively destroys the view instance and child views added by {@link #registerChild} and\n     * residing in collections created by the {@link #createCollection}.\n     *\n     * Destruction disables all event listeners:\n     * * created on the view, e.g. `view.on( 'event', () => {} )`,\n     * * defined in the {@link #template} for DOM events.\n     */\n    destroy() {\n        this.stopListening();\n        this._viewCollections.map(c => c.destroy());\n        // Template isn't obligatory for views.\n        if (this.template && this.template._revertData) {\n            this.template.revert(this.element);\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/template\n */\n/* global document */\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport { CKEditorError, EmitterMixin, isNode, toArray } from '@ckeditor/ckeditor5-utils';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n * ```ts\n * const bind = Template.bind( observable, emitter );\n *\n * new Template( {\n * \ttag: 'p',\n * \tattributes: {\n * \t\tclass: 'foo',\n * \t\tstyle: {\n * \t\t\tbackgroundColor: 'yellow'\n * \t\t}\n * \t},\n * \ton: {\n * \t\tclick: bind.to( 'clicked' )\n * \t},\n * \tchildren: [\n * \t\t'A paragraph.'\n * \t]\n * } ).render();\n * ```\n *\n * and it will render the following HTML element:\n *\n * ```html\n * <p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n * ```\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n */\nexport default class Template extends EmitterMixin() {\n    /**\n     * Creates an instance of the {@link ~Template} class.\n     *\n     * @param def The definition of the template.\n     */\n    constructor(def) {\n        super();\n        Object.assign(this, normalize(clone(def)));\n        this._isRendered = false;\n        this._revertData = null;\n    }\n    /**\n     * Renders a DOM Node (an HTML element or text) out of the template.\n     *\n     * ```ts\n     * const domNode = new Template( { ... } ).render();\n     * ```\n     *\n     * See: {@link #apply}.\n     */\n    render() {\n        const node = this._renderNode({\n            intoFragment: true\n        });\n        this._isRendered = true;\n        return node;\n    }\n    /**\n     * Applies the template to an existing DOM Node, either HTML element or text.\n     *\n     * **Note:** No new DOM nodes will be created. Applying extends:\n     *\n     * {@link module:ui/template~TemplateDefinition attributes},\n     * {@link module:ui/template~TemplateDefinition event listeners}, and\n     * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n     *\n     * **Note:** Existing `class` and `style` attributes are extended when a template\n     * is applied to an HTML element, while other attributes and `textContent` are overridden.\n     *\n     * **Note:** The process of applying a template can be easily reverted using the\n     * {@link module:ui/template~Template#revert} method.\n     *\n     * ```ts\n     * const element = document.createElement( 'div' );\n     * const observable = new Model( { divClass: 'my-div' } );\n     * const emitter = Object.create( EmitterMixin );\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\tid: 'first-div',\n     * \t\tclass: bind.to( 'divClass' )\n     * \t},\n     * \ton: {\n     * \t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n     * \t},\n     * \tchildren: [\n     * \t\t'Div text.'\n     * \t]\n     * } ).apply( element );\n     *\n     * console.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n     * ```\n     *\n     * @see module:ui/template~Template#render\n     * @see module:ui/template~Template#revert\n     * @param node Root node for the template to apply.\n     */\n    apply(node) {\n        this._revertData = getEmptyRevertData();\n        this._renderNode({\n            node,\n            intoFragment: false,\n            isApplying: true,\n            revertData: this._revertData\n        });\n        return node;\n    }\n    /**\n     * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n     *\n     * @param node The root node for the template to revert. In most of the cases, it is the\n     * same node used by {@link module:ui/template~Template#apply}.\n     */\n    revert(node) {\n        if (!this._revertData) {\n            /**\n             * Attempting to revert a template which has not been applied yet.\n             *\n             * @error ui-template-revert-not-applied\n             */\n            throw new CKEditorError('ui-template-revert-not-applied', [this, node]);\n        }\n        this._revertTemplateFromNode(node, this._revertData);\n    }\n    /**\n     * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n     * instances and returns them one by one.\n     *\n     * ```ts\n     * const viewFoo = new View();\n     * const viewBar = new View();\n     * const viewBaz = new View();\n     * const template = new Template( {\n     * \ttag: 'div',\n     * \tchildren: [\n     * \t\tviewFoo,\n     * \t\t{\n     * \t\t\ttag: 'div',\n     * \t\t\tchildren: [\n     * \t\t\t\tviewBar\n     * \t\t\t]\n     * \t\t},\n     * \t\tviewBaz\n     * \t]\n     * } );\n     *\n     * // Logs: viewFoo, viewBar, viewBaz\n     * for ( const view of template.getViews() ) {\n     * \tconsole.log( view );\n     * }\n     * ```\n     */\n    *getViews() {\n        function* search(def) {\n            if (def.children) {\n                for (const child of def.children) {\n                    if (isView(child)) {\n                        yield child;\n                    }\n                    else if (isTemplate(child)) {\n                        yield* search(child);\n                    }\n                }\n            }\n        }\n        yield* search(this);\n    }\n    /**\n     * An entry point to the interface which binds DOM nodes to\n     * {@link module:utils/observablemixin~Observable observables}.\n     * There are two types of bindings:\n     *\n     * * HTML element attributes or text `textContent` synchronized with attributes of an\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n     * and {@link module:ui/template~BindChain#if}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \tattributes: {\n     * \t\t// Binds the element \"class\" attribute to observable#classAttribute.\n     * \t\tclass: bind.to( 'classAttribute' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * * DOM events fired on HTML element propagated through\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * new Template( {\n     * \ton: {\n     * \t\t// Will be fired by the observable.\n     * \t\tclick: bind( 'elementClicked' )\n     * \t}\n     * } ).render();\n     * ```\n     *\n     * Also see {@link module:ui/view~View#bindTemplate}.\n     *\n     * @param observable An observable which provides boundable attributes.\n     * @param emitter An emitter that listens to observable attribute\n     * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n     */\n    static bind(observable, emitter) {\n        return {\n            to(eventNameOrFunctionOrAttribute, callback) {\n                return new TemplateToBinding({\n                    eventNameOrFunction: eventNameOrFunctionOrAttribute,\n                    attribute: eventNameOrFunctionOrAttribute,\n                    observable, emitter, callback\n                });\n            },\n            if(attribute, valueIfTrue, callback) {\n                return new TemplateIfBinding({\n                    observable, emitter, attribute, valueIfTrue, callback\n                });\n            }\n        };\n    }\n    /**\n     * Extends an existing {@link module:ui/template~Template} instance with some additional content\n     * from another {@link module:ui/template~TemplateDefinition}.\n     *\n     * ```ts\n     * const bind = Template.bind( observable, emitter );\n     *\n     * const template = new Template( {\n     * \ttag: 'p',\n     * \tattributes: {\n     * \t\tclass: 'a',\n     * \t\tdata-x: bind.to( 'foo' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\ttag: 'span',\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'b'\n     * \t\t\t},\n     * \t\t\tchildren: [\n     * \t\t\t\t'Span'\n     * \t\t\t]\n     * \t\t}\n     * \t]\n     *  } );\n     *\n     * // Instance-level extension.\n     * Template.extend( template, {\n     * \tattributes: {\n     * \t\tclass: 'b',\n     * \t\tdata-x: bind.to( 'bar' )\n     * \t},\n     * \tchildren: [\n     * \t\t{\n     * \t\t\tattributes: {\n     * \t\t\t\tclass: 'c'\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // Child extension.\n     * Template.extend( template.children[ 0 ], {\n     * \tattributes: {\n     * \t\tclass: 'd'\n     * \t}\n     * } );\n     * ```\n     *\n     * the `outerHTML` of `template.render()` is:\n     *\n     * ```html\n     * <p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n     * \t<span class=\"b c d\">Span</span>\n     * </p>\n     * ```\n     *\n     * @param template An existing template instance to be extended.\n     * @param def Additional definition to be applied to a template.\n     */\n    static extend(template, def) {\n        if (template._isRendered) {\n            /**\n             * Extending a template after rendering may not work as expected. To make sure\n             * the {@link module:ui/template~Template.extend extending} works for an element,\n             * make sure it happens before {@link module:ui/template~Template#render} is called.\n             *\n             * @error template-extend-render\n             */\n            throw new CKEditorError('template-extend-render', [this, template]);\n        }\n        extendTemplate(template, normalize(clone(def)));\n    }\n    /**\n     * Renders a DOM Node (either an HTML element or text) out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderNode(data) {\n        let isInvalid;\n        if (data.node) {\n            // When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n            isInvalid = this.tag && this.text;\n        }\n        else {\n            // When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n            isInvalid = this.tag ? this.text : !this.text;\n        }\n        if (isInvalid) {\n            /**\n             * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n             * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n             *\n             * @error ui-template-wrong-syntax\n             */\n            throw new CKEditorError('ui-template-wrong-syntax', this);\n        }\n        if (this.text) {\n            return this._renderText(data);\n        }\n        else {\n            return this._renderElement(data);\n        }\n    }\n    /**\n     * Renders an HTML element out of the template.\n     *\n     * @param data Rendering data.\n     */\n    _renderElement(data) {\n        let node = data.node;\n        if (!node) {\n            node = data.node = document.createElementNS(this.ns || xhtmlNs, this.tag);\n        }\n        this._renderAttributes(data);\n        this._renderElementChildren(data);\n        this._setUpListeners(data);\n        return node;\n    }\n    /**\n     * Renders a text node out of {@link module:ui/template~Template#text}.\n     *\n     * @param data Rendering data.\n     */\n    _renderText(data) {\n        let node = data.node;\n        // Save the original textContent to revert it in #revert().\n        if (node) {\n            data.revertData.text = node.textContent;\n        }\n        else {\n            node = data.node = document.createTextNode('');\n        }\n        // Check if this Text Node is bound to Observable. Cases:\n        //\n        //\t\ttext: [ Template.bind( ... ).to( ... ) ]\n        //\n        //\t\ttext: [\n        //\t\t\t'foo',\n        //\t\t\tTemplate.bind( ... ).to( ... ),\n        //\t\t\t...\n        //\t\t]\n        //\n        if (hasTemplateBinding(this.text)) {\n            this._bindToObservable({\n                schema: this.text,\n                updater: getTextUpdater(node),\n                data\n            });\n        }\n        // Simply set text. Cases:\n        //\n        //\t\ttext: [ 'all', 'are', 'static' ]\n        //\n        //\t\ttext: [ 'foo' ]\n        //\n        else {\n            node.textContent = this.text.join('');\n        }\n        return node;\n    }\n    /**\n     * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n     *\n     * @param data Rendering data.\n     */\n    _renderAttributes(data) {\n        if (!this.attributes) {\n            return;\n        }\n        const node = data.node;\n        const revertData = data.revertData;\n        for (const attrName in this.attributes) {\n            // Current attribute value in DOM.\n            const domAttrValue = node.getAttribute(attrName);\n            // The value to be set.\n            const attrValue = this.attributes[attrName];\n            // Save revert data.\n            if (revertData) {\n                revertData.attributes[attrName] = domAttrValue;\n            }\n            // Detect custom namespace:\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            const attrNs = isNamespaced(attrValue) ? attrValue[0].ns : null;\n            // Activate binding if one is found. Cases:\n            //\n            //\t\tclass: [\n            //\t\t\tTemplate.bind( ... ).to( ... )\n            //\t\t]\n            //\n            //\t\tclass: [\n            //\t\t\t'bar',\n            //\t\t\tTemplate.bind( ... ).to( ... ),\n            //\t\t\t'baz'\n            //\t\t]\n            //\n            //\t\tclass: {\n            //\t\t\tns: 'abc',\n            //\t\t\tvalue: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            if (hasTemplateBinding(attrValue)) {\n                // Normalize attributes with additional data like namespace:\n                //\n                //\t\tclass: {\n                //\t\t\tns: 'abc',\n                //\t\t\tvalue: [ ... ]\n                //\t\t}\n                //\n                const valueToBind = isNamespaced(attrValue) ? attrValue[0].value : attrValue;\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && shouldExtend(attrName)) {\n                    valueToBind.unshift(domAttrValue);\n                }\n                this._bindToObservable({\n                    schema: valueToBind,\n                    updater: getAttributeUpdater(node, attrName, attrNs),\n                    data\n                });\n            }\n            // Style attribute could be an Object so it needs to be parsed in a specific way.\n            //\n            //\t\tstyle: {\n            //\t\t\twidth: '100px',\n            //\t\t\theight: Template.bind( ... ).to( ... )\n            //\t\t}\n            //\n            else if (attrName == 'style' && typeof attrValue[0] !== 'string') {\n                this._renderStyleAttribute(attrValue[0], data);\n            }\n            // Otherwise simply set the static attribute:\n            //\n            //\t\tclass: [ 'foo' ]\n            //\n            //\t\tclass: [ 'all', 'are', 'static' ]\n            //\n            //\t\tclass: [\n            //\t\t\t{\n            //\t\t\t\tns: 'abc',\n            //\t\t\t\tvalue: [ 'foo' ]\n            //\t\t\t}\n            //\t\t]\n            //\n            else {\n                // Extend the original value of attributes like \"style\" and \"class\",\n                // don't override them.\n                if (revertData && domAttrValue && shouldExtend(attrName)) {\n                    attrValue.unshift(domAttrValue);\n                }\n                const value = attrValue\n                    // Retrieve \"values\" from:\n                    //\n                    //\t\tclass: [\n                    //\t\t\t{\n                    //\t\t\t\tns: 'abc',\n                    //\t\t\t\tvalue: [ ... ]\n                    //\t\t\t}\n                    //\t\t]\n                    //\n                    .map((val) => val ? (val.value || val) : val)\n                    // Flatten the array.\n                    .reduce((prev, next) => prev.concat(next), [])\n                    // Convert into string.\n                    .reduce(arrayValueReducer, '');\n                if (!isFalsy(value)) {\n                    node.setAttributeNS(attrNs, attrName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Renders the `style` attribute of an HTML element based on\n     * {@link module:ui/template~Template#attributes}.\n     *\n     * A style attribute is an object with static values:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: 'red'\n     * \t}\n     * }\n     * ```\n     *\n     * or values bound to {@link module:ui/model~Model} properties:\n     *\n     * ```ts\n     * attributes: {\n     * \tstyle: {\n     * \t\tcolor: bind.to( ... )\n     * \t}\n     * }\n     * ```\n     *\n     * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n     * needed.\n     *\n     * @param styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n     * @param data Rendering data.\n     */\n    _renderStyleAttribute(styles, data) {\n        const node = data.node;\n        for (const styleName in styles) {\n            const styleValue = styles[styleName];\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: bind.to( 'attribute' )\n            //\t\t}\n            //\n            if (hasTemplateBinding(styleValue)) {\n                this._bindToObservable({\n                    schema: [styleValue],\n                    updater: getStyleUpdater(node, styleName),\n                    data\n                });\n            }\n            // Cases:\n            //\n            //\t\tstyle: {\n            //\t\t\tcolor: 'red'\n            //\t\t}\n            //\n            else {\n                node.style[styleName] = styleValue;\n            }\n        }\n    }\n    /**\n     * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n     *\n     * @param data Rendering data.\n     */\n    _renderElementChildren(data) {\n        const node = data.node;\n        const container = data.intoFragment ? document.createDocumentFragment() : node;\n        const isApplying = data.isApplying;\n        let childIndex = 0;\n        for (const child of this.children) {\n            if (isViewCollection(child)) {\n                if (!isApplying) {\n                    child.setParent(node);\n                    // Note: ViewCollection renders its children.\n                    for (const view of child) {\n                        container.appendChild(view.element);\n                    }\n                }\n            }\n            else if (isView(child)) {\n                if (!isApplying) {\n                    if (!child.isRendered) {\n                        child.render();\n                    }\n                    container.appendChild(child.element);\n                }\n            }\n            else if (isNode(child)) {\n                container.appendChild(child);\n            }\n            else {\n                if (isApplying) {\n                    const revertData = data.revertData;\n                    const childRevertData = getEmptyRevertData();\n                    revertData.children.push(childRevertData);\n                    child._renderNode({\n                        intoFragment: false,\n                        node: container.childNodes[childIndex++],\n                        isApplying: true,\n                        revertData: childRevertData\n                    });\n                }\n                else {\n                    container.appendChild(child.render());\n                }\n            }\n        }\n        if (data.intoFragment) {\n            node.appendChild(container);\n        }\n    }\n    /**\n     * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n     * on an HTML element.\n     *\n     * @param data Rendering data.\n     */\n    _setUpListeners(data) {\n        if (!this.eventListeners) {\n            return;\n        }\n        for (const key in this.eventListeners) {\n            const revertBindings = this.eventListeners[key].map(schemaItem => {\n                const [domEvtName, domSelector] = key.split('@');\n                return schemaItem.activateDomEventListener(domEvtName, domSelector, data);\n            });\n            if (data.revertData) {\n                data.revertData.bindings.push(revertBindings);\n            }\n        }\n    }\n    /**\n     * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n     * activates the binding and sets its initial value.\n     *\n     * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n     * text node `textContent`.\n     *\n     * @param options Binding options.\n     * @param options.updater A function which updates the DOM (like attribute or text).\n     * @param options.data Rendering data.\n     */\n    _bindToObservable({ schema, updater, data }) {\n        const revertData = data.revertData;\n        // Set initial values.\n        syncValueSchemaValue(schema, updater, data);\n        const revertBindings = schema\n            // Filter \"falsy\" (false, undefined, null, '') value schema components out.\n            .filter(item => !isFalsy(item))\n            // Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n            .filter((item) => item.observable)\n            // Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n            // TODO: Reduce the number of listeners attached as many bindings may listen\n            // to the same observable attribute.\n            .map(templateBinding => templateBinding.activateAttributeListener(schema, updater, data));\n        if (revertData) {\n            revertData.bindings.push(revertBindings);\n        }\n    }\n    /**\n     * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n     * return it to the original state.\n     *\n     * @param node A node to be reverted.\n     * @param revertData An object that stores information about what changes have been made by\n     * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n     */\n    _revertTemplateFromNode(node, revertData) {\n        for (const binding of revertData.bindings) {\n            // Each binding may consist of several observable+observable#attribute.\n            // like the following has 2:\n            //\n            //\t\tclass: [\n            //\t\t\t'x',\n            //\t\t\tbind.to( 'foo' ),\n            //\t\t\t'y',\n            //\t\t\tbind.to( 'bar' )\n            //\t\t]\n            //\n            for (const revertBinding of binding) {\n                revertBinding();\n            }\n        }\n        if (revertData.text) {\n            node.textContent = revertData.text;\n            return;\n        }\n        const element = node;\n        for (const attrName in revertData.attributes) {\n            const attrValue = revertData.attributes[attrName];\n            // When the attribute has **not** been set before #apply().\n            if (attrValue === null) {\n                element.removeAttribute(attrName);\n            }\n            else {\n                element.setAttribute(attrName, attrValue);\n            }\n        }\n        for (let i = 0; i < revertData.children.length; ++i) {\n            this._revertTemplateFromNode(element.childNodes[i], revertData.children[i]);\n        }\n    }\n}\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @internal\n */\nexport class TemplateBinding {\n    /**\n     * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n     *\n     * @param def The definition of the binding.\n     */\n    constructor(def) {\n        this.attribute = def.attribute;\n        this.observable = def.observable;\n        this.emitter = def.emitter;\n        this.callback = def.callback;\n    }\n    /**\n     * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n     * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n     *\n     * @param node A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n     * @returns The value of {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}.\n     */\n    getValue(node) {\n        const value = this.observable[this.attribute];\n        return this.callback ? this.callback(value, node) : value;\n    }\n    /**\n     * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n     * value of {@link module:ui/template~TemplateValueSchema}.\n     *\n     * @param schema A full schema to generate an attribute or text in the DOM.\n     * @param updater A DOM updater function used to update the native DOM attribute or text.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateAttributeListener(schema, updater, data) {\n        const callback = () => syncValueSchemaValue(schema, updater, data);\n        this.emitter.listenTo(this.observable, `change:${this.attribute}`, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(this.observable, `change:${this.attribute}`, callback);\n        };\n    }\n}\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @internal\n */\nexport class TemplateToBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.eventNameOrFunction = def.eventNameOrFunction;\n    }\n    /**\n     * Activates the listener for the native DOM event, which when fired, is propagated by\n     * the {@link module:ui/template~TemplateBinding#emitter}.\n     *\n     * @param domEvtName The name of the native DOM event.\n     * @param domSelector The selector in the DOM to filter delegated events.\n     * @param data Rendering data.\n     * @returns A function to sever the listener binding.\n     */\n    activateDomEventListener(domEvtName, domSelector, data) {\n        const callback = (evt, domEvt) => {\n            if (!domSelector || domEvt.target.matches(domSelector)) {\n                if (typeof this.eventNameOrFunction == 'function') {\n                    this.eventNameOrFunction(domEvt);\n                }\n                else {\n                    this.observable.fire(this.eventNameOrFunction, domEvt);\n                }\n            }\n        };\n        this.emitter.listenTo(data.node, domEvtName, callback);\n        // Allows revert of the listener.\n        return () => {\n            this.emitter.stopListening(data.node, domEvtName, callback);\n        };\n    }\n}\n/**\n * Describes a binding to {@link module:utils/observablemixin~Observable} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @internal\n */\nexport class TemplateIfBinding extends TemplateBinding {\n    constructor(def) {\n        super(def);\n        this.valueIfTrue = def.valueIfTrue;\n    }\n    /**\n     * @inheritDoc\n     */\n    getValue(node) {\n        const value = super.getValue(node);\n        return isFalsy(value) ? false : (this.valueIfTrue || true);\n    }\n}\n/**\n * Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n * {@link module:ui/template~TemplateBinding}.\n */\nfunction hasTemplateBinding(schema) {\n    if (!schema) {\n        return false;\n    }\n    // Normalize attributes with additional data like namespace:\n    //\n    //\t\tclass: {\n    //\t\t\tns: 'abc',\n    //\t\t\tvalue: [ ... ]\n    //\t\t}\n    //\n    if (schema.value) {\n        schema = schema.value;\n    }\n    if (Array.isArray(schema)) {\n        return schema.some(hasTemplateBinding);\n    }\n    else if (schema instanceof TemplateBinding) {\n        return true;\n    }\n    return false;\n}\n/**\n * Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n * an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n * items.\n *\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction getValueSchemaValue(schema, node) {\n    return schema.map(schemaItem => {\n        // Process {@link module:ui/template~TemplateBinding} bindings.\n        if (schemaItem instanceof TemplateBinding) {\n            return schemaItem.getValue(node);\n        }\n        // All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n        return schemaItem;\n    });\n}\n/**\n * A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n * constructed from {@link module:ui/template~TemplateValueSchema}.\n *\n * @param updater A function which updates the DOM (like attribute or text).\n * @param node DOM Node updated when {@link module:utils/observablemixin~Observable} changes.\n */\nfunction syncValueSchemaValue(schema, updater, { node }) {\n    const values = getValueSchemaValue(schema, node);\n    let value;\n    // Check if schema is a single Template.bind.if, like:\n    //\n    //\t\tclass: Template.bind.if( 'foo' )\n    //\n    if (schema.length == 1 && schema[0] instanceof TemplateIfBinding) {\n        value = values[0];\n    }\n    else {\n        value = values.reduce(arrayValueReducer, '');\n    }\n    if (isFalsy(value)) {\n        updater.remove();\n    }\n    else {\n        updater.set(value);\n    }\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset `textContent`.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param node DOM Node to be modified.\n */\nfunction getTextUpdater(node) {\n    return {\n        set(value) {\n            node.textContent = value;\n        },\n        remove() {\n            node.textContent = '';\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of DOM Node to set or reset an attribute.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param attrName Name of the attribute to be modified.\n * @param ns Namespace to use.\n */\nfunction getAttributeUpdater(el, attrName, ns) {\n    return {\n        set(value) {\n            el.setAttributeNS(ns, attrName, value);\n        },\n        remove() {\n            el.removeAttributeNS(ns, attrName);\n        }\n    };\n}\n/**\n * Returns an object consisting of `set` and `remove` functions, which\n * can be used in the context of CSSStyleDeclaration to set or remove a style.\n * @see module:ui/view~View#_bindToObservable\n *\n * @param el DOM Node to be modified.\n * @param styleName Name of the style to be modified.\n */\nfunction getStyleUpdater(el, styleName) {\n    return {\n        set(value) {\n            el.style[styleName] = value;\n        },\n        remove() {\n            el.style[styleName] = null;\n        }\n    };\n}\n/**\n * Clones definition of the template.\n */\nfunction clone(def) {\n    const clone = cloneDeepWith(def, value => {\n        // Don't clone the `Template.bind`* bindings because of the references to Observable\n        // and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n        // cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n        // along with the definition.\n        //\n        // Don't clone Template instances if provided as a child. They're simply #render()ed\n        // and nothing should interfere.\n        //\n        // Also don't clone View instances if provided as a child of the Template. The template\n        // instance will be extracted from the View during the normalization and there's no need\n        // to clone it.\n        if (value && (value instanceof TemplateBinding || isTemplate(value) || isView(value) || isViewCollection(value))) {\n            return value;\n        }\n    });\n    return clone;\n}\n/**\n * Normalizes given {@link module:ui/template~TemplateDefinition}.\n *\n * See:\n *  * {@link normalizeAttributes}\n *  * {@link normalizeListeners}\n *  * {@link normalizePlainTextDefinition}\n *  * {@link normalizeTextDefinition}\n *\n * @param def A template definition.\n * @returns Normalized definition.\n */\nfunction normalize(def) {\n    if (typeof def == 'string') {\n        def = normalizePlainTextDefinition(def);\n    }\n    else if (def.text) {\n        normalizeTextDefinition(def);\n    }\n    if (def.on) {\n        def.eventListeners = normalizeListeners(def.on);\n        // Template mixes EmitterMixin, so delete #on to avoid collision.\n        delete def.on;\n    }\n    if (!def.text) {\n        if (def.attributes) {\n            normalizeAttributes(def.attributes);\n        }\n        const children = [];\n        if (def.children) {\n            if (isViewCollection(def.children)) {\n                children.push(def.children);\n            }\n            else {\n                for (const child of def.children) {\n                    if (isTemplate(child) || isView(child) || isNode(child)) {\n                        children.push(child);\n                    }\n                    else {\n                        children.push(new Template(child));\n                    }\n                }\n            }\n        }\n        def.children = children;\n    }\n    return def;\n}\n/**\n * Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * attributes: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: {\n * \t\tvalue: 'bar'\n * \t}\n * }\n * ```\n *\n * becomes\n *\n * ```\n * attributes: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: {\n * \t\tvalue: [ 'bar' ]\n * \t}\n * }\n * ```\n */\nfunction normalizeAttributes(attributes) {\n    for (const a in attributes) {\n        if (attributes[a].value) {\n            attributes[a].value = toArray(attributes[a].value);\n        }\n        arrayify(attributes, a);\n    }\n}\n/**\n * Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * on: {\n * \ta: 'bar',\n * \tb: {@link module:ui/template~TemplateBinding},\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * on: {\n * \ta: [ 'bar' ],\n * \tb: [ {@link module:ui/template~TemplateBinding} ],\n * \tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n * }\n * ```\n *\n * @returns Object containing normalized listeners.\n */\nfunction normalizeListeners(listeners) {\n    for (const l in listeners) {\n        arrayify(listeners, l);\n    }\n    return listeners;\n}\n/**\n * Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * \"foo\"\n * ```\n *\n * becomes\n *\n * ```\n * { text: [ 'foo' ] },\n * ```\n *\n * @returns Normalized template definition.\n */\nfunction normalizePlainTextDefinition(def) {\n    return {\n        text: [def]\n    };\n}\n/**\n * Normalizes text {@link module:ui/template~TemplateDefinition}.\n *\n * ```\n * children: [\n * \t{ text: 'def' },\n * \t{ text: {@link module:ui/template~TemplateBinding} }\n * ]\n * ```\n *\n * becomes\n *\n * ```\n * children: [\n * \t{ text: [ 'def' ] },\n * \t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n * ]\n * ```\n */\nfunction normalizeTextDefinition(def) {\n    def.text = toArray(def.text);\n}\n/**\n * Wraps an entry in Object in an Array, if not already one.\n *\n * ```\n * {\n * \tx: 'y',\n * \ta: [ 'b' ]\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n * \tx: [ 'y' ],\n * \ta: [ 'b' ]\n * }\n * ```\n */\nfunction arrayify(obj, key) {\n    obj[key] = toArray(obj[key]);\n}\n/**\n * A helper which concatenates the value avoiding unwanted\n * leading white spaces.\n */\nfunction arrayValueReducer(prev, cur) {\n    if (isFalsy(cur)) {\n        return prev;\n    }\n    else if (isFalsy(prev)) {\n        return cur;\n    }\n    else {\n        return `${prev} ${cur}`;\n    }\n}\n/**\n * Extends one object defined in the following format:\n *\n * ```\n * {\n * \tkey1: [Array1],\n * \tkey2: [Array2],\n * \t...\n * \tkeyN: [ArrayN]\n * }\n * ```\n *\n * with another object of the same data format.\n *\n * @param obj Base object.\n * @param ext Object extending base.\n */\nfunction extendObjectValueArray(obj, ext) {\n    for (const a in ext) {\n        if (obj[a]) {\n            obj[a].push(...ext[a]);\n        }\n        else {\n            obj[a] = ext[a];\n        }\n    }\n}\n/**\n * A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n * with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n *\n * @param def A template instance to be extended.\n * @param def A definition which is to extend the template instance.\n * @param Error context.\n */\nfunction extendTemplate(template, def) {\n    if (def.attributes) {\n        if (!template.attributes) {\n            template.attributes = {};\n        }\n        extendObjectValueArray(template.attributes, def.attributes);\n    }\n    if (def.eventListeners) {\n        if (!template.eventListeners) {\n            template.eventListeners = {};\n        }\n        extendObjectValueArray(template.eventListeners, def.eventListeners);\n    }\n    if (def.text) {\n        template.text.push(...def.text);\n    }\n    if (def.children && def.children.length) {\n        if (template.children.length != def.children.length) {\n            /**\n             * The number of children in extended definition does not match.\n             *\n             * @error ui-template-extend-children-mismatch\n             */\n            throw new CKEditorError('ui-template-extend-children-mismatch', template);\n        }\n        let childIndex = 0;\n        for (const childDef of def.children) {\n            extendTemplate(template.children[childIndex++], childDef);\n        }\n    }\n}\n/**\n * Checks if value is \"falsy\".\n * Note: 0 (Number) is not \"falsy\" in this context.\n *\n * @param value Value to be checked.\n */\nfunction isFalsy(value) {\n    return !value && value !== 0;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/view~View}\n *\n * @param value Value to be checked.\n */\nfunction isView(item) {\n    return item instanceof View;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/template~Template}\n *\n * @param value Value to be checked.\n */\nfunction isTemplate(item) {\n    return item instanceof Template;\n}\n/**\n * Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n *\n * @param value Value to be checked.\n */\nfunction isViewCollection(item) {\n    return item instanceof ViewCollection;\n}\n/**\n * Checks if value array contains the one with namespace.\n */\nfunction isNamespaced(attrValue) {\n    return isObject(attrValue[0]) && attrValue[0].ns;\n}\n/**\n * Creates an empty skeleton for {@link module:ui/template~Template#revert}\n * data.\n */\nfunction getEmptyRevertData() {\n    return {\n        children: [],\n        bindings: [],\n        attributes: {}\n    };\n}\n/**\n * Checks whether an attribute should be extended when\n * {@link module:ui/template~Template#apply} is called.\n *\n * @param attrName Attribute name to check.\n */\nfunction shouldExtend(attrName) {\n    return attrName == 'class' || attrName == 'style';\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/bodycollection\n */\n/* globals document */\nimport Template from '../template';\nimport ViewCollection from '../viewcollection';\nimport { createElement } from '@ckeditor/ckeditor5-utils';\n/**\n * This is a special {@link module:ui/viewcollection~ViewCollection} dedicated to elements that are detached\n * from the DOM structure of the editor, like panels, icons, etc.\n *\n * The body collection is available in the {@link module:ui/editorui/editoruiview~EditorUIView#body `editor.ui.view.body`} property.\n * Any plugin can add a {@link module:ui/view~View view} to this collection.\n * These views will render in a container placed directly in the `<body>` element.\n * The editor will detach and destroy this collection when the editor will be {@link module:core/editor/editor~Editor#destroy destroyed}.\n *\n * If you need to control the life cycle of the body collection on your own, you can create your own instance of this class.\n *\n * A body collection will render itself automatically in the DOM body element as soon as you call {@link ~BodyCollection#attachToDom}.\n * If you create multiple body collections, this class will create a special wrapper element in the DOM to limit the number of\n * elements created directly in the body and remove it when the last body collection will be\n * {@link ~BodyCollection#detachFromDom detached}.\n */\nexport default class BodyCollection extends ViewCollection {\n    /**\n     * Creates a new instance of the {@link module:ui/editorui/bodycollection~BodyCollection}.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor editor's locale} instance.\n     * @param initialItems The initial items of the collection.\n     */\n    constructor(locale, initialItems = []) {\n        super(initialItems);\n        this.locale = locale;\n    }\n    /**\n     * The element holding elements of the body region.\n     */\n    get bodyCollectionContainer() {\n        return this._bodyCollectionContainer;\n    }\n    /**\n     * Attaches the body collection to the DOM body element. You need to execute this method to render the content of\n     * the body collection.\n     */\n    attachToDom() {\n        this._bodyCollectionContainer = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset_all',\n                    'ck-body',\n                    'ck-rounded-corners'\n                ],\n                dir: this.locale.uiLanguageDirection\n            },\n            children: this\n        }).render();\n        let wrapper = document.querySelector('.ck-body-wrapper');\n        if (!wrapper) {\n            wrapper = createElement(document, 'div', { class: 'ck-body-wrapper' });\n            document.body.appendChild(wrapper);\n        }\n        wrapper.appendChild(this._bodyCollectionContainer);\n    }\n    /**\n     * Detaches the collection from the DOM structure. Use this method when you do not need to use the body collection\n     * anymore to clean-up the DOM structure.\n     */\n    detachFromDom() {\n        super.destroy();\n        if (this._bodyCollectionContainer) {\n            this._bodyCollectionContainer.remove();\n        }\n        const wrapper = document.querySelector('.ck-body-wrapper');\n        if (wrapper && wrapper.childElementCount == 0) {\n            wrapper.remove();\n        }\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./icon.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global DOMParser */\n/**\n * @module ui/icon/iconview\n */\nimport View from '../view';\nimport '../../theme/components/icon/icon.css';\n/**\n * The icon view class.\n */\nexport default class IconView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set('content', '');\n        this.set('viewBox', '0 0 20 20');\n        this.set('fillColor', '');\n        this.set('isColorInherited', true);\n        this.setTemplate({\n            tag: 'svg',\n            ns: 'http://www.w3.org/2000/svg',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-icon',\n                    // Exclude icon internals from the CSS reset to allow rich (non-monochromatic) icons\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    'ck-reset_all-excluded',\n                    // The class to remove the dynamic color inheritance is toggleable\n                    // (https://github.com/ckeditor/ckeditor5/issues/12599).\n                    bind.if('isColorInherited', 'ck-icon_inherit-color')\n                ],\n                viewBox: bind.to('viewBox')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this._updateXMLContent();\n        this._colorFillPaths();\n        // This is a hack for lack of innerHTML binding.\n        // See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n        this.on('change:content', () => {\n            this._updateXMLContent();\n            this._colorFillPaths();\n        });\n        this.on('change:fillColor', () => {\n            this._colorFillPaths();\n        });\n    }\n    /**\n     * Updates the {@link #element} with the value of {@link #content}.\n     */\n    _updateXMLContent() {\n        if (this.content) {\n            const parsed = new DOMParser().parseFromString(this.content.trim(), 'image/svg+xml');\n            const svg = parsed.querySelector('svg');\n            const viewBox = svg.getAttribute('viewBox');\n            if (viewBox) {\n                this.viewBox = viewBox;\n            }\n            // Preserve presentational attributes of the <svg> element from the source.\n            // They can affect rendering of the entire icon (https://github.com/ckeditor/ckeditor5/issues/12597).\n            for (const { name, value } of Array.from(svg.attributes)) {\n                if (IconView.presentationalAttributeNames.includes(name)) {\n                    this.element.setAttribute(name, value);\n                }\n            }\n            while (this.element.firstChild) {\n                this.element.removeChild(this.element.firstChild);\n            }\n            while (svg.childNodes.length > 0) {\n                this.element.appendChild(svg.childNodes[0]);\n            }\n        }\n    }\n    /**\n     * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n     */\n    _colorFillPaths() {\n        if (this.fillColor) {\n            this.element.querySelectorAll('.ck-icon__fill').forEach(path => {\n                path.style.fill = this.fillColor;\n            });\n        }\n    }\n}\n/**\n * A list of presentational attributes that can be set on the `<svg>` element and should be preserved\n * when the icon {@link module:ui/icon/iconview~IconView#content content} is loaded.\n *\n * See the [specification](https://www.w3.org/TR/SVG/styling.html#TermPresentationAttribute) to learn more.\n */\nIconView.presentationalAttributeNames = [\n    'alignment-baseline', 'baseline-shift', 'clip-path', 'clip-rule', 'color', 'color-interpolation',\n    'color-interpolation-filters', 'color-rendering', 'cursor', 'direction', 'display', 'dominant-baseline', 'fill', 'fill-opacity',\n    'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style',\n    'font-variant', 'font-weight', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start',\n    'mask', 'opacity', 'overflow', 'paint-order', 'pointer-events', 'shape-rendering', 'stop-color', 'stop-opacity', 'stroke',\n    'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width',\n    'text-anchor', 'text-decoration', 'text-overflow', 'text-rendering', 'transform', 'unicode-bidi', 'vector-effect',\n    'visibility', 'white-space', 'word-spacing', 'writing-mode'\n];\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./button.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport { env, getEnvKeystrokeText, uid, delay } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n * ```ts\n * const view = new ButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true,\n * \twithText: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class ButtonView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * Delayed focus function for focus handling in Safari.\n         */\n        this._focusDelayed = null;\n        const bind = this.bindTemplate;\n        const ariaLabelUid = uid();\n        // Implement the Button interface.\n        this.set('ariaChecked', undefined);\n        this.set('ariaLabel', undefined);\n        this.set('ariaLabelledBy', `ck-editor__aria-label_${ariaLabelUid}`);\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isVisible', true);\n        this.set('isToggleable', false);\n        this.set('keystroke', undefined);\n        this.set('label', undefined);\n        this.set('role', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.set('withKeystroke', false);\n        this.children = this.createCollection();\n        this.labelView = this._createLabelView();\n        this.iconView = new IconView();\n        this.iconView.extendTemplate({\n            attributes: {\n                class: 'ck-button__icon'\n            }\n        });\n        this.keystrokeView = this._createKeystrokeView();\n        this.bind('_tooltipString').to(this, 'tooltip', this, 'label', this, 'keystroke', this._getTooltipString.bind(this));\n        const template = {\n            tag: 'button',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    bind.to('isOn', value => value ? 'ck-on' : 'ck-off'),\n                    bind.if('withText', 'ck-button_with-text'),\n                    bind.if('withKeystroke', 'ck-button_with-keystroke')\n                ],\n                role: bind.to('role'),\n                type: bind.to('type', value => value ? value : 'button'),\n                tabindex: bind.to('tabindex'),\n                'aria-label': bind.to('ariaLabel'),\n                'aria-labelledby': bind.to('ariaLabelledBy'),\n                'aria-disabled': bind.if('isEnabled', true, value => !value),\n                'aria-checked': bind.to('isOn'),\n                'aria-pressed': bind.to('isOn', value => this.isToggleable ? String(!!value) : false),\n                'data-cke-tooltip-text': bind.to('_tooltipString'),\n                'data-cke-tooltip-position': bind.to('tooltipPosition')\n            },\n            children: this.children,\n            on: {\n                click: bind.to(evt => {\n                    // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n                    // Though, shouldn't this condition be moved to the button controller?\n                    if (this.isEnabled) {\n                        this.fire('execute');\n                    }\n                    else {\n                        // Prevent the default when button is disabled, to block e.g.\n                        // automatic form submitting. See ckeditor/ckeditor5-link#74.\n                        evt.preventDefault();\n                    }\n                })\n            }\n        };\n        // On Safari we have to force the focus on a button on click as it's the only browser\n        // that doesn't do that automatically. See #12115.\n        if (env.isSafari) {\n            if (!this._focusDelayed) {\n                this._focusDelayed = delay(() => this.focus(), 0);\n            }\n            template.on.mousedown = bind.to(() => {\n                this._focusDelayed();\n            });\n            template.on.mouseup = bind.to(() => {\n                this._focusDelayed.cancel();\n            });\n        }\n        this.setTemplate(template);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        if (this.icon) {\n            this.iconView.bind('content').to(this, 'icon');\n            this.children.add(this.iconView);\n        }\n        this.children.add(this.labelView);\n        if (this.withKeystroke && this.keystroke) {\n            this.children.add(this.keystrokeView);\n        }\n    }\n    /**\n     * Focuses the {@link #element} of the button.\n     */\n    focus() {\n        this.element.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._focusDelayed) {\n            this._focusDelayed.cancel();\n        }\n        super.destroy();\n    }\n    /**\n     * Creates a label view instance and binds it with button attributes.\n     */\n    _createLabelView() {\n        const labelView = new View();\n        const bind = this.bindTemplate;\n        labelView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__label'\n                ],\n                style: bind.to('labelStyle'),\n                id: this.ariaLabelledBy\n            },\n            children: [\n                {\n                    text: bind.to('label')\n                }\n            ]\n        });\n        return labelView;\n    }\n    /**\n     * Creates a view that displays a keystroke next to a {@link #labelView label }\n     * and binds it with button attributes.\n     */\n    _createKeystrokeView() {\n        const keystrokeView = new View();\n        keystrokeView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__keystroke'\n                ]\n            },\n            children: [\n                {\n                    text: this.bindTemplate.to('keystroke', text => getEnvKeystrokeText(text))\n                }\n            ]\n        });\n        return keystrokeView;\n    }\n    /**\n     * Gets the text for the tooltip from the combination of\n     * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n     *\n     * @see #tooltip\n     * @see #_tooltipString\n     * @param tooltip Button tooltip.\n     * @param label Button label.\n     * @param keystroke Button keystroke.\n     */\n    _getTooltipString(tooltip, label, keystroke) {\n        if (tooltip) {\n            if (typeof tooltip == 'string') {\n                return tooltip;\n            }\n            else {\n                if (keystroke) {\n                    keystroke = getEnvKeystrokeText(keystroke);\n                }\n                if (tooltip instanceof Function) {\n                    return tooltip(label, keystroke);\n                }\n                else {\n                    return `${label}${keystroke ? ` (${keystroke})` : ''}`;\n                }\n            }\n        }\n        return '';\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./switchbutton.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/button/switchbuttonview\n */\nimport View from '../view';\nimport ButtonView from './buttonview';\nimport '../../theme/components/button/switchbutton.css';\n/**\n * The switch button view class.\n *\n * ```ts\n * const view = new SwitchButtonView();\n *\n * view.set( {\n * \twithText: true,\n * \tlabel: 'Switch me!'\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n */\nexport default class SwitchButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.isToggleable = true;\n        this.toggleSwitchView = this._createToggleView();\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-switchbutton'\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.toggleSwitchView);\n    }\n    /**\n     * Creates a toggle child view.\n     */\n    _createToggleView() {\n        const toggleSwitchView = new View();\n        toggleSwitchView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-button__toggle'\n                ]\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-button__toggle__inner'\n                        ]\n                    }\n                }\n            ]\n        });\n        return toggleSwitchView;\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./colorgrid.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./label.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/label/labelview\n */\nimport View from '../view';\nimport { uid } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/label/label.css';\n/**\n * The label view class.\n */\nexport default class LabelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('text', undefined);\n        this.set('for', undefined);\n        this.id = `ck-editor__label_${uid()}`;\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'label',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-label'\n                ],\n                id: this.id,\n                for: bind.to('for')\n            },\n            children: [\n                {\n                    text: bind.to('text')\n                }\n            ]\n        });\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./labeledfieldview.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./input.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/dropdownpanelview\n */\nimport View from '../view';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n */\nexport default class DropdownPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isVisible', false);\n        this.set('position', 'se');\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-dropdown__panel',\n                    bind.to('position', value => `ck-dropdown__panel_${value}`),\n                    bind.if('isVisible', 'ck-dropdown__panel-visible')\n                ]\n            },\n            children: this.children,\n            on: {\n                // Drag and drop in the panel should not break the selection in the editor.\n                // https://github.com/ckeditor/ckeditor5-ui/issues/228\n                selectstart: bind.to(evt => {\n                    if (evt.target.tagName.toLocaleLowerCase() === 'input') {\n                        return;\n                    }\n                    evt.preventDefault();\n                })\n            }\n        });\n    }\n    /**\n     * Focuses the first view in the {@link #children} collection.\n     *\n     * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n     */\n    focus() {\n        if (this.children.length) {\n            const firstChild = this.children.first;\n            if (typeof firstChild.focus === 'function') {\n                firstChild.focus();\n            }\n            else {\n                /**\n                 * The child view of a dropdown could not be focused because it is missing the `focus()` method.\n                 *\n                 * This warning appears when a dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open} and it\n                 * attempts to focus the {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children first child} of its panel\n                 * but the child does not implement the\n                 * {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface}.\n                 *\n                 * Focusing the content of a dropdown on open greatly improves the accessibility. Please make sure the view instance\n                 * provides the `focus()` method for the best user experience.\n                 *\n                 * @error ui-dropdown-panel-focus-child-missing-focus\n                 * @param childView\n                 * @param dropdownPanel\n                 */\n                logWarning('ui-dropdown-panel-focus-child-missing-focus', { childView: this.children.first, dropdownPanel: this });\n            }\n        }\n    }\n    /**\n     * Focuses the view element or last item in view collection on opening dropdown's panel.\n     *\n     * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n     */\n    focusLast() {\n        if (this.children.length) {\n            const lastChild = this.children.last;\n            if (typeof lastChild.focusLast === 'function') {\n                lastChild.focusLast();\n            }\n            else {\n                lastChild.focus();\n            }\n        }\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./dropdown.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/dropdownview\n */\nimport View from '../view';\nimport { KeystrokeHandler, FocusTracker, getOptimalPosition } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/dropdown.css';\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n * ```ts\n * const dropdown = createDropdown( locale );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * dropdown.panelView.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n * ```ts\n * const button = new DropdownButtonView( locale );\n * const panel = new DropdownPanelView( locale );\n * const dropdown = new DropdownView( locale, button, panel );\n *\n * button.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * panel.element.textContent = 'Content of the panel';\n *\n * // Will render a dropdown with a panel containing a \"Content of the panel\" text.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n */\nexport default class DropdownView extends View {\n    /**\n     * Creates an instance of the dropdown.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     */\n    constructor(locale, buttonView, panelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.buttonView = buttonView;\n        this.panelView = panelView;\n        this.set('isOpen', false);\n        this.set('isEnabled', true);\n        this.set('class', undefined);\n        this.set('id', undefined);\n        this.set('panelPosition', 'auto');\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-dropdown',\n                    bind.to('class'),\n                    bind.if('isEnabled', 'ck-disabled', value => !value)\n                ],\n                id: bind.to('id'),\n                'aria-describedby': bind.to('ariaDescribedById')\n            },\n            children: [\n                buttonView,\n                panelView\n            ]\n        });\n        buttonView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-dropdown__button'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOpen')\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.buttonView.element);\n        this.focusTracker.add(this.panelView.element);\n        // Toggle the dropdown when its button has been clicked.\n        this.listenTo(this.buttonView, 'open', () => {\n            this.isOpen = !this.isOpen;\n        });\n        // Toggle the visibility of the panel when the dropdown becomes open.\n        this.panelView.bind('isVisible').to(this, 'isOpen');\n        // Let the dropdown control the position of the panel. The position must\n        // be updated every time the dropdown is open.\n        this.on('change:isOpen', (evt, name, isOpen) => {\n            if (!isOpen) {\n                return;\n            }\n            // If \"auto\", find the best position of the panel to fit into the viewport.\n            // Otherwise, simply assign the static position.\n            if (this.panelPosition === 'auto') {\n                this.panelView.position = DropdownView._getOptimalPosition({\n                    element: this.panelView.element,\n                    target: this.buttonView.element,\n                    fitInViewport: true,\n                    positions: this._panelPositions\n                }).name;\n            }\n            else {\n                this.panelView.position = this.panelPosition;\n            }\n        });\n        // Listen for keystrokes coming from within #element.\n        this.keystrokes.listenTo(this.element);\n        const closeDropdown = (data, cancel) => {\n            if (this.isOpen) {\n                this.isOpen = false;\n                cancel();\n            }\n        };\n        // Open the dropdown panel using the arrow down key, just like with return or space.\n        this.keystrokes.set('arrowdown', (data, cancel) => {\n            // Don't open if the dropdown is disabled or already open.\n            if (this.buttonView.isEnabled && !this.isOpen) {\n                this.isOpen = true;\n                cancel();\n            }\n        });\n        // Block the right arrow key (until nested dropdowns are implemented).\n        this.keystrokes.set('arrowright', (data, cancel) => {\n            if (this.isOpen) {\n                cancel();\n            }\n        });\n        // Close the dropdown using the arrow left/escape key.\n        this.keystrokes.set('arrowleft', closeDropdown);\n        this.keystrokes.set('esc', closeDropdown);\n    }\n    /**\n     * Focuses the {@link #buttonView}.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n    /**\n     * Returns {@link #panelView panel} positions to be used by the\n     * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n     * utility considering the direction of the language the UI of the editor is displayed in.\n     */\n    get _panelPositions() {\n        const { south, north, southEast, southWest, northEast, northWest, southMiddleEast, southMiddleWest, northMiddleEast, northMiddleWest } = DropdownView.defaultPanelPositions;\n        if (this.locale.uiLanguageDirection !== 'rtl') {\n            return [\n                southEast, southWest, southMiddleEast, southMiddleWest, south,\n                northEast, northWest, northMiddleEast, northMiddleWest, north\n            ];\n        }\n        else {\n            return [\n                southWest, southEast, southMiddleWest, southMiddleEast, south,\n                northWest, northEast, northMiddleWest, northMiddleEast, north\n            ];\n        }\n    }\n}\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `south`\n *\n * ```\n *\t\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southEast`\n *\n * ```\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southWest`\n *\n * ```\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleEast`\n *\n * ```\n *\t\t  [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * * `southMiddleWest`\n *\n * ```\n *\t\t       [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n * ```\n *\n * **North**\n *\n * * `north`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t    [ Button ]\n * ```\n *\n * * `northEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n * ```\n *\n * * `northWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n * ```\n *\n * * `northMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t  [ Button ]\n * ```\n *\n * * `northMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t       [ Button ]\n * ```\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n */\nDropdownView.defaultPanelPositions = {\n    south: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 's'\n        };\n    },\n    southEast: buttonRect => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left,\n            name: 'se'\n        };\n    },\n    southWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'sw'\n        };\n    },\n    southMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'sme'\n        };\n    },\n    southMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.bottom,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'smw'\n        };\n    },\n    north: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n            name: 'n'\n        };\n    },\n    northEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left,\n            name: 'ne'\n        };\n    },\n    northWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - panelRect.width + buttonRect.width,\n            name: 'nw'\n        };\n    },\n    northMiddleEast: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n            name: 'nme'\n        };\n    },\n    northMiddleWest: (buttonRect, panelRect) => {\n        return {\n            top: buttonRect.top - panelRect.height,\n            left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n            name: 'nmw'\n        };\n    }\n};\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\n","export default \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport IconView from '../../icon/iconview';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\n/**\n * The default dropdown button view class.\n *\n * ```ts\n * const view = new DropdownButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class DropdownButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.arrowView = this._createArrowView();\n        this.extendTemplate({\n            attributes: {\n                'aria-haspopup': true,\n                'aria-expanded': this.bindTemplate.to('isOn', value => String(value))\n            }\n        });\n        // The DropdownButton interface expects the open event upon which will open the dropdown.\n        this.delegate('execute').to(this, 'open');\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.arrowView);\n    }\n    /**\n     * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n     */\n    _createArrowView() {\n        const arrowView = new IconView();\n        arrowView.content = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: 'ck-dropdown__arrow'\n            }\n        });\n        return arrowView;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/focuscycler\n */\nimport { isVisible } from '@ckeditor/ckeditor5-utils';\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n * ```ts\n * const focusables = new ViewCollection();\n * const focusTracker = new FocusTracker();\n *\n * // Add focusable views to the focus tracker.\n * focusTracker.add( ... );\n * ```\n *\n * Then, the cycler can be used manually:\n *\n * ```ts\n * const cycler = new FocusCycler( { focusables, focusTracker } );\n *\n * // Will focus the first focusable view in #focusables.\n * cycler.focusFirst();\n *\n * // Will log the next focusable item in #focusables.\n * console.log( cycler.next );\n * ```\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n * ```ts\n * const keystrokeHandler = new KeystrokeHandler();\n *\n * // Activate the keystroke handler.\n * keystrokeHandler.listenTo( sourceOfEvents );\n *\n * const cycler = new FocusCycler( {\n * \tfocusables, focusTracker, keystrokeHandler,\n * \tactions: {\n * \t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n * \t\t// focusPrevious() will be called on the cycler.\n * \t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n * \t}\n * } );\n * ```\n *\n * Check out the {@glink framework/deep-dive/ui/focus-tracking \"Deep dive into focus tracking\"} guide to learn more.\n */\nexport default class FocusCycler {\n    /**\n     * Creates an instance of the focus cycler utility.\n     *\n     * @param options Configuration options.\n     */\n    constructor(options) {\n        this.focusables = options.focusables;\n        this.focusTracker = options.focusTracker;\n        this.keystrokeHandler = options.keystrokeHandler;\n        this.actions = options.actions;\n        if (options.actions && options.keystrokeHandler) {\n            for (const methodName in options.actions) {\n                let actions = options.actions[methodName];\n                if (typeof actions == 'string') {\n                    actions = [actions];\n                }\n                for (const keystroke of actions) {\n                    options.keystrokeHandler.set(keystroke, (data, cancel) => {\n                        this[methodName]();\n                        cancel();\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Returns the first focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get first() {\n        return (this.focusables.find(isFocusable) || null);\n    }\n    /**\n     * Returns the last focusable view in {@link #focusables}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get last() {\n        return (this.focusables.filter(isFocusable).slice(-1)[0] || null);\n    }\n    /**\n     * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get next() {\n        return this._getFocusableItem(1);\n    }\n    /**\n     * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n     * Returns `null` if there is none.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    get previous() {\n        return this._getFocusableItem(-1);\n    }\n    /**\n     * An index of the view in the {@link #focusables} which is focused according\n     * to {@link #focusTracker}. Returns `null` when there is no such view.\n     */\n    get current() {\n        let index = null;\n        // There's no focused view in the focusables.\n        if (this.focusTracker.focusedElement === null) {\n            return null;\n        }\n        this.focusables.find((view, viewIndex) => {\n            const focused = view.element === this.focusTracker.focusedElement;\n            if (focused) {\n                index = viewIndex;\n            }\n            return focused;\n        });\n        return index;\n    }\n    /**\n     * Focuses the {@link #first} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusFirst() {\n        this._focus(this.first);\n    }\n    /**\n     * Focuses the {@link #last} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusLast() {\n        this._focus(this.last);\n    }\n    /**\n     * Focuses the {@link #next} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusNext() {\n        this._focus(this.next);\n    }\n    /**\n     * Focuses the {@link #previous} item in {@link #focusables}.\n     *\n     * **Note**: Hidden views (e.g. with `display: none`) are ignored.\n     */\n    focusPrevious() {\n        this._focus(this.previous);\n    }\n    /**\n     * Focuses the given view if it exists.\n     */\n    _focus(view) {\n        if (view) {\n            view.focus();\n        }\n    }\n    /**\n     * Returns the next or previous focusable view in {@link #focusables} with respect\n     * to {@link #current}.\n     *\n     * @param step Either `1` for checking forward from {@link #current} or `-1` for checking backwards.\n     */\n    _getFocusableItem(step) {\n        // Cache for speed.\n        const current = this.current;\n        const collectionLength = this.focusables.length;\n        if (!collectionLength) {\n            return null;\n        }\n        // Start from the beginning if no view is focused.\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        if (current === null) {\n            return this[step === 1 ? 'first' : 'last'];\n        }\n        // Cycle in both directions.\n        let index = (current + collectionLength + step) % collectionLength;\n        do {\n            const view = this.focusables.get(index);\n            if (isFocusable(view)) {\n                return view;\n            }\n            // Cycle in both directions.\n            index = (index + collectionLength + step) % collectionLength;\n        } while (index !== current);\n        return null;\n    }\n}\n/**\n * Checks whether a view is focusable.\n *\n * @param view A view to be checked.\n */\nfunction isFocusable(view) {\n    return !!(view.focus && isVisible(view.element));\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\nimport View from '../view';\n/**\n * The toolbar separator view class.\n */\nexport default class ToolbarSeparatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__separator'\n                ]\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarlinebreakview\n */\nimport View from '../view';\n/**\n * The toolbar line break view class.\n */\nexport default class ToolbarLineBreakView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__line-break'\n                ]\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * ```\n * toolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n * ```\n *\n * * or an `Object`:\n *\n * ```\n * toolbar: {\n * \titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n * \tremoveItems: [ 'bold' ],\n * \t...\n * }\n * ```\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param config The value of `config.toolbar`.\n * @returns A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig(config) {\n    if (Array.isArray(config)) {\n        return {\n            items: config,\n            removeItems: []\n        };\n    }\n    if (!config) {\n        return {\n            items: [],\n            removeItems: []\n        };\n    }\n    return Object.assign({\n        items: [],\n        removeItems: []\n    }, config);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/plugin\n */\n/* eslint-disable @typescript-eslint/no-invalid-void-type */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The base class for CKEditor plugin classes.\n */\nexport default class Plugin extends ObservableMixin() {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Holds identifiers for {@link #forceDisabled} mechanism.\n         */\n        this._disableStack = new Set();\n        this.editor = editor;\n        this.set('isEnabled', true);\n    }\n    /**\n     * Disables the plugin.\n     *\n     * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed\n     * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.\n     * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n     *\n     * Disabling and enabling a plugin:\n     *\n     * ```ts\n     * plugin.isEnabled; // -> true\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> false\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * Plugin disabled by multiple features:\n     *\n     * ```ts\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.forceDisabled( 'OtherFeature' );\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> false\n     * plugin.clearForceDisabled( 'OtherFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * Multiple disabling with the same identifier is redundant:\n     *\n     * ```ts\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,\n     * so the plugin might be still disabled after {@link #clearForceDisabled} was used.\n     *\n     * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.\n     */\n    forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, { priority: 'highest' });\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n    clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.isEnabled = true;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isContextPlugin() {\n        return false;\n    }\n}\n/**\n * Helper function that forces plugin to be disabled.\n */\nfunction forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/command\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Base class for the CKEditor commands.\n *\n * Commands are the main way to manipulate the editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of the code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in the {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n */\nexport default class Command extends ObservableMixin() {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this.set('value', undefined);\n        this.set('isEnabled', false);\n        this._affectsData = true;\n        this._isEnabledBasedOnSelection = true;\n        this._disableStack = new Set();\n        this.decorate('execute');\n        // By default, every command is refreshed when changes are applied to the model.\n        this.listenTo(this.editor.model.document, 'change', () => {\n            this.refresh();\n        });\n        this.listenTo(editor, 'change:isReadOnly', () => {\n            this.refresh();\n        });\n        // By default, commands are disabled if the selection is in non-editable place or editor is in read-only mode.\n        this.on('set:isEnabled', evt => {\n            if (!this.affectsData) {\n                return;\n            }\n            // Checking `editor.isReadOnly` is needed for all commands that have `_isEnabledBasedOnSelection == false`.\n            // E.g. undo does not base on selection, but affects data and should be disabled when the editor is in read-only mode.\n            if (editor.isReadOnly || this._isEnabledBasedOnSelection && !editor.model.canEditAt(editor.model.document.selection)) {\n                evt.return = false;\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n        this.on('execute', evt => {\n            if (!this.isEnabled) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * A flag indicating whether a command execution changes the editor data or not.\n     *\n     * Commands with `affectsData` set to `false` will not be automatically disabled in\n     * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n     * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n     *\n     * **Note:** You do not have to set it for your every command. It is `true` by default.\n     *\n     * @default true\n     */\n    get affectsData() {\n        return this._affectsData;\n    }\n    set affectsData(affectsData) {\n        this._affectsData = affectsData;\n    }\n    /**\n     * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n     * in this method.\n     *\n     * This method is automatically called when\n     * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n     */\n    refresh() {\n        this.isEnabled = true;\n    }\n    /**\n     * Disables the command.\n     *\n     * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n     * (e.g. the feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n     * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n     *\n     * Disabling and enabling a command:\n     *\n     * ```ts\n     * command.isEnabled; // -> true\n     * command.forceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Command disabled by multiple features:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'OtherFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'OtherFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Multiple disabling with the same identifier is redundant:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'MyFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n     * so the command might be still disabled after {@link #clearForceDisabled} was used.\n     *\n     * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n     */\n    forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, { priority: 'highest' });\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n    clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.refresh();\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n     * to the command.\n     *\n     * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n     * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n     *\n     * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n     *\n     * This method may return a value, which would be forwarded all the way down to the\n     * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n     *\n     * @fires execute\n     */\n    execute(...args) { return undefined; }\n    /**\n     * Destroys the command.\n     */\n    destroy() {\n        this.stopListening();\n    }\n}\n/**\n * Helper function that forces command to be disabled.\n */\nfunction forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/plugincollection\n */\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */\nexport default class PluginCollection extends EmitterMixin() {\n    /**\n     * Creates an instance of the plugin collection class.\n     * Allows loading and initializing plugins and their dependencies.\n     * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n     *\n     * @param availablePlugins Plugins (constructors) which the collection will be able to use\n     * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).\n     * Usually, the editor will pass its built-in plugins to the collection so they can later be\n     * used in `config.plugins` or `config.removePlugins` by names.\n     * @param contextPlugins A list of already initialized plugins represented by a `[ PluginConstructor, pluginInstance ]` pair.\n     */\n    constructor(context, availablePlugins = [], contextPlugins = []) {\n        super();\n        this._plugins = new Map();\n        this._context = context;\n        this._availablePlugins = new Map();\n        for (const PluginConstructor of availablePlugins) {\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n        this._contextPlugins = new Map();\n        for (const [PluginConstructor, pluginInstance] of contextPlugins) {\n            this._contextPlugins.set(PluginConstructor, pluginInstance);\n            this._contextPlugins.set(pluginInstance, PluginConstructor);\n            // To make it possible to require a plugin by its name.\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n     */\n    *[Symbol.iterator]() {\n        for (const entry of this._plugins) {\n            if (typeof entry[0] == 'function') {\n                yield entry;\n            }\n        }\n    }\n    /**\n     * Gets the plugin instance by its constructor or name.\n     *\n     * ```ts\n     * // Check if 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Get clipboard plugin instance\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n     * \t\t// Do something on clipboard input.\n     * \t} );\n     * }\n     * ```\n     *\n     * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n     * to check if a plugin is available.\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    get(key) {\n        const plugin = this._plugins.get(key);\n        if (!plugin) {\n            let pluginName = key;\n            if (typeof key == 'function') {\n                pluginName = key.pluginName || key.name;\n            }\n            /**\n             * The plugin is not loaded and could not be obtained.\n             *\n             * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n             * the plugin collection.\n             * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n             * property.\n             *\n             * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n             * to check if a plugin was loaded.\n             *\n             * @error plugincollection-plugin-not-loaded\n             * @param plugin The name of the plugin which is not loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-loaded', this._context, { plugin: pluginName });\n        }\n        return plugin;\n    }\n    /**\n     * Checks if a plugin is loaded.\n     *\n     * ```ts\n     * // Check if the 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Now use the clipboard plugin instance:\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    has(key) {\n        return this._plugins.has(key);\n    }\n    /**\n     * Initializes a set of plugins and adds them to the collection.\n     *\n     * @param plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * or {@link module:core/plugin~PluginStaticMembers#pluginName plugin names}.\n     * @param pluginsToRemove Names of the plugins or plugin constructors\n     * that should not be loaded (despite being specified in the `plugins` array).\n     * @param pluginsSubstitutions An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.\n     * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced\n     * must follow these rules:\n     *   * The new plugin must be a class.\n     *   * The new plugin must be named.\n     *   * Both plugins must not depend on other plugins.\n     * @returns A promise which gets resolved once all plugins are loaded and available in the collection.\n     */\n    init(plugins, pluginsToRemove = [], pluginsSubstitutions = []) {\n        // Plugin initialization procedure consists of 2 main steps:\n        // 1) collecting all available plugin constructors,\n        // 2) verification whether all required plugins can be instantiated.\n        //\n        // In the first step, all plugin constructors, available in the provided `plugins` array and inside\n        // plugin's dependencies (from the `Plugin.requires` array), are recursively collected and added to the existing\n        // `this._availablePlugins` map, but without any verification at the given moment. Performing the verification\n        // at this point (during the plugin constructor searching) would cause false errors to occur, that some plugin\n        // is missing but in fact it may be defined further in the array as the dependency of other plugin. After\n        // traversing the entire dependency tree, it will be checked if all required \"top level\" plugins are available.\n        //\n        // In the second step, the list of plugins that have not been explicitly removed is traversed to get all the\n        // plugin constructors to be instantiated in the correct order and to validate against some rules. Finally, if\n        // no plugin is missing and no other error has been found, they all will be instantiated.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const context = this._context;\n        findAvailablePluginConstructors(plugins);\n        validatePlugins(plugins);\n        const pluginsToLoad = plugins.filter(plugin => !isPluginRemoved(plugin, pluginsToRemove));\n        const pluginConstructors = [...getPluginConstructors(pluginsToLoad)];\n        substitutePlugins(pluginConstructors, pluginsSubstitutions);\n        const pluginInstances = loadPlugins(pluginConstructors);\n        return initPlugins(pluginInstances, 'init')\n            .then(() => initPlugins(pluginInstances, 'afterInit'))\n            .then(() => pluginInstances);\n        function isPluginConstructor(plugin) {\n            return typeof plugin === 'function';\n        }\n        function isContextPlugin(plugin) {\n            return isPluginConstructor(plugin) && !!plugin.isContextPlugin;\n        }\n        function isPluginRemoved(plugin, pluginsToRemove) {\n            return pluginsToRemove.some(removedPlugin => {\n                if (removedPlugin === plugin) {\n                    return true;\n                }\n                if (getPluginName(plugin) === removedPlugin) {\n                    return true;\n                }\n                if (getPluginName(removedPlugin) === plugin) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        function getPluginName(plugin) {\n            return isPluginConstructor(plugin) ?\n                plugin.pluginName || plugin.name :\n                plugin;\n        }\n        function findAvailablePluginConstructors(plugins, processed = new Set()) {\n            plugins.forEach(plugin => {\n                if (!isPluginConstructor(plugin)) {\n                    return;\n                }\n                if (processed.has(plugin)) {\n                    return;\n                }\n                processed.add(plugin);\n                if (plugin.pluginName && !that._availablePlugins.has(plugin.pluginName)) {\n                    that._availablePlugins.set(plugin.pluginName, plugin);\n                }\n                if (plugin.requires) {\n                    findAvailablePluginConstructors(plugin.requires, processed);\n                }\n            });\n        }\n        function getPluginConstructors(plugins, processed = new Set()) {\n            return plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin);\n            })\n                .reduce((result, plugin) => {\n                if (processed.has(plugin)) {\n                    return result;\n                }\n                processed.add(plugin);\n                if (plugin.requires) {\n                    validatePlugins(plugin.requires, plugin);\n                    getPluginConstructors(plugin.requires, processed).forEach(plugin => result.add(plugin));\n                }\n                return result.add(plugin);\n            }, new Set());\n        }\n        function validatePlugins(plugins, parentPluginConstructor = null) {\n            plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin) || plugin;\n            })\n                .forEach(plugin => {\n                checkMissingPlugin(plugin, parentPluginConstructor);\n                checkContextPlugin(plugin, parentPluginConstructor);\n                checkRemovedPlugin(plugin, parentPluginConstructor);\n            });\n        }\n        function checkMissingPlugin(plugin, parentPluginConstructor) {\n            if (isPluginConstructor(plugin)) {\n                return;\n            }\n            if (parentPluginConstructor) {\n                /**\n                 * A required \"soft\" dependency was not found on the plugin list.\n                 *\n                 * When configuring the editor, either prior to building (via\n                 * {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}) or when\n                 * creating a new instance of the editor (e.g. via\n                 * {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`}), you need to provide\n                 * some of the dependencies for other plugins that you used.\n                 *\n                 * This error is thrown when one of these dependencies was not provided. The name of the missing plugin\n                 * can be found in `missingPlugin` and the plugin that required it in `requiredBy`.\n                 *\n                 * In order to resolve it, you need to import the missing plugin and add it to the\n                 * current list of plugins (`Editor.builtinPlugins` or `config.plugins`/`config.extraPlugins`).\n                 *\n                 * Soft requirements were introduced in version 26.0.0. If you happen to stumble upon this error\n                 * when upgrading to version 26.0.0, read also the\n                 * {@glink updating/guides/update-to-26 Migration to 26.0.0} guide.\n                 *\n                 * @error plugincollection-soft-required\n                 * @param missingPlugin The name of the required plugin.\n                 * @param requiredBy The name of the plugin that requires the other plugin.\n                 */\n                throw new CKEditorError('plugincollection-soft-required', context, { missingPlugin: plugin, requiredBy: getPluginName(parentPluginConstructor) });\n            }\n            /**\n             * A plugin is not available and could not be loaded.\n             *\n             * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n             * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n             * property.\n             *\n             * **If you see this warning when using one of the {@glink installation/getting-started/predefined-builds\n             * CKEditor 5 Builds}**,\n             * it means that you try to enable a plugin which was not included in that build. This may be due to a typo\n             * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n             * read more about {@glink installation/getting-started/quick-start custom builds}.\n             *\n             * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n             * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n             * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n             * provide each plugin through a reference (as a constructor function). Check out the examples in\n             * {@glink installation/advanced/alternative-setups/integrating-from-source-webpack \"Building from source\"}.\n             *\n             * @error plugincollection-plugin-not-found\n             * @param plugin The name of the plugin which could not be loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-found', context, { plugin });\n        }\n        function checkContextPlugin(plugin, parentPluginConstructor) {\n            if (!isContextPlugin(parentPluginConstructor)) {\n                return;\n            }\n            if (isContextPlugin(plugin)) {\n                return;\n            }\n            /**\n             * If a plugin is a context plugin, all plugins it requires should also be context plugins\n             * instead of plugins. In other words, if one plugin can be used in the context,\n             * all its requirements should also be ready to be used in the context. Note that the context\n             * provides only a part of the API provided by the editor. If one plugin needs a full\n             * editor API, all plugins which require it are considered as plugins that need a full\n             * editor API.\n             *\n             * @error plugincollection-context-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-context-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function checkRemovedPlugin(plugin, parentPluginConstructor) {\n            if (!parentPluginConstructor) {\n                return;\n            }\n            if (!isPluginRemoved(plugin, pluginsToRemove)) {\n                return;\n            }\n            /**\n             * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n             *\n             * @error plugincollection-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function loadPlugins(pluginConstructors) {\n            return pluginConstructors.map(PluginConstructor => {\n                let pluginInstance = that._contextPlugins.get(PluginConstructor);\n                pluginInstance = pluginInstance || new PluginConstructor(context);\n                that._add(PluginConstructor, pluginInstance);\n                return pluginInstance;\n            });\n        }\n        function initPlugins(pluginInstances, method) {\n            return pluginInstances.reduce((promise, plugin) => {\n                if (!plugin[method]) {\n                    return promise;\n                }\n                if (that._contextPlugins.has(plugin)) {\n                    return promise;\n                }\n                return promise.then(plugin[method].bind(plugin));\n            }, Promise.resolve());\n        }\n        /**\n         * Replaces plugin constructors with the specified set of plugins.\n         */\n        function substitutePlugins(pluginConstructors, pluginsSubstitutions) {\n            for (const pluginItem of pluginsSubstitutions) {\n                if (typeof pluginItem != 'function') {\n                    /**\n                     * The plugin replacing an existing plugin must be a function.\n                     *\n                     * @error plugincollection-replace-plugin-invalid-type\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-invalid-type', null, { pluginItem });\n                }\n                const pluginName = pluginItem.pluginName;\n                if (!pluginName) {\n                    /**\n                     * The plugin replacing an existing plugin must have a name.\n                     *\n                     * @error plugincollection-replace-plugin-missing-name\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-missing-name', null, { pluginItem });\n                }\n                if (pluginItem.requires && pluginItem.requires.length) {\n                    /**\n                     * The plugin replacing an existing plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-plugin-for-replacing-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-cannot-have-dependencies', null, { pluginName });\n                }\n                const pluginToReplace = that._availablePlugins.get(pluginName);\n                if (!pluginToReplace) {\n                    /**\n                     * The replaced plugin does not exist in the\n                     * {@link module:core/plugincollection~PluginCollection available plugins} collection.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-exist\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-exist', null, { pluginName });\n                }\n                const indexInPluginConstructors = pluginConstructors.indexOf(pluginToReplace);\n                if (indexInPluginConstructors === -1) {\n                    // The Context feature can substitute plugins as well.\n                    // It may happen that the editor will be created with the given context, where the plugin for substitute\n                    // was already replaced. In such a case, we don't want to do it again.\n                    if (that._contextPlugins.has(pluginToReplace)) {\n                        return;\n                    }\n                    /**\n                     * The replaced plugin will not be loaded so it cannot be replaced.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-loaded\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-loaded', null, { pluginName });\n                }\n                if (pluginToReplace.requires && pluginToReplace.requires.length) {\n                    /**\n                     * The replaced plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-replaced-plugin-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-replaced-plugin-cannot-have-dependencies', null, { pluginName });\n                }\n                pluginConstructors.splice(indexInPluginConstructors, 1, pluginItem);\n                that._availablePlugins.set(pluginName, pluginItem);\n            }\n        }\n    }\n    /**\n     * Destroys all loaded plugins.\n     */\n    destroy() {\n        const promises = [];\n        for (const [, pluginInstance] of this) {\n            if (typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has(pluginInstance)) {\n                promises.push(pluginInstance.destroy());\n            }\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Adds the plugin to the collection. Exposed mainly for testing purposes.\n     *\n     * @param PluginConstructor The plugin constructor.\n     * @param plugin The instance of the plugin.\n     */\n    _add(PluginConstructor, plugin) {\n        this._plugins.set(PluginConstructor, plugin);\n        const pluginName = PluginConstructor.pluginName;\n        if (!pluginName) {\n            return;\n        }\n        if (this._plugins.has(pluginName)) {\n            /**\n             * Two plugins with the same {@link module:core/plugin~PluginStaticMembers#pluginName} were loaded.\n             * This will lead to runtime conflicts between these plugins.\n             *\n             * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n             * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n             * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n             *\n             * Check your import paths and the list of plugins passed to\n             * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n             * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n             *\n             * The second option is that your `node_modules/` directory contains duplicated versions of the same\n             * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n             * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n             * of some packages, their dependencies may need to be installed in more than one version which may lead to this\n             * warning.\n             *\n             * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n             * the dependencies of this plugin are being duplicated.\n             * They are already built into that editor build and now get added for the second time as dependencies\n             * of the plugin you are installing.\n             *\n             * Read more about {@glink installation/plugins/installing-plugins Installing plugins}.\n             *\n             * @error plugincollection-plugin-name-conflict\n             * @param pluginName The duplicated plugin name.\n             * @param plugin1 The first plugin constructor.\n             * @param plugin2 The second plugin constructor.\n             */\n            throw new CKEditorError('plugincollection-plugin-name-conflict', null, { pluginName, plugin1: this._plugins.get(pluginName).constructor, plugin2: PluginConstructor });\n        }\n        this._plugins.set(pluginName, plugin);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/context\n */\nimport { Config, Collection, CKEditorError, Locale } from '@ckeditor/ckeditor5-utils';\nimport PluginCollection from './plugincollection';\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for the editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such a case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link ~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n    /**\n     * Creates a context instance with a given configuration.\n     *\n     * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n     *\n     * @param config The context configuration.\n     */\n    constructor(config) {\n        /**\n         * Reference to the editor which created the context.\n         * Null when the context was created outside of the editor.\n         *\n         * It is used to destroy the context when removing the editor that has created the context.\n         */\n        this._contextOwner = null;\n        this.config = new Config(config, this.constructor.defaultConfig);\n        const availablePlugins = this.constructor.builtinPlugins;\n        this.config.define('plugins', availablePlugins);\n        this.plugins = new PluginCollection(this, availablePlugins);\n        const languageConfig = this.config.get('language') || {};\n        this.locale = new Locale({\n            uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n            contentLanguage: this.config.get('language.content')\n        });\n        this.t = this.locale.t;\n        this.editors = new Collection();\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const plugins = this.config.get('plugins') || [];\n        const substitutePlugins = this.config.get('substitutePlugins') || [];\n        // Plugins for substitution should be checked as well.\n        for (const Plugin of plugins.concat(substitutePlugins)) {\n            if (typeof Plugin != 'function') {\n                /**\n                 * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n                 *\n                 * @error context-initplugins-constructor-only\n                 */\n                throw new CKEditorError('context-initplugins-constructor-only', null, { Plugin });\n            }\n            if (Plugin.isContextPlugin !== true) {\n                /**\n                 * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n                 * is allowed to be used with a context.\n                 *\n                 * @error context-initplugins-invalid-plugin\n                 */\n                throw new CKEditorError('context-initplugins-invalid-plugin', null, { Plugin });\n            }\n        }\n        return this.plugins.init(plugins, [], substitutePlugins);\n    }\n    /**\n     * Destroys the context instance and all editors used with the context,\n     * releasing all resources used by the context.\n     *\n     * @returns A promise that resolves once the context instance is fully destroyed.\n     */\n    destroy() {\n        return Promise.all(Array.from(this.editors, editor => editor.destroy()))\n            .then(() => this.plugins.destroy());\n    }\n    /**\n     * Adds a reference to the editor which is used with this context.\n     *\n     * When the given editor has created the context, the reference to this editor will be stored\n     * as a {@link ~Context#_contextOwner}.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @param isContextOwner Stores the given editor as a context owner.\n     */\n    _addEditor(editor, isContextOwner) {\n        if (this._contextOwner) {\n            /**\n             * Cannot add multiple editors to the context which is created by the editor.\n             *\n             * @error context-addeditor-private-context\n             */\n            throw new CKEditorError('context-addeditor-private-context');\n        }\n        this.editors.add(editor);\n        if (isContextOwner) {\n            this._contextOwner = editor;\n        }\n    }\n    /**\n     * Removes a reference to the editor which was used with this context.\n     * When the context was created by the given editor, the context will be destroyed.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @return A promise that resolves once the editor is removed from the context or when the context was destroyed.\n     */\n    _removeEditor(editor) {\n        if (this.editors.has(editor)) {\n            this.editors.remove(editor);\n        }\n        if (this._contextOwner === editor) {\n            return this.destroy();\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Returns the context configuration which will be copied to the editors created using this context.\n     *\n     * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n     * through another mechanism.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @returns Configuration as a plain object.\n     */\n    _getEditorConfig() {\n        const result = {};\n        for (const name of this.config.names()) {\n            if (!['plugins', 'removePlugins', 'extraPlugins'].includes(name)) {\n                result[name] = this.config.get(name);\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates and initializes a new context instance.\n     *\n     * ```ts\n     * const commonConfig = { ... }; // Configuration for all the plugins and editors.\n     * const editorPlugins = [ ... ]; // Regular plugins here.\n     *\n     * Context\n     * \t.create( {\n     * \t\t// Only context plugins here.\n     * \t\tplugins: [ ... ],\n     *\n     * \t\t// Configure the language for all the editors (it cannot be overwritten).\n     * \t\tlanguage: { ... },\n     *\n     * \t\t// Configuration for context plugins.\n     * \t\tcomments: { ... },\n     * \t\t...\n     *\n     * \t\t// Default configuration for editor plugins.\n     * \t\ttoolbar: { ... },\n     * \t\timage: { ... },\n     * \t\t...\n     * \t} )\n     * \t.then( context => {\n     * \t\tconst promises = [];\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor1' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor2' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext,\n     * \t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\treturn Promise.all( promises );\n     * \t} );\n     * ```\n     *\n     * @param config The context configuration.\n     * @returns A promise resolved once the context is ready. The promise resolves with the created context instance.\n     */\n    static create(config) {\n        return new Promise(resolve => {\n            const context = new this(config);\n            resolve(context.initPlugins().then(() => context));\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/contextplugin\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The base class for {@link module:core/context~Context} plugin classes.\n *\n * A context plugin can either be initialized for an {@link module:core/editor/editor~Editor editor} or for\n * a {@link module:core/context~Context context}. In other words, it can either\n * work within one editor instance or with one or more editor instances that use a single context.\n * It is the context plugin's role to implement handling for both modes.\n *\n * There are a few rules for interaction between the editor plugins and context plugins:\n *\n * * A context plugin can require another context plugin.\n * * An {@link module:core/plugin~Plugin editor plugin} can require a context plugin.\n * * A context plugin MUST NOT require an {@link module:core/plugin~Plugin editor plugin}.\n */\nexport default class ContextPlugin extends ObservableMixin() {\n    /**\n     * Creates a new plugin instance.\n     */\n    constructor(context) {\n        super();\n        this.context = context;\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isContextPlugin() {\n        return true;\n    }\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./placeholder.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css';\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param options Configuration options of the placeholder.\n * @param options.view Editing view instance.\n * @param options.element Element that will gain a placeholder. See `options.isDirectHost` to learn more.\n * @param options.text Placeholder text.\n * @param options.isDirectHost If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param options.keepOnFocus If set `true`, the placeholder stay visible when the host element is focused.\n */\nexport function enablePlaceholder({ view, element, text, isDirectHost = true, keepOnFocus = false }) {\n    const doc = view.document;\n    // Use a single a single post fixer per—document to update all placeholders.\n    if (!documentPlaceholders.has(doc)) {\n        documentPlaceholders.set(doc, new Map());\n        // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n        // can re–evaluate the document again.\n        doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n        // Update placeholders on isComposing state change since rendering is disabled while in composition mode.\n        doc.on('change:isComposing', () => {\n            view.change(writer => updateDocumentPlaceholders(doc, writer));\n        }, { priority: 'high' });\n    }\n    // Store information about the element placeholder under its document.\n    documentPlaceholders.get(doc).set(element, {\n        text,\n        isDirectHost,\n        keepOnFocus,\n        hostElement: isDirectHost ? element : null\n    });\n    // Update the placeholders right away.\n    view.change(writer => updateDocumentPlaceholders(doc, writer));\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n */\nexport function disablePlaceholder(view, element) {\n    const doc = element.document;\n    if (!documentPlaceholders.has(doc)) {\n        return;\n    }\n    view.change(writer => {\n        const placeholders = documentPlaceholders.get(doc);\n        const config = placeholders.get(element);\n        writer.removeAttribute('data-placeholder', config.hostElement);\n        hidePlaceholder(writer, config.hostElement);\n        placeholders.delete(element);\n    });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @returns `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder(writer, element) {\n    if (!element.hasClass('ck-placeholder')) {\n        writer.addClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @returns `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder(writer, element) {\n    if (element.hasClass('ck-placeholder')) {\n        writer.removeClass('ck-placeholder', element);\n        return true;\n    }\n    return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param element Element that holds the placeholder.\n * @param keepOnFocus Focusing the element will keep the placeholder visible.\n */\nexport function needsPlaceholder(element, keepOnFocus) {\n    if (!element.isAttached()) {\n        return false;\n    }\n    // Anything but uiElement(s) counts as content.\n    const hasContent = Array.from(element.getChildren())\n        .some(element => !element.is('uiElement'));\n    if (hasContent) {\n        return false;\n    }\n    const doc = element.document;\n    const viewSelection = doc.selection;\n    const selectionAnchor = viewSelection.anchor;\n    if (doc.isComposing && selectionAnchor && selectionAnchor.parent === element) {\n        return false;\n    }\n    // Skip the focus check and make the placeholder visible already regardless of document focus state.\n    if (keepOnFocus) {\n        return true;\n    }\n    // If the document is blurred.\n    if (!doc.isFocused) {\n        return true;\n    }\n    // If document is focused and the element is empty but the selection is not anchored inside it.\n    return !!selectionAnchor && selectionAnchor.parent !== element;\n}\n/**\n * Updates all placeholders associated with a document in a post–fixer callback.\n *\n * @returns True if any changes were made to the view document.\n */\nfunction updateDocumentPlaceholders(doc, writer) {\n    const placeholders = documentPlaceholders.get(doc);\n    const directHostElements = [];\n    let wasViewModified = false;\n    // First set placeholders on the direct hosts.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            directHostElements.push(element);\n            if (updatePlaceholder(writer, element, config)) {\n                wasViewModified = true;\n            }\n        }\n    }\n    // Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n    for (const [element, config] of placeholders) {\n        if (config.isDirectHost) {\n            continue;\n        }\n        const hostElement = getChildPlaceholderHostSubstitute(element);\n        // When not a direct host, it could happen that there is no child element\n        // capable of displaying a placeholder.\n        if (!hostElement) {\n            continue;\n        }\n        // Don't override placeholder if the host element already has some direct placeholder.\n        if (directHostElements.includes(hostElement)) {\n            continue;\n        }\n        // Update the host element (used for setting and removing the placeholder).\n        config.hostElement = hostElement;\n        if (updatePlaceholder(writer, element, config)) {\n            wasViewModified = true;\n        }\n    }\n    return wasViewModified;\n}\n/**\n * Updates a single placeholder in a post–fixer callback.\n *\n * @returns True if any changes were made to the view document.\n */\nfunction updatePlaceholder(writer, element, config) {\n    const { text, isDirectHost, hostElement } = config;\n    let wasViewModified = false;\n    // This may be necessary when updating the placeholder text to something else.\n    if (hostElement.getAttribute('data-placeholder') !== text) {\n        writer.setAttribute('data-placeholder', text, hostElement);\n        wasViewModified = true;\n    }\n    // If the host element is not a direct host then placeholder is needed only when there is only one element.\n    const isOnlyChild = isDirectHost || element.childCount == 1;\n    if (isOnlyChild && needsPlaceholder(hostElement, config.keepOnFocus)) {\n        if (showPlaceholder(writer, hostElement)) {\n            wasViewModified = true;\n        }\n    }\n    else if (hidePlaceholder(writer, hostElement)) {\n        wasViewModified = true;\n    }\n    return wasViewModified;\n}\n/**\n * Gets a child element capable of displaying a placeholder if a parent element can host more\n * than just text (for instance, when it is a root editable element). The child element\n * can then be used in other placeholder helpers as a substitute of its parent.\n */\nfunction getChildPlaceholderHostSubstitute(parent) {\n    if (parent.childCount) {\n        const firstChild = parent.getChild(0);\n        if (firstChild.is('element') && !firstChild.is('uiElement') && !firstChild.is('attributeElement')) {\n            return firstChild;\n        }\n    }\n    return null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/typecheckable\n */\nexport default class TypeCheckable {\n    /* istanbul ignore next -- @preserve */\n    is() {\n        // There are a lot of overloads above.\n        // Overriding method in derived classes remove them and only `is( type: string ): boolean` is visible which we don't want.\n        // One option would be to copy them all to all classes, but that's ugly.\n        // It's best when TypeScript compiler doesn't see those overloads, except the one in the top base class.\n        // To overload a method, but not let the compiler see it, do after class definition:\n        // `MyClass.prototype.is = function( type: string ) {...}`\n        throw new Error('is() method is abstract');\n    }\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/node\n */\nimport TypeCheckable from './typecheckable';\nimport { CKEditorError, EmitterMixin, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport { clone } from 'lodash-es';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Abstract view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/downcastwriter~DowncastWriter} or {@link module:engine/view/upcastwriter~UpcastWriter}\n * to create new instances of view nodes.\n */\nexport default class Node extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a tree view node.\n     *\n     * @param document The document instance to which this node belongs.\n     */\n    constructor(document) {\n        super();\n        this.document = document;\n        this.parent = null;\n    }\n    /**\n     * Index of the node in the parent element or null if the node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that view tree got broken.\n     */\n    get index() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        // No parent or child doesn't exist in parent's children.\n        if ((pos = this.parent.getChildIndex(this)) == -1) {\n            /**\n             * The node's parent does not contain this node. It means that the document tree is corrupted.\n             *\n             * @error view-node-not-found-in-parent\n             */\n            throw new CKEditorError('view-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Node's next sibling, or `null` if it is the last child.\n     */\n    get nextSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index + 1)) || null;\n    }\n    /**\n     * Node's previous sibling, or `null` if it is the first child.\n     */\n    get previousSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index - 1)) || null;\n    }\n    /**\n     * Top-most ancestor of the node. If the node has no parent it is the root itself.\n     */\n    get root() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let root = this;\n        while (root.parent) {\n            root = root.parent;\n        }\n        return root;\n    }\n    /**\n     * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n     */\n    isAttached() {\n        return this.root.is('rootElement');\n    }\n    /**\n     * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n     * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n     *\n     * ```ts\n     * const abc = downcastWriter.createText( 'abc' );\n     * const foo = downcastWriter.createText( 'foo' );\n     * const h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n     * const p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n     * const div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n     * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n     * h1.getPath(); // Returns [ 0 ].\n     * div.getPath(); // Returns [].\n     * ```\n     *\n     * @returns The path.\n     */\n    getPath() {\n        const path = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        while (node.parent) {\n            path.unshift(node.index);\n            node = node.parent;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this node.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of both nodes.\n     *\n     * @param node The second node.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` both nodes will be considered \"ancestors\" too.\n     * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n     */\n    getCommonAncestor(node, options = {}) {\n        const ancestorsA = this.getAncestors(options);\n        const ancestorsB = node.getAncestors(options);\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isBefore(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        const thisPath = this.getPath();\n        const nodePath = node.getPath();\n        const result = compareArrays(thisPath, nodePath);\n        switch (result) {\n            case 'prefix':\n                return true;\n            case 'extension':\n                return false;\n            default:\n                return thisPath[result] < nodePath[result];\n        }\n    }\n    /**\n     * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isAfter(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        // In other cases, just check if the `node` is before, and return the opposite.\n        return !this.isBefore(node);\n    }\n    /**\n     * Removes node from parent.\n     *\n     * @internal\n     */\n    _remove() {\n        this.parent._removeChildren(this.index);\n    }\n    /**\n     * @internal\n     * @param type Type of the change.\n     * @param node Changed node.\n     * @fires change\n     */\n    _fireChange(type, node) {\n        this.fire(`change:${type}`, node);\n        if (this.parent) {\n            this.parent._fireChange(type, node);\n        }\n    }\n    /**\n     * Custom toJSON method to solve child-parent circular dependencies.\n     *\n     * @returns Clone of this object with the parent property removed.\n     */\n    toJSON() {\n        const json = clone(this);\n        // Due to circular references we need to remove parent reference.\n        delete json.parent;\n        return json;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nNode.prototype.is = function (type) {\n    return type === 'node' || type === 'view:node';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n */\nexport default class Text extends Node {\n    /**\n     * Creates a tree view text node.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createText\n     * @internal\n     * @param document The document instance to which this text node belongs.\n     * @param data The text's data.\n     */\n    constructor(document, data) {\n        super(document);\n        this._textData = data;\n    }\n    /**\n     * The text content.\n     */\n    get data() {\n        return this._textData;\n    }\n    /**\n     * The `_data` property is controlled by a getter and a setter.\n     *\n     * The getter is required when using the addition assignment operator on protected property:\n     *\n     * ```ts\n     * const foo = downcastWriter.createText( 'foo' );\n     * const bar = downcastWriter.createText( 'bar' );\n     *\n     * foo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n     * console.log( foo.data ); // prints: 'foobar'\n     * ```\n     *\n     * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n     *\n     * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @internal\n     */\n    get _data() {\n        return this.data;\n    }\n    set _data(data) {\n        this._fireChange('text', this);\n        this._textData = data;\n    }\n    /**\n     * Checks if this text node is similar to other text node.\n     * Both nodes should have the same data to be considered as similar.\n     *\n     * @param otherNode Node to check if it is same as this node.\n     */\n    isSimilar(otherNode) {\n        if (!(otherNode instanceof Text)) {\n            return false;\n        }\n        return this === otherNode || this.data === otherNode.data;\n    }\n    /**\n     * Clones this node.\n     *\n     * @internal\n     * @returns Text node that is a clone of this node.\n     */\n    _clone() {\n        return new Text(this.document, this.data);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'view:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'view:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'view:node';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/textproxy\n */\nimport TypeCheckable from './typecheckable';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy extends TypeCheckable {\n    /**\n     * Creates a text proxy.\n     *\n     * @internal\n     * @param textNode Text node which part is represented by this text proxy.\n     * @param offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n     * from which the text proxy starts.\n     * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n     * @constructor\n     */\n    constructor(textNode, offsetInText, length) {\n        super();\n        this.textNode = textNode;\n        if (offsetInText < 0 || offsetInText > textNode.data.length) {\n            /**\n             * Given offsetInText value is incorrect.\n             *\n             * @error view-textproxy-wrong-offsetintext\n             */\n            throw new CKEditorError('view-textproxy-wrong-offsetintext', this);\n        }\n        if (length < 0 || offsetInText + length > textNode.data.length) {\n            /**\n             * Given length value is incorrect.\n             *\n             * @error view-textproxy-wrong-length\n             */\n            throw new CKEditorError('view-textproxy-wrong-length', this);\n        }\n        this.data = textNode.data.substring(offsetInText, offsetInText + length);\n        this.offsetInText = offsetInText;\n    }\n    /**\n     * Offset size of this node.\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n     * (`true`) or the whole text node (`false`).\n     *\n     * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n     * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n     * text node size.\n     */\n    get isPartial() {\n        return this.data.length !== this.textNode.data.length;\n    }\n    /**\n     * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n     */\n    get parent() {\n        return this.textNode.parent;\n    }\n    /**\n     * Root of this text proxy, which is same as root of text node represented by this text proxy.\n     */\n    get root() {\n        return this.textNode.root;\n    }\n    /**\n     * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     */\n    get document() {\n        return this.textNode.document;\n    }\n    /**\n     * Returns ancestors array of this text proxy.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true`, textNode will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to\n     * root element, otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this.textNode : this.parent;\n        while (parent !== null) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nTextProxy.prototype.is = function (type) {\n    return type === '$textProxy' || type === 'view:$textProxy' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'textProxy' || type === 'view:textProxy';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isPlainObject } from 'lodash-es';\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n    /**\n     * Creates new instance of Matcher.\n     *\n     * @param pattern Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for more information.\n     */\n    constructor(...pattern) {\n        this._patterns = [];\n        this.add(...pattern);\n    }\n    /**\n     * Adds pattern or patterns to matcher instance.\n     *\n     * ```ts\n     * // String.\n     * matcher.add( 'div' );\n     *\n     * // Regular expression.\n     * matcher.add( /^\\w/ );\n     *\n     * // Single class.\n     * matcher.add( {\n     * \tclasses: 'foobar'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n     *\n     * Multiple patterns can be added in one call:\n     *\n     * ```ts\n     * matcher.add( 'div', { classes: 'foobar' } );\n     * ```\n     *\n     * @param pattern Object describing pattern details. If string or regular expression\n     * is provided it will be used to match element's name. Pattern can be also provided in a form\n     * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n     * Function's return value will be stored under `match` key of the object returned from\n     * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n     */\n    add(...pattern) {\n        for (let item of pattern) {\n            // String or RegExp pattern is used as element's name.\n            if (typeof item == 'string' || item instanceof RegExp) {\n                item = { name: item };\n            }\n            this._patterns.push(item);\n        }\n    }\n    /**\n     * Matches elements for currently stored patterns. Returns match information about first found\n     * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n     *\n     * Example of returned object:\n     *\n     * ```ts\n     * {\n     * \telement: <instance of found element>,\n     * \tpattern: <pattern used to match found element>,\n     * \tmatch: {\n     * \t\tname: true,\n     * \t\tattributes: [ 'title', 'href' ],\n     * \t\tclasses: [ 'foo' ],\n     * \t\tstyles: [ 'color', 'position' ]\n     * \t}\n     * }\n     * ```\n     *\n     * @see module:engine/view/matcher~Matcher#add\n     * @see module:engine/view/matcher~Matcher#matchAll\n     * @param element View element to match against stored patterns.\n     */\n    match(...element) {\n        for (const singleElement of element) {\n            for (const pattern of this._patterns) {\n                const match = isElementMatching(singleElement, pattern);\n                if (match) {\n                    return {\n                        element: singleElement,\n                        pattern,\n                        match\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Matches elements for currently stored patterns. Returns array of match information with all found\n     * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n     *\n     * @see module:engine/view/matcher~Matcher#add\n     * @see module:engine/view/matcher~Matcher#match\n     * @param element View element to match against stored patterns.\n     * @returns Array with match information about found elements or `null`. For more information\n     * see {@link module:engine/view/matcher~Matcher#match match method} description.\n     */\n    matchAll(...element) {\n        const results = [];\n        for (const singleElement of element) {\n            for (const pattern of this._patterns) {\n                const match = isElementMatching(singleElement, pattern);\n                if (match) {\n                    results.push({\n                        element: singleElement,\n                        pattern,\n                        match\n                    });\n                }\n            }\n        }\n        return results.length > 0 ? results : null;\n    }\n    /**\n     * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n     * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n     *\n     * @returns Element name trying to match.\n     */\n    getElementName() {\n        if (this._patterns.length !== 1) {\n            return null;\n        }\n        const pattern = this._patterns[0];\n        const name = pattern.name;\n        return (typeof pattern != 'function' && name && !(name instanceof RegExp)) ? name : null;\n    }\n}\n/**\n * Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n * If element cannot be matched to provided pattern - returns `null`.\n *\n * @returns Returns object with match information or null if element is not matching.\n */\nfunction isElementMatching(element, pattern) {\n    // If pattern is provided as function - return result of that function;\n    if (typeof pattern == 'function') {\n        return pattern(element);\n    }\n    const match = {};\n    // Check element's name.\n    if (pattern.name) {\n        match.name = matchName(pattern.name, element.name);\n        if (!match.name) {\n            return null;\n        }\n    }\n    // Check element's attributes.\n    if (pattern.attributes) {\n        match.attributes = matchAttributes(pattern.attributes, element);\n        if (!match.attributes) {\n            return null;\n        }\n    }\n    // Check element's classes.\n    if (pattern.classes) {\n        match.classes = matchClasses(pattern.classes, element);\n        if (!match.classes) {\n            return null;\n        }\n    }\n    // Check element's styles.\n    if (pattern.styles) {\n        match.styles = matchStyles(pattern.styles, element);\n        if (!match.styles) {\n            return null;\n        }\n    }\n    return match;\n}\n/**\n * Checks if name can be matched by provided pattern.\n *\n * @returns Returns `true` if name can be matched, `false` otherwise.\n */\nfunction matchName(pattern, name) {\n    // If pattern is provided as RegExp - test against this regexp.\n    if (pattern instanceof RegExp) {\n        return !!name.match(pattern);\n    }\n    return pattern === name;\n}\n/**\n * Checks if an array of key/value pairs can be matched against provided patterns.\n *\n * Patterns can be provided in a following ways:\n * - a boolean value matches any attribute with any value (or no value):\n *\n * ```ts\n * pattern: true\n * ```\n *\n * - a RegExp expression or object matches any attribute name:\n *\n * ```ts\n * pattern: /h[1-6]/\n * ```\n *\n * - an object matches any attribute that has the same name as the object item's key, where object item's value is:\n * \t- equal to `true`, which matches any attribute value:\n *\n * ```ts\n * pattern: {\n * \trequired: true\n * }\n * ```\n *\n * \t- a string that is equal to attribute value:\n *\n * ```ts\n * pattern: {\n * \trel: 'nofollow'\n * }\n * ```\n *\n * \t- a regular expression that matches attribute value,\n *\n * ```ts\n * pattern: {\n * \tsrc: /^https/\n * }\n * ```\n *\n * - an array with items, where the item is:\n * \t- a string that is equal to attribute value:\n *\n * ```ts\n * pattern: [ 'data-property-1', 'data-property-2' ],\n * ```\n *\n * \t- an object with `key` and `value` property, where `key` is a regular expression matching attribute name and\n * \t\t`value` is either regular expression matching attribute value or a string equal to attribute value:\n *\n * ```ts\n * pattern: [\n * \t{ key: /^data-property-/, value: true },\n * \t// or:\n * \t{ key: /^data-property-/, value: 'foobar' },\n * \t// or:\n * \t{ key: /^data-property-/, value: /^foo/ }\n * ]\n * ```\n *\n * @param patterns Object with information about attributes to match.\n * @param keys Attribute, style or class keys.\n * @param valueGetter A function providing value for a given item key.\n * @returns Returns array with matched attribute names or `null` if no attributes were matched.\n */\nfunction matchPatterns(patterns, keys, valueGetter) {\n    const normalizedPatterns = normalizePatterns(patterns);\n    const normalizedItems = Array.from(keys);\n    const match = [];\n    normalizedPatterns.forEach(([patternKey, patternValue]) => {\n        normalizedItems.forEach(itemKey => {\n            if (isKeyMatched(patternKey, itemKey) &&\n                isValueMatched(patternValue, itemKey, valueGetter)) {\n                match.push(itemKey);\n            }\n        });\n    });\n    // Return matches only if there are at least as many of them as there are patterns.\n    // The RegExp pattern can match more than one item.\n    if (!normalizedPatterns.length || match.length < normalizedPatterns.length) {\n        return undefined;\n    }\n    return match;\n}\n/**\n * Bring all the possible pattern forms to an array of arrays where first item is a key and second is a value.\n *\n * Examples:\n *\n * Boolean pattern value:\n *\n * ```ts\n * true\n * ```\n *\n * to\n *\n * ```ts\n * [ [ true, true ] ]\n * ```\n *\n * Textual pattern value:\n *\n * ```ts\n * 'attribute-name-or-class-or-style'\n * ```\n *\n * to\n *\n * ```ts\n * [ [ 'attribute-name-or-class-or-style', true ] ]\n * ```\n *\n * Regular expression:\n *\n * ```ts\n * /^data-.*$/\n * ```\n *\n * to\n *\n * ```ts\n * [ [ /^data-.*$/, true ] ]\n * ```\n *\n * Objects (plain or with `key` and `value` specified explicitly):\n *\n * ```ts\n * {\n * \tsrc: /^https:.*$/\n * }\n * ```\n *\n * or\n *\n * ```ts\n * [ {\n * \tkey: 'src',\n * \tvalue: /^https:.*$/\n * } ]\n * ```\n *\n * to:\n *\n * ```ts\n * [ [ 'src', /^https:.*$/ ] ]\n * ```\n *\n * @returns Returns an array of objects or null if provided patterns were not in an expected form.\n */\nfunction normalizePatterns(patterns) {\n    if (Array.isArray(patterns)) {\n        return patterns.map((pattern) => {\n            if (isPlainObject(pattern)) {\n                if (pattern.key === undefined || pattern.value === undefined) {\n                    // Documented at the end of matcher.js.\n                    logWarning('matcher-pattern-missing-key-or-value', pattern);\n                }\n                return [pattern.key, pattern.value];\n            }\n            // Assume the pattern is either String or RegExp.\n            return [pattern, true];\n        });\n    }\n    if (isPlainObject(patterns)) {\n        return Object.entries(patterns);\n    }\n    // Other cases (true, string or regexp).\n    return [[patterns, true]];\n}\n/**\n * @param patternKey A pattern representing a key we want to match.\n * @param itemKey An actual item key (e.g. `'src'`, `'background-color'`, `'ck-widget'`) we're testing against pattern.\n */\nfunction isKeyMatched(patternKey, itemKey) {\n    return patternKey === true ||\n        patternKey === itemKey ||\n        patternKey instanceof RegExp && itemKey.match(patternKey);\n}\n/**\n * @param patternValue A pattern representing a value we want to match.\n * @param itemKey An item key, e.g. `background`, `href`, 'rel', etc.\n * @param valueGetter A function used to provide a value for a given `itemKey`.\n */\nfunction isValueMatched(patternValue, itemKey, valueGetter) {\n    if (patternValue === true) {\n        return true;\n    }\n    const itemValue = valueGetter(itemKey);\n    // For now, the reducers are not returning the full tree of properties.\n    // Casting to string preserves the old behavior until the root cause is fixed.\n    // More can be found in https://github.com/ckeditor/ckeditor5/issues/10399.\n    return patternValue === itemValue ||\n        patternValue instanceof RegExp && !!String(itemValue).match(patternValue);\n}\n/**\n * Checks if attributes of provided element can be matched against provided patterns.\n *\n * @param patterns Object with information about attributes to match. Each key of the object will be\n * used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n * @param  element Element which attributes will be tested.\n * @returns Returns array with matched attribute names or `null` if no attributes were matched.\n */\nfunction matchAttributes(patterns, element) {\n    const attributeKeys = new Set(element.getAttributeKeys());\n    // `style` and `class` attribute keys are deprecated. Only allow them in object pattern\n    // for backward compatibility.\n    if (isPlainObject(patterns)) {\n        if (patterns.style !== undefined) {\n            // Documented at the end of matcher.js.\n            logWarning('matcher-pattern-deprecated-attributes-style-key', patterns);\n        }\n        if (patterns.class !== undefined) {\n            // Documented at the end of matcher.js.\n            logWarning('matcher-pattern-deprecated-attributes-class-key', patterns);\n        }\n    }\n    else {\n        attributeKeys.delete('style');\n        attributeKeys.delete('class');\n    }\n    return matchPatterns(patterns, attributeKeys, key => element.getAttribute(key));\n}\n/**\n * Checks if classes of provided element can be matched against provided patterns.\n *\n * @param patterns Array of strings or regular expressions to match against element's classes.\n * @param element Element which classes will be tested.\n * @returns Returns array with matched class names or `null` if no classes were matched.\n */\nfunction matchClasses(patterns, element) {\n    // We don't need `getter` here because patterns for classes are always normalized to `[ className, true ]`.\n    return matchPatterns(patterns, element.getClassNames(), /* istanbul ignore next -- @preserve */ () => { });\n}\n/**\n * Checks if styles of provided element can be matched against provided patterns.\n *\n * @param patterns Object with information about styles to match. Each key of the object will be\n * used as style name. Value of each key can be a string or regular expression to match against style value.\n * @param element Element which styles will be tested.\n * @returns Returns array with matched style names or `null` if no styles were matched.\n */\nfunction matchStyles(patterns, element) {\n    return matchPatterns(patterns, element.getStyleNames(true), key => element.getStyle(key));\n}\n/**\n * The key-value matcher pattern is missing key or value. Both must be present.\n * Refer the documentation: {@link module:engine/view/matcher~MatcherPattern}.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-missing-key-or-value\n */\n/**\n * The key-value matcher pattern for `attributes` option is using deprecated `style` key.\n *\n * Use `styles` matcher pattern option instead:\n *\n * ```ts\n * // Instead of:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2',\n * \t\tstyle: /^border.*$/\n * \t}\n * }\n *\n * // Use:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2'\n * \t},\n * \tstyles: /^border.*$/\n * }\n * ```\n *\n * Refer to the {@glink updating/guides/update-to-29##update-to-ckeditor-5-v2910 Migration to v29.1.0} guide\n * and {@link module:engine/view/matcher~MatcherPattern} documentation.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-deprecated-attributes-style-key\n */\n/**\n * The key-value matcher pattern for `attributes` option is using deprecated `class` key.\n *\n * Use `classes` matcher pattern option instead:\n *\n * ```ts\n * // Instead of:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2',\n * \t\tclass: 'foobar'\n * \t}\n * }\n *\n * // Use:\n * const pattern = {\n * \tattributes: {\n * \t\tkey1: 'value1',\n * \t\tkey2: 'value2'\n * \t},\n * \tclasses: 'foobar'\n * }\n * ```\n *\n * Refer to the {@glink updating/guides/update-to-29##update-to-ckeditor-5-v2910 Migration to v29.1.0} guide\n * and the {@link module:engine/view/matcher~MatcherPattern} documentation.\n *\n * @param pattern Pattern with missing properties.\n * @error matcher-pattern-deprecated-attributes-class-key\n */\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nexport default isKey;\n","import MapCache from './_MapCache.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nexport default memoize;\n","import memoizeCapped from './_memoizeCapped.js';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n","import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","import isArray from './isArray.js';\nimport isKey from './_isKey.js';\nimport stringToPath from './_stringToPath.js';\nimport toString from './toString.js';\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nexport default castPath;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default toKey;\n","import castPath from './_castPath.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nexport default baseGet;\n","import baseGet from './_baseGet.js';\nimport baseSlice from './_baseSlice.js';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseUnset from './_baseUnset.js';\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nexport default unset;\n","import castPath from './_castPath.js';\nimport last from './last.js';\nimport parent from './_parent.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nexport default baseUnset;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseGet from './_baseGet.js';\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nexport default get;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignMergeValue;\n","import createBaseFor from './_createBaseFor.js';\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nexport default baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nexport default createBaseFor;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nexport default safeGet;\n","import assignMergeValue from './_assignMergeValue.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\nimport copyArray from './_copyArray.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isPlainObject from './isPlainObject.js';\nimport isTypedArray from './isTypedArray.js';\nimport safeGet from './_safeGet.js';\nimport toPlainObject from './toPlainObject.js';\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nexport default baseMergeDeep;\n","import isArrayLike from './isArrayLike.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nexport default isArrayLikeObject;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nexport default toPlainObject;\n","import Stack from './_Stack.js';\nimport assignMergeValue from './_assignMergeValue.js';\nimport baseFor from './_baseFor.js';\nimport baseMergeDeep from './_baseMergeDeep.js';\nimport isObject from './isObject.js';\nimport keysIn from './keysIn.js';\nimport safeGet from './_safeGet.js';\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nexport default baseMerge;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseMerge from './_baseMerge.js';\nimport createAssigner from './_createAssigner.js';\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nexport default merge;\n","import baseSet from './_baseSet.js';\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nexport default set;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/stylesmap\n */\nimport { get, isObject, merge, set, unset } from 'lodash-es';\n/**\n * Styles map. Allows handling (adding, removing, retrieving) a set of style rules (usually, of an element).\n *\n * The styles map is capable of normalizing style names so e.g. the following operations are possible:\n */\nexport default class StylesMap {\n    /**\n     * Creates Styles instance.\n     */\n    constructor(styleProcessor) {\n        this._styles = {};\n        this._styleProcessor = styleProcessor;\n    }\n    /**\n     * Returns true if style map has no styles set.\n     */\n    get isEmpty() {\n        const entries = Object.entries(this._styles);\n        const from = Array.from(entries);\n        return !from.length;\n    }\n    /**\n     * Number of styles defined.\n     */\n    get size() {\n        if (this.isEmpty) {\n            return 0;\n        }\n        return this.getStyleNames().length;\n    }\n    /**\n     * Set styles map to a new value.\n     *\n     * ```ts\n     * styles.setTo( 'border:1px solid blue;margin-top:1px;' );\n     * ```\n     */\n    setTo(inlineStyle) {\n        this.clear();\n        const parsedStyles = Array.from(parseInlineStyles(inlineStyle).entries());\n        for (const [key, value] of parsedStyles) {\n            this._styleProcessor.toNormalizedForm(key, value, this._styles);\n        }\n    }\n    /**\n     * Checks if a given style is set.\n     *\n     * ```ts\n     * styles.setTo( 'margin-left:1px;' );\n     *\n     * styles.has( 'margin-left' );    // -> true\n     * styles.has( 'padding' );        // -> false\n     * ```\n     *\n     * **Note**: This check supports normalized style names.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.setTo( 'margin:2px;' );\n     *\n     * styles.has( 'margin' );         // -> true\n     * styles.has( 'margin-top' );     // -> true\n     * styles.has( 'margin-left' );    // -> true\n     *\n     * styles.remove( 'margin-top' );\n     *\n     * styles.has( 'margin' );         // -> false\n     * styles.has( 'margin-top' );     // -> false\n     * styles.has( 'margin-left' );    // -> true\n     * ```\n     *\n     * @param name Style name.\n     */\n    has(name) {\n        if (this.isEmpty) {\n            return false;\n        }\n        const styles = this._styleProcessor.getReducedForm(name, this._styles);\n        const propertyDescriptor = styles.find(([property]) => property === name);\n        // Only return a value if it is set;\n        return Array.isArray(propertyDescriptor);\n    }\n    set(nameOrObject, valueOrObject) {\n        if (isObject(nameOrObject)) {\n            for (const [key, value] of Object.entries(nameOrObject)) {\n                this._styleProcessor.toNormalizedForm(key, value, this._styles);\n            }\n        }\n        else {\n            this._styleProcessor.toNormalizedForm(nameOrObject, valueOrObject, this._styles);\n        }\n    }\n    /**\n     * Removes given style.\n     *\n     * ```ts\n     * styles.setTo( 'background:#f00;margin-right:2px;' );\n     *\n     * styles.remove( 'background' );\n     *\n     * styles.toString();   // -> 'margin-right:2px;'\n     * ```\n     *\n     * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules\n     * enabled style processor rules} to normalize passed values.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.setTo( 'margin:1px' );\n     *\n     * styles.remove( 'margin-top' );\n     * styles.remove( 'margin-right' );\n     *\n     * styles.toString(); // -> 'margin-bottom:1px;margin-left:1px;'\n     * ```\n     *\n     * @param name Style name.\n     */\n    remove(name) {\n        const path = toPath(name);\n        unset(this._styles, path);\n        delete this._styles[name];\n        this._cleanEmptyObjectsOnPath(path);\n    }\n    /**\n     * Returns a normalized style object or a single value.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px 2px 3em;' );\n     *\n     * styles.getNormalized( 'margin' );\n     * // will log:\n     * // {\n     * //     top: '1px',\n     * //     right: '2px',\n     * //     bottom: '3em',\n     * //     left: '2px'     // normalized value from margin shorthand\n     * // }\n     *\n     * styles.getNormalized( 'margin-left' ); // -> '2px'\n     * ```\n     *\n     * **Note**: This method will only return normalized styles if a style processor was defined.\n     *\n     * @param name Style name.\n     */\n    getNormalized(name) {\n        return this._styleProcessor.getNormalized(name, this._styles);\n    }\n    /**\n     * Returns a normalized style string. Styles are sorted by name.\n     *\n     * ```ts\n     * styles.set( 'margin' , '1px' );\n     * styles.set( 'background', '#f00' );\n     *\n     * styles.toString(); // -> 'background:#f00;margin:1px;'\n     * ```\n     *\n     * **Note**: This method supports normalized styles if defined.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * styles.set( 'margin' , '1px' );\n     * styles.set( 'background', '#f00' );\n     * styles.remove( 'margin-top' );\n     * styles.remove( 'margin-right' );\n     *\n     * styles.toString(); // -> 'background:#f00;margin-bottom:1px;margin-left:1px;'\n     * ```\n     */\n    toString() {\n        if (this.isEmpty) {\n            return '';\n        }\n        return this._getStylesEntries()\n            .map(arr => arr.join(':'))\n            .sort()\n            .join(';') + ';';\n    }\n    /**\n     * Returns property as a value string or undefined if property is not set.\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.set( 'margin-bottom', '3em' );\n     *\n     * styles.getAsString( 'margin' ); // -> 'margin: 1px 1px 3em;'\n     * ```\n     *\n     * Note, however, that all sub-values must be set for the longhand property name to return a value:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.remove( 'margin-bottom' );\n     *\n     * styles.getAsString( 'margin' ); // -> undefined\n     * ```\n     *\n     * In the above scenario, it is not possible to return a `margin` value, so `undefined` is returned.\n     * Instead, you should use:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     * styles.remove( 'margin-bottom' );\n     *\n     * for ( const styleName of styles.getStyleNames() ) {\n     * \tconsole.log( styleName, styles.getAsString( styleName ) );\n     * }\n     * // 'margin-top', '1px'\n     * // 'margin-right', '1px'\n     * // 'margin-left', '1px'\n     * ```\n     *\n     * In general, it is recommend to iterate over style names like in the example above. This way, you will always get all\n     * the currently set style values. So, if all the 4 margin values would be set\n     * the for-of loop above would yield only `'margin'`, `'1px'`:\n     *\n     * ```ts\n     * const styles = new Styles();\n     * styles.setTo( 'margin:1px;' );\n     *\n     * for ( const styleName of styles.getStyleNames() ) {\n     * \tconsole.log( styleName, styles.getAsString( styleName ) );\n     * }\n     * // 'margin', '1px'\n     * ```\n     *\n     * **Note**: To get a normalized version of a longhand property use the {@link #getNormalized `#getNormalized()`} method.\n     */\n    getAsString(propertyName) {\n        if (this.isEmpty) {\n            return;\n        }\n        if (this._styles[propertyName] && !isObject(this._styles[propertyName])) {\n            // Try return styles set directly - values that are not parsed.\n            return this._styles[propertyName];\n        }\n        const styles = this._styleProcessor.getReducedForm(propertyName, this._styles);\n        const propertyDescriptor = styles.find(([property]) => property === propertyName);\n        // Only return a value if it is set;\n        if (Array.isArray(propertyDescriptor)) {\n            return propertyDescriptor[1];\n        }\n    }\n    /**\n     * Returns all style properties names as they would appear when using {@link #toString `#toString()`}.\n     *\n     * When `expand` is set to true and there's a shorthand style property set, it will also return all equivalent styles:\n     *\n     * ```ts\n     * stylesMap.setTo( 'margin: 1em' )\n     * ```\n     *\n     * will be expanded to:\n     *\n     * ```ts\n     * [ 'margin', 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ]\n     * ```\n     *\n     * @param expand Expand shorthand style properties and all return equivalent style representations.\n     */\n    getStyleNames(expand = false) {\n        if (this.isEmpty) {\n            return [];\n        }\n        if (expand) {\n            return this._styleProcessor.getStyleNames(this._styles);\n        }\n        const entries = this._getStylesEntries();\n        return entries.map(([key]) => key);\n    }\n    /**\n     * Removes all styles.\n     */\n    clear() {\n        this._styles = {};\n    }\n    /**\n     * Returns normalized styles entries for further processing.\n     */\n    _getStylesEntries() {\n        const parsed = [];\n        const keys = Object.keys(this._styles);\n        for (const key of keys) {\n            parsed.push(...this._styleProcessor.getReducedForm(key, this._styles));\n        }\n        return parsed;\n    }\n    /**\n     * Removes empty objects upon removing an entry from internal object.\n     */\n    _cleanEmptyObjectsOnPath(path) {\n        const pathParts = path.split('.');\n        const isChildPath = pathParts.length > 1;\n        if (!isChildPath) {\n            return;\n        }\n        const parentPath = pathParts.splice(0, pathParts.length - 1).join('.');\n        const parentObject = get(this._styles, parentPath);\n        if (!parentObject) {\n            return;\n        }\n        const isParentEmpty = !Array.from(Object.keys(parentObject)).length;\n        if (isParentEmpty) {\n            this.remove(parentPath);\n        }\n    }\n}\n/**\n * Style processor is responsible for writing and reading a normalized styles object.\n */\nexport class StylesProcessor {\n    /**\n     * Creates StylesProcessor instance.\n     *\n     * @internal\n     */\n    constructor() {\n        this._normalizers = new Map();\n        this._extractors = new Map();\n        this._reducers = new Map();\n        this._consumables = new Map();\n    }\n    /**\n     * Parse style string value to a normalized object and appends it to styles object.\n     *\n     * ```ts\n     * const styles = {};\n     *\n     * stylesProcessor.toNormalizedForm( 'margin', '1px', styles );\n     *\n     * // styles will consist: { margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; } }\n     * ```\n     *\n     * **Note**: To define normalizer callbacks use {@link #setNormalizer}.\n     *\n     * @param name Name of style property.\n     * @param propertyValue Value of style property.\n     * @param styles Object holding normalized styles.\n     */\n    toNormalizedForm(name, propertyValue, styles) {\n        if (isObject(propertyValue)) {\n            appendStyleValue(styles, toPath(name), propertyValue);\n            return;\n        }\n        if (this._normalizers.has(name)) {\n            const normalizer = this._normalizers.get(name);\n            const { path, value } = normalizer(propertyValue);\n            appendStyleValue(styles, path, value);\n        }\n        else {\n            appendStyleValue(styles, name, propertyValue);\n        }\n    }\n    /**\n     * Returns a normalized version of a style property.\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: { top: '1px', right: '1px', bottom: '1px', left: '1px; },\n     * \tbackground: { color: '#f00' }\n     * };\n     *\n     * stylesProcessor.getNormalized( 'background' );\n     * // will return: { color: '#f00' }\n     *\n     * stylesProcessor.getNormalized( 'margin-top' );\n     * // will return: '1px'\n     * ```\n     *\n     * **Note**: In some cases extracting single value requires defining an extractor callback {@link #setExtractor}.\n     *\n     * @param name Name of style property.\n     * @param styles Object holding normalized styles.\n     */\n    getNormalized(name, styles) {\n        if (!name) {\n            return merge({}, styles);\n        }\n        // Might be empty string.\n        if (styles[name] !== undefined) {\n            return styles[name];\n        }\n        if (this._extractors.has(name)) {\n            const extractor = this._extractors.get(name);\n            if (typeof extractor === 'string') {\n                return get(styles, extractor);\n            }\n            const value = extractor(name, styles);\n            if (value) {\n                return value;\n            }\n        }\n        return get(styles, toPath(name));\n    }\n    /**\n     * Returns a reduced form of style property form normalized object.\n     *\n     * For default margin reducer, the below code:\n     *\n     * ```ts\n     * stylesProcessor.getReducedForm( 'margin', {\n     * \tmargin: { top: '1px', right: '1px', bottom: '2px', left: '1px; }\n     * } );\n     * ```\n     *\n     * will return:\n     *\n     * ```ts\n     * [\n     * \t[ 'margin', '1px 1px 2px' ]\n     * ]\n     * ```\n     *\n     * because it might be represented as a shorthand 'margin' value. However if one of margin long hand values is missing it should return:\n     *\n     * ```ts\n     * [\n     * \t[ 'margin-top', '1px' ],\n     * \t[ 'margin-right', '1px' ],\n     * \t[ 'margin-bottom', '2px' ]\n     * \t// the 'left' value is missing - cannot use 'margin' shorthand.\n     * ]\n     * ```\n     *\n     * **Note**: To define reducer callbacks use {@link #setReducer}.\n     *\n     * @param name Name of style property.\n     */\n    getReducedForm(name, styles) {\n        const normalizedValue = this.getNormalized(name, styles);\n        // Might be empty string.\n        if (normalizedValue === undefined) {\n            return [];\n        }\n        if (this._reducers.has(name)) {\n            const reducer = this._reducers.get(name);\n            return reducer(normalizedValue);\n        }\n        return [[name, normalizedValue]];\n    }\n    /**\n     * Return all style properties. Also expand shorthand properties (e.g. `margin`, `background`) if respective extractor is available.\n     *\n     * @param styles Object holding normalized styles.\n     */\n    getStyleNames(styles) {\n        // Find all extractable styles that have a value.\n        const expandedStyleNames = Array.from(this._consumables.keys()).filter(name => {\n            const style = this.getNormalized(name, styles);\n            if (style && typeof style == 'object') {\n                return Object.keys(style).length;\n            }\n            return style;\n        });\n        // For simple styles (for example `color`) we don't have a map of those styles\n        // but they are 1 to 1 with normalized object keys.\n        const styleNamesKeysSet = new Set([\n            ...expandedStyleNames,\n            ...Object.keys(styles)\n        ]);\n        return Array.from(styleNamesKeysSet.values());\n    }\n    /**\n     * Returns related style names.\n     *\n     * ```ts\n     * stylesProcessor.getRelatedStyles( 'margin' );\n     * // will return: [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ];\n     *\n     * stylesProcessor.getRelatedStyles( 'margin-top' );\n     * // will return: [ 'margin' ];\n     * ```\n     *\n     * **Note**: To define new style relations load an existing style processor or use\n     * {@link module:engine/view/stylesmap~StylesProcessor#setStyleRelation `StylesProcessor.setStyleRelation()`}.\n     */\n    getRelatedStyles(name) {\n        return this._consumables.get(name) || [];\n    }\n    /**\n     * Adds a normalizer method for a style property.\n     *\n     * A normalizer returns describing how the value should be normalized.\n     *\n     * For instance 'margin' style is a shorthand for four margin values:\n     *\n     * - 'margin-top'\n     * - 'margin-right'\n     * - 'margin-bottom'\n     * - 'margin-left'\n     *\n     * and can be written in various ways if some values are equal to others. For instance `'margin: 1px 2em;'` is a shorthand for\n     * `'margin-top: 1px;margin-right: 2em;margin-bottom: 1px;margin-left: 2em'`.\n     *\n     * A normalizer should parse various margin notations as a single object:\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: {\n     * \t\ttop: '1px',\n     * \t\tright: '2em',\n     * \t\tbottom: '1px',\n     * \t\tleft: '2em'\n     * \t}\n     * };\n     * ```\n     *\n     * Thus a normalizer for 'margin' style should return an object defining style path and value to store:\n     *\n     * ```ts\n     * const returnValue = {\n     * \tpath: 'margin',\n     * \tvalue: {\n     * \t\ttop: '1px',\n     * \t\tright: '2em',\n     * \t\tbottom: '1px',\n     * \t\tleft: '2em'\n     * \t}\n     * };\n     * ```\n     *\n     * Additionally to fully support all margin notations there should be also defined 4 normalizers for longhand margin notations. Below\n     * is an example for 'margin-top' style property normalizer:\n     *\n     * ```ts\n     * stylesProcessor.setNormalizer( 'margin-top', valueString => {\n     * \treturn {\n     * \t\tpath: 'margin.top',\n     * \t\tvalue: valueString\n     * \t}\n     * } );\n     * ```\n     */\n    setNormalizer(name, callback) {\n        this._normalizers.set(name, callback);\n    }\n    /**\n     * Adds a extractor callback for a style property.\n     *\n     * Most normalized style values are stored as one level objects. It is assumed that `'margin-top'` style will be stored as:\n     *\n     * ```ts\n     * const styles = {\n     * \tmargin: {\n     * \t\ttop: 'value'\n     * \t}\n     * }\n     * ```\n     *\n     * However, some styles can have conflicting notations and thus it might be harder to extract a style value from shorthand. For instance\n     * the 'border-top-style' can be defined using `'border-top:solid'`, `'border-style:solid none none none'` or by `'border:solid'`\n     * shorthands. The default border styles processors stores styles as:\n     *\n     * ```ts\n     * const styles = {\n     * \tborder: {\n     * \t\tstyle: {\n     * \t\t\ttop: 'solid'\n     * \t\t}\n     * \t}\n     * }\n     * ```\n     *\n     * as it is better to modify border style independently from other values. On the other part the output of the border might be\n     * desired as `border-top`, `border-left`, etc notation.\n     *\n     * In the above example an extractor should return a side border value that combines style, color and width:\n     *\n     * ```ts\n     * styleProcessor.setExtractor( 'border-top', styles => {\n     * \treturn {\n     * \t\tcolor: styles.border.color.top,\n     * \t\tstyle: styles.border.style.top,\n     * \t\twidth: styles.border.width.top\n     * \t}\n     * } );\n     * ```\n     *\n     * @param callbackOrPath Callback that return a requested value or path string for single values.\n     */\n    setExtractor(name, callbackOrPath) {\n        this._extractors.set(name, callbackOrPath);\n    }\n    /**\n     * Adds a reducer callback for a style property.\n     *\n     * Reducer returns a minimal notation for given style name. For longhand properties it is not required to write a reducer as\n     * by default the direct value from style path is taken.\n     *\n     * For shorthand styles a reducer should return minimal style notation either by returning single name-value tuple or multiple tuples\n     * if a shorthand cannot be used. For instance for a margin shorthand a reducer might return:\n     *\n     * ```ts\n     * const marginShortHandTuple = [\n     * \t[ 'margin', '1px 1px 2px' ]\n     * ];\n     * ```\n     *\n     * or a longhand tuples for defined values:\n     *\n     * ```ts\n     * // Considering margin.bottom and margin.left are undefined.\n     * const marginLonghandsTuples = [\n     * \t[ 'margin-top', '1px' ],\n     * \t[ 'margin-right', '1px' ]\n     * ];\n     * ```\n     *\n     * A reducer obtains a normalized style value:\n     *\n     * ```ts\n     * // Simplified reducer that always outputs 4 values which are always present:\n     * stylesProcessor.setReducer( 'margin', margin => {\n     * \treturn [\n     * \t\t[ 'margin', `${ margin.top } ${ margin.right } ${ margin.bottom } ${ margin.left }` ]\n     * \t]\n     * } );\n     * ```\n     */\n    setReducer(name, callback) {\n        this._reducers.set(name, callback);\n    }\n    /**\n     * Defines a style shorthand relation to other style notations.\n     *\n     * ```ts\n     * stylesProcessor.setStyleRelation( 'margin', [\n     * \t'margin-top',\n     * \t'margin-right',\n     * \t'margin-bottom',\n     * \t'margin-left'\n     * ] );\n     * ```\n     *\n     * This enables expanding of style names for shorthands. For instance, if defined,\n     * {@link module:engine/conversion/viewconsumable~ViewConsumable view consumable} items are automatically created\n     * for long-hand margin style notation alongside the `'margin'` item.\n     *\n     * This means that when an element being converted has a style `margin`, a converter for `margin-left` will work just\n     * fine since the view consumable will contain a consumable `margin-left` item (thanks to the relation) and\n     * `element.getStyle( 'margin-left' )` will work as well assuming that the style processor was correctly configured.\n     * However, once `margin-left` is consumed, `margin` will not be consumable anymore.\n     */\n    setStyleRelation(shorthandName, styleNames) {\n        this._mapStyleNames(shorthandName, styleNames);\n        for (const alsoName of styleNames) {\n            this._mapStyleNames(alsoName, [shorthandName]);\n        }\n    }\n    /**\n     * Set two-way binding of style names.\n     */\n    _mapStyleNames(name, styleNames) {\n        if (!this._consumables.has(name)) {\n            this._consumables.set(name, []);\n        }\n        this._consumables.get(name).push(...styleNames);\n    }\n}\n/**\n * Parses inline styles and puts property - value pairs into styles map.\n *\n * @param stylesString Styles to parse.\n * @returns Map of parsed properties and values.\n */\nfunction parseInlineStyles(stylesString) {\n    // `null` if no quote was found in input string or last found quote was a closing quote. See below.\n    let quoteType = null;\n    let propertyNameStart = 0;\n    let propertyValueStart = 0;\n    let propertyName = null;\n    const stylesMap = new Map();\n    // Do not set anything if input string is empty.\n    if (stylesString === '') {\n        return stylesMap;\n    }\n    // Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n    if (stylesString.charAt(stylesString.length - 1) != ';') {\n        stylesString = stylesString + ';';\n    }\n    // Seek the whole string for \"special characters\".\n    for (let i = 0; i < stylesString.length; i++) {\n        const char = stylesString.charAt(i);\n        if (quoteType === null) {\n            // No quote found yet or last found quote was a closing quote.\n            switch (char) {\n                case ':':\n                    // Most of time colon means that property name just ended.\n                    // Sometimes however `:` is found inside property value (for example in background image url).\n                    if (!propertyName) {\n                        // Treat this as end of property only if property name is not already saved.\n                        // Save property name.\n                        propertyName = stylesString.substr(propertyNameStart, i - propertyNameStart);\n                        // Save this point as the start of property value.\n                        propertyValueStart = i + 1;\n                    }\n                    break;\n                case '\"':\n                case '\\'':\n                    // Opening quote found (this is an opening quote, because `quoteType` is `null`).\n                    quoteType = char;\n                    break;\n                case ';': {\n                    // Property value just ended.\n                    // Use previously stored property value start to obtain property value.\n                    const propertyValue = stylesString.substr(propertyValueStart, i - propertyValueStart);\n                    if (propertyName) {\n                        // Save parsed part.\n                        stylesMap.set(propertyName.trim(), propertyValue.trim());\n                    }\n                    propertyName = null;\n                    // Save this point as property name start. Property name starts immediately after previous property value ends.\n                    propertyNameStart = i + 1;\n                    break;\n                }\n            }\n        }\n        else if (char === quoteType) {\n            // If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n            quoteType = null;\n        }\n    }\n    return stylesMap;\n}\n/**\n * Return lodash compatible path from style name.\n */\nfunction toPath(name) {\n    return name.replace('-', '.');\n}\n/**\n * Appends style definition to the styles object.\n */\nfunction appendStyleValue(stylesObject, nameOrPath, valueOrObject) {\n    let valueToSet = valueOrObject;\n    if (isObject(valueOrObject)) {\n        valueToSet = merge({}, get(stylesObject, nameOrPath), valueOrObject);\n    }\n    set(stylesObject, nameOrPath, valueToSet);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/element\n */\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { isIterable, toArray, toMap } from '@ckeditor/ckeditor5-utils';\nimport { default as Matcher } from './matcher';\nimport { default as StylesMap } from './stylesmap';\n// @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n */\nexport default class Element extends Node {\n    /**\n     * Creates a view element.\n     *\n     * Attributes can be passed in various formats:\n     *\n     * ```ts\n     * new Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object\n     * new Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n     * new Element( viewDocument, 'div', mapOfAttributes ); // map\n     * ```\n     *\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document);\n        /**\n         * A list of attribute names that should be rendered in the editing pipeline even though filtering mechanisms\n         * implemented in the {@link module:engine/view/domconverter~DomConverter} (for instance,\n         * {@link module:engine/view/domconverter~DomConverter#shouldRenderAttribute}) would filter them out.\n         *\n         * These attributes can be specified as an option when the element is created by\n         * the {@link module:engine/view/downcastwriter~DowncastWriter}. To check whether an unsafe an attribute should\n         * be permitted, use the {@link #shouldRenderUnsafeAttribute} method.\n         *\n         * @internal\n         */\n        this._unsafeAttributesToRender = [];\n        /**\n         * Map of custom properties.\n         * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n         */\n        this._customProperties = new Map();\n        this.name = name;\n        this._attrs = parseAttributes(attrs);\n        this._children = [];\n        if (children) {\n            this._insertChild(0, children);\n        }\n        this._classes = new Set();\n        if (this._attrs.has('class')) {\n            // Remove class attribute and handle it by class set.\n            const classString = this._attrs.get('class');\n            parseClasses(this._classes, classString);\n            this._attrs.delete('class');\n        }\n        this._styles = new StylesMap(this.document.stylesProcessor);\n        if (this._attrs.has('style')) {\n            // Remove style attribute and handle it by styles map.\n            this._styles.setTo(this._attrs.get('style'));\n            this._attrs.delete('style');\n        }\n    }\n    /**\n     * Number of element's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Is `true` if there are no nodes inside this element, `false` otherwise.\n     */\n    get isEmpty() {\n        return this._children.length === 0;\n    }\n    /**\n     * Gets child at the given index.\n     *\n     * @param index Index of child.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children[index];\n    }\n    /**\n     * Gets index of the given child node. Returns `-1` if child node is not found.\n     *\n     * @param node Child node.\n     * @returns Index of the child node.\n     */\n    getChildIndex(node) {\n        return this._children.indexOf(node);\n    }\n    /**\n     * Gets child nodes iterator.\n     *\n     * @returns Child nodes iterator.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n     *\n     * @returns Keys for attributes.\n     */\n    *getAttributeKeys() {\n        if (this._classes.size > 0) {\n            yield 'class';\n        }\n        if (!this._styles.isEmpty) {\n            yield 'style';\n        }\n        yield* this._attrs.keys();\n    }\n    /**\n     * Returns iterator that iterates over this element's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    *getAttributes() {\n        yield* this._attrs.entries();\n        if (this._classes.size > 0) {\n            yield ['class', this.getAttribute('class')];\n        }\n        if (!this._styles.isEmpty) {\n            yield ['style', this.getAttribute('style')];\n        }\n    }\n    /**\n     * Gets attribute by key. If attribute is not present - returns undefined.\n     *\n     * @param key Attribute key.\n     * @returns Attribute value.\n     */\n    getAttribute(key) {\n        if (key == 'class') {\n            if (this._classes.size > 0) {\n                return [...this._classes].join(' ');\n            }\n            return undefined;\n        }\n        if (key == 'style') {\n            const inlineStyle = this._styles.toString();\n            return inlineStyle == '' ? undefined : inlineStyle;\n        }\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n     *\n     * @param key Attribute key.\n     * @returns `true` if attribute with the specified key exists in the element, `false` otherwise.\n     */\n    hasAttribute(key) {\n        if (key == 'class') {\n            return this._classes.size > 0;\n        }\n        if (key == 'style') {\n            return !this._styles.isEmpty;\n        }\n        return this._attrs.has(key);\n    }\n    /**\n     * Checks if this element is similar to other element.\n     * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n     * can contain different set of children nodes.\n     */\n    isSimilar(otherElement) {\n        if (!(otherElement instanceof Element)) {\n            return false;\n        }\n        // If exactly the same Element is provided - return true immediately.\n        if (this === otherElement) {\n            return true;\n        }\n        // Check element name.\n        if (this.name != otherElement.name) {\n            return false;\n        }\n        // Check number of attributes, classes and styles.\n        if (this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n            this._styles.size !== otherElement._styles.size) {\n            return false;\n        }\n        // Check if attributes are the same.\n        for (const [key, value] of this._attrs) {\n            if (!otherElement._attrs.has(key) || otherElement._attrs.get(key) !== value) {\n                return false;\n            }\n        }\n        // Check if classes are the same.\n        for (const className of this._classes) {\n            if (!otherElement._classes.has(className)) {\n                return false;\n            }\n        }\n        // Check if styles are the same.\n        for (const property of this._styles.getStyleNames()) {\n            if (!otherElement._styles.has(property) ||\n                otherElement._styles.getAsString(property) !== this._styles.getAsString(property)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns true if class is present.\n     * If more then one class is provided - returns true only when all classes are present.\n     *\n     * ```ts\n     * element.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n     * element.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n     * ```\n     */\n    hasClass(...className) {\n        for (const name of className) {\n            if (!this._classes.has(name)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns iterator that contains all class names.\n     */\n    getClassNames() {\n        return this._classes.keys();\n    }\n    /**\n     * Returns style value for the given property mae.\n     * If the style does not exist `undefined` is returned.\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.\n     *\n     * For an element with style set to `'margin:1px'`:\n     *\n     * ```ts\n     * // Enable 'margin' shorthand processing:\n     * editor.data.addStyleProcessorRules( addMarginRules );\n     *\n     * const element = view.change( writer => {\n     * \tconst element = writer.createElement();\n     * \twriter.setStyle( 'margin', '1px' );\n     * \twriter.setStyle( 'margin-bottom', '3em' );\n     *\n     * \treturn element;\n     * } );\n     *\n     * element.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'\n     * ```\n     */\n    getStyle(property) {\n        return this._styles.getAsString(property);\n    }\n    /**\n     * Returns a normalized style object or single style value.\n     *\n     * For an element with style set to: margin:1px 2px 3em;\n     *\n     * ```ts\n     * element.getNormalizedStyle( 'margin' ) );\n     * ```\n     *\n     * will return:\n     *\n     * ```ts\n     * {\n     * \ttop: '1px',\n     * \tright: '2px',\n     * \tbottom: '3em',\n     * \tleft: '2px'    // a normalized value from margin shorthand\n     * }\n     * ```\n     *\n     * and reading for single style value:\n     *\n     * ```ts\n     * styles.getNormalizedStyle( 'margin-left' );\n     * ```\n     *\n     * Will return a `2px` string.\n     *\n     * **Note**: This method will return normalized values only if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.\n     *\n     * @param property Name of CSS property\n     */\n    getNormalizedStyle(property) {\n        return this._styles.getNormalized(property);\n    }\n    /**\n     * Returns iterator that contains all style names.\n     *\n     * @param expand Expand shorthand style properties and return all equivalent style representations.\n     */\n    getStyleNames(expand) {\n        return this._styles.getStyleNames(expand);\n    }\n    /**\n     * Returns true if style keys are present.\n     * If more then one style property is provided - returns true only when all properties are present.\n     *\n     * ```ts\n     * element.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n     * element.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n     * ```\n     */\n    hasStyle(...property) {\n        for (const name of property) {\n            if (!this._styles.has(name)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns ancestor element that match specified pattern.\n     * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n     *\n     * @see module:engine/view/matcher~Matcher\n     * @param patterns Patterns used to match correct ancestor. See {@link module:engine/view/matcher~Matcher}.\n     * @returns Found element or `null` if no matching ancestor was found.\n     */\n    findAncestor(...patterns) {\n        const matcher = new Matcher(...patterns);\n        let parent = this.parent;\n        while (parent && !parent.is('documentFragment')) {\n            if (matcher.match(parent)) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Returns the custom property value for the given key.\n     */\n    getCustomProperty(key) {\n        return this._customProperties.get(key);\n    }\n    /**\n     * Returns an iterator which iterates over this element's custom properties.\n     * Iterator provides `[ key, value ]` pairs for each stored property.\n     */\n    *getCustomProperties() {\n        yield* this._customProperties.entries();\n    }\n    /**\n     * Returns identity string based on element's name, styles, classes and other attributes.\n     * Two elements that {@link #isSimilar are similar} will have same identity string.\n     * It has the following format:\n     *\n     * ```ts\n     * 'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n     * ```\n     *\n     * For example:\n     *\n     * ```ts\n     * const element = writer.createContainerElement( 'foo', {\n     * \tbanana: '10',\n     * \tapple: '20',\n     * \tstyle: 'color: red; border-color: white;',\n     * \tclass: 'baz'\n     * } );\n     *\n     * // returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n     * element.getIdentity();\n     * ```\n     *\n     * **Note**: Classes, styles and other attributes are sorted alphabetically.\n     */\n    getIdentity() {\n        const classes = Array.from(this._classes).sort().join(',');\n        const styles = this._styles.toString();\n        const attributes = Array.from(this._attrs).map(i => `${i[0]}=\"${i[1]}\"`).sort().join(' ');\n        return this.name +\n            (classes == '' ? '' : ` class=\"${classes}\"`) +\n            (!styles ? '' : ` style=\"${styles}\"`) +\n            (attributes == '' ? '' : ` ${attributes}`);\n    }\n    /**\n     * Decides whether an unsafe attribute is whitelisted and should be rendered in the editing pipeline even though filtering mechanisms\n     * like {@link module:engine/view/domconverter~DomConverter#shouldRenderAttribute} say it should not.\n     *\n     * Unsafe attribute names can be specified when creating an element via {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @param attributeName The name of the attribute to be checked.\n     */\n    shouldRenderUnsafeAttribute(attributeName) {\n        return this._unsafeAttributesToRender.includes(attributeName);\n    }\n    /**\n     * Clones provided element.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns Clone of this element.\n     */\n    _clone(deep = false) {\n        const childrenClone = [];\n        if (deep) {\n            for (const child of this.getChildren()) {\n                childrenClone.push(child._clone(deep));\n            }\n        }\n        // ContainerElement and AttributeElement should be also cloned properly.\n        const cloned = new this.constructor(this.document, this.name, this._attrs, childrenClone);\n        // Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n        // parse once again in constructor.\n        cloned._classes = new Set(this._classes);\n        cloned._styles.set(this._styles.getNormalized());\n        // Clone custom properties.\n        cloned._customProperties = new Map(this._customProperties);\n        // Clone filler offset method.\n        // We can't define this method in a prototype because it's behavior which\n        // is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n        cloned.getFillerOffset = this.getFillerOffset;\n        // Clone unsafe attributes list.\n        cloned._unsafeAttributesToRender = this._unsafeAttributesToRender;\n        return cloned;\n    }\n    /**\n     * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n     * and sets the parent of these nodes to this element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#insert\n     * @internal\n     * @param items Items to be inserted.\n     * @fires change\n     * @returns Number of appended nodes.\n     */\n    _appendChild(items) {\n        return this._insertChild(this.childCount, items);\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this element.\n     *\n     * @internal\n     * @see module:engine/view/downcastwriter~DowncastWriter#insert\n     * @param index Position where nodes should be inserted.\n     * @param items Items to be inserted.\n     * @fires change\n     * @returns Number of inserted nodes.\n     */\n    _insertChild(index, items) {\n        this._fireChange('children', this);\n        let count = 0;\n        const nodes = normalize(this.document, items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n            node.document = this.document;\n            this._children.splice(index, 0, node);\n            index++;\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#remove\n     * @internal\n     * @param index Number of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @fires change\n     * @returns The array of removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        this._fireChange('children', this);\n        for (let i = index; i < index + howMany; i++) {\n            this._children[i].parent = null;\n        }\n        return this._children.splice(index, howMany);\n    }\n    /**\n     * Adds or overwrite attribute with a specified key and value.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n     * @internal\n     * @param key Attribute key.\n     * @param value Attribute value.\n     * @fires change\n     */\n    _setAttribute(key, value) {\n        const stringValue = String(value);\n        this._fireChange('attributes', this);\n        if (key == 'class') {\n            parseClasses(this._classes, stringValue);\n        }\n        else if (key == 'style') {\n            this._styles.setTo(stringValue);\n        }\n        else {\n            this._attrs.set(key, stringValue);\n        }\n    }\n    /**\n     * Removes attribute from the element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n     * @internal\n     * @param key Attribute key.\n     * @returns Returns true if an attribute existed and has been removed.\n     * @fires change\n     */\n    _removeAttribute(key) {\n        this._fireChange('attributes', this);\n        // Remove class attribute.\n        if (key == 'class') {\n            if (this._classes.size > 0) {\n                this._classes.clear();\n                return true;\n            }\n            return false;\n        }\n        // Remove style attribute.\n        if (key == 'style') {\n            if (!this._styles.isEmpty) {\n                this._styles.clear();\n                return true;\n            }\n            return false;\n        }\n        // Remove other attributes.\n        return this._attrs.delete(key);\n    }\n    /**\n     * Adds specified class.\n     *\n     * ```ts\n     * element._addClass( 'foo' ); // Adds 'foo' class.\n     * element._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n     * ```\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n     * @internal\n     * @fires change\n     */\n    _addClass(className) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(className)) {\n            this._classes.add(name);\n        }\n    }\n    /**\n     * Removes specified class.\n     *\n     * ```ts\n     * element._removeClass( 'foo' );  // Removes 'foo' class.\n     * element._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n     * ```\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n     * @internal\n     * @fires change\n     */\n    _removeClass(className) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(className)) {\n            this._classes.delete(name);\n        }\n    }\n    _setStyle(property, value) {\n        this._fireChange('attributes', this);\n        if (typeof property != 'string') {\n            this._styles.set(property);\n        }\n        else {\n            this._styles.set(property, value);\n        }\n    }\n    /**\n     * Removes specified style.\n     *\n     * ```ts\n     * element._removeStyle( 'color' );  // Removes 'color' style.\n     * element._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n     * ```\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n     * @internal\n     * @fires change\n     */\n    _removeStyle(property) {\n        this._fireChange('attributes', this);\n        for (const name of toArray(property)) {\n            this._styles.remove(name);\n        }\n    }\n    /**\n     * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n     * so they can be used to add special data to elements.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n     * @internal\n     */\n    _setCustomProperty(key, value) {\n        this._customProperties.set(key, value);\n    }\n    /**\n     * Removes the custom property stored under the given key.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n     * @internal\n     * @returns Returns true if property was removed.\n     */\n    _removeCustomProperty(key) {\n        return this._customProperties.delete(key);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'element' || type === 'view:element' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n * as an object (instead of `Iterable`), the object is transformed to the map. Attributes with `null` value are removed.\n * Attributes with non-`String` value are converted to `String`.\n *\n * @param attrs Attributes to parse.\n * @returns Parsed attributes.\n */\nfunction parseAttributes(attrs) {\n    const attrsMap = toMap(attrs);\n    for (const [key, value] of attrsMap) {\n        if (value === null) {\n            attrsMap.delete(key);\n        }\n        else if (typeof value != 'string') {\n            attrsMap.set(key, String(value));\n        }\n    }\n    return attrsMap;\n}\n/**\n * Parses class attribute and puts all classes into classes set.\n * Classes set s cleared before insertion.\n *\n * @param classesSet Set to insert parsed classes.\n * @param classesString String with classes to parse.\n */\nfunction parseClasses(classesSet, classesString) {\n    const classArray = classesString.split(/\\s+/);\n    classesSet.clear();\n    classArray.forEach(name => classesSet.add(name));\n}\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(document, nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(document, nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(document, node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(document, node.data);\n        }\n        return node;\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n */\nexport default class ContainerElement extends Element {\n    /**\n     * Creates a container element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n     * @see module:engine/view/element~Element\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nContainerElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'containerElement' || type === 'view:containerElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n    const children = [...this.getChildren()];\n    const lastChild = children[this.childCount - 1];\n    // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n    if (lastChild && lastChild.is('element', 'br')) {\n        return this.childCount;\n    }\n    for (const child of children) {\n        // If there's any non-UI element – don't render the bogus.\n        if (!child.is('uiElement')) {\n            return null;\n        }\n    }\n    // If there are only UI elements – render the bogus at the end of the element.\n    return this.childCount;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/editableelement\n */\nimport ContainerElement from './containerelement';\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n */\nexport default class EditableElement extends ObservableMixin(ContainerElement) {\n    /**\n     * Creates an editable element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attributes, children) {\n        super(document, name, attributes, children);\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.bind('isReadOnly').to(document);\n        this.bind('isFocused').to(document, 'isFocused', isFocused => isFocused && document.selection.editableElement == this);\n        // Update focus state based on selection changes.\n        this.listenTo(document.selection, 'change', () => {\n            this.isFocused = document.isFocused && document.selection.editableElement == this;\n        });\n    }\n    destroy() {\n        this.stopListening();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nEditableElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'editableElement' || type === 'view:editableElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/rooteditableelement\n */\nimport EditableElement from './editableelement';\nconst rootNameSymbol = Symbol('rootName');\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n */\nexport default class RootEditableElement extends EditableElement {\n    /**\n     * Creates root editable element.\n     *\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     */\n    constructor(document, name) {\n        super(document, name);\n        this.rootName = 'main';\n    }\n    /**\n     * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n     * other name is set, `main` name is used.\n     *\n     * @readonly\n     */\n    get rootName() {\n        return this.getCustomProperty(rootNameSymbol);\n    }\n    set rootName(rootName) {\n        this._setCustomProperty(rootNameSymbol, rootName);\n    }\n    /**\n     * Overrides old element name and sets new one.\n     * This is needed because view roots are created before they are attached to the DOM.\n     * The name of the root element is temporary at this stage. It has to be changed when the\n     * view root element is attached to the DOM element.\n     *\n     * @internal\n     * @param name The new name of element.\n     */\n    set _name(name) {\n        this.name = name;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRootEditableElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rootElement' || type === 'view:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'editableElement' || type === 'view:editableElement' ||\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'rootElement' || type === 'view:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'editableElement' || type === 'view:editableElement' ||\n            type === 'containerElement' || type === 'view:containerElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/treewalker\n */\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n    /**\n     * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n     *\n     * @param options Object with configuration.\n     */\n    constructor(options = {}) {\n        if (!options.boundaries && !options.startPosition) {\n            /**\n             * Neither boundaries nor starting position have been defined.\n             *\n             * @error view-tree-walker-no-start-position\n             */\n            throw new CKEditorError('view-tree-walker-no-start-position', null);\n        }\n        if (options.direction && options.direction != 'forward' && options.direction != 'backward') {\n            /**\n             * Only `backward` and `forward` direction allowed.\n             *\n             * @error view-tree-walker-unknown-direction\n             */\n            throw new CKEditorError('view-tree-walker-unknown-direction', options.startPosition, { direction: options.direction });\n        }\n        this.boundaries = options.boundaries || null;\n        if (options.startPosition) {\n            this._position = Position._createAt(options.startPosition);\n        }\n        else {\n            this._position = Position._createAt(options.boundaries[options.direction == 'backward' ? 'end' : 'start']);\n        }\n        this.direction = options.direction || 'forward';\n        this.singleCharacters = !!options.singleCharacters;\n        this.shallow = !!options.shallow;\n        this.ignoreElementEnd = !!options.ignoreElementEnd;\n        this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n        this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n     * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n     *\n     * For example:\n     *\n     * ```ts\n     * walker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n     * walker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n     * walker.skip( value => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     */\n    skip(skip) {\n        let nextResult;\n        let prevPosition;\n        do {\n            prevPosition = this.position;\n            nextResult = this.next();\n        } while (!nextResult.done && skip(nextResult.value));\n        if (!nextResult.done) {\n            this._position = prevPosition;\n        }\n    }\n    /**\n     * Gets the next tree walker's value.\n     *\n     * @returns Object implementing iterator interface, returning\n     * information about taken step.\n     */\n    next() {\n        if (this.direction == 'forward') {\n            return this._next();\n        }\n        else {\n            return this._previous();\n        }\n    }\n    /**\n     * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n     */\n    _next() {\n        let position = this.position.clone();\n        const previousPosition = this.position;\n        const parent = position.parent;\n        // We are at the end of the root.\n        if (parent.parent === null && position.offset === parent.childCount) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just after current position.\n        let node;\n        // Text is a specific parent because it contains string instead of child nodes.\n        if (parent instanceof Text) {\n            if (position.isAtEnd) {\n                // Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n                this._position = Position._createAfter(parent);\n                return this._next();\n            }\n            node = parent.data[position.offset];\n        }\n        else {\n            node = parent.getChild(position.offset);\n        }\n        if (node instanceof Element) {\n            if (!this.shallow) {\n                position = new Position(node, 0);\n            }\n            else {\n                // We are past the walker boundaries.\n                if (this.boundaries && this.boundaries.end.isBefore(position)) {\n                    return { done: true, value: undefined };\n                }\n                position.offset++;\n            }\n            this._position = position;\n            return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n        }\n        if (node instanceof Text) {\n            if (this.singleCharacters) {\n                position = new Position(node, 0);\n                this._position = position;\n                return this._next();\n            }\n            let charactersCount = node.data.length;\n            let item;\n            // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n            if (node == this._boundaryEndParent) {\n                charactersCount = this.boundaries.end.offset;\n                item = new TextProxy(node, 0, charactersCount);\n                position = Position._createAfter(item);\n            }\n            else {\n                item = new TextProxy(node, 0, node.data.length);\n                // If not just keep moving forward.\n                position.offset++;\n            }\n            this._position = position;\n            return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        if (typeof node == 'string') {\n            let textLength;\n            if (this.singleCharacters) {\n                textLength = 1;\n            }\n            else {\n                // Check if text stick out of walker range.\n                const endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n                textLength = endOffset - position.offset;\n            }\n            const textProxy = new TextProxy(parent, position.offset, textLength);\n            position.offset += textLength;\n            this._position = position;\n            return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n        }\n        // `node` is not set, we reached the end of current `parent`.\n        position = Position._createAfter(parent);\n        this._position = position;\n        if (this.ignoreElementEnd) {\n            return this._next();\n        }\n        return this._formatReturnValue('elementEnd', parent, previousPosition, position);\n    }\n    /**\n     * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n     */\n    _previous() {\n        let position = this.position.clone();\n        const previousPosition = this.position;\n        const parent = position.parent;\n        // We are at the beginning of the root.\n        if (parent.parent === null && position.offset === 0) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just before current position.\n        let node;\n        // Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n        if (parent instanceof Text) {\n            if (position.isAtStart) {\n                // Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n                this._position = Position._createBefore(parent);\n                return this._previous();\n            }\n            node = parent.data[position.offset - 1];\n        }\n        else {\n            node = parent.getChild(position.offset - 1);\n        }\n        if (node instanceof Element) {\n            if (this.shallow) {\n                position.offset--;\n                this._position = position;\n                return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n            }\n            position = new Position(node, node.childCount);\n            this._position = position;\n            if (this.ignoreElementEnd) {\n                return this._previous();\n            }\n            return this._formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n        if (node instanceof Text) {\n            if (this.singleCharacters) {\n                position = new Position(node, node.data.length);\n                this._position = position;\n                return this._previous();\n            }\n            let charactersCount = node.data.length;\n            let item;\n            // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n            if (node == this._boundaryStartParent) {\n                const offset = this.boundaries.start.offset;\n                item = new TextProxy(node, offset, node.data.length - offset);\n                charactersCount = item.data.length;\n                position = Position._createBefore(item);\n            }\n            else {\n                item = new TextProxy(node, 0, node.data.length);\n                // If not just keep moving backward.\n                position.offset--;\n            }\n            this._position = position;\n            return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        if (typeof node == 'string') {\n            let textLength;\n            if (!this.singleCharacters) {\n                // Check if text stick out of walker range.\n                const startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n                textLength = position.offset - startOffset;\n            }\n            else {\n                textLength = 1;\n            }\n            position.offset -= textLength;\n            const textProxy = new TextProxy(parent, position.offset, textLength);\n            this._position = position;\n            return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n        }\n        // `node` is not set, we reached the beginning of current `parent`.\n        position = Position._createBefore(parent);\n        this._position = position;\n        return this._formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n    /**\n     * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n     *\n     * @param type Type of step.\n     * @param item Item between old and new position.\n     * @param previousPosition Previous position of iterator.\n     * @param nextPosition Next position of iterator.\n     * @param length Length of the item.\n     */\n    _formatReturnValue(type, item, previousPosition, nextPosition, length) {\n        // Text is a specific parent, because contains string instead of children.\n        // Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n        // or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n        // we move it just before or just after Text.\n        if (item instanceof TextProxy) {\n            // Position is at the end of Text.\n            if (item.offsetInText + item.data.length == item.textNode.data.length) {\n                if (this.direction == 'forward' && !(this.boundaries && this.boundaries.end.isEqual(this.position))) {\n                    nextPosition = Position._createAfter(item.textNode);\n                    // When we change nextPosition of returned value we need also update walker current position.\n                    this._position = nextPosition;\n                }\n                else {\n                    previousPosition = Position._createAfter(item.textNode);\n                }\n            }\n            // Position is at the begining ot the text.\n            if (item.offsetInText === 0) {\n                if (this.direction == 'backward' && !(this.boundaries && this.boundaries.start.isEqual(this.position))) {\n                    nextPosition = Position._createBefore(item.textNode);\n                    // When we change nextPosition of returned value we need also update walker current position.\n                    this._position = nextPosition;\n                }\n                else {\n                    previousPosition = Position._createBefore(item.textNode);\n                }\n            }\n        }\n        return {\n            done: false,\n            value: {\n                type,\n                item,\n                previousPosition,\n                nextPosition,\n                length\n            }\n        };\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/position\n */\nimport TypeCheckable from './typecheckable';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport EditableElement from './editableelement';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\nimport { default as TreeWalker } from './treewalker';\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position extends TypeCheckable {\n    /**\n     * Creates a position.\n     *\n     * @param parent Position parent.\n     * @param offset Position offset.\n     */\n    constructor(parent, offset) {\n        super();\n        this.parent = parent;\n        this.offset = offset;\n    }\n    /**\n     * Node directly after the position. Equals `null` when there is no node after position or position is located\n     * inside text node.\n     */\n    get nodeAfter() {\n        if (this.parent.is('$text')) {\n            return null;\n        }\n        return this.parent.getChild(this.offset) || null;\n    }\n    /**\n     * Node directly before the position. Equals `null` when there is no node before position or position is located\n     * inside text node.\n     */\n    get nodeBefore() {\n        if (this.parent.is('$text')) {\n            return null;\n        }\n        return this.parent.getChild(this.offset - 1) || null;\n    }\n    /**\n     * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtStart() {\n        return this.offset === 0;\n    }\n    /**\n     * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtEnd() {\n        const endOffset = this.parent.is('$text') ? this.parent.data.length : this.parent.childCount;\n        return this.offset === endOffset;\n    }\n    /**\n     * Position's root, that is the root of the position's parent element.\n     */\n    get root() {\n        return this.parent.root;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n     * position is not inside an editable element.\n     */\n    get editableElement() {\n        let editable = this.parent;\n        while (!(editable instanceof EditableElement)) {\n            if (editable.parent) {\n                editable = editable.parent;\n            }\n            else {\n                return null;\n            }\n        }\n        return editable;\n    }\n    /**\n     * Returns a new instance of Position with offset incremented by `shift` value.\n     *\n     * @param shift How position offset should get changed. Accepts negative values.\n     * @returns Shifted position.\n     */\n    getShiftedBy(shift) {\n        const shifted = Position._createAt(this);\n        const offset = shifted.offset + shift;\n        shifted.offset = offset < 0 ? 0 : offset;\n        return shifted;\n    }\n    /**\n     * Gets the farthest position which matches the callback using\n     * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n     *\n     * For example:\n     *\n     * ```ts\n     * getLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n     * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n     * getLastMatchingPosition( value => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     * @returns The position after the last item which matches the `skip` callback test.\n     */\n    getLastMatchingPosition(skip, options = {}) {\n        options.startPosition = this;\n        const treeWalker = new TreeWalker(options);\n        treeWalker.skip(skip);\n        return treeWalker.position;\n    }\n    /**\n     * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n     *\n     * @returns Array with ancestors.\n     */\n    getAncestors() {\n        if (this.parent.is('documentFragment')) {\n            return [this.parent];\n        }\n        else {\n            return this.parent.getAncestors({ includeSelf: true });\n        }\n    }\n    /**\n     * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of both positions.\n     */\n    getCommonAncestor(position) {\n        const ancestorsA = this.getAncestors();\n        const ancestorsB = position.getAncestors();\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Checks whether this position equals given position.\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions are same.\n     */\n    isEqual(otherPosition) {\n        return (this.parent == otherPosition.parent && this.offset == otherPosition.offset);\n    }\n    /**\n     * Checks whether this position is located before given position. When method returns `false` it does not mean that\n     * this position is after give one. Two positions may be located inside separate roots and in that situation this\n     * method will still return `false`.\n     *\n     * @see module:engine/view/position~Position#isAfter\n     * @see module:engine/view/position~Position#compareWith\n     * @param otherPosition Position to compare with.\n     * @returns Returns `true` if this position is before given position.\n     */\n    isBefore(otherPosition) {\n        return this.compareWith(otherPosition) == 'before';\n    }\n    /**\n     * Checks whether this position is located after given position. When method returns `false` it does not mean that\n     * this position is before give one. Two positions may be located inside separate roots and in that situation this\n     * method will still return `false`.\n     *\n     * @see module:engine/view/position~Position#isBefore\n     * @see module:engine/view/position~Position#compareWith\n     * @param otherPosition Position to compare with.\n     * @returns Returns `true` if this position is after given position.\n     */\n    isAfter(otherPosition) {\n        return this.compareWith(otherPosition) == 'after';\n    }\n    /**\n     * Checks whether this position is before, after or in same position that other position. Two positions may be also\n     * different when they are located in separate roots.\n     *\n     * @param otherPosition Position to compare with.\n     */\n    compareWith(otherPosition) {\n        if (this.root !== otherPosition.root) {\n            return 'different';\n        }\n        if (this.isEqual(otherPosition)) {\n            return 'same';\n        }\n        // Get path from root to position's parent element.\n        const thisPath = this.parent.is('node') ? this.parent.getPath() : [];\n        const otherPath = otherPosition.parent.is('node') ? otherPosition.parent.getPath() : [];\n        // Add the positions' offsets to the parents offsets.\n        thisPath.push(this.offset);\n        otherPath.push(otherPosition.offset);\n        // Compare both path arrays to find common ancestor.\n        const result = compareArrays(thisPath, otherPath);\n        switch (result) {\n            case 'prefix':\n                return 'before';\n            case 'extension':\n                return 'after';\n            default:\n                // Cast to number to avoid having 'same' as a type of `result`.\n                return thisPath[result] < otherPath[result] ? 'before' : 'after';\n        }\n    }\n    /**\n     * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n     */\n    getWalker(options = {}) {\n        options.startPosition = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Clones this position.\n     */\n    clone() {\n        return new Position(this.parent, this.offset);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link module:engine/view/position~Position._createBefore},\n     * * {@link module:engine/view/position~Position._createAfter}.\n     *\n     * @internal\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    static _createAt(itemOrPosition, offset) {\n        if (itemOrPosition instanceof Position) {\n            return new this(itemOrPosition.parent, itemOrPosition.offset);\n        }\n        else {\n            const node = itemOrPosition;\n            if (offset == 'end') {\n                offset = node.is('$text') ? node.data.length : node.childCount;\n            }\n            else if (offset == 'before') {\n                return this._createBefore(node);\n            }\n            else if (offset == 'after') {\n                return this._createAfter(node);\n            }\n            else if (offset !== 0 && !offset) {\n                /**\n                 * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n                 * requires the offset to be specified when the first parameter is a view item.\n                 *\n                 * @error view-createpositionat-offset-required\n                 */\n                throw new CKEditorError('view-createpositionat-offset-required', node);\n            }\n            return new Position(node, offset);\n        }\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @internal\n     * @param item View item after which the position should be located.\n     */\n    static _createAfter(item) {\n        // TextProxy is not a instance of Node so we need do handle it in specific way.\n        if (item.is('$textProxy')) {\n            return new Position(item.textNode, item.offsetInText + item.data.length);\n        }\n        if (!item.parent) {\n            /**\n             * You can not make a position after a root.\n             *\n             * @error view-position-after-root\n             * @param {module:engine/view/node~Node} root\n             */\n            throw new CKEditorError('view-position-after-root', item, { root: item });\n        }\n        return new Position(item.parent, item.index + 1);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @internal\n     * @param item View item before which the position should be located.\n     */\n    static _createBefore(item) {\n        // TextProxy is not a instance of Node so we need do handle it in specific way.\n        if (item.is('$textProxy')) {\n            return new Position(item.textNode, item.offsetInText);\n        }\n        if (!item.parent) {\n            /**\n             * You cannot make a position before a root.\n             *\n             * @error view-position-before-root\n             * @param {module:engine/view/node~Node} root\n             */\n            throw new CKEditorError('view-position-before-root', item, { root: item });\n        }\n        return new Position(item.parent, item.index);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nPosition.prototype.is = function (type) {\n    return type === 'position' || type === 'view:position';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/range\n */\nimport TypeCheckable from './typecheckable';\nimport Position from './position';\nimport { default as TreeWalker } from './treewalker';\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range extends TypeCheckable {\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at the `start` position.\n     */\n    constructor(start, end = null) {\n        super();\n        this.start = start.clone();\n        this.end = end ? end.clone() : start.clone();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n     * them together with additional information like length or {@link module:engine/view/position~Position positions},\n     * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n     * `ignoreElementEnd` option\n     * set to `true`.\n     */\n    *[Symbol.iterator]() {\n        yield* new TreeWalker({ boundaries: this, ignoreElementEnd: true });\n    }\n    /**\n     * Returns whether the range is collapsed, that is it start and end positions are equal.\n     */\n    get isCollapsed() {\n        return this.start.isEqual(this.end);\n    }\n    /**\n     * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n     * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n     */\n    get isFlat() {\n        return this.start.parent === this.end.parent;\n    }\n    /**\n     * Range root element.\n     */\n    get root() {\n        return this.start.root;\n    }\n    /**\n     * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n     * and at the end).\n     *\n     * For example:\n     *\n     * ```html\n     * <p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n     * <p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n     * ```\n     *\n     * Note that in the sample above:\n     *\n     * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n     * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n     * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n     *\n     * @returns Enlarged range.\n     */\n    getEnlarged() {\n        let start = this.start.getLastMatchingPosition(enlargeTrimSkip, { direction: 'backward' });\n        let end = this.end.getLastMatchingPosition(enlargeTrimSkip);\n        // Fix positions, in case if they are in Text node.\n        if (start.parent.is('$text') && start.isAtStart) {\n            start = Position._createBefore(start.parent);\n        }\n        if (end.parent.is('$text') && end.isAtEnd) {\n            end = Position._createAfter(end.parent);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n     * and at the end).\n     *\n     * For example:\n     *\n     * ```html\n     * <p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n     * <p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n     * ```\n     *\n     * Note that in the sample above:\n     *\n     * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n     * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n     * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n     *\n     * @returns Shrunk range.\n     */\n    getTrimmed() {\n        let start = this.start.getLastMatchingPosition(enlargeTrimSkip);\n        if (start.isAfter(this.end) || start.isEqual(this.end)) {\n            return new Range(start, start);\n        }\n        let end = this.end.getLastMatchingPosition(enlargeTrimSkip, { direction: 'backward' });\n        const nodeAfterStart = start.nodeAfter;\n        const nodeBeforeEnd = end.nodeBefore;\n        // Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n        if (nodeAfterStart && nodeAfterStart.is('$text')) {\n            start = new Position(nodeAfterStart, 0);\n        }\n        if (nodeBeforeEnd && nodeBeforeEnd.is('$text')) {\n            end = new Position(nodeBeforeEnd, nodeBeforeEnd.data.length);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Two ranges are equal if their start and end positions are equal.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges are equal, `false` otherwise\n     */\n    isEqual(otherRange) {\n        return this == otherRange || (this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end));\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n     *\n     * @param position Position to check.\n     * @returns `true` if given {@link module:engine/view/position~Position position} is contained in this range, `false` otherwise.\n     */\n    containsPosition(position) {\n        return position.isAfter(this.start) && position.isBefore(this.end);\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n     *\n     * @param otherRange Range to check.\n     * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n     * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n     * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n     * @returns `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n     * otherwise.\n     */\n    containsRange(otherRange, loose = false) {\n        if (otherRange.isCollapsed) {\n            loose = false;\n        }\n        const containsStart = this.containsPosition(otherRange.start) || (loose && this.start.isEqual(otherRange.start));\n        const containsEnd = this.containsPosition(otherRange.end) || (loose && this.end.isEqual(otherRange.end));\n        return containsStart && containsEnd;\n    }\n    /**\n     * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n     * {@link module:engine/view/range~Range range}.\n     * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let foo = downcastWriter.createText( 'foo' );\n     * let img = downcastWriter.createContainerElement( 'img' );\n     * let bar = downcastWriter.createText( 'bar' );\n     * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n     *\n     * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n     * let otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n     * \tview.createPositionAt( foo, 1 ),\n     * \tview.createPositionAt( bar, 2 )\n     * );\n     * let transformed = range.getDifference( otherRange );\n     * // transformed array has no ranges because `otherRange` contains `range`\n     *\n     * otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n     *\n     * otherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n     * ```\n     *\n     * @param otherRange Range to differentiate against.\n     * @returns The difference between ranges.\n     */\n    getDifference(otherRange) {\n        const ranges = [];\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect.\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means that we have to\n                // add shrunken range - from the start to the middle of this range.\n                ranges.push(new Range(this.start, otherRange.start));\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // add shrunken range - from the middle of this range to the end.\n                ranges.push(new Range(otherRange.end, this.end));\n            }\n        }\n        else {\n            // Ranges do not intersect, return the original range.\n            ranges.push(this.clone());\n        }\n        return ranges;\n    }\n    /**\n     * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n     * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let foo = downcastWriter.createText( 'foo' );\n     * let img = downcastWriter.createContainerElement( 'img' );\n     * let bar = downcastWriter.createText( 'bar' );\n     * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n     *\n     * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n     * let otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n     * let transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n     *\n     * otherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n     * transformed = range.getIntersection( otherRange ); // null - no common part.\n     * ```\n     *\n     * @param otherRange Range to check for intersection.\n     * @returns A common part of given ranges or `null` if ranges have no common part.\n     */\n    getIntersection(otherRange) {\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect, so a common range will be returned.\n            // At most, it will be same as this range.\n            let commonRangeStart = this.start;\n            let commonRangeEnd = this.end;\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means thaNt we have to\n                // shrink common range to the given range start.\n                commonRangeStart = otherRange.start;\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // shrink common range to the given range end.\n                commonRangeEnd = otherRange.end;\n            }\n            return new Range(commonRangeStart, commonRangeEnd);\n        }\n        // Ranges do not intersect, so they do not have common part.\n        return null;\n    }\n    /**\n     * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    getWalker(options = {}) {\n        options.boundaries = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n     * which is a common ancestor of range's both ends (in which the entire range is contained).\n     */\n    getCommonAncestor() {\n        return this.start.getCommonAncestor(this.end);\n    }\n    /**\n     * Returns an {@link module:engine/view/element~Element Element} contained by the range.\n     * The element will be returned when it is the **only** node within the range and **fully–contained**\n     * at the same time.\n     */\n    getContainedElement() {\n        if (this.isCollapsed) {\n            return null;\n        }\n        let nodeAfterStart = this.start.nodeAfter;\n        let nodeBeforeEnd = this.end.nodeBefore;\n        // Handle the situation when the range position is at the beginning / at the end of a text node.\n        // In such situation `.nodeAfter` and `.nodeBefore` are `null` but the range still might be spanning\n        // over one element.\n        //\n        // <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n        //\n        // These are basically the same range, only the difference is if the range position is at\n        // at the end/at the beginning of a text node or just before/just after the text node.\n        //\n        if (this.start.parent.is('$text') && this.start.isAtEnd && this.start.parent.nextSibling) {\n            nodeAfterStart = this.start.parent.nextSibling;\n        }\n        if (this.end.parent.is('$text') && this.end.isAtStart && this.end.parent.previousSibling) {\n            nodeBeforeEnd = this.end.parent.previousSibling;\n        }\n        if (nodeAfterStart && nodeAfterStart.is('element') && nodeAfterStart === nodeBeforeEnd) {\n            return nodeAfterStart;\n        }\n        return null;\n    }\n    /**\n     * Clones this range.\n     */\n    clone() {\n        return new Range(this.start, this.end);\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n     * them.\n     *\n     * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n     * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n     * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    *getItems(options = {}) {\n        options.boundaries = this;\n        options.ignoreElementEnd = true;\n        const treeWalker = new TreeWalker(options);\n        for (const value of treeWalker) {\n            yield value.item;\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n     * contained in this range.\n     *\n     * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n     * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n     */\n    *getPositions(options = {}) {\n        options.boundaries = this;\n        const treeWalker = new TreeWalker(options);\n        yield treeWalker.position;\n        for (const value of treeWalker) {\n            yield value.nextPosition;\n        }\n    }\n    /**\n     * Checks and returns whether this range intersects with the given range.\n     *\n     * @param otherRange Range to compare with.\n     * @returns True if ranges intersect.\n     */\n    isIntersecting(otherRange) {\n        return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n    }\n    /**\n     * Creates a range from the given parents and offsets.\n     *\n     * @internal\n     * @param startElement Start position parent element.\n     * @param startOffset Start position offset.\n     * @param endElement End position parent element.\n     * @param endOffset End position offset.\n     * @returns Created range.\n     */\n    static _createFromParentsAndOffsets(startElement, startOffset, endElement, endOffset) {\n        return new this(new Position(startElement, startOffset), new Position(endElement, endOffset));\n    }\n    /**\n     * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n     * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n     *\n     * @internal\n     * @param position Beginning of the range.\n     * @param shift How long the range should be.\n     */\n    static _createFromPositionAndShift(position, shift) {\n        const start = position;\n        const end = position.getShiftedBy(shift);\n        return shift > 0 ? new this(start, end) : new this(end, start);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @internal\n     * @param element Element which is a parent for the range.\n     */\n    static _createIn(element) {\n        return this._createFromParentsAndOffsets(element, 0, element, element.childCount);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     *\n     * @internal\n     */\n    static _createOn(item) {\n        const size = item.is('$textProxy') ? item.offsetSize : 1;\n        return this._createFromPositionAndShift(Position._createBefore(item), size);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRange.prototype.is = function (type) {\n    return type === 'range' || type === 'view:range';\n};\n/**\n * Function used by getEnlarged and getTrimmed methods.\n */\nfunction enlargeTrimSkip(value) {\n    if (value.item.is('attributeElement') || value.item.is('uiElement')) {\n        return true;\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/selection\n */\nimport TypeCheckable from './typecheckable';\nimport Range from './range';\nimport Position from './position';\nimport Node from './node';\nimport DocumentSelection from './documentselection';\nimport { CKEditorError, EmitterMixin, count, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates new selection instance.\n     *\n     * **Note**: The selection constructor is available as a factory method:\n     *\n     * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n     * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n     *\n     * ```ts\n     * // Creates empty selection without ranges.\n     * const selection = writer.createSelection();\n     *\n     * // Creates selection at the given range.\n     * const range = writer.createRange( start, end );\n     * const selection = writer.createSelection( range );\n     *\n     * // Creates selection at the given ranges\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * const selection = writer.createSelection( ranges );\n     *\n     * // Creates selection from the other selection.\n     * const otherSelection = writer.createSelection();\n     * const selection = writer.createSelection( otherSelection );\n     *\n     * // Creates selection from the document selection.\n     * const selection = writer.createSelection( editor.editing.view.document.selection );\n     *\n     * // Creates selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * const selection = writer.createSelection( position );\n     *\n     * // Creates collapsed selection at the position of given item and offset.\n     * const paragraph = writer.createContainerElement( 'paragraph' );\n     * const selection = writer.createSelection( paragraph, offset );\n     *\n     * // Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n     * // first child of that element and ends after the last child of that element.\n     * const selection = writer.createSelection( paragraph, 'in' );\n     *\n     * // Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n     * // just after the item.\n     * const selection = writer.createSelection( paragraph, 'on' );\n     * ```\n     *\n     * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Creates backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * const selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @internal\n     */\n    constructor(...args) {\n        super();\n        this._ranges = [];\n        this._lastRangeBackward = false;\n        this._isFake = false;\n        this._fakeSelectionLabel = '';\n        if (args.length) {\n            this.setTo(...args);\n        }\n    }\n    /**\n     * Returns true if selection instance is marked as `fake`.\n     *\n     * @see #setTo\n     */\n    get isFake() {\n        return this._isFake;\n    }\n    /**\n     * Returns fake selection label.\n     *\n     * @see #setTo\n     */\n    get fakeSelectionLabel() {\n        return this._fakeSelectionLabel;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n     * {@link #focus focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n     * It may be a bit unintuitive when there are multiple ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        if (!this._ranges.length) {\n            return null;\n        }\n        const range = this._ranges[this._ranges.length - 1];\n        const anchor = this._lastRangeBackward ? range.end : range.start;\n        return anchor.clone();\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        if (!this._ranges.length) {\n            return null;\n        }\n        const range = this._ranges[this._ranges.length - 1];\n        const focus = this._lastRangeBackward ? range.start : range.end;\n        return focus.clone();\n    }\n    /**\n     * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this.rangeCount === 1 && this._ranges[0].isCollapsed;\n    }\n    /**\n     * Returns number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._ranges.length;\n    }\n    /**\n     * Specifies whether the {@link #focus} precedes {@link #anchor}.\n     */\n    get isBackward() {\n        return !this.isCollapsed && this._lastRangeBackward;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n     * if the selection is not inside an editable element.\n     */\n    get editableElement() {\n        if (this.anchor) {\n            return this.anchor.editableElement;\n        }\n        return null;\n    }\n    /**\n     * Returns an iterable that contains copies of all ranges added to the selection.\n     */\n    *getRanges() {\n        for (const range of this._ranges) {\n            yield range.clone();\n        }\n    }\n    /**\n     * Returns copy of the first range in the selection. First range is the one which\n     * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n     * position of all other ranges (not to confuse with the first range added to the selection).\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstRange() {\n        let first = null;\n        for (const range of this._ranges) {\n            if (!first || range.start.isBefore(first.start)) {\n                first = range;\n            }\n        }\n        return first ? first.clone() : null;\n    }\n    /**\n     * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n     * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n     * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n     */\n    getLastRange() {\n        let last = null;\n        for (const range of this._ranges) {\n            if (!last || range.end.isAfter(last.end)) {\n                last = range;\n            }\n        }\n        return last ? last.clone() : null;\n    }\n    /**\n     * Returns copy of the first position in the selection. First position is the position that\n     * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstPosition() {\n        const firstRange = this.getFirstRange();\n        return firstRange ? firstRange.start.clone() : null;\n    }\n    /**\n     * Returns copy of the last position in the selection. Last position is the position that\n     * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getLastPosition() {\n        const lastRange = this.getLastRange();\n        return lastRange ? lastRange.end.clone() : null;\n    }\n    /**\n     * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n     * same number of ranges and all ranges from one selection equal to a range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        if (this.isFake != otherSelection.isFake) {\n            return false;\n        }\n        if (this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel) {\n            return false;\n        }\n        if (this.rangeCount != otherSelection.rangeCount) {\n            return false;\n        }\n        else if (this.rangeCount === 0) {\n            return true;\n        }\n        if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n            return false;\n        }\n        for (const thisRange of this._ranges) {\n            let found = false;\n            for (const otherRange of otherSelection._ranges) {\n                if (thisRange.isEqual(otherRange)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n     * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n     * equal to any trimmed range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are similar, `false` otherwise.\n     */\n    isSimilar(otherSelection) {\n        if (this.isBackward != otherSelection.isBackward) {\n            return false;\n        }\n        const numOfRangesA = count(this.getRanges());\n        const numOfRangesB = count(otherSelection.getRanges());\n        // If selections have different number of ranges, they cannot be similar.\n        if (numOfRangesA != numOfRangesB) {\n            return false;\n        }\n        // If both selections have no ranges, they are similar.\n        if (numOfRangesA == 0) {\n            return true;\n        }\n        // Check if each range in one selection has a similar range in other selection.\n        for (let rangeA of this.getRanges()) {\n            rangeA = rangeA.getTrimmed();\n            let found = false;\n            for (let rangeB of otherSelection.getRanges()) {\n                rangeB = rangeB.getTrimmed();\n                if (rangeA.start.isEqual(rangeB.start) && rangeA.end.isEqual(rangeB.end)) {\n                    found = true;\n                    break;\n                }\n            }\n            // For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n            if (!found) {\n                return false;\n            }\n        }\n        // There were no ranges that weren't matched. Selections are similar.\n        return true;\n    }\n    /**\n     * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        if (this.rangeCount !== 1) {\n            return null;\n        }\n        return this.getFirstRange().getContainedElement();\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/view/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * selection.setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * selection.setTo( range );\n     *\n     * // Sets selection to the other selection.\n     * const otherSelection = writer.createSelection();\n     * selection.setTo( otherSelection );\n     *\n     * // Sets selection to contents of DocumentSelection.\n     * selection.setTo( editor.editing.view.document.selection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionAt( root, path );\n     * selection.setTo( position );\n     *\n     * // Sets collapsed selection at the position of given item and offset.\n     * selection.setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'on' );\n     *\n     * // Clears selection. Removes all ranges.\n     * selection.setTo( null );\n     * ```\n     *\n     * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Sets selection as backward.\n     * selection.setTo( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * selection.setTo( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @fires change\n     */\n    setTo(...args) {\n        let [selectable, placeOrOffset, options] = args;\n        if (typeof placeOrOffset == 'object') {\n            options = placeOrOffset;\n            placeOrOffset = undefined;\n        }\n        if (selectable === null) {\n            this._setRanges([]);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Selection || selectable instanceof DocumentSelection) {\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n            this._setFakeOptions({ fake: selectable.isFake, label: selectable.fakeSelectionLabel });\n        }\n        else if (selectable instanceof Range) {\n            this._setRanges([selectable], options && options.backward);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Position) {\n            this._setRanges([new Range(selectable)]);\n            this._setFakeOptions(options);\n        }\n        else if (selectable instanceof Node) {\n            const backward = !!options && !!options.backward;\n            let range;\n            if (placeOrOffset === undefined) {\n                /**\n                 * selection.setTo requires the second parameter when the first parameter is a node.\n                 *\n                 * @error view-selection-setto-required-second-parameter\n                 */\n                throw new CKEditorError('view-selection-setto-required-second-parameter', this);\n            }\n            else if (placeOrOffset == 'in') {\n                range = Range._createIn(selectable);\n            }\n            else if (placeOrOffset == 'on') {\n                range = Range._createOn(selectable);\n            }\n            else {\n                range = new Range(Position._createAt(selectable, placeOrOffset));\n            }\n            this._setRanges([range], backward);\n            this._setFakeOptions(options);\n        }\n        else if (isIterable(selectable)) {\n            // We assume that the selectable is an iterable of ranges.\n            // Array.from() is used to prevent setting ranges to the old iterable\n            this._setRanges(selectable, options && options.backward);\n            this._setFakeOptions(options);\n        }\n        else {\n            /**\n             * Cannot set selection to given place.\n             *\n             * @error view-selection-setto-not-selectable\n             */\n            throw new CKEditorError('view-selection-setto-not-selectable', this);\n        }\n        this.fire('change');\n    }\n    /**\n     * Moves {@link #focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @fires change\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    setFocus(itemOrPosition, offset) {\n        if (this.anchor === null) {\n            /**\n             * Cannot set selection focus if there are no ranges in selection.\n             *\n             * @error view-selection-setfocus-no-ranges\n             */\n            throw new CKEditorError('view-selection-setfocus-no-ranges', this);\n        }\n        const newFocus = Position._createAt(itemOrPosition, offset);\n        if (newFocus.compareWith(this.focus) == 'same') {\n            return;\n        }\n        const anchor = this.anchor;\n        this._ranges.pop();\n        if (newFocus.compareWith(anchor) == 'before') {\n            this._addRange(new Range(newFocus, anchor), true);\n        }\n        else {\n            this._addRange(new Range(anchor, newFocus));\n        }\n        this.fire('change');\n    }\n    /**\n     * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n     * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n     * Accepts a flag describing in which way the selection is made.\n     *\n     * @param newRanges Iterable object of ranges to set.\n     * @param isLastBackward Flag describing if last added range was selected forward - from start to end\n     * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n     */\n    _setRanges(newRanges, isLastBackward = false) {\n        // New ranges should be copied to prevent removing them by setting them to `[]` first.\n        // Only applies to situations when selection is set to the same selection or same selection's ranges.\n        newRanges = Array.from(newRanges);\n        this._ranges = [];\n        for (const range of newRanges) {\n            this._addRange(range);\n        }\n        this._lastRangeBackward = !!isLastBackward;\n    }\n    /**\n     * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n     * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n     * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n     * properly handled by screen readers).\n     */\n    _setFakeOptions(options = {}) {\n        this._isFake = !!options.fake;\n        this._fakeSelectionLabel = options.fake ? options.label || '' : '';\n    }\n    /**\n     * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n     * selection instance and you can safely operate on it.\n     *\n     * Accepts a flag describing in which way the selection is made - passed range might be selected from\n     * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n     * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n     * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n     * with ranges already stored in Selection instance.\n     */\n    _addRange(range, isBackward = false) {\n        if (!(range instanceof Range)) {\n            /**\n             * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n             *\n             * @error view-selection-add-range-not-range\n             */\n            throw new CKEditorError('view-selection-add-range-not-range', this);\n        }\n        this._pushRange(range);\n        this._lastRangeBackward = !!isBackward;\n    }\n    /**\n     * Adds range to selection - creates copy of given range so it can be safely used and modified.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n     * with ranges already stored in selection instance.\n     */\n    _pushRange(range) {\n        for (const storedRange of this._ranges) {\n            if (range.isIntersecting(storedRange)) {\n                /**\n                 * Trying to add a range that intersects with another range from selection.\n                 *\n                 * @error view-selection-range-intersects\n                 * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n                 * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n                 */\n                throw new CKEditorError('view-selection-range-intersects', this, { addedRange: range, intersectingRange: storedRange });\n            }\n        }\n        this._ranges.push(new Range(range.start, range.end));\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nSelection.prototype.is = function (type) {\n    return type === 'selection' || type === 'view:selection';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/documentselection\n */\nimport TypeCheckable from './typecheckable';\nimport Selection from './selection';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection extends EmitterMixin(TypeCheckable) {\n    constructor(...args) {\n        super();\n        this._selection = new Selection();\n        // Delegate change event to be fired on DocumentSelection instance.\n        this._selection.delegate('change').to(this);\n        // Set selection data.\n        if (args.length) {\n            this._selection.setTo(...args);\n        }\n    }\n    /**\n     * Returns true if selection instance is marked as `fake`.\n     *\n     * @see #_setTo\n     */\n    get isFake() {\n        return this._selection.isFake;\n    }\n    /**\n     * Returns fake selection label.\n     *\n     * @see #_setTo\n     */\n    get fakeSelectionLabel() {\n        return this._selection.fakeSelectionLabel;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n     * {@link #focus focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n     * It may be a bit unintuitive when there are multiple ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        return this._selection.anchor;\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        return this._selection.focus;\n    }\n    /**\n     * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this._selection.isCollapsed;\n    }\n    /**\n     * Returns number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._selection.rangeCount;\n    }\n    /**\n     * Specifies whether the {@link #focus} precedes {@link #anchor}.\n     */\n    get isBackward() {\n        return this._selection.isBackward;\n    }\n    /**\n     * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n     * if the selection is not inside an editable element.\n     */\n    get editableElement() {\n        return this._selection.editableElement;\n    }\n    /**\n     * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n     *\n     * @internal\n     */\n    get _ranges() {\n        return this._selection._ranges;\n    }\n    /**\n     * Returns an iterable that contains copies of all ranges added to the selection.\n     */\n    *getRanges() {\n        yield* this._selection.getRanges();\n    }\n    /**\n     * Returns copy of the first range in the selection. First range is the one which\n     * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n     * position of all other ranges (not to confuse with the first range added to the selection).\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstRange() {\n        return this._selection.getFirstRange();\n    }\n    /**\n     * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n     * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n     * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n     */\n    getLastRange() {\n        return this._selection.getLastRange();\n    }\n    /**\n     * Returns copy of the first position in the selection. First position is the position that\n     * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getFirstPosition() {\n        return this._selection.getFirstPosition();\n    }\n    /**\n     * Returns copy of the last position in the selection. Last position is the position that\n     * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n     * Returns `null` if no ranges are added to selection.\n     */\n    getLastPosition() {\n        return this._selection.getLastPosition();\n    }\n    /**\n     * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        return this._selection.getSelectedElement();\n    }\n    /**\n     * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n     * same number of ranges and all ranges from one selection equal to a range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        return this._selection.isEqual(otherSelection);\n    }\n    /**\n     * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n     * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n     * equal to any trimmed range from other selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are similar, `false` otherwise.\n     */\n    isSimilar(otherSelection) {\n        return this._selection.isSimilar(otherSelection);\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/view/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * documentSelection._setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n     * documentSelection._setTo( range );\n     *\n     * // Sets selection to the other selection.\n     * const otherSelection = writer.createSelection();\n     * documentSelection._setTo( otherSelection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionAt( root, offset );\n     * documentSelection._setTo( position );\n     *\n     * // Sets collapsed selection at the position of given item and offset.\n     * documentSelection._setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * documentSelection._setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * documentSelection._setTo( paragraph, 'on' );\n     *\n     * // Clears selection. Removes all ranges.\n     * documentSelection._setTo( null );\n     * ```\n     *\n     * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     * ```ts\n     * // Sets selection as backward.\n     * documentSelection._setTo( range, { backward: true } );\n     * ```\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     * ```ts\n     * // Creates fake selection with label.\n     * documentSelection._setTo( range, { fake: true, label: 'foo' } );\n     * ```\n     *\n     * @internal\n     * @fires change\n     */\n    _setTo(...args) {\n        this._selection.setTo(...args);\n    }\n    /**\n     * Moves {@link #focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @internal\n     * @fires change\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    _setFocus(itemOrPosition, offset) {\n        this._selection.setFocus(itemOrPosition, offset);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentSelection.prototype.is = function (type) {\n    return type === 'selection' ||\n        type == 'documentSelection' ||\n        type == 'view:selection' ||\n        type == 'view:documentSelection';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/bubblingeventinfo\n */\nimport { EventInfo } from '@ckeditor/ckeditor5-utils';\n/**\n * The event object passed to bubbling event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class BubblingEventInfo extends EventInfo {\n    /**\n     * @param source The emitter.\n     * @param name The event name.\n     * @param startRange The view range that the bubbling should start from.\n     */\n    constructor(source, name, startRange) {\n        super(source, name);\n        this.startRange = startRange;\n        this._eventPhase = 'none';\n        this._currentTarget = null;\n    }\n    /**\n     * The current event phase.\n     */\n    get eventPhase() {\n        return this._eventPhase;\n    }\n    /**\n     * The current bubbling target.\n     */\n    get currentTarget() {\n        return this._currentTarget;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/bubblingemittermixin\n */\nimport { CKEditorError, EmitterMixin, EventInfo, toArray } from '@ckeditor/ckeditor5-utils';\nimport BubblingEventInfo from './bubblingeventinfo';\nconst contextsSymbol = Symbol('bubbling contexts');\n/**\n * Bubbling emitter mixin for the view document as described in the {@link ~BubblingEmitter} interface.\n *\n * This function creates a class that inherits from the provided `base` and implements `Emitter` interface.\n * The base class must implement {@link module:utils/emittermixin~Emitter} interface.\n *\n * ```ts\n * class BaseClass extends EmitterMixin() {\n * \t// ...\n * }\n *\n * class MyClass extends BubblingEmitterMixin( BaseClass ) {\n * \t// This class derives from `BaseClass` and implements the `BubblingEmitter` interface.\n * }\n * ```\n */\nexport default function BubblingEmitterMixin(base) {\n    class Mixin extends base {\n        fire(eventOrInfo, ...eventArgs) {\n            try {\n                const eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo(this, eventOrInfo);\n                const eventContexts = getBubblingContexts(this);\n                if (!eventContexts.size) {\n                    return;\n                }\n                updateEventInfo(eventInfo, 'capturing', this);\n                // The capture phase of the event.\n                if (fireListenerFor(eventContexts, '$capture', eventInfo, ...eventArgs)) {\n                    return eventInfo.return;\n                }\n                const startRange = eventInfo.startRange || this.selection.getFirstRange();\n                const selectedElement = startRange ? startRange.getContainedElement() : null;\n                const isCustomContext = selectedElement ? Boolean(getCustomContext(eventContexts, selectedElement)) : false;\n                let node = selectedElement || getDeeperRangeParent(startRange);\n                updateEventInfo(eventInfo, 'atTarget', node);\n                // For the not yet bubbling event trigger for $text node if selection can be there and it's not a custom context selected.\n                if (!isCustomContext) {\n                    if (fireListenerFor(eventContexts, '$text', eventInfo, ...eventArgs)) {\n                        return eventInfo.return;\n                    }\n                    updateEventInfo(eventInfo, 'bubbling', node);\n                }\n                while (node) {\n                    // Root node handling.\n                    if (node.is('rootElement')) {\n                        if (fireListenerFor(eventContexts, '$root', eventInfo, ...eventArgs)) {\n                            return eventInfo.return;\n                        }\n                    }\n                    // Element node handling.\n                    else if (node.is('element')) {\n                        if (fireListenerFor(eventContexts, node.name, eventInfo, ...eventArgs)) {\n                            return eventInfo.return;\n                        }\n                    }\n                    // Check custom contexts (i.e., a widget).\n                    if (fireListenerFor(eventContexts, node, eventInfo, ...eventArgs)) {\n                        return eventInfo.return;\n                    }\n                    node = node.parent;\n                    updateEventInfo(eventInfo, 'bubbling', node);\n                }\n                updateEventInfo(eventInfo, 'bubbling', this);\n                // Document context.\n                fireListenerFor(eventContexts, '$document', eventInfo, ...eventArgs);\n                return eventInfo.return;\n            }\n            catch (err) {\n                // @if CK_DEBUG // throw err;\n                /* istanbul ignore next -- @preserve */\n                CKEditorError.rethrowUnexpectedError(err, this);\n            }\n        }\n        _addEventListener(event, callback, options) {\n            const contexts = toArray(options.context || '$document');\n            const eventContexts = getBubblingContexts(this);\n            for (const context of contexts) {\n                let emitter = eventContexts.get(context);\n                if (!emitter) {\n                    emitter = new (EmitterMixin())();\n                    eventContexts.set(context, emitter);\n                }\n                this.listenTo(emitter, event, callback, options);\n            }\n        }\n        _removeEventListener(event, callback) {\n            const eventContexts = getBubblingContexts(this);\n            for (const emitter of eventContexts.values()) {\n                this.stopListening(emitter, event, callback);\n            }\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\n{\n    const mixin = BubblingEmitterMixin(Object);\n    ['fire', '_addEventListener', '_removeEventListener'].forEach(key => {\n        BubblingEmitterMixin[key] = mixin.prototype[key];\n    });\n}\n/**\n * Update the event info bubbling fields.\n *\n * @param eventInfo The event info object to update.\n * @param eventPhase The current event phase.\n * @param currentTarget The current bubbling target.\n */\nfunction updateEventInfo(eventInfo, eventPhase, currentTarget) {\n    if (eventInfo instanceof BubblingEventInfo) {\n        eventInfo._eventPhase = eventPhase;\n        eventInfo._currentTarget = currentTarget;\n    }\n}\n/**\n * Fires the listener for the specified context. Returns `true` if event was stopped.\n *\n * @param eventInfo The `EventInfo` object.\n * @param eventArgs Additional arguments to be passed to the callbacks.\n * @returns True if event stop was called.\n */\nfunction fireListenerFor(eventContexts, context, eventInfo, ...eventArgs) {\n    const emitter = typeof context == 'string' ? eventContexts.get(context) : getCustomContext(eventContexts, context);\n    if (!emitter) {\n        return false;\n    }\n    emitter.fire(eventInfo, ...eventArgs);\n    return eventInfo.stop.called;\n}\n/**\n * Returns an emitter for a specified view node.\n */\nfunction getCustomContext(eventContexts, node) {\n    for (const [context, emitter] of eventContexts) {\n        if (typeof context == 'function' && context(node)) {\n            return emitter;\n        }\n    }\n    return null;\n}\n/**\n * Returns bubbling contexts map for the source (emitter).\n */\nfunction getBubblingContexts(source) {\n    if (!source[contextsSymbol]) {\n        source[contextsSymbol] = new Map();\n    }\n    return source[contextsSymbol];\n}\n/**\n * Returns the deeper parent element for the range.\n */\nfunction getDeeperRangeParent(range) {\n    if (!range) {\n        return null;\n    }\n    const startParent = range.start.parent;\n    const endParent = range.end.parent;\n    const startPath = startParent.getPath();\n    const endPath = endParent.getPath();\n    return startPath.length > endPath.length ? startParent : endParent;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/document\n */\nimport DocumentSelection from './documentselection';\nimport BubblingEmitterMixin from './observer/bubblingemittermixin';\nimport { Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { logDocument } = require( '../dev-utils/utils' );\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n */\nexport default class Document extends BubblingEmitterMixin(ObservableMixin()) {\n    /**\n     * Creates a Document instance.\n     *\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(stylesProcessor) {\n        super();\n        /**\n         * Post-fixer callbacks registered to the view document.\n         */\n        this._postFixers = new Set();\n        this.selection = new DocumentSelection();\n        this.roots = new Collection({ idProperty: 'rootName' });\n        this.stylesProcessor = stylesProcessor;\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isSelecting', false);\n        this.set('isComposing', false);\n    }\n    /**\n     * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n     * specific \"main\" root is returned.\n     *\n     * @param name Name of the root.\n     * @returns The view root element with the specified name or null when there is no root of given name.\n     */\n    getRoot(name = 'main') {\n        return this.roots.get(name);\n    }\n    /**\n     * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n     * to the DOM.\n     *\n     * Post-fixers are executed right after all changes from the outermost change block were applied but\n     * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n     * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n     * not be fixed in the new document tree state.\n     *\n     * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n     * changes executed in a view post-fixer should not break model-view mapping.\n     *\n     * The types of changes which should be safe:\n     *\n     * * adding or removing attribute from elements,\n     * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n     * * {@link module:engine/controller/editingcontroller~EditingController#reconvertItem marking some of the model elements to be\n     * re-converted}.\n     *\n     * Try to avoid changes which touch view structure:\n     *\n     * * you should not add or remove nor wrap or unwrap any view elements,\n     * * you should not change the editor data model in a view post-fixer.\n     *\n     * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n     *\n     * Typically, a post-fixer will look like this:\n     *\n     * ```ts\n     * editor.editing.view.document.registerPostFixer( writer => {\n     * \tif ( checkSomeCondition() ) {\n     * \t\twriter.doSomething();\n     *\n     * \t\t// Let other post-fixers know that something changed.\n     * \t\treturn true;\n     * \t}\n     * } );\n     * ```\n     *\n     * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n     * That is because adding a post-fixer does not execute it.\n     * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n     * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n     * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n     *\n     * If you need to register a callback which is executed when DOM elements are already updated,\n     * use {@link module:engine/view/view~View#event:render render event}.\n     */\n    registerPostFixer(postFixer) {\n        this._postFixers.add(postFixer);\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n    destroy() {\n        this.roots.map(root => root.destroy());\n        this.stopListening();\n    }\n    /**\n     * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n     *\n     * @internal\n     */\n    _callPostFixers(writer) {\n        let wasFixed = false;\n        do {\n            for (const callback of this._postFixers) {\n                wasFixed = callback(writer);\n                if (wasFixed) {\n                    break;\n                }\n            }\n        } while (wasFixed);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n */\nexport default class AttributeElement extends Element {\n    /**\n     * Creates an attribute element.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n     * @see module:engine/view/element~Element\n     * @protected\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        /**\n         * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         *\n         * @internal\n         * @readonly\n         */\n        this._priority = DEFAULT_PRIORITY;\n        /**\n         * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n         * and then two elements are considered similar if, and only if they have the same `_id`.\n         *\n         * @internal\n         * @readonly\n         */\n        this._id = null;\n        /**\n         * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n         * and still exist in the view tree.\n         *\n         * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n         */\n        this._clonesGroup = null;\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     */\n    get priority() {\n        return this._priority;\n    }\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `id`.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n     * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n     *\n     * Note: If this element has been removed from the tree, returned set will not include it.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n     * if this element has no `id`.\n     *\n     * @returns Set containing all the attribute elements\n     * with the same `id` that were added and not removed from the view tree.\n     */\n    getElementsWithSameId() {\n        if (this.id === null) {\n            /**\n             * Cannot get elements with the same id for an attribute element without id.\n             *\n             * @error attribute-element-get-elements-with-same-id-no-id\n             */\n            throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n        }\n        return new Set(this._clonesGroup);\n    }\n    /**\n     * Checks if this element is similar to other element.\n     *\n     * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n     * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n     * different set of children nodes.\n     *\n     * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n     * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n     * considered similar.\n     *\n     * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n     *\n     * * two following similar elements can be merged together into one, longer element,\n     * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n     * decide whether processed element should be unwrapped,\n     * * etc.\n     */\n    isSimilar(otherElement) {\n        // If any element has an `id` set, just compare the ids.\n        if (this.id !== null || otherElement.id !== null) {\n            return this.id === otherElement.id;\n        }\n        return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n    }\n    /**\n     * Clones provided element with priority.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns Clone of this element.\n     */\n    _clone(deep = false) {\n        const cloned = super._clone(deep);\n        // Clone priority too.\n        cloned._priority = this._priority;\n        // And id too.\n        cloned._id = this._id;\n        return cloned;\n    }\n}\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nAttributeElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nfunction getFillerOffset() {\n    // <b>foo</b> does not need filler.\n    if (nonUiChildrenCount(this)) {\n        return null;\n    }\n    let element = this.parent;\n    // <p><b></b></p> needs filler -> <p><b><br></b></p>\n    while (element && element.is('attributeElement')) {\n        if (nonUiChildrenCount(element) > 1) {\n            return null;\n        }\n        element = element.parent;\n    }\n    if (!element || nonUiChildrenCount(element) > 1) {\n        return null;\n    }\n    // Render block filler at the end of element (after all ui elements).\n    return this.childCount;\n}\n/**\n * Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n */\nfunction nonUiChildrenCount(element) {\n    return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/emptyelement\n */\nimport Element from './element';\nimport Node from './node';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n */\nexport default class EmptyElement extends Element {\n    /**\n     * Creates new instance of EmptyElement.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n     * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attributes, children) {\n        super(document, name, attributes, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n     * adding any child nodes to EmptyElement.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n             *\n             * @error view-emptyelement-cannot-add\n             */\n            throw new CKEditorError('view-emptyelement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nEmptyElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'emptyElement' || type === 'view:emptyElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'emptyElement' || type === 'view:emptyElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns `null` because block filler is not needed for EmptyElements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/uielement\n */\nimport Element from './element';\nimport Node from './node';\nimport { CKEditorError, keyCodes } from '@ckeditor/ckeditor5-utils';\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n */\nexport default class UIElement extends Element {\n    /**\n     * Creates new instance of UIElement.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n     * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n     * to UIElement.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n             *\n             * @error view-uielement-cannot-add\n             */\n            throw new CKEditorError('view-uielement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n    /**\n     * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n     * {@link module:engine/view/domconverter~DomConverter}.\n     * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n     *\n     * ```ts\n     * const myUIElement = downcastWriter.createUIElement( 'span' );\n     * myUIElement.render = function( domDocument, domConverter ) {\n     * \tconst domElement = this.toDomElement( domDocument );\n     *\n     * \tdomConverter.setContentOf( domElement, '<b>this is ui element</b>' );\n     *\n     * \treturn domElement;\n     * };\n     * ```\n     *\n     * If changes in your UI element should trigger some editor UI update you should call\n     * the {@link module:ui/editorui/editorui~EditorUI#update `editor.ui.update()`} method\n     * after rendering your UI element.\n     *\n     * @param domConverter Instance of the DomConverter used to optimize the output.\n     */\n    render(domDocument, domConverter) {\n        // Provide basic, default output.\n        return this.toDomElement(domDocument);\n    }\n    /**\n     * Creates DOM element based on this view UIElement.\n     * Note that each time this method is called new DOM element is created.\n     */\n    toDomElement(domDocument) {\n        const domElement = domDocument.createElement(this.name);\n        for (const key of this.getAttributeKeys()) {\n            domElement.setAttribute(key, this.getAttribute(key));\n        }\n        return domElement;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nUIElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'uiElement' || type === 'view:uiElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'uiElement' || type === 'view:uiElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling(view) {\n    view.document.on('arrowKey', (evt, data) => jumpOverUiElement(evt, data, view.domConverter), { priority: 'low' });\n}\n/**\n * Returns `null` because block filler is not needed for UIElements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n/**\n * Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n * causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n * ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\n */\nfunction jumpOverUiElement(evt, data, domConverter) {\n    if (data.keyCode == keyCodes.arrowright) {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        const domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed;\n        // Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n        if (domSelectionCollapsed || data.shiftKey) {\n            const domParent = domSelection.focusNode;\n            const domOffset = domSelection.focusOffset;\n            const viewPosition = domConverter.domPositionToView(domParent, domOffset);\n            // In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n            if (viewPosition === null) {\n                return;\n            }\n            // Skip all following ui elements.\n            let jumpedOverAnyUiElement = false;\n            const nextViewPosition = viewPosition.getLastMatchingPosition(value => {\n                if (value.item.is('uiElement')) {\n                    // Remember that there was at least one ui element.\n                    jumpedOverAnyUiElement = true;\n                }\n                // Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n                if (value.item.is('uiElement') || value.item.is('attributeElement')) {\n                    return true;\n                }\n                // Don't jump over text or don't get out of container element.\n                return false;\n            });\n            // If anything has been skipped, fix position.\n            // This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n            if (jumpedOverAnyUiElement) {\n                const newDomPosition = domConverter.viewPositionToDom(nextViewPosition);\n                if (domSelectionCollapsed) {\n                    // Selection was collapsed, so collapse it at further position.\n                    domSelection.collapse(newDomPosition.parent, newDomPosition.offset);\n                }\n                else {\n                    // Selection was not collapse, so extend it instead of collapsing.\n                    domSelection.extend(newDomPosition.parent, newDomPosition.offset);\n                }\n            }\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element';\nimport Node from './node';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n */\nexport default class RawElement extends Element {\n    /**\n     * Creates a new instance of a raw element.\n     *\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n     * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n     * @internal\n     * @param document The document instance to which this element belongs.\n     * @param name Node name.\n     * @param attrs Collection of attributes.\n     * @param children A list of nodes to be inserted into created element.\n     */\n    constructor(document, name, attrs, children) {\n        super(document, name, attrs, children);\n        // Returns `null` because filler is not needed for raw elements.\n        this.getFillerOffset = getFillerOffset;\n    }\n    /**\n     * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n     * adding any child nodes to a raw element.\n     *\n     * @internal\n     */\n    _insertChild(index, items) {\n        if (items && (items instanceof Node || Array.from(items).length > 0)) {\n            /**\n             * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n             *\n             * @error view-rawelement-cannot-add\n             */\n            throw new CKEditorError('view-rawelement-cannot-add', [this, items]);\n        }\n        return 0;\n    }\n    /**\n     * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.\n     * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element\n     * passed as an argument, leaving the number and shape of the children up to the integrator.\n     *\n     * This method **must be defined** for the raw element to work:\n     *\n     * ```ts\n     * const myRawElement = downcastWriter.createRawElement( 'div' );\n     *\n     * myRawElement.render = function( domElement, domConverter ) {\n     * \tdomConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );\n     * };\n     * ```\n     *\n     * @param domElement The native DOM element representing the raw view element.\n     * @param domConverter Instance of the DomConverter used to optimize the output.\n     */\n    render(domElement, domConverter) { }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRawElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rawElement' || type === 'view:rawElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === this.name || type === 'view:' + this.name ||\n            type === 'element' || type === 'view:element' ||\n            type === 'node' || type === 'view:node';\n    }\n    else {\n        return name === this.name && (type === 'rawElement' || type === 'view:rawElement' ||\n            type === 'element' || type === 'view:element');\n    }\n};\n/**\n * Returns `null` because block filler is not needed for raw elements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/documentfragment\n */\nimport TypeCheckable from './typecheckable';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { EmitterMixin, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates new DocumentFragment instance.\n     *\n     * @internal\n     * @param document The document to which this document fragment belongs.\n     * @param children A list of nodes to be inserted into the created document fragment.\n     */\n    constructor(document, children) {\n        super();\n        /**\n         * Array of child nodes.\n         */\n        this._children = [];\n        /**\n         * Map of custom properties.\n         * Custom properties can be added to document fragment instance.\n         */\n        this._customProperties = new Map();\n        this.document = document;\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over nodes added to this document fragment.\n     */\n    [Symbol.iterator]() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Number of child nodes in this document fragment.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n     */\n    get root() {\n        return this;\n    }\n    /**\n     * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get parent() {\n        return null;\n    }\n    /**\n     * Artificial element name. Returns `undefined`. Added for compatibility reasons.\n     */\n    get name() {\n        return undefined;\n    }\n    /**\n     * Returns the custom property value for the given key.\n     */\n    getCustomProperty(key) {\n        return this._customProperties.get(key);\n    }\n    /**\n     * Returns an iterator which iterates over this document fragment's custom properties.\n     * Iterator provides `[ key, value ]` pairs for each stored property.\n     */\n    *getCustomProperties() {\n        yield* this._customProperties.entries();\n    }\n    /**\n     * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n     * and sets the parent of these nodes to this fragment.\n     *\n     * @internal\n     * @param items Items to be inserted.\n     * @returns Number of appended nodes.\n     */\n    _appendChild(items) {\n        return this._insertChild(this.childCount, items);\n    }\n    /**\n     * Gets child at the given index.\n     *\n     * @param index Index of child.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children[index];\n    }\n    /**\n     * Gets index of the given child node. Returns `-1` if child node is not found.\n     *\n     * @param node Child node.\n     * @returns Index of the child node.\n     */\n    getChildIndex(node) {\n        return this._children.indexOf(node);\n    }\n    /**\n     * Gets child nodes iterator.\n     *\n     * @returns Child nodes iterator.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n     * this fragment.\n     *\n     * @internal\n     * @param index Position where nodes should be inserted.\n     * @param items Items to be inserted.\n     * @returns Number of inserted nodes.\n     */\n    _insertChild(index, items) {\n        this._fireChange('children', this);\n        let count = 0;\n        const nodes = normalize(this.document, items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n            this._children.splice(index, 0, node);\n            index++;\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n     *\n     * @internal\n     * @param index Number of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns The array of removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        this._fireChange('children', this);\n        for (let i = index; i < index + howMany; i++) {\n            this._children[i].parent = null;\n        }\n        return this._children.splice(index, howMany);\n    }\n    /**\n     * Fires `change` event with given type of the change.\n     *\n     * @internal\n     * @param type Type of the change.\n     * @param node Changed node.\n     */\n    _fireChange(type, node) {\n        this.fire('change:' + type, node);\n    }\n    /**\n     * Sets a custom property. They can be used to add special data to elements.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n     * @internal\n     */\n    _setCustomProperty(key, value) {\n        this._customProperties.set(key, value);\n    }\n    /**\n     * Removes the custom property stored under the given key.\n     *\n     * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n     * @internal\n     * @returns Returns true if property was removed.\n     */\n    _removeCustomProperty(key) {\n        return this._customProperties.delete(key);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentFragment.prototype.is = function (type) {\n    return type === 'documentFragment' || type === 'view:documentFragment';\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(document, nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(document, nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(document, node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(document, node.data);\n        }\n        return node;\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/downcastwriter\n */\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport RawElement from './rawelement';\nimport { CKEditorError, isIterable } from '@ckeditor/ckeditor5-utils';\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n    /**\n     * @param document The view document instance.\n     */\n    constructor(document) {\n        /**\n         * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n         * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n         */\n        this._cloneGroups = new Map();\n        /**\n         * The slot factory used by the `elementToStructure` downcast helper.\n         */\n        this._slotFactory = null;\n        this.document = document;\n    }\n    setSelection(...args) {\n        this.document.selection._setTo(...args);\n    }\n    /**\n     * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n     *\n     * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n     * parameters.\n     *\n     * @param Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    setSelectionFocus(itemOrPosition, offset) {\n        this.document.selection._setFocus(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n     *\n     * @param children A list of nodes to be inserted into the created document fragment.\n     * @returns The created document fragment.\n     */\n    createDocumentFragment(children) {\n        return new DocumentFragment(this.document, children);\n    }\n    /**\n     * Creates a new {@link module:engine/view/text~Text text node}.\n     *\n     * ```ts\n     * writer.createText( 'foo' );\n     * ```\n     *\n     * @param data The text's data.\n     * @returns The created text node.\n     */\n    createText(data) {\n        return new Text(this.document, data);\n    }\n    /**\n     * Creates a new {@link module:engine/view/attributeelement~AttributeElement}.\n     *\n     * ```ts\n     * writer.createAttributeElement( 'strong' );\n     * writer.createAttributeElement( 'a', { href: 'foo.bar' } );\n     *\n     * // Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n     * writer.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n     *\n     * // Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n     * writer.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Element's attributes.\n     * @param options Element's options.\n     * @param options.priority Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n     * @param options.id Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createAttributeElement(name, attributes, options = {}) {\n        const attributeElement = new AttributeElement(this.document, name, attributes);\n        if (typeof options.priority === 'number') {\n            attributeElement._priority = options.priority;\n        }\n        if (options.id) {\n            attributeElement._id = options.id;\n        }\n        if (options.renderUnsafeAttributes) {\n            attributeElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return attributeElement;\n    }\n    createContainerElement(name, attributes, childrenOrOptions = {}, options = {}) {\n        let children = null;\n        if (isPlainObject(childrenOrOptions)) {\n            options = childrenOrOptions;\n        }\n        else {\n            children = childrenOrOptions;\n        }\n        const containerElement = new ContainerElement(this.document, name, attributes, children);\n        if (options.renderUnsafeAttributes) {\n            containerElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return containerElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/editableelement~EditableElement}.\n     *\n     * ```ts\n     * writer.createEditableElement( 'div' );\n     * writer.createEditableElement( 'div', { id: 'foo-1234' } );\n     * ```\n     *\n     * Note: The editable element is to be used in the editing pipeline. Usually, together with\n     * {@link module:widget/utils~toWidgetEditable `toWidgetEditable()`}.\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createEditableElement(name, attributes, options = {}) {\n        const editableElement = new EditableElement(this.document, name, attributes);\n        if (options.renderUnsafeAttributes) {\n            editableElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return editableElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/emptyelement~EmptyElement}.\n     *\n     * ```ts\n     * writer.createEmptyElement( 'img' );\n     * writer.createEmptyElement( 'img', { id: 'foo-1234' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns Created element.\n     */\n    createEmptyElement(name, attributes, options = {}) {\n        const emptyElement = new EmptyElement(this.document, name, attributes);\n        if (options.renderUnsafeAttributes) {\n            emptyElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return emptyElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/uielement~UIElement}.\n     *\n     * ```ts\n     * writer.createUIElement( 'span' );\n     * writer.createUIElement( 'span', { id: 'foo-1234' } );\n     * ```\n     *\n     * A custom render function can be provided as the third parameter:\n     *\n     * ```ts\n     * writer.createUIElement( 'span', null, function( domDocument ) {\n     * \tconst domElement = this.toDomElement( domDocument );\n     * \tdomElement.innerHTML = '<b>this is ui element</b>';\n     *\n     * \treturn domElement;\n     * } );\n     * ```\n     *\n     * Unlike {@link #createRawElement raw elements}, UI elements are by no means editor content, for instance,\n     * they are ignored by the editor selection system.\n     *\n     * You should not use UI elements as data containers. Check out {@link #createRawElement} instead.\n     *\n     * @param name The name of the element.\n     * @param attributes Element attributes.\n     * @param renderFunction A custom render function.\n     * @returns The created element.\n     */\n    createUIElement(name, attributes, renderFunction) {\n        const uiElement = new UIElement(this.document, name, attributes);\n        if (renderFunction) {\n            uiElement.render = renderFunction;\n        }\n        return uiElement;\n    }\n    /**\n     * Creates a new {@link module:engine/view/rawelement~RawElement}.\n     *\n     * ```ts\n     * writer.createRawElement( 'span', { id: 'foo-1234' }, function( domElement ) {\n     * \tdomElement.innerHTML = '<b>This is the raw content of the raw element.</b>';\n     * } );\n     * ```\n     *\n     * Raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n     * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n     * in the editor content without, for instance, worrying about compatibility with other editor features.\n     * Raw elements are a perfect tool for integration with external frameworks and data sources.\n     *\n     * Unlike {@link #createUIElement UI elements}, raw elements act like \"real\" editor content (similar to\n     * {@link module:engine/view/containerelement~ContainerElement} or {@link module:engine/view/emptyelement~EmptyElement}),\n     * and they are considered by the editor selection.\n     *\n     * You should not use raw elements to render the UI in the editor content. Check out {@link #createUIElement `#createUIElement()`}\n     * instead.\n     *\n     * @param name The name of the element.\n     * @param attributes Element attributes.\n     * @param renderFunction A custom render function.\n     * @param options Element's options.\n     * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing\n     * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.\n     * @returns The created element.\n     */\n    createRawElement(name, attributes, renderFunction, options = {}) {\n        const rawElement = new RawElement(this.document, name, attributes);\n        if (renderFunction) {\n            rawElement.render = renderFunction;\n        }\n        if (options.renderUnsafeAttributes) {\n            rawElement._unsafeAttributesToRender.push(...options.renderUnsafeAttributes);\n        }\n        return rawElement;\n    }\n    /**\n     * Adds or overwrites the element's attribute with a specified key and value.\n     *\n     * ```ts\n     * writer.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n     * ```\n     *\n     * @param key The attribute key.\n     * @param value The attribute value.\n     */\n    setAttribute(key, value, element) {\n        element._setAttribute(key, value);\n    }\n    /**\n     * Removes attribute from the element.\n     *\n     * ```ts\n     * writer.removeAttribute( 'href', linkElement );\n     * ```\n     *\n     * @param key Attribute key.\n     */\n    removeAttribute(key, element) {\n        element._removeAttribute(key);\n    }\n    /**\n     * Adds specified class to the element.\n     *\n     * ```ts\n     * writer.addClass( 'foo', linkElement );\n     * writer.addClass( [ 'foo', 'bar' ], linkElement );\n     * ```\n     */\n    addClass(className, element) {\n        element._addClass(className);\n    }\n    /**\n     * Removes specified class from the element.\n     *\n     * ```ts\n     * writer.removeClass( 'foo', linkElement );\n     * writer.removeClass( [ 'foo', 'bar' ], linkElement );\n     * ```\n     */\n    removeClass(className, element) {\n        element._removeClass(className);\n    }\n    setStyle(property, value, element) {\n        if (isPlainObject(property) && element === undefined) {\n            value._setStyle(property);\n        }\n        else {\n            element._setStyle(property, value);\n        }\n    }\n    /**\n     * Removes specified style from the element.\n     *\n     * ```ts\n     * writer.removeStyle( 'color', element ); // Removes 'color' style.\n     * writer.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n     * ```\n     *\n     * **Note**: This method can work with normalized style names if\n     * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.\n     * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.\n     */\n    removeStyle(property, element) {\n        element._removeStyle(property);\n    }\n    /**\n     * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n     * so they can be used to add special data to elements.\n     */\n    setCustomProperty(key, value, element) {\n        element._setCustomProperty(key, value);\n    }\n    /**\n     * Removes a custom property stored under the given key.\n     *\n     * @returns Returns true if property was removed.\n     */\n    removeCustomProperty(key, element) {\n        return element._removeCustomProperty(key);\n    }\n    /**\n     * Breaks attribute elements at the provided position or at the boundaries of a provided range. It breaks attribute elements\n     * up to their first ancestor that is a container element.\n     *\n     * In following examples `<p>` is a container, `<b>` and `<u>` are attribute elements:\n     *\n     * ```html\n     * <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n     * <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n     * <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n     * <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n     * ```\n     *\n     * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n     *\n     * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n     * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n     * `breakContainer()` assumes that a given `position` is directly in the container element and breaks that container element.\n     *\n     * Throws the `view-writer-invalid-range-container` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when the {@link module:engine/view/range~Range#start start}\n     * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n     *\n     * Throws the `view-writer-cannot-break-empty-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when trying to break attributes inside an {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n     *\n     * Throws the `view-writer-cannot-break-ui-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * when trying to break attributes inside a {@link module:engine/view/uielement~UIElement UIElement}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n     * @param positionOrRange The position where to break attribute elements.\n     * @returns The new position or range, after breaking the attribute elements.\n     */\n    breakAttributes(positionOrRange) {\n        if (positionOrRange instanceof Position) {\n            return this._breakAttributes(positionOrRange);\n        }\n        else {\n            return this._breakAttributesRange(positionOrRange);\n        }\n    }\n    /**\n     * Breaks a {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position.\n     * The position has to be directly inside the container element and cannot be in the root. It does not break the conrainer view element\n     * if the position is at the beginning or at the end of its parent element.\n     *\n     * ```html\n     * <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n     * <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n     * <p>^foobar</p> -> ^<p>foobar</p>\n     * <p>foobar^</p> -> <p>foobar</p>^\n     * ```\n     *\n     * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,\n     * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n     * `breakContainer()` assumes that the given `position` is directly in the container element and breaks that container element.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n     * @param position The position where to break the element.\n     * @returns The position between broken elements. If an element has not been broken,\n     * the returned position is placed either before or after it.\n     */\n    breakContainer(position) {\n        const element = position.parent;\n        if (!(element.is('containerElement'))) {\n            /**\n             * Trying to break an element which is not a container element.\n             *\n             * @error view-writer-break-non-container-element\n             */\n            throw new CKEditorError('view-writer-break-non-container-element', this.document);\n        }\n        if (!element.parent) {\n            /**\n             * Trying to break root element.\n             *\n             * @error view-writer-break-root\n             */\n            throw new CKEditorError('view-writer-break-root', this.document);\n        }\n        if (position.isAtStart) {\n            return Position._createBefore(element);\n        }\n        else if (!position.isAtEnd) {\n            const newElement = element._clone(false);\n            this.insert(Position._createAfter(element), newElement);\n            const sourceRange = new Range(position, Position._createAt(element, 'end'));\n            const targetPosition = new Position(newElement, 0);\n            this.move(sourceRange, targetPosition);\n        }\n        return Position._createAfter(element);\n    }\n    /**\n     * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n     * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n     *\n     * In following examples `<p>` is a container and `<b>` is an attribute element:\n     *\n     * ```html\n     * <p>foo[]bar</p> -> <p>foo{}bar</p>\n     * <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n     * <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n     * ```\n     *\n     * It will also take care about empty attributes when merging:\n     *\n     * ```html\n     * <p><b>[]</b></p> -> <p>[]</p>\n     * <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n     * ```\n     *\n     * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n     * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n     * @param position Merge position.\n     * @returns Position after merge.\n     */\n    mergeAttributes(position) {\n        const positionOffset = position.offset;\n        const positionParent = position.parent;\n        // When inside text node - nothing to merge.\n        if (positionParent.is('$text')) {\n            return position;\n        }\n        // When inside empty attribute - remove it.\n        if (positionParent.is('attributeElement') && positionParent.childCount === 0) {\n            const parent = positionParent.parent;\n            const offset = positionParent.index;\n            positionParent._remove();\n            this._removeFromClonedElementsGroup(positionParent);\n            return this.mergeAttributes(new Position(parent, offset));\n        }\n        const nodeBefore = positionParent.getChild(positionOffset - 1);\n        const nodeAfter = positionParent.getChild(positionOffset);\n        // Position should be placed between two nodes.\n        if (!nodeBefore || !nodeAfter) {\n            return position;\n        }\n        // When position is between two text nodes.\n        if (nodeBefore.is('$text') && nodeAfter.is('$text')) {\n            return mergeTextNodes(nodeBefore, nodeAfter);\n        }\n        // When position is between two same attribute elements.\n        else if (nodeBefore.is('attributeElement') && nodeAfter.is('attributeElement') && nodeBefore.isSimilar(nodeAfter)) {\n            // Move all children nodes from node placed after selection and remove that node.\n            const count = nodeBefore.childCount;\n            nodeBefore._appendChild(nodeAfter.getChildren());\n            nodeAfter._remove();\n            this._removeFromClonedElementsGroup(nodeAfter);\n            // New position is located inside the first node, before new nodes.\n            // Call this method recursively to merge again if needed.\n            return this.mergeAttributes(new Position(nodeBefore, count));\n        }\n        return position;\n    }\n    /**\n     * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n     * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n     *\n     * ```html\n     * <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n     * <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n     * ```\n     *\n     * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n     * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n     * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n     * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n     *\n     * @see module:engine/view/attributeelement~AttributeElement\n     * @see module:engine/view/containerelement~ContainerElement\n     * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n     * @param position Merge position.\n     * @returns Position after merge.\n     */\n    mergeContainers(position) {\n        const prev = position.nodeBefore;\n        const next = position.nodeAfter;\n        if (!prev || !next || !prev.is('containerElement') || !next.is('containerElement')) {\n            /**\n             * Element before and after given position cannot be merged.\n             *\n             * @error view-writer-merge-containers-invalid-position\n             */\n            throw new CKEditorError('view-writer-merge-containers-invalid-position', this.document);\n        }\n        const lastChild = prev.getChild(prev.childCount - 1);\n        const newPosition = lastChild instanceof Text ? Position._createAt(lastChild, 'end') : Position._createAt(prev, 'end');\n        this.move(Range._createIn(next), Position._createAt(prev, 'end'));\n        this.remove(Range._createOn(next));\n        return newPosition;\n    }\n    /**\n     * Inserts a node or nodes at specified position. Takes care about breaking attributes before insertion\n     * and merging them afterwards.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n     * contains instances that are not {@link module:engine/view/text~Text Texts},\n     * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n     * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n     * {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n     * {@link module:engine/view/rawelement~RawElement RawElements} or\n     * {@link module:engine/view/uielement~UIElement UIElements}.\n     *\n     * @param position Insertion position.\n     * @param nodes Node or nodes to insert.\n     * @returns Range around inserted nodes.\n     */\n    insert(position, nodes) {\n        nodes = isIterable(nodes) ? [...nodes] : [nodes];\n        // Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n        validateNodesToInsert(nodes, this.document);\n        // Group nodes in batches of nodes that require or do not require breaking an AttributeElements.\n        const nodeGroups = nodes.reduce((groups, node) => {\n            const lastGroup = groups[groups.length - 1];\n            // Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n            // can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n            const breakAttributes = !node.is('uiElement');\n            if (!lastGroup || lastGroup.breakAttributes != breakAttributes) {\n                groups.push({\n                    breakAttributes,\n                    nodes: [node]\n                });\n            }\n            else {\n                lastGroup.nodes.push(node);\n            }\n            return groups;\n        }, []);\n        // Insert nodes in batches.\n        let start = null;\n        let end = position;\n        for (const { nodes, breakAttributes } of nodeGroups) {\n            const range = this._insertNodes(end, nodes, breakAttributes);\n            if (!start) {\n                start = range.start;\n            }\n            end = range.end;\n        }\n        // When no nodes were inserted - return collapsed range.\n        if (!start) {\n            return new Range(position);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Removes provided range from the container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param rangeOrItem Range to remove from container\n     * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n     * to a collapsed range showing the new position.\n     * @returns Document fragment containing removed nodes.\n     */\n    remove(rangeOrItem) {\n        const range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn(rangeOrItem);\n        validateRangeContainer(range, this.document);\n        // If range is collapsed - nothing to remove.\n        if (range.isCollapsed) {\n            return new DocumentFragment(this.document);\n        }\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        const count = breakEnd.offset - breakStart.offset;\n        // Remove nodes in range.\n        const removed = parentContainer._removeChildren(breakStart.offset, count);\n        for (const node of removed) {\n            this._removeFromClonedElementsGroup(node);\n        }\n        // Merge after removing.\n        const mergePosition = this.mergeAttributes(breakStart);\n        range.start = mergePosition;\n        range.end = mergePosition.clone();\n        // Return removed nodes.\n        return new DocumentFragment(this.document, removed);\n    }\n    /**\n     * Removes matching elements from given range.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param range Range to clear.\n     * @param element Element to remove.\n     */\n    clear(range, element) {\n        validateRangeContainer(range, this.document);\n        // Create walker on given range.\n        // We walk backward because when we remove element during walk it modifies range end position.\n        const walker = range.getWalker({\n            direction: 'backward',\n            ignoreElementEnd: true\n        });\n        // Let's walk.\n        for (const current of walker) {\n            const item = current.item;\n            let rangeToRemove;\n            // When current item matches to the given element.\n            if (item.is('element') && element.isSimilar(item)) {\n                // Create range on this element.\n                rangeToRemove = Range._createOn(item);\n                // When range starts inside Text or TextProxy element.\n            }\n            else if (!current.nextPosition.isAfter(range.start) && item.is('$textProxy')) {\n                // We need to check if parent of this text matches to given element.\n                const parentElement = item.getAncestors().find(ancestor => {\n                    return ancestor.is('element') && element.isSimilar(ancestor);\n                });\n                // If it is then create range inside this element.\n                if (parentElement) {\n                    rangeToRemove = Range._createIn(parentElement);\n                }\n            }\n            // If we have found element to remove.\n            if (rangeToRemove) {\n                // We need to check if element range stick out of the given range and truncate if it is.\n                if (rangeToRemove.end.isAfter(range.end)) {\n                    rangeToRemove.end = range.end;\n                }\n                if (rangeToRemove.start.isBefore(range.start)) {\n                    rangeToRemove.start = range.start;\n                }\n                // At the end we remove range with found element.\n                this.remove(rangeToRemove);\n            }\n        }\n    }\n    /**\n     * Moves nodes from provided range to target position.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     *\n     * @param sourceRange Range containing nodes to move.\n     * @param targetPosition Position to insert.\n     * @returns Range in target container. Inserted nodes are placed between\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n     */\n    move(sourceRange, targetPosition) {\n        let nodes;\n        if (targetPosition.isAfter(sourceRange.end)) {\n            targetPosition = this._breakAttributes(targetPosition, true);\n            const parent = targetPosition.parent;\n            const countBefore = parent.childCount;\n            sourceRange = this._breakAttributesRange(sourceRange, true);\n            nodes = this.remove(sourceRange);\n            targetPosition.offset += (parent.childCount - countBefore);\n        }\n        else {\n            nodes = this.remove(sourceRange);\n        }\n        return this.insert(targetPosition, nodes);\n    }\n    /**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param range Range to wrap.\n     * @param attribute Attribute element to use as wrapper.\n     * @returns range Range after wrapping, spanning over wrapping attribute element.\n     */\n    wrap(range, attribute) {\n        if (!(attribute instanceof AttributeElement)) {\n            throw new CKEditorError('view-writer-wrap-invalid-attribute', this.document);\n        }\n        validateRangeContainer(range, this.document);\n        if (!range.isCollapsed) {\n            // Non-collapsed range. Wrap it with the attribute element.\n            return this._wrapRange(range, attribute);\n        }\n        else {\n            // Collapsed range. Wrap position.\n            let position = range.start;\n            if (position.parent.is('element') && !_hasNonUiChildren(position.parent)) {\n                position = position.getLastMatchingPosition(value => value.item.is('uiElement'));\n            }\n            position = this._wrapPosition(position, attribute);\n            const viewSelection = this.document.selection;\n            // If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n            if (viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual(range.start)) {\n                this.setSelection(position);\n            }\n            return new Range(position);\n        }\n    }\n    /**\n     * Unwraps nodes within provided range from attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n     * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n     * same parent container.\n     */\n    unwrap(range, attribute) {\n        if (!(attribute instanceof AttributeElement)) {\n            /**\n             * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#unwrap `DowncastWriter#unwrap()`}\n             * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n             *\n             * @error view-writer-unwrap-invalid-attribute\n             */\n            throw new CKEditorError('view-writer-unwrap-invalid-attribute', this.document);\n        }\n        validateRangeContainer(range, this.document);\n        // If range is collapsed - nothing to unwrap.\n        if (range.isCollapsed) {\n            return range;\n        }\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        // Unwrap children located between break points.\n        const newRange = this._unwrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute);\n        // Merge attributes at the both ends and return a new range.\n        const start = this.mergeAttributes(newRange.start);\n        // If start position was merged - move end position back.\n        if (!start.isEqual(newRange.start)) {\n            newRange.end.offset--;\n        }\n        const end = this.mergeAttributes(newRange.end);\n        return new Range(start, end);\n    }\n    /**\n     * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n     * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n     * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n     *\n     * New element has to be created because `Element#tagName` property in DOM is readonly.\n     *\n     * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n     *\n     * @param newName New name for element.\n     * @param viewElement Element to be renamed.\n     * @returns Element created due to rename.\n     */\n    rename(newName, viewElement) {\n        const newElement = new ContainerElement(this.document, newName, viewElement.getAttributes());\n        this.insert(Position._createAfter(viewElement), newElement);\n        this.move(Range._createIn(viewElement), Position._createAt(newElement, 0));\n        this.remove(Range._createOn(viewElement));\n        return newElement;\n    }\n    /**\n     * Cleans up memory by removing obsolete cloned elements group from the writer.\n     *\n     * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n     * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n     * the group will no longer be needed.\n     *\n     * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n     * were removed from the view.\n     *\n     * Keep in mind that group names are equal to the `id` property of the attribute element.\n     *\n     * @param groupName Name of the group to clear.\n     */\n    clearClonedElementsGroup(groupName) {\n        this._cloneGroups.delete(groupName);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param item View item after which the position should be located.\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param item View item before which the position should be located.\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates its own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n    /**\n     * Creates placeholders for child elements of the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n     * `elementToStructure()`} conversion helper.\n     *\n     * ```ts\n     * const viewSlot = conversionApi.writer.createSlot();\n     * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );\n     *\n     * conversionApi.writer.insert( viewPosition, viewSlot );\n     * ```\n     *\n     * It could be filtered down to a specific subset of children (only `<foo>` model elements in this case):\n     *\n     * ```ts\n     * const viewSlot = conversionApi.writer.createSlot( node => node.is( 'element', 'foo' ) );\n     * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );\n     *\n     * conversionApi.writer.insert( viewPosition, viewSlot );\n     * ```\n     *\n     * While providing a filtered slot, make sure to provide slots for all child nodes. A single node can not be downcasted into\n     * multiple slots.\n     *\n     * **Note**: You should not change the order of nodes. View elements should be in the same order as model nodes.\n     *\n     * @param modeOrFilter The filter for child nodes.\n     * @returns The slot element to be placed in to the view structure while processing\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure `elementToStructure()`}.\n     */\n    createSlot(modeOrFilter = 'children') {\n        if (!this._slotFactory) {\n            /**\n             * The `createSlot()` method is only allowed inside the `elementToStructure` downcast helper callback.\n             *\n             * @error view-writer-invalid-create-slot-context\n             */\n            throw new CKEditorError('view-writer-invalid-create-slot-context', this.document);\n        }\n        return this._slotFactory(this, modeOrFilter);\n    }\n    /**\n     * Registers a slot factory.\n     *\n     * @internal\n     * @param slotFactory The slot factory.\n     */\n    _registerSlotFactory(slotFactory) {\n        this._slotFactory = slotFactory;\n    }\n    /**\n     * Clears the registered slot factory.\n     *\n     * @internal\n     */\n    _clearSlotFactory() {\n        this._slotFactory = null;\n    }\n    /**\n     * Inserts a node or nodes at the specified position. Takes care of breaking attributes before insertion\n     * and merging them afterwards if requested by the breakAttributes param.\n     *\n     * @param position Insertion position.\n     * @param nodes Node or nodes to insert.\n     * @param breakAttributes Whether attributes should be broken.\n     * @returns Range around inserted nodes.\n     */\n    _insertNodes(position, nodes, breakAttributes) {\n        let parentElement;\n        // Break attributes on nodes that do exist in the model tree so they can have attributes, other elements\n        // can't have an attribute in model and won't get wrapped with an AttributeElement while down-casted.\n        if (breakAttributes) {\n            parentElement = getParentContainer(position);\n        }\n        else {\n            parentElement = position.parent.is('$text') ? position.parent.parent : position.parent;\n        }\n        if (!parentElement) {\n            /**\n             * Position's parent container cannot be found.\n             *\n             * @error view-writer-invalid-position-container\n             */\n            throw new CKEditorError('view-writer-invalid-position-container', this.document);\n        }\n        let insertionPosition;\n        if (breakAttributes) {\n            insertionPosition = this._breakAttributes(position, true);\n        }\n        else {\n            insertionPosition = position.parent.is('$text') ? breakTextNode(position) : position;\n        }\n        const length = parentElement._insertChild(insertionPosition.offset, nodes);\n        for (const node of nodes) {\n            this._addToClonedElementsGroup(node);\n        }\n        const endPosition = insertionPosition.getShiftedBy(length);\n        const start = this.mergeAttributes(insertionPosition);\n        // If start position was merged - move end position.\n        if (!start.isEqual(insertionPosition)) {\n            endPosition.offset--;\n        }\n        const end = this.mergeAttributes(endPosition);\n        return new Range(start, end);\n    }\n    /**\n     * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n     * `startOffset` and `endOffset` will be wrapped.\n     */\n    _wrapChildren(parent, startOffset, endOffset, wrapElement) {\n        let i = startOffset;\n        const wrapPositions = [];\n        while (i < endOffset) {\n            const child = parent.getChild(i);\n            const isText = child.is('$text');\n            const isAttribute = child.is('attributeElement');\n            //\n            // (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n            //\n            // Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n            // If possible, join elements.\n            //\n            // <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n            //\n            if (isAttribute && this._wrapAttributeElement(wrapElement, child)) {\n                wrapPositions.push(new Position(parent, i));\n            }\n            //\n            // Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n            // `wrapElement` (due to priority).\n            //\n            // <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n            // <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n            else if (isText || !isAttribute || shouldABeOutsideB(wrapElement, child)) {\n                // Clone attribute.\n                const newAttribute = wrapElement._clone();\n                // Wrap current node with new attribute.\n                child._remove();\n                newAttribute._appendChild(child);\n                parent._insertChild(i, newAttribute);\n                this._addToClonedElementsGroup(newAttribute);\n                wrapPositions.push(new Position(parent, i));\n            }\n            //\n            // If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n            //\n            // <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n            //\n            else /* if ( isAttribute ) */ {\n                this._wrapChildren(child, 0, child.childCount, wrapElement);\n            }\n            i++;\n        }\n        // Merge at each wrap.\n        let offsetChange = 0;\n        for (const position of wrapPositions) {\n            position.offset -= offsetChange;\n            // Do not merge with elements outside selected children.\n            if (position.offset == startOffset) {\n                continue;\n            }\n            const newPosition = this.mergeAttributes(position);\n            // If nodes were merged - other merge offsets will change.\n            if (!newPosition.isEqual(position)) {\n                offsetChange++;\n                endOffset--;\n            }\n        }\n        return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n    }\n    /**\n     * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n     * `startOffset` and `endOffset` will be unwrapped.\n     */\n    _unwrapChildren(parent, startOffset, endOffset, unwrapElement) {\n        let i = startOffset;\n        const unwrapPositions = [];\n        // Iterate over each element between provided offsets inside parent.\n        // We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n        // so it could get messy. It is safer to it manually in this case.\n        while (i < endOffset) {\n            const child = parent.getChild(i);\n            // Skip all text nodes. There should be no container element's here either.\n            if (!child.is('attributeElement')) {\n                i++;\n                continue;\n            }\n            //\n            // (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n            //\n            // If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n            //\n            // <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n            //\n            if (child.isSimilar(unwrapElement)) {\n                const unwrapped = child.getChildren();\n                const count = child.childCount;\n                // Replace wrapper element with its children\n                child._remove();\n                parent._insertChild(i, unwrapped);\n                this._removeFromClonedElementsGroup(child);\n                // Save start and end position of moved items.\n                unwrapPositions.push(new Position(parent, i), new Position(parent, i + count));\n                // Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n                i += count;\n                endOffset += count - 1;\n                continue;\n            }\n            //\n            // If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n            // Partial unwrapping will happen only if the elements have the same name.\n            //\n            // <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n            // <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n            //\n            if (this._unwrapAttributeElement(unwrapElement, child)) {\n                unwrapPositions.push(new Position(parent, i), new Position(parent, i + 1));\n                i++;\n                continue;\n            }\n            //\n            // If other nested attribute is found, look through it's children for elements to unwrap.\n            //\n            // <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n            //\n            this._unwrapChildren(child, 0, child.childCount, unwrapElement);\n            i++;\n        }\n        // Merge at each unwrap.\n        let offsetChange = 0;\n        for (const position of unwrapPositions) {\n            position.offset -= offsetChange;\n            // Do not merge with elements outside selected children.\n            if (position.offset == startOffset || position.offset == endOffset) {\n                continue;\n            }\n            const newPosition = this.mergeAttributes(position);\n            // If nodes were merged - other merge offsets will change.\n            if (!newPosition.isEqual(position)) {\n                offsetChange++;\n                endOffset--;\n            }\n        }\n        return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n    }\n    /**\n     * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n     * This method will also merge newly added attribute element with its siblings whenever possible.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * @returns New range after wrapping, spanning over wrapping attribute element.\n     */\n    _wrapRange(range, attribute) {\n        // Break attributes at range start and end.\n        const { start: breakStart, end: breakEnd } = this._breakAttributesRange(range, true);\n        const parentContainer = breakStart.parent;\n        // Wrap all children with attribute.\n        const newRange = this._wrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute);\n        // Merge attributes at the both ends and return a new range.\n        const start = this.mergeAttributes(newRange.start);\n        // If start position was merged - move end position back.\n        if (!start.isEqual(newRange.start)) {\n            newRange.end.offset--;\n        }\n        const end = this.mergeAttributes(newRange.end);\n        return new Range(start, end);\n    }\n    /**\n     * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n     * This method will also merge newly added attribute element with its siblings whenever possible.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * @returns New position after wrapping.\n     */\n    _wrapPosition(position, attribute) {\n        // Return same position when trying to wrap with attribute similar to position parent.\n        if (attribute.isSimilar(position.parent)) {\n            return movePositionToTextNode(position.clone());\n        }\n        // When position is inside text node - break it and place new position between two text nodes.\n        if (position.parent.is('$text')) {\n            position = breakTextNode(position);\n        }\n        // Create fake element that will represent position, and will not be merged with other attributes.\n        const fakeElement = this.createAttributeElement('_wrapPosition-fake-element');\n        fakeElement._priority = Number.POSITIVE_INFINITY;\n        fakeElement.isSimilar = () => false;\n        // Insert fake element in position location.\n        position.parent._insertChild(position.offset, fakeElement);\n        // Range around inserted fake attribute element.\n        const wrapRange = new Range(position, position.getShiftedBy(1));\n        // Wrap fake element with attribute (it will also merge if possible).\n        this.wrap(wrapRange, attribute);\n        // Remove fake element and place new position there.\n        const newPosition = new Position(fakeElement.parent, fakeElement.index);\n        fakeElement._remove();\n        // If position is placed between text nodes - merge them and return position inside.\n        const nodeBefore = newPosition.nodeBefore;\n        const nodeAfter = newPosition.nodeAfter;\n        if (nodeBefore instanceof Text && nodeAfter instanceof Text) {\n            return mergeTextNodes(nodeBefore, nodeAfter);\n        }\n        // If position is next to text node - move position inside.\n        return movePositionToTextNode(newPosition);\n    }\n    /**\n     * Wraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n     * merging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n     * element to element being wrapped.\n     *\n     * @param wrapper Wrapper AttributeElement.\n     * @param toWrap AttributeElement to wrap using wrapper element.\n     * @returns Returns `true` if elements are merged.\n     */\n    _wrapAttributeElement(wrapper, toWrap) {\n        if (!canBeJoined(wrapper, toWrap)) {\n            return false;\n        }\n        // Can't merge if name or priority differs.\n        if (wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority) {\n            return false;\n        }\n        // Check if attributes can be merged.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // If some attributes are different we cannot wrap.\n            if (toWrap.hasAttribute(key) && toWrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n                return false;\n            }\n        }\n        // Check if styles can be merged.\n        for (const key of wrapper.getStyleNames()) {\n            if (toWrap.hasStyle(key) && toWrap.getStyle(key) !== wrapper.getStyle(key)) {\n                return false;\n            }\n        }\n        // Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // Move only these attributes that are not present - other are similar.\n            if (!toWrap.hasAttribute(key)) {\n                this.setAttribute(key, wrapper.getAttribute(key), toWrap);\n            }\n        }\n        for (const key of wrapper.getStyleNames()) {\n            if (!toWrap.hasStyle(key)) {\n                this.setStyle(key, wrapper.getStyle(key), toWrap);\n            }\n        }\n        for (const key of wrapper.getClassNames()) {\n            if (!toWrap.hasClass(key)) {\n                this.addClass(key, toWrap);\n            }\n        }\n        return true;\n    }\n    /**\n     * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n     * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n     * inside element being unwrapped.\n     *\n     * @param wrapper Wrapper AttributeElement.\n     * @param toUnwrap AttributeElement to unwrap using wrapper element.\n     * @returns Returns `true` if elements are unwrapped.\n     **/\n    _unwrapAttributeElement(wrapper, toUnwrap) {\n        if (!canBeJoined(wrapper, toUnwrap)) {\n            return false;\n        }\n        // Can't unwrap if name or priority differs.\n        if (wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority) {\n            return false;\n        }\n        // Check if AttributeElement has all wrapper attributes.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            // If some attributes are missing or different we cannot unwrap.\n            if (!toUnwrap.hasAttribute(key) || toUnwrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n                return false;\n            }\n        }\n        // Check if AttributeElement has all wrapper classes.\n        if (!toUnwrap.hasClass(...wrapper.getClassNames())) {\n            return false;\n        }\n        // Check if AttributeElement has all wrapper styles.\n        for (const key of wrapper.getStyleNames()) {\n            // If some styles are missing or different we cannot unwrap.\n            if (!toUnwrap.hasStyle(key) || toUnwrap.getStyle(key) !== wrapper.getStyle(key)) {\n                return false;\n            }\n        }\n        // Remove all wrapper's attributes from unwrapped element.\n        for (const key of wrapper.getAttributeKeys()) {\n            // Classes and styles should be checked separately.\n            if (key === 'class' || key === 'style') {\n                continue;\n            }\n            this.removeAttribute(key, toUnwrap);\n        }\n        // Remove all wrapper's classes from unwrapped element.\n        this.removeClass(Array.from(wrapper.getClassNames()), toUnwrap);\n        // Remove all wrapper's styles from unwrapped element.\n        this.removeStyle(Array.from(wrapper.getStyleNames()), toUnwrap);\n        return true;\n    }\n    /**\n     * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n     *\n     * @param range Range which `start` and `end` positions will be used to break attributes.\n     * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.\n     * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n     * @returns New range with located at break positions.\n     */\n    _breakAttributesRange(range, forceSplitText = false) {\n        const rangeStart = range.start;\n        const rangeEnd = range.end;\n        validateRangeContainer(range, this.document);\n        // Break at the collapsed position. Return new collapsed range.\n        if (range.isCollapsed) {\n            const position = this._breakAttributes(range.start, forceSplitText);\n            return new Range(position, position);\n        }\n        const breakEnd = this._breakAttributes(rangeEnd, forceSplitText);\n        const count = breakEnd.parent.childCount;\n        const breakStart = this._breakAttributes(rangeStart, forceSplitText);\n        // Calculate new break end offset.\n        breakEnd.offset += breakEnd.parent.childCount - count;\n        return new Range(breakStart, breakEnd);\n    }\n    /**\n     * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n     * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n     * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n     *\n     * @param position Position where to break attributes.\n     * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.\n     * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n     * @returns New position after breaking the attributes.\n     */\n    _breakAttributes(position, forceSplitText = false) {\n        const positionOffset = position.offset;\n        const positionParent = position.parent;\n        // If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n        if (position.parent.is('emptyElement')) {\n            /**\n             * Cannot break an `EmptyElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-empty-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-empty-element', this.document);\n        }\n        // If position is placed inside UIElement - throw an exception as we cannot break inside.\n        if (position.parent.is('uiElement')) {\n            /**\n             * Cannot break a `UIElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-ui-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-ui-element', this.document);\n        }\n        // If position is placed inside RawElement - throw an exception as we cannot break inside.\n        if (position.parent.is('rawElement')) {\n            /**\n             * Cannot break a `RawElement` instance.\n             *\n             * This error is thrown if\n             * {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes `DowncastWriter#breakAttributes()`}\n             * was executed in an incorrect position.\n             *\n             * @error view-writer-cannot-break-raw-element\n             */\n            throw new CKEditorError('view-writer-cannot-break-raw-element', this.document);\n        }\n        // There are no attributes to break and text nodes breaking is not forced.\n        if (!forceSplitText && positionParent.is('$text') && isContainerOrFragment(positionParent.parent)) {\n            return position.clone();\n        }\n        // Position's parent is container, so no attributes to break.\n        if (isContainerOrFragment(positionParent)) {\n            return position.clone();\n        }\n        // Break text and start again in new position.\n        if (positionParent.is('$text')) {\n            return this._breakAttributes(breakTextNode(position), forceSplitText);\n        }\n        const length = positionParent.childCount;\n        // <p>foo<b><u>bar{}</u></b></p>\n        // <p>foo<b><u>bar</u>[]</b></p>\n        // <p>foo<b><u>bar</u></b>[]</p>\n        if (positionOffset == length) {\n            const newPosition = new Position(positionParent.parent, positionParent.index + 1);\n            return this._breakAttributes(newPosition, forceSplitText);\n        }\n        else {\n            // <p>foo<b><u>{}bar</u></b></p>\n            // <p>foo<b>[]<u>bar</u></b></p>\n            // <p>foo{}<b><u>bar</u></b></p>\n            if (positionOffset === 0) {\n                const newPosition = new Position(positionParent.parent, positionParent.index);\n                return this._breakAttributes(newPosition, forceSplitText);\n            }\n            // <p>foo<b><u>b{}ar</u></b></p>\n            // <p>foo<b><u>b[]ar</u></b></p>\n            // <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n            // <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n            else {\n                const offsetAfter = positionParent.index + 1;\n                // Break element.\n                const clonedNode = positionParent._clone();\n                // Insert cloned node to position's parent node.\n                positionParent.parent._insertChild(offsetAfter, clonedNode);\n                this._addToClonedElementsGroup(clonedNode);\n                // Get nodes to move.\n                const count = positionParent.childCount - positionOffset;\n                const nodesToMove = positionParent._removeChildren(positionOffset, count);\n                // Move nodes to cloned node.\n                clonedNode._appendChild(nodesToMove);\n                // Create new position to work on.\n                const newPosition = new Position(positionParent.parent, offsetAfter);\n                return this._breakAttributes(newPosition, forceSplitText);\n            }\n        }\n    }\n    /**\n     * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n     * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n     * from the group now keep a reference to the given attribute element.\n     *\n     * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n     *\n     * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     *\n     * @param element Attribute element to save.\n     */\n    _addToClonedElementsGroup(element) {\n        // Add only if the element is in document tree.\n        if (!element.root.is('rootElement')) {\n            return;\n        }\n        // Traverse the element's children recursively to find other attribute elements that also might got inserted.\n        // The loop is at the beginning so we can make fast returns later in the code.\n        if (element.is('element')) {\n            for (const child of element.getChildren()) {\n                this._addToClonedElementsGroup(child);\n            }\n        }\n        const id = element.id;\n        if (!id) {\n            return;\n        }\n        let group = this._cloneGroups.get(id);\n        if (!group) {\n            group = new Set();\n            this._cloneGroups.set(id, group);\n        }\n        group.add(element);\n        element._clonesGroup = group;\n    }\n    /**\n     * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n     * from its clones group.\n     *\n     * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n     * This allows to reference the whole group even if the element was already removed from the tree.\n     *\n     * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     *\n     * @param element Attribute element to remove.\n     */\n    _removeFromClonedElementsGroup(element) {\n        // Traverse the element's children recursively to find other attribute elements that also got removed.\n        // The loop is at the beginning so we can make fast returns later in the code.\n        if (element.is('element')) {\n            for (const child of element.getChildren()) {\n                this._removeFromClonedElementsGroup(child);\n            }\n        }\n        const id = element.id;\n        if (!id) {\n            return;\n        }\n        const group = this._cloneGroups.get(id);\n        if (!group) {\n            return;\n        }\n        group.delete(element);\n        // Not removing group from element on purpose!\n        // If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n    }\n}\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren(parent) {\n    return Array.from(parent.getChildren()).some(child => !child.is('uiElement'));\n}\n/**\n * The `attribute` passed to {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`}\n * must be an instance of {@link module:engine/view/attributeelement~AttributeElement `AttributeElement`}.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n/**\n * Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n * Position's parent node is checked as first, then next parents are checked.\n * Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n *\n * @param position Position used as a start point to locate parent container.\n * @returns Parent container element or `undefined` if container is not found.\n */\nfunction getParentContainer(position) {\n    let parent = position.parent;\n    while (!isContainerOrFragment(parent)) {\n        if (!parent) {\n            return undefined;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\n/**\n * Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n * can be wrapped outside second element. It is done by comparing elements'\n * {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n * {@link module:engine/view/element~Element#getIdentity identities} are compared.\n */\nfunction shouldABeOutsideB(a, b) {\n    if (a.priority < b.priority) {\n        return true;\n    }\n    else if (a.priority > b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use identities.\n    return a.getIdentity() < b.getIdentity();\n}\n/**\n * Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n * specified position.\n *\n * ```html\n * <p>foo[]</p>  ->  <p>foo{}</p>\n * <p>[]foo</p>  ->  <p>{}foo</p>\n * ```\n *\n * @returns Position located inside text node or same position if there is no text nodes\n * before or after position location.\n */\nfunction movePositionToTextNode(position) {\n    const nodeBefore = position.nodeBefore;\n    if (nodeBefore && nodeBefore.is('$text')) {\n        return new Position(nodeBefore, nodeBefore.data.length);\n    }\n    const nodeAfter = position.nodeAfter;\n    if (nodeAfter && nodeAfter.is('$text')) {\n        return new Position(nodeAfter, 0);\n    }\n    return position;\n}\n/**\n * Breaks text node into two text nodes when possible.\n *\n * ```html\n * <p>foo{}bar</p> -> <p>foo[]bar</p>\n * <p>{}foobar</p> -> <p>[]foobar</p>\n * <p>foobar{}</p> -> <p>foobar[]</p>\n * ```\n *\n * @param position Position that need to be placed inside text node.\n * @returns New position after breaking text node.\n */\nfunction breakTextNode(position) {\n    if (position.offset == position.parent.data.length) {\n        return new Position(position.parent.parent, position.parent.index + 1);\n    }\n    if (position.offset === 0) {\n        return new Position(position.parent.parent, position.parent.index);\n    }\n    // Get part of the text that need to be moved.\n    const textToMove = position.parent.data.slice(position.offset);\n    // Leave rest of the text in position's parent.\n    position.parent._data = position.parent.data.slice(0, position.offset);\n    // Insert new text node after position's parent text node.\n    position.parent.parent._insertChild(position.parent.index + 1, new Text(position.root.document, textToMove));\n    // Return new position between two newly created text nodes.\n    return new Position(position.parent.parent, position.parent.index + 1);\n}\n/**\n * Merges two text nodes into first node. Removes second node and returns merge position.\n *\n * @param t1 First text node to merge. Data from second text node will be moved at the end of this text node.\n * @param t2 Second text node to merge. This node will be removed after merging.\n * @returns Position after merging text nodes.\n */\nfunction mergeTextNodes(t1, t2) {\n    // Merge text data into first text node and remove second one.\n    const nodeBeforeLength = t1.data.length;\n    t1._data += t2.data;\n    t2._remove();\n    return new Position(t1, nodeBeforeLength);\n}\nconst validNodesToInsert = [Text, AttributeElement, ContainerElement, EmptyElement, RawElement, UIElement];\n/**\n * Checks if provided nodes are valid to insert.\n *\n * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n * contains instances that are not supported ones (see error description for valid ones.\n */\nfunction validateNodesToInsert(nodes, errorContext) {\n    for (const node of nodes) {\n        if (!validNodesToInsert.some((validNode => node instanceof validNode))) { // eslint-disable-line no-use-before-define\n            /**\n             * One of the nodes to be inserted is of an invalid type.\n             *\n             * Nodes to be inserted with {@link module:engine/view/downcastwriter~DowncastWriter#insert `DowncastWriter#insert()`} should be\n             * of the following types:\n             *\n             * * {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n             * * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n             * * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n             * * {@link module:engine/view/uielement~UIElement UIElement},\n             * * {@link module:engine/view/rawelement~RawElement RawElement},\n             * * {@link module:engine/view/text~Text Text}.\n             *\n             * @error view-writer-insert-invalid-node-type\n             */\n            throw new CKEditorError('view-writer-insert-invalid-node-type', errorContext);\n        }\n        if (!node.is('$text')) {\n            validateNodesToInsert(node.getChildren(), errorContext);\n        }\n    }\n}\n/**\n * Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n *\n * @returns Returns `true` if node is instance of ContainerElement or DocumentFragment.\n */\nfunction isContainerOrFragment(node) {\n    return node && (node.is('containerElement') || node.is('documentFragment'));\n}\n/**\n * Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n * inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n */\nfunction validateRangeContainer(range, errorContext) {\n    const startContainer = getParentContainer(range.start);\n    const endContainer = getParentContainer(range.end);\n    if (!startContainer || !endContainer || startContainer !== endContainer) {\n        /**\n         * The container of the given range is invalid.\n         *\n         * This may happen if {@link module:engine/view/range~Range#start range start} and\n         * {@link module:engine/view/range~Range#end range end} positions are not placed inside the same container element or\n         * a parent container for these positions cannot be found.\n         *\n         * Methods like {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#remove()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#clean()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#wrap()`},\n         * {@link module:engine/view/downcastwriter~DowncastWriter#wrap `DowncastWriter#unwrap()`} need to be called\n         * on a range that has its start and end positions located in the same container element. Both positions can be\n         * nested within other elements (e.g. an attribute element) but the closest container ancestor must be the same.\n         *\n         * @error view-writer-invalid-range-container\n         */\n        throw new CKEditorError('view-writer-invalid-range-container', errorContext);\n    }\n}\n/**\n * Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n * they do not have ids specified.\n */\nfunction canBeJoined(a, b) {\n    return a.id === null && b.id === null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { keyCodes, isText } from '@ckeditor/ckeditor5-utils';\n/**\n * Set of utilities related to handling block and inline fillers.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space} or\n * {@link module:engine/view/filler~MARKED_NBSP_FILLER marked non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n/**\n * Non-breaking space filler creator. This function creates the `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~MARKED_NBSP_FILLER\n * @see module:engine/view/filler~BR_FILLER\n */\nexport const NBSP_FILLER = (domDocument) => domDocument.createTextNode('\\u00A0');\n/**\n * Marked non-breaking space filler creator. This function creates the `<span data-cke-filler=\"true\">&nbsp;</span>` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @see module:engine/view/filler~BR_FILLER\n */\nexport const MARKED_NBSP_FILLER = (domDocument) => {\n    const span = domDocument.createElement('span');\n    span.dataset.ckeFiller = 'true';\n    span.innerText = '\\u00A0';\n    return span;\n};\n/**\n * `<br>` filler creator. This function creates the `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @see module:engine/view/filler~MARKED_NBSP_FILLER\n */\nexport const BR_FILLER = (domDocument) => {\n    const fillerBr = domDocument.createElement('br');\n    fillerBr.dataset.ckeFiller = 'true';\n    return fillerBr;\n};\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n/**\n * Inline filler which is a sequence of the word joiners.\n */\nexport const INLINE_FILLER = '\\u2060'.repeat(INLINE_FILLER_LENGTH);\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n * ```ts\n * startsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n * startsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n * startsWithFiller( document.createTextNode( 'foo' ) ); // false\n * startsWithFiller( document.createElement( 'p' ) ); // false\n * ```\n *\n * @param domNode DOM node.\n * @returns True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller(domNode) {\n    return isText(domNode) && (domNode.data.substr(0, INLINE_FILLER_LENGTH) === INLINE_FILLER);\n}\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n * ```ts\n * isInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n * isInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n * ```\n *\n * @param domText DOM text node.\n * @returns True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller(domText) {\n    return domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller(domText);\n}\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n * ```ts\n * getDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n * getDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n * ```\n *\n * @param domText DOM text node, possible with inline filler.\n * @returns Data without filler.\n */\nexport function getDataWithoutFiller(domText) {\n    if (startsWithFiller(domText)) {\n        return domText.data.slice(INLINE_FILLER_LENGTH);\n    }\n    else {\n        return domText.data;\n    }\n}\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling(view) {\n    view.document.on('arrowKey', jumpOverInlineFiller, { priority: 'low' });\n}\n/**\n * Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\n */\nfunction jumpOverInlineFiller(evt, data) {\n    if (data.keyCode == keyCodes.arrowleft) {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        if (domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed) {\n            const domParent = domSelection.getRangeAt(0).startContainer;\n            const domOffset = domSelection.getRangeAt(0).startOffset;\n            if (startsWithFiller(domParent) && domOffset <= INLINE_FILLER_LENGTH) {\n                domSelection.collapse(domParent, 0);\n            }\n        }\n    }\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./renderer.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/renderer\n */\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller } from './filler';\nimport { CKEditorError, ObservableMixin, diff, env, fastDiff, insertAt, isComment, isNode, isText, remove } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/renderer.css';\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer extends ObservableMixin() {\n    /**\n     * Creates a renderer instance.\n     *\n     * @param domConverter Converter instance.\n     * @param selection View selection.\n     */\n    constructor(domConverter, selection) {\n        super();\n        /**\n         * Set of DOM Documents instances.\n         */\n        this.domDocuments = new Set();\n        /**\n         * Set of nodes which attributes changed and may need to be rendered.\n         */\n        this.markedAttributes = new Set();\n        /**\n         * Set of elements which child lists changed and may need to be rendered.\n         */\n        this.markedChildren = new Set();\n        /**\n         * Set of text nodes which text data changed and may need to be rendered.\n         */\n        this.markedTexts = new Set();\n        /**\n         * The text node in which the inline filler was rendered.\n         */\n        this._inlineFiller = null;\n        /**\n         * DOM element containing fake selection.\n         */\n        this._fakeSelectionContainer = null;\n        this.domConverter = domConverter;\n        this.selection = selection;\n        this.set('isFocused', false);\n        this.set('isSelecting', false);\n        // Rendering the selection and inline filler manipulation should be postponed in (non-Android) Blink until the user finishes\n        // creating the selection in DOM to avoid accidental selection collapsing\n        // (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        // When the user stops selecting, all pending changes should be rendered ASAP, though.\n        if (env.isBlink && !env.isAndroid) {\n            this.on('change:isSelecting', () => {\n                if (!this.isSelecting) {\n                    this.render();\n                }\n            });\n        }\n        this.set('isComposing', false);\n        this.on('change:isComposing', () => {\n            if (!this.isComposing) {\n                this.render();\n            }\n        });\n    }\n    /**\n     * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n     *\n     * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n     *\n     * @see #markedAttributes\n     * @see #markedChildren\n     * @see #markedTexts\n     *\n     * @param type Type of the change.\n     * @param node ViewNode to be marked.\n     */\n    markToSync(type, node) {\n        if (type === 'text') {\n            if (this.domConverter.mapViewToDom(node.parent)) {\n                this.markedTexts.add(node);\n            }\n        }\n        else {\n            // If the node has no DOM element it is not rendered yet,\n            // its children/attributes do not need to be marked to be sync.\n            if (!this.domConverter.mapViewToDom(node)) {\n                return;\n            }\n            if (type === 'attributes') {\n                this.markedAttributes.add(node);\n            }\n            else if (type === 'children') {\n                this.markedChildren.add(node);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const unreachable = type;\n                /**\n                 * Unknown type passed to Renderer.markToSync.\n                 *\n                 * @error view-renderer-unknown-type\n                 */\n                throw new CKEditorError('view-renderer-unknown-type', this);\n            }\n        }\n    }\n    /**\n     * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n     * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n     *\n     * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n     * so it does as little as it is needed to update the DOM.\n     *\n     * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n     * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n     * removed as long as the selection is in the text node which needed it at first.\n     */\n    render() {\n        // Ignore rendering while in the composition mode. Composition events are not cancellable and browser will modify the DOM tree.\n        // All marked elements, attributes, etc. will wait until next render after the composition ends.\n        // On Android composition events are immediately applied to the model, so we don't need to skip rendering,\n        // and we should not do it because the difference between view and DOM could lead to position mapping problems.\n        if (this.isComposing && !env.isAndroid) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Rendering aborted while isComposing',\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Rendering',\n        // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        let inlineFillerPosition = null;\n        const isInlineFillerRenderingPossible = env.isBlink && !env.isAndroid ? !this.isSelecting : true;\n        // Refresh mappings.\n        for (const element of this.markedChildren) {\n            this._updateChildrenMappings(element);\n        }\n        // Don't manipulate inline fillers while the selection is being made in (non-Android) Blink to prevent accidental\n        // DOM selection collapsing\n        // (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        if (isInlineFillerRenderingPossible) {\n            // There was inline filler rendered in the DOM but it's not\n            // at the selection position any more, so we can remove it\n            // (cause even if it's needed, it must be placed in another location).\n            if (this._inlineFiller && !this._isSelectionInInlineFiller()) {\n                this._removeInlineFiller();\n            }\n            // If we've got the filler, let's try to guess its position in the view.\n            if (this._inlineFiller) {\n                inlineFillerPosition = this._getInlineFillerPosition();\n            }\n            // Otherwise, if it's needed, create it at the selection position.\n            else if (this._needsInlineFillerAtSelection()) {\n                inlineFillerPosition = this.selection.getFirstPosition();\n                // Do not use `markToSync` so it will be added even if the parent is already added.\n                this.markedChildren.add(inlineFillerPosition.parent);\n            }\n        }\n        // Make sure the inline filler has any parent, so it can be mapped to view position by DomConverter.\n        else if (this._inlineFiller && this._inlineFiller.parentNode) {\n            // While the user is making selection, preserve the inline filler at its original position.\n            inlineFillerPosition = this.domConverter.domPositionToView(this._inlineFiller);\n            // While down-casting the document selection attributes, all existing empty\n            // attribute elements (for selection position) are removed from the view and DOM,\n            // so make sure that we were able to map filler position.\n            // https://github.com/ckeditor/ckeditor5/issues/12026\n            if (inlineFillerPosition && inlineFillerPosition.parent.is('$text')) {\n                // The inline filler position is expected to be before the text node.\n                inlineFillerPosition = ViewPosition._createBefore(inlineFillerPosition.parent);\n            }\n        }\n        for (const element of this.markedAttributes) {\n            this._updateAttrs(element);\n        }\n        for (const element of this.markedChildren) {\n            this._updateChildren(element, { inlineFillerPosition });\n        }\n        for (const node of this.markedTexts) {\n            if (!this.markedChildren.has(node.parent) && this.domConverter.mapViewToDom(node.parent)) {\n                this._updateText(node, { inlineFillerPosition });\n            }\n        }\n        // * Check whether the inline filler is required and where it really is in the DOM.\n        //   At this point in most cases it will be in the DOM, but there are exceptions.\n        //   For example, if the inline filler was deep in the created DOM structure, it will not be created.\n        //   Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n        //   it will not be present. Fix those and similar scenarios.\n        // * Don't manipulate inline fillers while the selection is being made in (non-Android) Blink to prevent accidental\n        //   DOM selection collapsing\n        //   (https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723).\n        if (isInlineFillerRenderingPossible) {\n            if (inlineFillerPosition) {\n                const fillerDomPosition = this.domConverter.viewPositionToDom(inlineFillerPosition);\n                const domDocument = fillerDomPosition.parent.ownerDocument;\n                if (!startsWithFiller(fillerDomPosition.parent)) {\n                    // Filler has not been created at filler position. Create it now.\n                    this._inlineFiller = addInlineFiller(domDocument, fillerDomPosition.parent, fillerDomPosition.offset);\n                }\n                else {\n                    // Filler has been found, save it.\n                    this._inlineFiller = fillerDomPosition.parent;\n                }\n            }\n            else {\n                // There is no filler needed.\n                this._inlineFiller = null;\n            }\n        }\n        // First focus the new editing host, then update the selection.\n        // Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n        this._updateFocus();\n        this._updateSelection();\n        this.markedTexts.clear();\n        this.markedAttributes.clear();\n        this.markedChildren.clear();\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Updates mappings of view element's children.\n     *\n     * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n     * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n     * Thanks to that these elements do not need to be re-rendered completely.\n     *\n     * @param viewElement The view element whose children mappings will be updated.\n     */\n    _updateChildrenMappings(viewElement) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n            return;\n        }\n        // Removing nodes from the DOM as we iterate can cause `actualDomChildren`\n        // (which is a live-updating `NodeList`) to get out of sync with the\n        // indices that we compute as we iterate over `actions`.\n        // This would produce incorrect element mappings.\n        //\n        // Converting live list to an array to make the list static.\n        const actualDomChildren = Array.from(this.domConverter.mapViewToDom(viewElement).childNodes);\n        const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, { withChildren: false }));\n        const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n        const actions = this._findUpdateActions(diff, actualDomChildren, expectedDomChildren, areSimilarElements);\n        if (actions.indexOf('update') !== -1) {\n            const counter = { equal: 0, insert: 0, delete: 0 };\n            for (const action of actions) {\n                if (action === 'update') {\n                    const insertIndex = counter.equal + counter.insert;\n                    const deleteIndex = counter.equal + counter.delete;\n                    const viewChild = viewElement.getChild(insertIndex);\n                    // UIElement and RawElement are special cases. Their children are not stored in a view (#799)\n                    // so we cannot use them with replacing flow (since they use view children during rendering\n                    // which will always result in rendering empty elements).\n                    if (viewChild && !(viewChild.is('uiElement') || viewChild.is('rawElement'))) {\n                        this._updateElementMappings(viewChild, actualDomChildren[deleteIndex]);\n                    }\n                    remove(expectedDomChildren[insertIndex]);\n                    counter.equal++;\n                }\n                else {\n                    counter[action]++;\n                }\n            }\n        }\n    }\n    /**\n     * Updates mappings of a given view element.\n     *\n     * @param viewElement The view element whose mappings will be updated.\n     * @param domElement The DOM element representing the given view element.\n     */\n    _updateElementMappings(viewElement, domElement) {\n        // Remap 'DomConverter' bindings.\n        this.domConverter.unbindDomElement(domElement);\n        this.domConverter.bindElements(domElement, viewElement);\n        // View element may have children which needs to be updated, but are not marked, mark them to update.\n        this.markedChildren.add(viewElement);\n        // Because we replace new view element mapping with the existing one, the corresponding DOM element\n        // will not be rerendered. The new view element may have different attributes than the previous one.\n        // Since its corresponding DOM element will not be rerendered, new attributes will not be added\n        // to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n        // detailed case study.\n        // Also there are cases where replaced element is removed from the view structure and then has\n        // its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n        // and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n        // To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n        this.markedAttributes.add(viewElement);\n    }\n    /**\n     * Gets the position of the inline filler based on the current selection.\n     * Here, we assume that we know that the filler is needed and\n     * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n     * it is somewhere at the selection position.\n     *\n     * Note: The filler position cannot be restored based on the filler's DOM text node, because\n     * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n     * bindings are only dependable after rendering.\n     */\n    _getInlineFillerPosition() {\n        const firstPos = this.selection.getFirstPosition();\n        if (firstPos.parent.is('$text')) {\n            return ViewPosition._createBefore(firstPos.parent);\n        }\n        else {\n            return firstPos;\n        }\n    }\n    /**\n     * Returns `true` if the selection has not left the inline filler's text node.\n     * If it is `true`, it means that the filler had been added for a reason and the selection did not\n     * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n     *\n     * @returns `true` if the inline filler and selection are in the same place.\n     */\n    _isSelectionInInlineFiller() {\n        if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n            return false;\n        }\n        // Note, we can't check if selection's position equals position of the\n        // this._inlineFiller node, because of #663. We may not be able to calculate\n        // the filler's position in the view at this stage.\n        // Instead, we check it the other way – whether selection is anchored in\n        // that text node or next to it.\n        // Possible options are:\n        // \"FILLER{}\"\n        // \"FILLERadded-text{}\"\n        const selectionPosition = this.selection.getFirstPosition();\n        const position = this.domConverter.viewPositionToDom(selectionPosition);\n        if (position && isText(position.parent) && startsWithFiller(position.parent)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Removes the inline filler.\n     */\n    _removeInlineFiller() {\n        const domFillerNode = this._inlineFiller;\n        // Something weird happened and the stored node doesn't contain the filler's text.\n        if (!startsWithFiller(domFillerNode)) {\n            /**\n             * The inline filler node was lost. Most likely, something overwrote the filler text node\n             * in the DOM.\n             *\n             * @error view-renderer-filler-was-lost\n             */\n            throw new CKEditorError('view-renderer-filler-was-lost', this);\n        }\n        if (isInlineFiller(domFillerNode)) {\n            domFillerNode.remove();\n        }\n        else {\n            domFillerNode.data = domFillerNode.data.substr(INLINE_FILLER_LENGTH);\n        }\n        this._inlineFiller = null;\n    }\n    /**\n     * Checks if the inline {@link module:engine/view/filler filler} should be added.\n     *\n     * @returns `true` if the inline filler should be added.\n     */\n    _needsInlineFillerAtSelection() {\n        if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n            return false;\n        }\n        const selectionPosition = this.selection.getFirstPosition();\n        const selectionParent = selectionPosition.parent;\n        const selectionOffset = selectionPosition.offset;\n        // If there is no DOM root we do not care about fillers.\n        if (!this.domConverter.mapViewToDom(selectionParent.root)) {\n            return false;\n        }\n        if (!(selectionParent.is('element'))) {\n            return false;\n        }\n        // Prevent adding inline filler inside elements with contenteditable=false.\n        // https://github.com/ckeditor/ckeditor5-engine/issues/1170\n        if (!isEditable(selectionParent)) {\n            return false;\n        }\n        // We have block filler, we do not need inline one.\n        if (selectionOffset === selectionParent.getFillerOffset()) {\n            return false;\n        }\n        const nodeBefore = selectionPosition.nodeBefore;\n        const nodeAfter = selectionPosition.nodeAfter;\n        if (nodeBefore instanceof ViewText || nodeAfter instanceof ViewText) {\n            return false;\n        }\n        // Do not use inline filler while typing outside inline elements on Android.\n        // The deleteContentBackward would remove part of the inline filler instead of removing last letter in a link.\n        if (env.isAndroid && (nodeBefore || nodeAfter)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Checks if text needs to be updated and possibly updates it.\n     *\n     * @param viewText View text to update.\n     * @param options.inlineFillerPosition The position where the inline filler should be rendered.\n     */\n    _updateText(viewText, options) {\n        const domText = this.domConverter.findCorrespondingDomText(viewText);\n        const newDomText = this.domConverter.viewToDom(viewText);\n        let expectedText = newDomText.data;\n        const filler = options.inlineFillerPosition;\n        if (filler && filler.parent == viewText.parent && filler.offset == viewText.index) {\n            expectedText = INLINE_FILLER + expectedText;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Update text',\n        // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        updateTextNode(domText, expectedText);\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Checks if attribute list needs to be updated and possibly updates it.\n     *\n     * @param viewElement The view element to update.\n     */\n    _updateAttrs(viewElement) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n            // in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n            // replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n            // in 'this._updateChildrenMappings()' so it will be processed separately.\n            return;\n        }\n        const domAttrKeys = Array.from(domElement.attributes).map(attr => attr.name);\n        const viewAttrKeys = viewElement.getAttributeKeys();\n        // Add or overwrite attributes.\n        for (const key of viewAttrKeys) {\n            this.domConverter.setDomElementAttribute(domElement, key, viewElement.getAttribute(key), viewElement);\n        }\n        // Remove from DOM attributes which do not exists in the view.\n        for (const key of domAttrKeys) {\n            // All other attributes not present in the DOM should be removed.\n            if (!viewElement.hasAttribute(key)) {\n                this.domConverter.removeDomElementAttribute(domElement, key);\n            }\n        }\n    }\n    /**\n     * Checks if elements child list needs to be updated and possibly updates it.\n     *\n     * Note that on Android, to reduce the risk of composition breaks, it tries to update data of an existing\n     * child text nodes instead of replacing them completely.\n     *\n     * @param viewElement View element to update.\n     * @param options.inlineFillerPosition The position where the inline filler should be rendered.\n     */\n    _updateChildren(viewElement, options) {\n        const domElement = this.domConverter.mapViewToDom(viewElement);\n        if (!domElement) {\n            // If there is no `domElement` it means that it was already removed from DOM.\n            // There is no need to process it. It will be processed when re-inserted.\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Update children',\n        // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        // IME on Android inserts a new text node while typing after a link\n        // instead of updating an existing text node that follows the link.\n        // We must normalize those text nodes so the diff won't get confused.\n        // https://github.com/ckeditor/ckeditor5/issues/12574.\n        if (env.isAndroid) {\n            let previousDomNode = null;\n            for (const domNode of Array.from(domElement.childNodes)) {\n                if (previousDomNode && isText(previousDomNode) && isText(domNode)) {\n                    domElement.normalize();\n                    break;\n                }\n                previousDomNode = domNode;\n            }\n        }\n        const inlineFillerPosition = options.inlineFillerPosition;\n        const actualDomChildren = domElement.childNodes;\n        const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, { bind: true }));\n        // Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n        // during diffing so text nodes could be compared correctly and also during rendering to maintain\n        // proper order and indexes while updating the DOM.\n        if (inlineFillerPosition && inlineFillerPosition.parent === viewElement) {\n            addInlineFiller(domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset);\n        }\n        const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n        // We need to make sure that we update the existing text node and not replace it with another one.\n        // The composition and different \"language\" browser extensions are fragile to text node being completely replaced.\n        const actions = this._findUpdateActions(diff, actualDomChildren, expectedDomChildren, areTextNodes);\n        let i = 0;\n        const nodesToUnbind = new Set();\n        // Handle deletions first.\n        // This is to prevent a situation where an element that already exists in `actualDomChildren` is inserted at a different\n        // index in `actualDomChildren`. Since `actualDomChildren` is a `NodeList`, this works like move, not like an insert,\n        // and it disrupts the whole algorithm. See https://github.com/ckeditor/ckeditor5/issues/6367.\n        //\n        // It doesn't matter in what order we remove or add nodes, as long as we remove and add correct nodes at correct indexes.\n        for (const action of actions) {\n            if (action === 'delete') {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Remove node',\n                // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', '', actualDomChildren[ i ]\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                nodesToUnbind.add(actualDomChildren[i]);\n                remove(actualDomChildren[i]);\n            }\n            else if (action === 'equal' || action === 'update') {\n                i++;\n            }\n        }\n        i = 0;\n        for (const action of actions) {\n            if (action === 'insert') {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Insert node',\n                // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', '', expectedDomChildren[ i ]\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                insertAt(domElement, i, expectedDomChildren[i]);\n                i++;\n            }\n            // Update the existing text node data. Note that replace action is generated only for Android for now.\n            else if (action === 'update') {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Renderer]%c Update text node',\n                // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                updateTextNode(actualDomChildren[i], expectedDomChildren[i].data);\n                i++;\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n                // @if CK_DEBUG_TYPING // }\n            }\n            else if (action === 'equal') {\n                // Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n                // Do it here (not in the loop above) because only after insertions the `i` index is correct.\n                this._markDescendantTextToSync(this.domConverter.domToView(expectedDomChildren[i]));\n                i++;\n            }\n        }\n        // Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n        // comparison with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n        // it was moved to DOM tree out of the removed node.\n        for (const node of nodesToUnbind) {\n            if (!node.parentNode) {\n                this.domConverter.unbindDomElement(node);\n            }\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n    /**\n     * Shorthand for diffing two arrays or node lists of DOM nodes.\n     *\n     * @param actualDomChildren Actual DOM children\n     * @param expectedDomChildren Expected DOM children.\n     * @returns The list of actions based on the {@link module:utils/diff~diff} function.\n     */\n    _diffNodeLists(actualDomChildren, expectedDomChildren) {\n        actualDomChildren = filterOutFakeSelectionContainer(actualDomChildren, this._fakeSelectionContainer);\n        return diff(actualDomChildren, expectedDomChildren, sameNodes.bind(null, this.domConverter));\n    }\n    /**\n     * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n     * within one `insert`/`delete` action group, for example:\n     *\n     * ```\n     * Actual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n     * Expected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n     * Input actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n     * Output actions:\t[ insert, replace, delete, equal, replace ]\n     * ```\n     *\n     * @param actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n     * @param actualDom Actual DOM children\n     * @param expectedDom Expected DOM children.\n     * @param comparator A comparator function that should return `true` if the given node should be reused\n     * (either by the update of a text node data or an element children list for similar elements).\n     * @returns Actions array modified with the `update` actions.\n     */\n    _findUpdateActions(actions, actualDom, expectedDom, comparator) {\n        // If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n        if (actions.indexOf('insert') === -1 || actions.indexOf('delete') === -1) {\n            return actions;\n        }\n        let newActions = [];\n        let actualSlice = [];\n        let expectedSlice = [];\n        const counter = { equal: 0, insert: 0, delete: 0 };\n        for (const action of actions) {\n            if (action === 'insert') {\n                expectedSlice.push(expectedDom[counter.equal + counter.insert]);\n            }\n            else if (action === 'delete') {\n                actualSlice.push(actualDom[counter.equal + counter.delete]);\n            }\n            else { // equal\n                newActions = newActions.concat(diff(actualSlice, expectedSlice, comparator)\n                    .map(action => action === 'equal' ? 'update' : action));\n                newActions.push('equal');\n                // Reset stored elements on 'equal'.\n                actualSlice = [];\n                expectedSlice = [];\n            }\n            counter[action]++;\n        }\n        return newActions.concat(diff(actualSlice, expectedSlice, comparator)\n            .map(action => action === 'equal' ? 'update' : action));\n    }\n    /**\n     * Marks text nodes to be synchronized.\n     *\n     * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n     *\n     * @param viewNode View node to sync.\n     */\n    _markDescendantTextToSync(viewNode) {\n        if (!viewNode) {\n            return;\n        }\n        if (viewNode.is('$text')) {\n            this.markedTexts.add(viewNode);\n        }\n        else if (viewNode.is('element')) {\n            for (const child of viewNode.getChildren()) {\n                this._markDescendantTextToSync(child);\n            }\n        }\n    }\n    /**\n     * Checks if the selection needs to be updated and possibly updates it.\n     */\n    _updateSelection() {\n        // Block updating DOM selection in (non-Android) Blink while the user is selecting to prevent accidental selection collapsing.\n        // Note: Structural changes in DOM must trigger selection rendering, though. Nodes the selection was anchored\n        // to, may disappear in DOM which would break the selection (e.g. in real-time collaboration scenarios).\n        // https://github.com/ckeditor/ckeditor5/issues/10562, https://github.com/ckeditor/ckeditor5/issues/10723\n        if (env.isBlink && !env.isAndroid && this.isSelecting && !this.markedChildren.size) {\n            return;\n        }\n        // If there is no selection - remove DOM and fake selections.\n        if (this.selection.rangeCount === 0) {\n            this._removeDomSelection();\n            this._removeFakeSelection();\n            return;\n        }\n        const domRoot = this.domConverter.mapViewToDom(this.selection.editableElement);\n        // Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n        if (!this.isFocused || !domRoot) {\n            return;\n        }\n        // Render fake selection - create the fake selection container (if needed) and move DOM selection to it.\n        if (this.selection.isFake) {\n            this._updateFakeSelection(domRoot);\n        }\n        // There was a fake selection so remove it and update the DOM selection.\n        // This is especially important on Android because otherwise IME will try to compose over the fake selection container.\n        else if (this._fakeSelectionContainer && this._fakeSelectionContainer.isConnected) {\n            this._removeFakeSelection();\n            this._updateDomSelection(domRoot);\n        }\n        // Update the DOM selection in case of a plain selection change (no fake selection is involved).\n        // On non-Android the whole rendering is disabled in composition mode (including DOM selection update),\n        // but updating DOM selection should be also disabled on Android if in the middle of the composition\n        // (to not interrupt it).\n        else if (!(this.isComposing && env.isAndroid)) {\n            this._updateDomSelection(domRoot);\n        }\n    }\n    /**\n     * Updates the fake selection.\n     *\n     * @param domRoot A valid DOM root where the fake selection container should be added.\n     */\n    _updateFakeSelection(domRoot) {\n        const domDocument = domRoot.ownerDocument;\n        if (!this._fakeSelectionContainer) {\n            this._fakeSelectionContainer = createFakeSelectionContainer(domDocument);\n        }\n        const container = this._fakeSelectionContainer;\n        // Bind fake selection container with the current selection *position*.\n        this.domConverter.bindFakeSelection(container, this.selection);\n        if (!this._fakeSelectionNeedsUpdate(domRoot)) {\n            return;\n        }\n        if (!container.parentElement || container.parentElement != domRoot) {\n            domRoot.appendChild(container);\n        }\n        container.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n        const domSelection = domDocument.getSelection();\n        const domRange = domDocument.createRange();\n        domSelection.removeAllRanges();\n        domRange.selectNodeContents(container);\n        domSelection.addRange(domRange);\n    }\n    /**\n     * Updates the DOM selection.\n     *\n     * @param domRoot A valid DOM root where the DOM selection should be rendered.\n     */\n    _updateDomSelection(domRoot) {\n        const domSelection = domRoot.ownerDocument.defaultView.getSelection();\n        // Let's check whether DOM selection needs updating at all.\n        if (!this._domSelectionNeedsUpdate(domSelection)) {\n            return;\n        }\n        // Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n        // set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n        // and focus of view selection.\n        // Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n        // selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n        const anchor = this.domConverter.viewPositionToDom(this.selection.anchor);\n        const focus = this.domConverter.viewPositionToDom(this.selection.focus);\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Update DOM selection:',\n        // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', '', anchor, focus\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        domSelection.collapse(anchor.parent, anchor.offset);\n        domSelection.extend(focus.parent, focus.offset);\n        // Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n        if (env.isGecko) {\n            fixGeckoSelectionAfterBr(focus, domSelection);\n        }\n    }\n    /**\n     * Checks whether a given DOM selection needs to be updated.\n     *\n     * @param domSelection The DOM selection to check.\n     */\n    _domSelectionNeedsUpdate(domSelection) {\n        if (!this.domConverter.isDomSelectionCorrect(domSelection)) {\n            // Current DOM selection is in incorrect position. We need to update it.\n            return true;\n        }\n        const oldViewSelection = domSelection && this.domConverter.domSelectionToView(domSelection);\n        if (oldViewSelection && this.selection.isEqual(oldViewSelection)) {\n            return false;\n        }\n        // If selection is not collapsed, it does not need to be updated if it is similar.\n        if (!this.selection.isCollapsed && this.selection.isSimilar(oldViewSelection)) {\n            // Selection did not changed and is correct, do not update.\n            return false;\n        }\n        // Selections are not similar.\n        return true;\n    }\n    /**\n     * Checks whether the fake selection needs to be updated.\n     *\n     * @param domRoot A valid DOM root where a new fake selection container should be added.\n     */\n    _fakeSelectionNeedsUpdate(domRoot) {\n        const container = this._fakeSelectionContainer;\n        const domSelection = domRoot.ownerDocument.getSelection();\n        // Fake selection needs to be updated if there's no fake selection container, or the container currently sits\n        // in a different root.\n        if (!container || container.parentElement !== domRoot) {\n            return true;\n        }\n        // Make sure that the selection actually is within the fake selection.\n        if (domSelection.anchorNode !== container && !container.contains(domSelection.anchorNode)) {\n            return true;\n        }\n        return container.textContent !== this.selection.fakeSelectionLabel;\n    }\n    /**\n     * Removes the DOM selection.\n     */\n    _removeDomSelection() {\n        for (const doc of this.domDocuments) {\n            const domSelection = doc.getSelection();\n            if (domSelection.rangeCount) {\n                const activeDomElement = doc.activeElement;\n                const viewElement = this.domConverter.mapDomToView(activeDomElement);\n                if (activeDomElement && viewElement) {\n                    domSelection.removeAllRanges();\n                }\n            }\n        }\n    }\n    /**\n     * Removes the fake selection.\n     */\n    _removeFakeSelection() {\n        const container = this._fakeSelectionContainer;\n        if (container) {\n            container.remove();\n        }\n    }\n    /**\n     * Checks if focus needs to be updated and possibly updates it.\n     */\n    _updateFocus() {\n        if (this.isFocused) {\n            const editable = this.selection.editableElement;\n            if (editable) {\n                this.domConverter.focus(editable);\n            }\n        }\n    }\n}\n/**\n * Checks if provided element is editable.\n */\nfunction isEditable(element) {\n    if (element.getAttribute('contenteditable') == 'false') {\n        return false;\n    }\n    const parent = element.findAncestor(element => element.hasAttribute('contenteditable'));\n    return !parent || parent.getAttribute('contenteditable') == 'true';\n}\n/**\n * Adds inline filler at a given position.\n *\n * The position can be given as an array of DOM nodes and an offset in that array,\n * or a DOM parent element and an offset in that element.\n *\n * @returns The DOM text node that contains an inline filler.\n */\nfunction addInlineFiller(domDocument, domParentOrArray, offset) {\n    const childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n    const nodeAfterFiller = childNodes[offset];\n    if (isText(nodeAfterFiller)) {\n        nodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n        return nodeAfterFiller;\n    }\n    else {\n        const fillerNode = domDocument.createTextNode(INLINE_FILLER);\n        if (Array.isArray(domParentOrArray)) {\n            childNodes.splice(offset, 0, fillerNode);\n        }\n        else {\n            insertAt(domParentOrArray, offset, fillerNode);\n        }\n        return fillerNode;\n    }\n}\n/**\n * Whether two DOM nodes should be considered as similar.\n * Nodes are considered similar if they have the same tag name.\n */\nfunction areSimilarElements(node1, node2) {\n    return isNode(node1) && isNode(node2) &&\n        !isText(node1) && !isText(node2) &&\n        !isComment(node1) && !isComment(node2) &&\n        node1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n/**\n * Whether two DOM nodes are text nodes.\n */\nfunction areTextNodes(node1, node2) {\n    return isNode(node1) && isNode(node2) &&\n        isText(node1) && isText(node2);\n}\n/**\n * Whether two dom nodes should be considered as the same.\n * Two nodes which are considered the same are:\n *\n * * Text nodes with the same text.\n * * Element nodes represented by the same object.\n * * Two block filler elements.\n *\n * @param blockFillerMode Block filler mode, see {@link module:engine/view/domconverter~DomConverter#blockFillerMode}.\n */\nfunction sameNodes(domConverter, actualDomChild, expectedDomChild) {\n    // Elements.\n    if (actualDomChild === expectedDomChild) {\n        return true;\n    }\n    // Texts.\n    else if (isText(actualDomChild) && isText(expectedDomChild)) {\n        return actualDomChild.data === expectedDomChild.data;\n    }\n    // Block fillers.\n    else if (domConverter.isBlockFiller(actualDomChild) &&\n        domConverter.isBlockFiller(expectedDomChild)) {\n        return true;\n    }\n    // Not matching types.\n    return false;\n}\n/**\n * The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n * When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n *\n * ```html\n * <p>foo<br/>[]</p>\n * ```\n *\n * which happens a lot when using the soft line break, the browser fails to (visually) move the\n * caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\n */\nfunction fixGeckoSelectionAfterBr(focus, domSelection) {\n    const parent = focus.parent;\n    // This fix works only when the focus point is at the very end of an element.\n    // There is no point in running it in cases unrelated to the browser bug.\n    if (parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1) {\n        return;\n    }\n    const childAtOffset = parent.childNodes[focus.offset];\n    // To stay on the safe side, the fix being as specific as possible, it targets only the\n    // selection which is at the very end of the element and preceded by <br />.\n    if (childAtOffset && childAtOffset.tagName == 'BR') {\n        domSelection.addRange(domSelection.getRangeAt(0));\n    }\n}\nfunction filterOutFakeSelectionContainer(domChildList, fakeSelectionContainer) {\n    const childList = Array.from(domChildList);\n    if (childList.length == 0 || !fakeSelectionContainer) {\n        return childList;\n    }\n    const last = childList[childList.length - 1];\n    if (last == fakeSelectionContainer) {\n        childList.pop();\n    }\n    return childList;\n}\n/**\n * Creates a fake selection container for a given document.\n */\nfunction createFakeSelectionContainer(domDocument) {\n    const container = domDocument.createElement('div');\n    container.className = 'ck-fake-selection-container';\n    Object.assign(container.style, {\n        position: 'fixed',\n        top: 0,\n        left: '-9999px',\n        // See https://github.com/ckeditor/ckeditor5/issues/752.\n        width: '42px'\n    });\n    // Fill it with a text node so we can update it later.\n    container.textContent = '\\u00A0';\n    return container;\n}\n/**\n * Checks if text needs to be updated and possibly updates it by removing and inserting only parts\n * of the data from the existing text node to reduce impact on the IME composition.\n *\n * @param domText DOM text node to update.\n * @param expectedText The expected data of a text node.\n */\nfunction updateTextNode(domText, expectedText) {\n    const actualText = domText.data;\n    if (actualText == expectedText) {\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Text node does not need update:',\n        // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', '',\n        // @if CK_DEBUG_TYPING // \t\t`\"${ domText.data }\" (${ domText.data.length })`\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        return;\n    }\n    // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n    // @if CK_DEBUG_TYPING // \tconsole.info( '%c[Renderer]%c Update text node:',\n    // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', '',\n    // @if CK_DEBUG_TYPING // \t\t`\"${ domText.data }\" (${ domText.data.length }) -> \"${ expectedText }\" (${ expectedText.length })`\n    // @if CK_DEBUG_TYPING // \t);\n    // @if CK_DEBUG_TYPING // }\n    const actions = fastDiff(actualText, expectedText);\n    for (const action of actions) {\n        if (action.type === 'insert') {\n            domText.insertData(action.index, action.values.join(''));\n        }\n        else { // 'delete'\n            domText.deleteData(action.index, action.howMany);\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/domconverter\n */\n/* globals Node, NodeFilter, DOMParser, Text */\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewUIElement from './uielement';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { default as Matcher } from './matcher';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, NBSP_FILLER, MARKED_NBSP_FILLER, getDataWithoutFiller, isInlineFiller, startsWithFiller } from './filler';\nimport { global, logWarning, indexOf, getAncestors, isText, isComment, isValidAttributeName, first } from '@ckeditor/ckeditor5-utils';\nconst BR_FILLER_REF = BR_FILLER(global.document); // eslint-disable-line new-cap\nconst NBSP_FILLER_REF = NBSP_FILLER(global.document); // eslint-disable-line new-cap\nconst MARKED_NBSP_FILLER_REF = MARKED_NBSP_FILLER(global.document); // eslint-disable-line new-cap\nconst UNSAFE_ATTRIBUTE_NAME_PREFIX = 'data-ck-unsafe-attribute-';\nconst UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE = 'data-ck-unsafe-element';\n/**\n * `DomConverter` is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements bindings} between these nodes.\n *\n * An instance of the DOM converter is available under\n * {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * The DOM converter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep the\n * state of a tree nor keeps the synchronization between the tree view and the DOM tree (use {@link module:engine/view/document~Document}).\n *\n * The DOM converter keeps DOM elements to view element bindings, so when the converter gets destroyed, the bindings are lost.\n * Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n    /**\n     * Creates a DOM converter.\n     *\n     * @param document The view document instance.\n     * @param options An object with configuration options.\n     * @param options.blockFillerMode The type of the block filler to use.\n     * Default value depends on the options.renderingMode:\n     *  'nbsp' when options.renderingMode == 'data',\n     *  'br' when options.renderingMode == 'editing'.\n     * @param options.renderingMode Whether to leave the View-to-DOM conversion result unchanged\n     * or improve editing experience by filtering out interactive data.\n     */\n    constructor(document, { blockFillerMode, renderingMode = 'editing' } = {}) {\n        /**\n         * The DOM-to-view mapping.\n         */\n        this._domToViewMapping = new WeakMap();\n        /**\n         * The view-to-DOM mapping.\n         */\n        this._viewToDomMapping = new WeakMap();\n        /**\n         * Holds the mapping between fake selection containers and corresponding view selections.\n         */\n        this._fakeSelectionMapping = new WeakMap();\n        /**\n         * Matcher for view elements whose content should be treated as raw data\n         * and not processed during the conversion from DOM nodes to view elements.\n         */\n        this._rawContentElementMatcher = new Matcher();\n        /**\n         * A set of encountered raw content DOM nodes. It is used for preventing left trimming of the following text node.\n         */\n        this._encounteredRawContentDomNodes = new WeakSet();\n        this.document = document;\n        this.renderingMode = renderingMode;\n        this.blockFillerMode = blockFillerMode || (renderingMode === 'editing' ? 'br' : 'nbsp');\n        this.preElements = ['pre'];\n        this.blockElements = [\n            'address', 'article', 'aside', 'blockquote', 'caption', 'center', 'dd', 'details', 'dir', 'div',\n            'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header',\n            'hgroup', 'legend', 'li', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'summary', 'table', 'tbody',\n            'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\n        ];\n        this.inlineObjectElements = [\n            'object', 'iframe', 'input', 'button', 'textarea', 'select', 'option', 'video', 'embed', 'audio', 'img', 'canvas'\n        ];\n        this.unsafeElements = ['script', 'style'];\n        this._domDocument = this.renderingMode === 'editing' ? global.document : global.document.implementation.createHTMLDocument('');\n    }\n    /**\n     * Binds a given DOM element that represents fake selection to a **position** of a\n     * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n     * Document selection copy is stored and can be retrieved by the\n     * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n     */\n    bindFakeSelection(domElement, viewDocumentSelection) {\n        this._fakeSelectionMapping.set(domElement, new ViewSelection(viewDocumentSelection));\n    }\n    /**\n     * Returns a {@link module:engine/view/selection~Selection view selection} instance corresponding to a given\n     * DOM element that represents fake selection. Returns `undefined` if binding to the given DOM element does not exist.\n     */\n    fakeSelectionToView(domElement) {\n        return this._fakeSelectionMapping.get(domElement);\n    }\n    /**\n     * Binds DOM and view elements, so it will be possible to get corresponding elements using\n     * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n     * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n     *\n     * @param domElement The DOM element to bind.\n     * @param viewElement The view element to bind.\n     */\n    bindElements(domElement, viewElement) {\n        this._domToViewMapping.set(domElement, viewElement);\n        this._viewToDomMapping.set(viewElement, domElement);\n    }\n    /**\n     * Unbinds a given DOM element from the view element it was bound to. Unbinding is deep, meaning that all children of\n     * the DOM element will be unbound too.\n     *\n     * @param domElement The DOM element to unbind.\n     */\n    unbindDomElement(domElement) {\n        const viewElement = this._domToViewMapping.get(domElement);\n        if (viewElement) {\n            this._domToViewMapping.delete(domElement);\n            this._viewToDomMapping.delete(viewElement);\n            for (const child of Array.from(domElement.children)) {\n                this.unbindDomElement(child);\n            }\n        }\n    }\n    /**\n     * Binds DOM and view document fragments, so it will be possible to get corresponding document fragments using\n     * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n     * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n     *\n     * @param domFragment The DOM document fragment to bind.\n     * @param viewFragment The view document fragment to bind.\n     */\n    bindDocumentFragments(domFragment, viewFragment) {\n        this._domToViewMapping.set(domFragment, viewFragment);\n        this._viewToDomMapping.set(viewFragment, domFragment);\n    }\n    /**\n     * Decides whether a given pair of attribute key and value should be passed further down the pipeline.\n     *\n     * @param elementName Element name in lower case.\n     */\n    shouldRenderAttribute(attributeKey, attributeValue, elementName) {\n        if (this.renderingMode === 'data') {\n            return true;\n        }\n        attributeKey = attributeKey.toLowerCase();\n        if (attributeKey.startsWith('on')) {\n            return false;\n        }\n        if (attributeKey === 'srcdoc' &&\n            attributeValue.match(/\\bon\\S+\\s*=|javascript:|<\\s*\\/*script/i)) {\n            return false;\n        }\n        if (elementName === 'img' &&\n            (attributeKey === 'src' || attributeKey === 'srcset')) {\n            return true;\n        }\n        if (elementName === 'source' && attributeKey === 'srcset') {\n            return true;\n        }\n        if (attributeValue.match(/^\\s*(javascript:|data:(image\\/svg|text\\/x?html))/i)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Set `domElement`'s content using provided `html` argument. Apply necessary filtering for the editing pipeline.\n     *\n     * @param domElement DOM element that should have `html` set as its content.\n     * @param html Textual representation of the HTML that will be set on `domElement`.\n     */\n    setContentOf(domElement, html) {\n        // For data pipeline we pass the HTML as-is.\n        if (this.renderingMode === 'data') {\n            domElement.innerHTML = html;\n            return;\n        }\n        const document = new DOMParser().parseFromString(html, 'text/html');\n        const fragment = document.createDocumentFragment();\n        const bodyChildNodes = document.body.childNodes;\n        while (bodyChildNodes.length > 0) {\n            fragment.appendChild(bodyChildNodes[0]);\n        }\n        const treeWalker = document.createTreeWalker(fragment, NodeFilter.SHOW_ELEMENT);\n        const nodes = [];\n        let currentNode;\n        // eslint-disable-next-line no-cond-assign\n        while (currentNode = treeWalker.nextNode()) {\n            nodes.push(currentNode);\n        }\n        for (const currentNode of nodes) {\n            // Go through nodes to remove those that are prohibited in editing pipeline.\n            for (const attributeName of currentNode.getAttributeNames()) {\n                this.setDomElementAttribute(currentNode, attributeName, currentNode.getAttribute(attributeName));\n            }\n            const elementName = currentNode.tagName.toLowerCase();\n            // There are certain nodes, that should be renamed to <span> in editing pipeline.\n            if (this._shouldRenameElement(elementName)) {\n                _logUnsafeElement(elementName);\n                currentNode.replaceWith(this._createReplacementDomElement(elementName, currentNode));\n            }\n        }\n        // Empty the target element.\n        while (domElement.firstChild) {\n            domElement.firstChild.remove();\n        }\n        domElement.append(fragment);\n    }\n    /**\n     * Converts the view to the DOM. For all text nodes, not bound elements and document fragments new items will\n     * be created. For bound elements and document fragments the method will return corresponding items.\n     *\n     * @param viewNode View node or document fragment to transform.\n     * @param options Conversion options.\n     * @param options.bind Determines whether new elements will be bound.\n     * @param options.withChildren If `false`, node's and document fragment's children will not be converted.\n     * @returns Converted node or DocumentFragment.\n     */\n    viewToDom(viewNode, options = {}) {\n        if (viewNode.is('$text')) {\n            const textData = this._processDataFromViewText(viewNode);\n            return this._domDocument.createTextNode(textData);\n        }\n        else {\n            if (this.mapViewToDom(viewNode)) {\n                return this.mapViewToDom(viewNode);\n            }\n            let domElement;\n            if (viewNode.is('documentFragment')) {\n                // Create DOM document fragment.\n                domElement = this._domDocument.createDocumentFragment();\n                if (options.bind) {\n                    this.bindDocumentFragments(domElement, viewNode);\n                }\n            }\n            else if (viewNode.is('uiElement')) {\n                if (viewNode.name === '$comment') {\n                    domElement = this._domDocument.createComment(viewNode.getCustomProperty('$rawContent'));\n                }\n                else {\n                    // UIElement has its own render() method (see #799).\n                    domElement = viewNode.render(this._domDocument, this);\n                }\n                if (options.bind) {\n                    this.bindElements(domElement, viewNode);\n                }\n                return domElement;\n            }\n            else {\n                // Create DOM element.\n                if (this._shouldRenameElement(viewNode.name)) {\n                    _logUnsafeElement(viewNode.name);\n                    domElement = this._createReplacementDomElement(viewNode.name);\n                }\n                else if (viewNode.hasAttribute('xmlns')) {\n                    domElement = this._domDocument.createElementNS(viewNode.getAttribute('xmlns'), viewNode.name);\n                }\n                else {\n                    domElement = this._domDocument.createElement(viewNode.name);\n                }\n                // RawElement take care of their children in RawElement#render() method which can be customized\n                // (see https://github.com/ckeditor/ckeditor5/issues/4469).\n                if (viewNode.is('rawElement')) {\n                    viewNode.render(domElement, this);\n                }\n                if (options.bind) {\n                    this.bindElements(domElement, viewNode);\n                }\n                // Copy element's attributes.\n                for (const key of viewNode.getAttributeKeys()) {\n                    this.setDomElementAttribute(domElement, key, viewNode.getAttribute(key), viewNode);\n                }\n            }\n            if (options.withChildren !== false) {\n                for (const child of this.viewChildrenToDom(viewNode, options)) {\n                    domElement.appendChild(child);\n                }\n            }\n            return domElement;\n        }\n    }\n    /**\n     * Sets the attribute on a DOM element.\n     *\n     * **Note**: To remove the attribute, use {@link #removeDomElementAttribute}.\n     *\n     * @param domElement The DOM element the attribute should be set on.\n     * @param key The name of the attribute.\n     * @param value The value of the attribute.\n     * @param relatedViewElement The view element related to the `domElement` (if there is any).\n     * It helps decide whether the attribute set is unsafe. For instance, view elements created via the\n     * {@link module:engine/view/downcastwriter~DowncastWriter} methods can allow certain attributes that would normally be filtered out.\n     */\n    setDomElementAttribute(domElement, key, value, relatedViewElement) {\n        const shouldRenderAttribute = this.shouldRenderAttribute(key, value, domElement.tagName.toLowerCase()) ||\n            relatedViewElement && relatedViewElement.shouldRenderUnsafeAttribute(key);\n        if (!shouldRenderAttribute) {\n            logWarning('domconverter-unsafe-attribute-detected', { domElement, key, value });\n        }\n        if (!isValidAttributeName(key)) {\n            /**\n             * Invalid attribute name was ignored during rendering.\n             *\n             * @error domconverter-invalid-attribute-detected\n             */\n            logWarning('domconverter-invalid-attribute-detected', { domElement, key, value });\n            return;\n        }\n        // The old value was safe but the new value is unsafe.\n        if (domElement.hasAttribute(key) && !shouldRenderAttribute) {\n            domElement.removeAttribute(key);\n        }\n        // The old value was unsafe (but prefixed) but the new value will be safe (will be unprefixed).\n        else if (domElement.hasAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key) && shouldRenderAttribute) {\n            domElement.removeAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key);\n        }\n        // If the attribute should not be rendered, rename it (instead of removing) to give developers some idea of what\n        // is going on (https://github.com/ckeditor/ckeditor5/issues/10801).\n        domElement.setAttribute(shouldRenderAttribute ? key : UNSAFE_ATTRIBUTE_NAME_PREFIX + key, value);\n    }\n    /**\n     * Removes an attribute from a DOM element.\n     *\n     * **Note**: To set the attribute, use {@link #setDomElementAttribute}.\n     *\n     * @param domElement The DOM element the attribute should be removed from.\n     * @param key The name of the attribute.\n     */\n    removeDomElementAttribute(domElement, key) {\n        // See #_createReplacementDomElement() to learn what this is.\n        if (key == UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE) {\n            return;\n        }\n        domElement.removeAttribute(key);\n        // See setDomElementAttribute() to learn what this is.\n        domElement.removeAttribute(UNSAFE_ATTRIBUTE_NAME_PREFIX + key);\n    }\n    /**\n     * Converts children of the view element to DOM using the\n     * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n     * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n     *\n     * @param viewElement Parent view element.\n     * @param options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n     * @returns DOM nodes.\n     */\n    *viewChildrenToDom(viewElement, options = {}) {\n        const fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n        let offset = 0;\n        for (const childView of viewElement.getChildren()) {\n            if (fillerPositionOffset === offset) {\n                yield this._getBlockFiller();\n            }\n            const transparentRendering = childView.is('element') &&\n                !!childView.getCustomProperty('dataPipeline:transparentRendering') &&\n                !first(childView.getAttributes());\n            if (transparentRendering && this.renderingMode == 'data') {\n                yield* this.viewChildrenToDom(childView, options);\n            }\n            else {\n                if (transparentRendering) {\n                    /**\n                     * The `dataPipeline:transparentRendering` flag is supported only in the data pipeline.\n                     *\n                     * @error domconverter-transparent-rendering-unsupported-in-editing-pipeline\n                     */\n                    logWarning('domconverter-transparent-rendering-unsupported-in-editing-pipeline', { viewElement: childView });\n                }\n                yield this.viewToDom(childView, options);\n            }\n            offset++;\n        }\n        if (fillerPositionOffset === offset) {\n            yield this._getBlockFiller();\n        }\n    }\n    /**\n     * Converts view {@link module:engine/view/range~Range} to DOM range.\n     * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n     *\n     * @param viewRange View range.\n     * @returns DOM range.\n     */\n    viewRangeToDom(viewRange) {\n        const domStart = this.viewPositionToDom(viewRange.start);\n        const domEnd = this.viewPositionToDom(viewRange.end);\n        const domRange = this._domDocument.createRange();\n        domRange.setStart(domStart.parent, domStart.offset);\n        domRange.setEnd(domEnd.parent, domEnd.offset);\n        return domRange;\n    }\n    /**\n     * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n     *\n     * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n     * If the converted position is directly before inline filler it is moved inside the filler.\n     *\n     * @param viewPosition View position.\n     * @returns DOM position or `null` if view position could not be converted to DOM.\n     * DOM position has two properties:\n     * * `parent` - DOM position parent.\n     * * `offset` - DOM position offset.\n     */\n    viewPositionToDom(viewPosition) {\n        const viewParent = viewPosition.parent;\n        if (viewParent.is('$text')) {\n            const domParent = this.findCorrespondingDomText(viewParent);\n            if (!domParent) {\n                // Position is in a view text node that has not been rendered to DOM yet.\n                return null;\n            }\n            let offset = viewPosition.offset;\n            if (startsWithFiller(domParent)) {\n                offset += INLINE_FILLER_LENGTH;\n            }\n            return { parent: domParent, offset };\n        }\n        else {\n            // viewParent is instance of ViewElement.\n            let domParent, domBefore, domAfter;\n            if (viewPosition.offset === 0) {\n                domParent = this.mapViewToDom(viewParent);\n                if (!domParent) {\n                    // Position is in a view element that has not been rendered to DOM yet.\n                    return null;\n                }\n                domAfter = domParent.childNodes[0];\n            }\n            else {\n                const nodeBefore = viewPosition.nodeBefore;\n                domBefore = nodeBefore.is('$text') ?\n                    this.findCorrespondingDomText(nodeBefore) :\n                    this.mapViewToDom(nodeBefore);\n                if (!domBefore) {\n                    // Position is after a view element that has not been rendered to DOM yet.\n                    return null;\n                }\n                domParent = domBefore.parentNode;\n                domAfter = domBefore.nextSibling;\n            }\n            // If there is an inline filler at position return position inside the filler. We should never return\n            // the position before the inline filler.\n            if (isText(domAfter) && startsWithFiller(domAfter)) {\n                return { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n            }\n            const offset = domBefore ? indexOf(domBefore) + 1 : 0;\n            return { parent: domParent, offset };\n        }\n    }\n    /**\n     * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n     * be created. For bound elements and document fragments function will return corresponding items. For\n     * {@link module:engine/view/filler fillers} `null` will be returned.\n     * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n     *\n     * @param domNode DOM node or document fragment to transform.\n     * @param options Conversion options.\n     * @param options.bind Determines whether new elements will be bound. False by default.\n     * @param options.withChildren If `true`, node's and document fragment's children will be converted too. True by default.\n     * @param options.keepOriginalCase If `false`, node's tag name will be converted to lower case. False by default.\n     * @param options.skipComments If `false`, comment nodes will be converted to `$comment`\n     * {@link module:engine/view/uielement~UIElement view UI elements}. False by default.\n     * @returns Converted node or document fragment or `null` if DOM node is a {@link module:engine/view/filler filler}\n     * or the given node is an empty text node.\n     */\n    domToView(domNode, options = {}) {\n        if (this.isBlockFiller(domNode)) {\n            return null;\n        }\n        // When node is inside a UIElement or a RawElement return that parent as it's view representation.\n        const hostElement = this.getHostViewElement(domNode);\n        if (hostElement) {\n            return hostElement;\n        }\n        if (isComment(domNode) && options.skipComments) {\n            return null;\n        }\n        if (isText(domNode)) {\n            if (isInlineFiller(domNode)) {\n                return null;\n            }\n            else {\n                const textData = this._processDataFromDomText(domNode);\n                return textData === '' ? null : new ViewText(this.document, textData);\n            }\n        }\n        else {\n            if (this.mapDomToView(domNode)) {\n                return this.mapDomToView(domNode);\n            }\n            let viewElement;\n            if (this.isDocumentFragment(domNode)) {\n                // Create view document fragment.\n                viewElement = new ViewDocumentFragment(this.document);\n                if (options.bind) {\n                    this.bindDocumentFragments(domNode, viewElement);\n                }\n            }\n            else {\n                // Create view element.\n                viewElement = this._createViewElement(domNode, options);\n                if (options.bind) {\n                    this.bindElements(domNode, viewElement);\n                }\n                // Copy element's attributes.\n                const attrs = domNode.attributes;\n                if (attrs) {\n                    for (let l = attrs.length, i = 0; i < l; i++) {\n                        viewElement._setAttribute(attrs[i].name, attrs[i].value);\n                    }\n                }\n                // Treat this element's content as a raw data if it was registered as such.\n                // Comment node is also treated as an element with raw data.\n                if (this._isViewElementWithRawContent(viewElement, options) || isComment(domNode)) {\n                    const rawContent = isComment(domNode) ? domNode.data : domNode.innerHTML;\n                    viewElement._setCustomProperty('$rawContent', rawContent);\n                    // Store a DOM node to prevent left trimming of the following text node.\n                    this._encounteredRawContentDomNodes.add(domNode);\n                    return viewElement;\n                }\n            }\n            if (options.withChildren !== false) {\n                for (const child of this.domChildrenToView(domNode, options)) {\n                    viewElement._appendChild(child);\n                }\n            }\n            return viewElement;\n        }\n    }\n    /**\n     * Converts children of the DOM element to view nodes using\n     * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n     * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n     *\n     * @param domElement Parent DOM element.\n     * @param options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     * @returns View nodes.\n     */\n    *domChildrenToView(domElement, options) {\n        for (let i = 0; i < domElement.childNodes.length; i++) {\n            const domChild = domElement.childNodes[i];\n            const viewChild = this.domToView(domChild, options);\n            if (viewChild !== null) {\n                yield viewChild;\n            }\n        }\n    }\n    /**\n     * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n     * Ranges which cannot be converted will be omitted.\n     *\n     * @param domSelection DOM selection.\n     * @returns View selection.\n     */\n    domSelectionToView(domSelection) {\n        // DOM selection might be placed in fake selection container.\n        // If container contains fake selection - return corresponding view selection.\n        if (domSelection.rangeCount === 1) {\n            let container = domSelection.getRangeAt(0).startContainer;\n            // The DOM selection might be moved to the text node inside the fake selection container.\n            if (isText(container)) {\n                container = container.parentNode;\n            }\n            const viewSelection = this.fakeSelectionToView(container);\n            if (viewSelection) {\n                return viewSelection;\n            }\n        }\n        const isBackward = this.isDomSelectionBackward(domSelection);\n        const viewRanges = [];\n        for (let i = 0; i < domSelection.rangeCount; i++) {\n            // DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n            const domRange = domSelection.getRangeAt(i);\n            const viewRange = this.domRangeToView(domRange);\n            if (viewRange) {\n                viewRanges.push(viewRange);\n            }\n        }\n        return new ViewSelection(viewRanges, { backward: isBackward });\n    }\n    /**\n     * Converts DOM Range to view {@link module:engine/view/range~Range}.\n     * If the start or end position can not be converted `null` is returned.\n     *\n     * @param domRange DOM range.\n     * @returns View range.\n     */\n    domRangeToView(domRange) {\n        const viewStart = this.domPositionToView(domRange.startContainer, domRange.startOffset);\n        const viewEnd = this.domPositionToView(domRange.endContainer, domRange.endOffset);\n        if (viewStart && viewEnd) {\n            return new ViewRange(viewStart, viewEnd);\n        }\n        return null;\n    }\n    /**\n     * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n     *\n     * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n     * position of the filler will be converted and returned.\n     *\n     * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n     * that position will be converted to view position before that UIElement.\n     *\n     * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n     *\n     * @param domParent DOM position parent.\n     * @param domOffset DOM position offset. You can skip it when converting the inline filler node.\n     * @returns View position.\n     */\n    domPositionToView(domParent, domOffset = 0) {\n        if (this.isBlockFiller(domParent)) {\n            return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n        }\n        // If position is somewhere inside UIElement or a RawElement - return position before that element.\n        const viewElement = this.mapDomToView(domParent);\n        if (viewElement && (viewElement.is('uiElement') || viewElement.is('rawElement'))) {\n            return ViewPosition._createBefore(viewElement);\n        }\n        if (isText(domParent)) {\n            if (isInlineFiller(domParent)) {\n                return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n            }\n            const viewParent = this.findCorrespondingViewText(domParent);\n            let offset = domOffset;\n            if (!viewParent) {\n                return null;\n            }\n            if (startsWithFiller(domParent)) {\n                offset -= INLINE_FILLER_LENGTH;\n                offset = offset < 0 ? 0 : offset;\n            }\n            return new ViewPosition(viewParent, offset);\n        }\n        // domParent instanceof HTMLElement.\n        else {\n            if (domOffset === 0) {\n                const viewParent = this.mapDomToView(domParent);\n                if (viewParent) {\n                    return new ViewPosition(viewParent, 0);\n                }\n            }\n            else {\n                const domBefore = domParent.childNodes[domOffset - 1];\n                // Jump over an inline filler (and also on Firefox jump over a block filler while pressing backspace in an empty paragraph).\n                if (isText(domBefore) && isInlineFiller(domBefore) || domBefore && this.isBlockFiller(domBefore)) {\n                    return this.domPositionToView(domBefore.parentNode, indexOf(domBefore));\n                }\n                const viewBefore = isText(domBefore) ?\n                    this.findCorrespondingViewText(domBefore) :\n                    this.mapDomToView(domBefore);\n                // TODO #663\n                if (viewBefore && viewBefore.parent) {\n                    return new ViewPosition(viewBefore.parent, viewBefore.index + 1);\n                }\n            }\n            return null;\n        }\n    }\n    /**\n     * Returns corresponding view {@link module:engine/view/element~Element Element} or\n     * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n     * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * to the given DOM - `undefined` is returned.\n     *\n     * For all DOM elements rendered by a {@link module:engine/view/uielement~UIElement} or\n     * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.\n     *\n     * @param domElementOrDocumentFragment DOM element or document fragment.\n     * @returns Corresponding view element, document fragment or `undefined` if no element was bound.\n     */\n    mapDomToView(domElementOrDocumentFragment) {\n        const hostElement = this.getHostViewElement(domElementOrDocumentFragment);\n        return hostElement || this._domToViewMapping.get(domElementOrDocumentFragment);\n    }\n    /**\n     * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n     * corresponding text node is returned based on the sibling or parent.\n     *\n     * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n     * to find the corresponding text node.\n     *\n     * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * element, it is used to find the corresponding text node.\n     *\n     * For all text nodes rendered by a {@link module:engine/view/uielement~UIElement} or\n     * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.\n     *\n     * Otherwise `null` is returned.\n     *\n     * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n     *\n     * @param domText DOM text node.\n     * @returns Corresponding view text node or `null`, if it was not possible to find a corresponding node.\n     */\n    findCorrespondingViewText(domText) {\n        if (isInlineFiller(domText)) {\n            return null;\n        }\n        // If DOM text was rendered by a UIElement or a RawElement - return this parent element.\n        const hostElement = this.getHostViewElement(domText);\n        if (hostElement) {\n            return hostElement;\n        }\n        const previousSibling = domText.previousSibling;\n        // Try to use previous sibling to find the corresponding text node.\n        if (previousSibling) {\n            if (!(this.isElement(previousSibling))) {\n                // The previous is text or comment.\n                return null;\n            }\n            const viewElement = this.mapDomToView(previousSibling);\n            if (viewElement) {\n                const nextSibling = viewElement.nextSibling;\n                // It might be filler which has no corresponding view node.\n                if (nextSibling instanceof ViewText) {\n                    return nextSibling;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        // Try to use parent to find the corresponding text node.\n        else {\n            const viewElement = this.mapDomToView(domText.parentNode);\n            if (viewElement) {\n                const firstChild = viewElement.getChild(0);\n                // It might be filler which has no corresponding view node.\n                if (firstChild instanceof ViewText) {\n                    return firstChild;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }\n    mapViewToDom(documentFragmentOrElement) {\n        return this._viewToDomMapping.get(documentFragmentOrElement);\n    }\n    /**\n     * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n     * corresponding text node is returned based on the sibling or parent.\n     *\n     * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n     * to find the corresponding text node.\n     *\n     * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n     * element, it is used to find the corresponding text node.\n     *\n     * Otherwise `null` is returned.\n     *\n     * @param viewText View text node.\n     * @returns Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n     */\n    findCorrespondingDomText(viewText) {\n        const previousSibling = viewText.previousSibling;\n        // Try to use previous sibling to find the corresponding text node.\n        if (previousSibling && this.mapViewToDom(previousSibling)) {\n            return this.mapViewToDom(previousSibling).nextSibling;\n        }\n        // If this is a first node, try to use parent to find the corresponding text node.\n        if (!previousSibling && viewText.parent && this.mapViewToDom(viewText.parent)) {\n            return this.mapViewToDom(viewText.parent).childNodes[0];\n        }\n        return null;\n    }\n    /**\n     * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n     */\n    focus(viewEditable) {\n        const domEditable = this.mapViewToDom(viewEditable);\n        if (domEditable && domEditable.ownerDocument.activeElement !== domEditable) {\n            // Save the scrollX and scrollY positions before the focus.\n            const { scrollX, scrollY } = global.window;\n            const scrollPositions = [];\n            // Save all scrollLeft and scrollTop values starting from domEditable up to\n            // document#documentElement.\n            forEachDomElementAncestor(domEditable, node => {\n                const { scrollLeft, scrollTop } = node;\n                scrollPositions.push([scrollLeft, scrollTop]);\n            });\n            domEditable.focus();\n            // Restore scrollLeft and scrollTop values starting from domEditable up to\n            // document#documentElement.\n            // https://github.com/ckeditor/ckeditor5-engine/issues/951\n            // https://github.com/ckeditor/ckeditor5-engine/issues/957\n            forEachDomElementAncestor(domEditable, node => {\n                const [scrollLeft, scrollTop] = scrollPositions.shift();\n                node.scrollLeft = scrollLeft;\n                node.scrollTop = scrollTop;\n            });\n            // Restore the scrollX and scrollY positions after the focus.\n            // https://github.com/ckeditor/ckeditor5-engine/issues/951\n            global.window.scrollTo(scrollX, scrollY);\n        }\n    }\n    /**\n     * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n     *\n     * @param node Node to check.\n     */\n    isElement(node) {\n        return node && node.nodeType == Node.ELEMENT_NODE;\n    }\n    /**\n     * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n     *\n     * @param node Node to check.\n     */\n    isDocumentFragment(node) {\n        return node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n    }\n    /**\n     * Checks if the node is an instance of the block filler for this DOM converter.\n     *\n     * ```ts\n     * const converter = new DomConverter( viewDocument, { blockFillerMode: 'br' } );\n     *\n     * converter.isBlockFiller( BR_FILLER( document ) ); // true\n     * converter.isBlockFiller( NBSP_FILLER( document ) ); // false\n     * ```\n     *\n     * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n     *\n     * **Note:** A special case in the `'nbsp'` mode exists where the `<br>` in `<p><br></p>` is treated as a block filler.\n     *\n     * @param domNode DOM node to check.\n     * @returns True if a node is considered a block filler for given mode.\n     */\n    isBlockFiller(domNode) {\n        if (this.blockFillerMode == 'br') {\n            return domNode.isEqualNode(BR_FILLER_REF);\n        }\n        // Special case for <p><br></p> in which <br> should be treated as filler even when we are not in the 'br' mode. See ckeditor5#5564.\n        if (domNode.tagName === 'BR' &&\n            hasBlockParent(domNode, this.blockElements) &&\n            domNode.parentNode.childNodes.length === 1) {\n            return true;\n        }\n        // If not in 'br' mode, try recognizing both marked and regular nbsp block fillers.\n        return domNode.isEqualNode(MARKED_NBSP_FILLER_REF) || isNbspBlockFiller(domNode, this.blockElements);\n    }\n    /**\n     * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n     *\n     * @param DOM Selection instance to check.\n     */\n    isDomSelectionBackward(selection) {\n        if (selection.isCollapsed) {\n            return false;\n        }\n        // Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n        // we will use the fact that range will collapse if it's end is before it's start.\n        const range = this._domDocument.createRange();\n        try {\n            range.setStart(selection.anchorNode, selection.anchorOffset);\n            range.setEnd(selection.focusNode, selection.focusOffset);\n        }\n        catch (e) {\n            // Safari sometimes gives us a selection that makes Range.set{Start,End} throw.\n            // See https://github.com/ckeditor/ckeditor5/issues/12375.\n            return false;\n        }\n        const backward = range.collapsed;\n        range.detach();\n        return backward;\n    }\n    /**\n     * Returns a parent {@link module:engine/view/uielement~UIElement} or {@link module:engine/view/rawelement~RawElement}\n     * that hosts the provided DOM node. Returns `null` if there is no such parent.\n     */\n    getHostViewElement(domNode) {\n        const ancestors = getAncestors(domNode);\n        // Remove domNode from the list.\n        ancestors.pop();\n        while (ancestors.length) {\n            const domNode = ancestors.pop();\n            const viewNode = this._domToViewMapping.get(domNode);\n            if (viewNode && (viewNode.is('uiElement') || viewNode.is('rawElement'))) {\n                return viewNode;\n            }\n        }\n        return null;\n    }\n    /**\n     * Checks if the given selection's boundaries are at correct places.\n     *\n     * The following places are considered as incorrect for selection boundaries:\n     *\n     * * before or in the middle of an inline filler sequence,\n     * * inside a DOM element which represents {@link module:engine/view/uielement~UIElement a view UI element},\n     * * inside a DOM element which represents {@link module:engine/view/rawelement~RawElement a view raw element}.\n     *\n     * @param domSelection The DOM selection object to be checked.\n     * @returns `true` if the given selection is at a correct place, `false` otherwise.\n     */\n    isDomSelectionCorrect(domSelection) {\n        return this._isDomSelectionPositionCorrect(domSelection.anchorNode, domSelection.anchorOffset) &&\n            this._isDomSelectionPositionCorrect(domSelection.focusNode, domSelection.focusOffset);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from DOM nodes to view elements.\n     *\n     * This is affecting how {@link module:engine/view/domconverter~DomConverter#domToView} and\n     * {@link module:engine/view/domconverter~DomConverter#domChildrenToView} process DOM nodes.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching a view element whose content should\n     * be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this._rawContentElementMatcher.add(pattern);\n    }\n    /**\n     * Returns the block {@link module:engine/view/filler filler} node based on the current {@link #blockFillerMode} setting.\n     */\n    _getBlockFiller() {\n        switch (this.blockFillerMode) {\n            case 'nbsp':\n                return NBSP_FILLER(this._domDocument); // eslint-disable-line new-cap\n            case 'markedNbsp':\n                return MARKED_NBSP_FILLER(this._domDocument); // eslint-disable-line new-cap\n            case 'br':\n                return BR_FILLER(this._domDocument); // eslint-disable-line new-cap\n        }\n    }\n    /**\n     * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n     *\n     * @param domParent Position parent.\n     * @param offset Position offset.\n     * @returns `true` if given position is at a correct place for selection boundary, `false` otherwise.\n     */\n    _isDomSelectionPositionCorrect(domParent, offset) {\n        // If selection is before or in the middle of inline filler string, it is incorrect.\n        if (isText(domParent) && startsWithFiller(domParent) && offset < INLINE_FILLER_LENGTH) {\n            // Selection in a text node, at wrong position (before or in the middle of filler).\n            return false;\n        }\n        if (this.isElement(domParent) && startsWithFiller(domParent.childNodes[offset])) {\n            // Selection in an element node, before filler text node.\n            return false;\n        }\n        const viewParent = this.mapDomToView(domParent);\n        // The position is incorrect when anchored inside a UIElement or a RawElement.\n        // Note: In case of UIElement and RawElement, mapDomToView() returns a parent element for any DOM child\n        // so there's no need to perform any additional checks.\n        if (viewParent && (viewParent.is('uiElement') || viewParent.is('rawElement'))) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n     * it is correctly displayed in the DOM.\n     *\n     * Following changes are done:\n     *\n     * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n     * element or if a previous text node ends with a space character,\n     * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n     * starts with a space or if it is the last text node in its container,\n     * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n     *\n     * Content of {@link #preElements} is not processed.\n     *\n     * @param node View text node to process.\n     * @returns Processed text data.\n     */\n    _processDataFromViewText(node) {\n        let data = node.data;\n        // If any of node ancestors has a name which is in `preElements` array, then currently processed\n        // view text node is (will be) in preformatted element. We should not change whitespaces then.\n        if (node.getAncestors().some(parent => this.preElements.includes(parent.name))) {\n            return data;\n        }\n        // 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n        // (container element boundary).\n        if (data.charAt(0) == ' ') {\n            const prevNode = this._getTouchingInlineViewNode(node, false);\n            const prevEndsWithSpace = prevNode && prevNode.is('$textProxy') && this._nodeEndsWithSpace(prevNode);\n            if (prevEndsWithSpace || !prevNode) {\n                data = '\\u00A0' + data.substr(1);\n            }\n        }\n        // 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n        // next node (container element boundary).\n        //\n        // Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n        //\n        // Foo <span>&nbsp;bar</span>  <-- bad.\n        // Foo&nbsp;<span> bar</span>  <-- good.\n        //\n        // More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n        if (data.charAt(data.length - 1) == ' ') {\n            const nextNode = this._getTouchingInlineViewNode(node, true);\n            const nextStartsWithSpace = nextNode && nextNode.is('$textProxy') && nextNode.data.charAt(0) == ' ';\n            if (data.charAt(data.length - 2) == ' ' || !nextNode || nextStartsWithSpace) {\n                data = data.substr(0, data.length - 1) + '\\u00A0';\n            }\n        }\n        // 3. Create space+nbsp pairs.\n        return data.replace(/ {2}/g, ' \\u00A0');\n    }\n    /**\n     * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n     *\n     * @param  node Node to check.\n     * @returns `true` if given `node` ends with space, `false` otherwise.\n     */\n    _nodeEndsWithSpace(node) {\n        if (node.getAncestors().some(parent => this.preElements.includes(parent.name))) {\n            return false;\n        }\n        const data = this._processDataFromViewText(node);\n        return data.charAt(data.length - 1) == ' ';\n    }\n    /**\n     * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n     *\n     * Following changes are done:\n     *\n     * * multiple whitespaces are replaced to a single space,\n     * * space at the beginning of a text node is removed if it is the first text node in its container\n     * element or if the previous text node ends with a space character,\n     * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n     * starts with a space or if it is the last text node in its container\n     * * nbsps are converted to spaces.\n     *\n     * @param node DOM text node to process.\n     * @returns Processed data.\n     */\n    _processDataFromDomText(node) {\n        let data = node.data;\n        if (_hasDomParentOfType(node, this.preElements)) {\n            return getDataWithoutFiller(node);\n        }\n        // Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n        // see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n        // That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n        // We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n        data = data.replace(/[ \\n\\t\\r]{1,}/g, ' ');\n        const prevNode = this._getTouchingInlineDomNode(node, false);\n        const nextNode = this._getTouchingInlineDomNode(node, true);\n        const shouldLeftTrim = this._checkShouldLeftTrimDomText(node, prevNode);\n        const shouldRightTrim = this._checkShouldRightTrimDomText(node, nextNode);\n        // If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n        // of this text node. Such space character is treated as a whitespace.\n        if (shouldLeftTrim) {\n            data = data.replace(/^ /, '');\n        }\n        // If the next text node does not exist remove space character from the end of this text node.\n        if (shouldRightTrim) {\n            data = data.replace(/ $/, '');\n        }\n        // At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n        // This means that the text node starts/end with normal space instead of non-breaking space.\n        // This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n        // the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n        data = getDataWithoutFiller(new Text(data));\n        // At this point we should have removed all whitespaces from DOM text data.\n        //\n        // Now, We will reverse the process that happens in `_processDataFromViewText`.\n        //\n        // We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n        // First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n        // ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n        data = data.replace(/ \\u00A0/g, '  ');\n        const isNextNodeInlineObjectElement = nextNode && this.isElement(nextNode) && nextNode.tagName != 'BR';\n        const isNextNodeStartingWithSpace = nextNode && isText(nextNode) && nextNode.data.charAt(0) == ' ';\n        // Then, let's change the last nbsp to a space.\n        if (/( |\\u00A0)\\u00A0$/.test(data) || !nextNode || isNextNodeInlineObjectElement || isNextNodeStartingWithSpace) {\n            data = data.replace(/\\u00A0$/, ' ');\n        }\n        // Then, change &nbsp; character that is at the beginning of the text node to space character.\n        // We do that replacement only if this is the first node or the previous node ends on whitespace character.\n        if (shouldLeftTrim || prevNode && this.isElement(prevNode) && prevNode.tagName != 'BR') {\n            data = data.replace(/^\\u00A0/, ' ');\n        }\n        // At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n        // changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n        return data;\n    }\n    /**\n     * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n     * be trimmed from the left side.\n     *\n     * @param prevNode Either DOM text or `<br>` or one of `#inlineObjectElements`.\n     */\n    _checkShouldLeftTrimDomText(node, prevNode) {\n        if (!prevNode) {\n            return true;\n        }\n        if (this.isElement(prevNode)) {\n            return prevNode.tagName === 'BR';\n        }\n        // Shouldn't left trim if previous node is a node that was encountered as a raw content node.\n        if (this._encounteredRawContentDomNodes.has(node.previousSibling)) {\n            return false;\n        }\n        return /[^\\S\\u00A0]/.test(prevNode.data.charAt(prevNode.data.length - 1));\n    }\n    /**\n     * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n     * be trimmed from the right side.\n     *\n     * @param nextNode Either DOM text or `<br>` or one of `#inlineObjectElements`.\n     */\n    _checkShouldRightTrimDomText(node, nextNode) {\n        if (nextNode) {\n            return false;\n        }\n        return !startsWithFiller(node);\n    }\n    /**\n     * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n     * that is contained in the same container element. If there is no such sibling, `null` is returned.\n     *\n     * @param node Reference node.\n     * @returns Touching text node, an inline object\n     * or `null` if there is no next or previous touching text node.\n     */\n    _getTouchingInlineViewNode(node, getNext) {\n        const treeWalker = new ViewTreeWalker({\n            startPosition: getNext ? ViewPosition._createAfter(node) : ViewPosition._createBefore(node),\n            direction: getNext ? 'forward' : 'backward'\n        });\n        for (const value of treeWalker) {\n            // Found an inline object (for example an image).\n            if (value.item.is('element') && this.inlineObjectElements.includes(value.item.name)) {\n                return value.item;\n            }\n            // ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n            // text node in its container element.\n            else if (value.item.is('containerElement')) {\n                return null;\n            }\n            // <br> found – it works like a block boundary, so do not scan further.\n            else if (value.item.is('element', 'br')) {\n                return null;\n            }\n            // Found a text node in the same container element.\n            else if (value.item.is('$textProxy')) {\n                return value.item;\n            }\n        }\n        return null;\n    }\n    /**\n     * Helper function. For the given text node, it finds the closest touching node which is either\n     * a text, `<br>` or an {@link #inlineObjectElements inline object}.\n     *\n     * If no such node is found, `null` is returned.\n     *\n     * For instance, in the following DOM structure:\n     *\n     * ```html\n     * <p>foo<b>bar</b><br>bom</p>\n     * ```\n     *\n     * * `foo` doesn't have its previous touching inline node (`null` is returned),\n     * * `foo`'s next touching inline node is `bar`\n     * * `bar`'s next touching inline node is `<br>`\n     *\n     * This method returns text nodes and `<br>` elements because these types of nodes affect how\n     * spaces in the given text node need to be converted.\n     */\n    _getTouchingInlineDomNode(node, getNext) {\n        if (!node.parentNode) {\n            return null;\n        }\n        const stepInto = getNext ? 'firstChild' : 'lastChild';\n        const stepOver = getNext ? 'nextSibling' : 'previousSibling';\n        let skipChildren = true;\n        let returnNode = node;\n        do {\n            if (!skipChildren && returnNode[stepInto]) {\n                returnNode = returnNode[stepInto];\n            }\n            else if (returnNode[stepOver]) {\n                returnNode = returnNode[stepOver];\n                skipChildren = false;\n            }\n            else {\n                returnNode = returnNode.parentNode;\n                skipChildren = true;\n            }\n            if (!returnNode || this._isBlockElement(returnNode)) {\n                return null;\n            }\n        } while (!(isText(returnNode) || returnNode.tagName == 'BR' || this._isInlineObjectElement(returnNode)));\n        return returnNode;\n    }\n    /**\n     * Returns `true` if a DOM node belongs to {@link #blockElements}. `false` otherwise.\n     */\n    _isBlockElement(node) {\n        return this.isElement(node) && this.blockElements.includes(node.tagName.toLowerCase());\n    }\n    /**\n     * Returns `true` if a DOM node belongs to {@link #inlineObjectElements}. `false` otherwise.\n     */\n    _isInlineObjectElement(node) {\n        return this.isElement(node) && this.inlineObjectElements.includes(node.tagName.toLowerCase());\n    }\n    /**\n     * Creates view element basing on the node type.\n     *\n     * @param node DOM node to check.\n     * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     */\n    _createViewElement(node, options) {\n        if (isComment(node)) {\n            return new ViewUIElement(this.document, '$comment');\n        }\n        const viewName = options.keepOriginalCase ? node.tagName : node.tagName.toLowerCase();\n        return new ViewElement(this.document, viewName);\n    }\n    /**\n     * Checks if view element's content should be treated as a raw data.\n     *\n     * @param viewElement View element to check.\n     * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n     */\n    _isViewElementWithRawContent(viewElement, options) {\n        return options.withChildren !== false && !!this._rawContentElementMatcher.match(viewElement);\n    }\n    /**\n     * Checks whether a given element name should be renamed in a current rendering mode.\n     *\n     * @param elementName The name of view element.\n     */\n    _shouldRenameElement(elementName) {\n        const name = elementName.toLowerCase();\n        return this.renderingMode === 'editing' && this.unsafeElements.includes(name);\n    }\n    /**\n     * Return a <span> element with a special attribute holding the name of the original element.\n     * Optionally, copy all the attributes of the original element if that element is provided.\n     *\n     * @param elementName The name of view element.\n     * @param originalDomElement The original DOM element to copy attributes and content from.\n     */\n    _createReplacementDomElement(elementName, originalDomElement) {\n        const newDomElement = this._domDocument.createElement('span');\n        // Mark the span replacing a script as hidden.\n        newDomElement.setAttribute(UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE, elementName);\n        if (originalDomElement) {\n            while (originalDomElement.firstChild) {\n                newDomElement.appendChild(originalDomElement.firstChild);\n            }\n            for (const attributeName of originalDomElement.getAttributeNames()) {\n                newDomElement.setAttribute(attributeName, originalDomElement.getAttribute(attributeName));\n            }\n        }\n        return newDomElement;\n    }\n}\n/**\n * Helper function.\n * Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n *\n * @returns`true` if such parent exists or `false` if it does not.\n */\nfunction _hasDomParentOfType(node, types) {\n    const parents = getAncestors(node);\n    return parents.some(parent => parent.tagName && types.includes(parent.tagName.toLowerCase()));\n}\n/**\n * A helper that executes given callback for each DOM node's ancestor, starting from the given node\n * and ending in document#documentElement.\n *\n * @param callback A callback to be executed for each ancestor.\n */\nfunction forEachDomElementAncestor(element, callback) {\n    let node = element;\n    while (node) {\n        callback(node);\n        node = node.parentElement;\n    }\n}\n/**\n * Checks if given node is a nbsp block filler.\n *\n * A &nbsp; is a block filler only if it is a single child of a block element.\n *\n * @param domNode DOM node.\n */\nfunction isNbspBlockFiller(domNode, blockElements) {\n    const isNBSP = domNode.isEqualNode(NBSP_FILLER_REF);\n    return isNBSP && hasBlockParent(domNode, blockElements) && domNode.parentNode.childNodes.length === 1;\n}\n/**\n * Checks if domNode has block parent.\n *\n * @param domNode DOM node.\n */\nfunction hasBlockParent(domNode, blockElements) {\n    const parent = domNode.parentNode;\n    return !!parent && !!parent.tagName && blockElements.includes(parent.tagName.toLowerCase());\n}\n/**\n * Log to console the information about element that was replaced.\n * Check UNSAFE_ELEMENTS for all recognized unsafe elements.\n *\n * @param elementName The name of the view element.\n */\nfunction _logUnsafeElement(elementName) {\n    if (elementName === 'script') {\n        logWarning('domconverter-unsafe-script-element-detected');\n    }\n    if (elementName === 'style') {\n        logWarning('domconverter-unsafe-style-element-detected');\n    }\n}\n/**\n * While rendering the editor content, the {@link module:engine/view/domconverter~DomConverter} detected a `<script>` element that may\n * disrupt the editing experience. To avoid this, the `<script>` element was replaced with `<span data-ck-unsafe-element=\"script\"></span>`.\n *\n * @error domconverter-unsafe-script-element-detected\n */\n/**\n * While rendering the editor content, the {@link module:engine/view/domconverter~DomConverter} detected a `<style>` element that may affect\n * the editing experience. To avoid this, the `<style>` element was replaced with `<span data-ck-unsafe-element=\"style\"></span>`.\n *\n * @error domconverter-unsafe-style-element-detected\n */\n/**\n * The {@link module:engine/view/domconverter~DomConverter} detected an interactive attribute in the\n * {@glink framework/architecture/editing-engine#editing-pipeline editing pipeline}. For the best\n * editing experience, the attribute was renamed to `data-ck-unsafe-attribute-[original attribute name]`.\n *\n * If you are the author of the plugin that generated this attribute and you want it to be preserved\n * in the editing pipeline, you can configure this when creating the element\n * using {@link module:engine/view/downcastwriter~DowncastWriter} during the\n * {@glink framework/architecture/editing-engine#conversion model–view conversion}. Methods such as\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement}, or\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement}\n * accept an option that will disable filtering of specific attributes:\n *\n * ```ts\n * const paragraph = writer.createContainerElement( 'p',\n * \t{\n * \t\tclass: 'clickable-paragraph',\n * \t\tonclick: 'alert( \"Paragraph clicked!\" )'\n * \t},\n * \t{\n * \t\t// Make sure the \"onclick\" attribute will pass through.\n * \t\trenderUnsafeAttributes: [ 'onclick' ]\n * \t}\n * );\n * ```\n *\n * @error domconverter-unsafe-attribute-detected\n * @param domElement The DOM element the attribute was set on.\n * @param key The original name of the attribute\n * @param value The value of the original attribute\n */\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/isvalidattributename\n */\nimport global from './global';\n/**\n * Checks if the given attribute name is valid in terms of HTML.\n *\n * @param name Attribute name.\n */\nexport default function isValidAttributeName(name) {\n    try {\n        global.document.createAttribute(name);\n    }\n    catch (error) {\n        return false;\n    }\n    return true;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/observer\n */\nimport { DomEmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need a refresh on DOM events.\n */\nexport default class Observer extends DomEmitterMixin() {\n    /**\n     * Creates an instance of the observer.\n     */\n    constructor(view) {\n        super();\n        /**\n         * The state of the observer. If it is disabled, no events will be fired.\n         */\n        this._isEnabled = false;\n        this.view = view;\n        this.document = view.document;\n    }\n    /**\n     * The state of the observer. If it is disabled, no events will be fired.\n     */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    /**\n     * Enables the observer. This method is called when the observer is registered to the\n     * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n     * (all observers are {@link #disable disabled} before rendering).\n     *\n     * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n     * However, a child class may not need to be disabled, so it can implement an empty method.\n     *\n     * @see module:engine/view/observer/observer~Observer#disable\n     */\n    enable() {\n        this._isEnabled = true;\n    }\n    /**\n     * Disables the observer. This method is called before\n     * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n     *\n     * @see module:engine/view/observer/observer~Observer#enable\n     */\n    disable() {\n        this._isEnabled = false;\n    }\n    /**\n     * Disables and destroys the observer, among others removes event listeners created by the observer.\n     */\n    destroy() {\n        this.disable();\n        this.stopListening();\n    }\n    /**\n     * Checks whether a given DOM event should be ignored (should not be turned into a synthetic view document event).\n     *\n     * Currently, an event will be ignored only if its target or any of its ancestors has the `data-cke-ignore-events` attribute.\n     * This attribute can be used inside the structures generated by\n     * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `DowncastWriter#createUIElement()`} to ignore events\n     * fired within a UI that should be excluded from CKEditor 5's realms.\n     *\n     * @param domTarget The DOM event target to check (usually an element, sometimes a text node and\n     * potentially sometimes a document, too).\n     * @returns Whether this event should be ignored by the observer.\n     */\n    checkShouldIgnoreEventFromTarget(domTarget) {\n        if (domTarget && domTarget.nodeType === 3) {\n            domTarget = domTarget.parentNode;\n        }\n        if (!domTarget || domTarget.nodeType !== 1) {\n            return false;\n        }\n        return domTarget.matches('[data-cke-ignore-events], [data-cke-ignore-events] *');\n    }\n}\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n *\n * @typeParam TEvent The type of DOM Event that this class represents.\n */\nexport default class DomEventData {\n    /**\n     * @param view The instance of the view controller.\n     * @param domEvent The DOM event.\n     * @param additionalData Additional properties that the instance should contain.\n     */\n    constructor(view, domEvent, additionalData) {\n        this.view = view;\n        this.document = view.document;\n        this.domEvent = domEvent;\n        this.domTarget = domEvent.target;\n        extend(this, additionalData);\n    }\n    /**\n     * The tree view element representing the target.\n     */\n    get target() {\n        return this.view.domConverter.mapDomToView(this.domTarget);\n    }\n    /**\n     * Prevents the native's event default action.\n     */\n    preventDefault() {\n        this.domEvent.preventDefault();\n    }\n    /**\n     * Stops native event propagation.\n     */\n    stopPropagation() {\n        this.domEvent.stopPropagation();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/domeventobserver\n */\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n * ```ts\n * class ClickObserver extends DomEventObserver<'click'> {\n * \t// It can also be defined as a normal property in the constructor.\n * \tget domEventType(): 'click' {\n * \t\treturn 'click';\n * \t}\n *\n * \tonDomEvent( domEvent: MouseEvent ): void {\n * \t\tthis.fire( 'click', domEvent );\n * \t}\n * }\n * ```\n *\n * @typeParam EventType DOM Event type name or an union of those.\n * @typeParam AdditionalData Additional data passed along with the event.\n */\nexport default class DomEventObserver extends Observer {\n    constructor() {\n        super(...arguments);\n        /**\n         * If set to `true` DOM events will be listened on the capturing phase.\n         * Default value is `false`.\n         */\n        this.useCapture = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        const types = typeof this.domEventType == 'string' ? [this.domEventType] : this.domEventType;\n        types.forEach(type => {\n            this.listenTo(domElement, type, (eventInfo, domEvent) => {\n                if (this.isEnabled && !this.checkShouldIgnoreEventFromTarget(domEvent.target)) {\n                    this.onDomEvent(domEvent);\n                }\n            }, { useCapture: this.useCapture });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this.stopListening(domElement);\n    }\n    /**\n     * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n     *\n     * @see module:utils/emittermixin~Emitter#fire\n     * @param eventType The event type (name).\n     * @param domEvent The DOM event.\n     * @param additionalData The additional data which should extend the\n     * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n     */\n    fire(eventType, domEvent, additionalData) {\n        if (this.isEnabled) {\n            this.document.fire(eventType, new DomEventData(this.view, domEvent, additionalData));\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/keyobserver\n */\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils';\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class KeyObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['keydown', 'keyup'];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvt) {\n        const data = {\n            keyCode: domEvt.keyCode,\n            altKey: domEvt.altKey,\n            ctrlKey: domEvt.ctrlKey,\n            shiftKey: domEvt.shiftKey,\n            metaKey: domEvt.metaKey,\n            get keystroke() {\n                return getCode(this);\n            }\n        };\n        this.fire(domEvt.type, domEvt, data);\n    }\n}\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n */\nexport default class FakeSelectionObserver extends Observer {\n    /**\n     * Creates new FakeSelectionObserver instance.\n     */\n    constructor(view) {\n        super(view);\n        this._fireSelectionChangeDoneDebounced = debounce(data => {\n            this.document.fire('selectionChangeDone', data);\n        }, 200);\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() {\n        const document = this.document;\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                // Prevents default key down handling - no selection change will occur.\n                data.preventDefault();\n            }\n        }, { context: '$capture' });\n        document.on('arrowKey', (eventInfo, data) => {\n            const selection = document.selection;\n            if (selection.isFake && this.isEnabled) {\n                this._handleSelectionMove(data.keyCode);\n            }\n        }, { priority: 'lowest' });\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._fireSelectionChangeDoneDebounced.cancel();\n    }\n    /**\n     * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n     * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n     *\n     * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n     * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n     * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n     */\n    _handleSelectionMove(keyCode) {\n        const selection = this.document.selection;\n        const newSelection = new ViewSelection(selection.getRanges(), { backward: selection.isBackward, fake: false });\n        // Left or up arrow pressed - move selection to start.\n        if (keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup) {\n            newSelection.setTo(newSelection.getFirstPosition());\n        }\n        // Right or down arrow pressed - move selection to end.\n        if (keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown) {\n            newSelection.setTo(newSelection.getLastPosition());\n        }\n        const data = {\n            oldSelection: selection,\n            newSelection,\n            domSelection: null\n        };\n        // Fire dummy selection change event.\n        this.document.fire('selectionChange', data);\n        // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n        // This function is debounced what means that `selectionChangeDone` event will be fired only when\n        // defined int the function time will elapse since the last time the function was called.\n        // So `selectionChangeDone` will be fired when selection will stop changing.\n        this._fireSelectionChangeDoneDebounced(data);\n    }\n}\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/mutationobserver\n */\n/* globals window */\nimport Observer from './observer';\nimport { startsWithFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n/**\n * Mutation observer's role is to watch for any DOM changes inside the editor that weren't\n * done by the editor's {@link module:engine/view/renderer~Renderer} itself and reverting these changes.\n *\n * It does this by observing all mutations in the DOM, marking related view elements as changed and calling\n * {@link module:engine/view/renderer~Renderer#render}. Because all mutated nodes are marked as\n * \"to be rendered\" and the {@link module:engine/view/renderer~Renderer#render `render()`} method is called,\n * all changes are reverted in the DOM (the DOM is synced with the editor's view structure).\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class MutationObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        this._config = {\n            childList: true,\n            characterData: true,\n            subtree: true\n        };\n        this.domConverter = view.domConverter;\n        this.renderer = view._renderer;\n        this._domElements = new Set();\n        this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this));\n    }\n    /**\n     * Synchronously handles mutations and empties the queue.\n     */\n    flush() {\n        this._onMutations(this._mutationObserver.takeRecords());\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        this._domElements.add(domElement);\n        if (this.isEnabled) {\n            this._mutationObserver.observe(domElement, this._config);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this._domElements.delete(domElement);\n        if (this.isEnabled) {\n            // Unfortunately, it is not possible to stop observing particular DOM element.\n            // In order to stop observing one of multiple DOM elements, we need to re-connect the mutation observer.\n            this._mutationObserver.disconnect();\n            for (const domElement of this._domElements) {\n                this._mutationObserver.observe(domElement, this._config);\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    enable() {\n        super.enable();\n        for (const domElement of this._domElements) {\n            this._mutationObserver.observe(domElement, this._config);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    disable() {\n        super.disable();\n        this._mutationObserver.disconnect();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._mutationObserver.disconnect();\n    }\n    /**\n     * Handles mutations. Mark view elements to sync and call render.\n     *\n     * @param domMutations Array of native mutations.\n     */\n    _onMutations(domMutations) {\n        // As a result of this.flush() we can have an empty collection.\n        if (domMutations.length === 0) {\n            return;\n        }\n        const domConverter = this.domConverter;\n        // Use map and set for deduplication.\n        const mutatedTextNodes = new Set();\n        const elementsWithMutatedChildren = new Set();\n        // Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n        // element with changed structure anyway.\n        for (const mutation of domMutations) {\n            const element = domConverter.mapDomToView(mutation.target);\n            if (!element) {\n                continue;\n            }\n            // Do not collect mutations from UIElements and RawElements.\n            if (element.is('uiElement') || element.is('rawElement')) {\n                continue;\n            }\n            if (mutation.type === 'childList' && !this._isBogusBrMutation(mutation)) {\n                elementsWithMutatedChildren.add(element);\n            }\n        }\n        // Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n        for (const mutation of domMutations) {\n            const element = domConverter.mapDomToView(mutation.target);\n            // Do not collect mutations from UIElements and RawElements.\n            if (element && (element.is('uiElement') || element.is('rawElement'))) {\n                continue;\n            }\n            if (mutation.type === 'characterData') {\n                const text = domConverter.findCorrespondingViewText(mutation.target);\n                if (text && !elementsWithMutatedChildren.has(text.parent)) {\n                    mutatedTextNodes.add(text);\n                }\n                // When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n                // on text, but for the view, where filler text node did not exist, new text node was created, so we\n                // need to handle it as a 'children' mutation instead of 'text'.\n                else if (!text && startsWithFiller(mutation.target)) {\n                    elementsWithMutatedChildren.add(domConverter.mapDomToView(mutation.target.parentNode));\n                }\n            }\n        }\n        // Now we build the list of mutations to mark elements. We did not do it earlier to avoid marking the\n        // same node multiple times in case of duplication.\n        let hasMutations = false;\n        for (const textNode of mutatedTextNodes) {\n            hasMutations = true;\n            this.renderer.markToSync('text', textNode);\n        }\n        for (const viewElement of elementsWithMutatedChildren) {\n            const domElement = domConverter.mapViewToDom(viewElement);\n            const viewChildren = Array.from(viewElement.getChildren());\n            const newViewChildren = Array.from(domConverter.domChildrenToView(domElement, { withChildren: false }));\n            // It may happen that as a result of many changes (sth was inserted and then removed),\n            // both elements haven't really changed. #1031\n            if (!isEqualWith(viewChildren, newViewChildren, sameNodes)) {\n                hasMutations = true;\n                this.renderer.markToSync('children', viewElement);\n            }\n        }\n        // In case only non-relevant mutations were recorded it skips the event and force render (#5600).\n        if (hasMutations) {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.group( '%c[MutationObserver]%c Mutations detected',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight:bold;color:green', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // At this point we have \"dirty DOM\" (changed) and de-synched view (which has not been changed).\n            // In order to \"reset DOM\" we render the view again.\n            this.view.forceRender();\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n        }\n    }\n    /**\n     * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n     * Such mutations are generated while pressing space or performing native spellchecker correction\n     * on the end of the block element in Firefox browser.\n     *\n     * @param mutation Native mutation object.\n     */\n    _isBogusBrMutation(mutation) {\n        let addedNode = null;\n        // Check if mutation added only one node on the end of its parent.\n        if (mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1) {\n            addedNode = this.domConverter.domToView(mutation.addedNodes[0], {\n                withChildren: false\n            });\n        }\n        return addedNode && addedNode.is('element', 'br');\n    }\n}\nfunction sameNodes(child1, child2) {\n    // First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n    if (Array.isArray(child1)) {\n        return;\n    }\n    // Elements.\n    if (child1 === child2) {\n        return true;\n    }\n    // Texts.\n    else if (child1.is('$text') && child2.is('$text')) {\n        return child1.data === child2.data;\n    }\n    // Not matching types.\n    return false;\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/focusobserver\n */\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class FocusObserver extends DomEventObserver {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * Set to `true` if the document is in the process of setting the focus.\n         *\n         * The flag is used to indicate that setting the focus is in progress.\n         */\n        this._isFocusChanging = false;\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['focus', 'blur'];\n        this.useCapture = true;\n        const document = this.document;\n        document.on('focus', () => {\n            this._isFocusChanging = true;\n            // Unfortunately native `selectionchange` event is fired asynchronously.\n            // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n            // overwrite new DOM selection with selection from the view.\n            // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n            // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n            //\n            // Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n            // in a situation where `selectionchange` already caused selection change.\n            this._renderTimeoutId = setTimeout(() => {\n                this.flush();\n                view.change(() => { });\n            }, 50);\n        });\n        document.on('blur', (evt, data) => {\n            const selectedEditable = document.selection.editableElement;\n            if (selectedEditable === null || selectedEditable === data.target) {\n                document.isFocused = false;\n                this._isFocusChanging = false;\n                // Re-render the document to update view elements\n                // (changing document.isFocused already marked view as changed since last rendering).\n                view.change(() => { });\n            }\n        });\n    }\n    /**\n     * Finishes setting the document focus state.\n     */\n    flush() {\n        if (this._isFocusChanging) {\n            this._isFocusChanging = false;\n            this.document.isFocused = true;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._renderTimeoutId) {\n            clearTimeout(this._renderTimeoutId);\n        }\n        super.destroy();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/selectionobserver\n */\n/* global setInterval, clearInterval */\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { env } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\nimport FocusObserver from './focusobserver';\n/**\n * Selection observer class observes selection changes in the document. If a selection changes on the document this\n * observer checks if the DOM selection is different from the {@link module:engine/view/document~Document#selection view selection}.\n * The selection observer fires {@link module:engine/view/document~Document#event:selectionChange} event only if\n * a selection change was the only change in the document and the DOM selection is different from the view selection.\n *\n * This observer also manages the {@link module:engine/view/document~Document#isSelecting} property of the view document.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class SelectionObserver extends Observer {\n    constructor(view) {\n        super(view);\n        this.mutationObserver = view.getObserver(MutationObserver);\n        this.focusObserver = view.getObserver(FocusObserver);\n        this.selection = this.document.selection;\n        this.domConverter = view.domConverter;\n        this._documents = new WeakSet();\n        this._fireSelectionChangeDoneDebounced = debounce(data => {\n            this.document.fire('selectionChangeDone', data);\n        }, 200);\n        this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1000);\n        this._documentIsSelectingInactivityTimeoutDebounced = debounce(() => (this.document.isSelecting = false), 5000);\n        this._loopbackCounter = 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    observe(domElement) {\n        const domDocument = domElement.ownerDocument;\n        const startDocumentIsSelecting = () => {\n            this.document.isSelecting = true;\n            // Let's activate the safety timeout each time the document enters the \"is selecting\" state.\n            this._documentIsSelectingInactivityTimeoutDebounced();\n        };\n        const endDocumentIsSelecting = () => {\n            if (!this.document.isSelecting) {\n                return;\n            }\n            // Make sure that model selection is up-to-date at the end of selecting process.\n            // Sometimes `selectionchange` events could arrive after the `mouseup` event and that selection could be already outdated.\n            this._handleSelectionChange(null, domDocument);\n            this.document.isSelecting = false;\n            // The safety timeout can be canceled when the document leaves the \"is selecting\" state.\n            this._documentIsSelectingInactivityTimeoutDebounced.cancel();\n        };\n        // The document has the \"is selecting\" state while the user keeps making (extending) the selection\n        // (e.g. by holding the mouse button and moving the cursor). The state resets when they either released\n        // the mouse button or interrupted the process by pressing or releasing any key.\n        this.listenTo(domElement, 'selectstart', startDocumentIsSelecting, { priority: 'highest' });\n        this.listenTo(domElement, 'keydown', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        this.listenTo(domElement, 'keyup', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        // Add document-wide listeners only once. This method could be called for multiple editing roots.\n        if (this._documents.has(domDocument)) {\n            return;\n        }\n        // This listener is using capture mode to make sure that selection is upcasted before any other\n        // handler would like to check it and update (for example table multi cell selection).\n        this.listenTo(domDocument, 'mouseup', endDocumentIsSelecting, { priority: 'highest', useCapture: true });\n        this.listenTo(domDocument, 'selectionchange', (evt, domEvent) => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconst domSelection = domDocument.defaultView!.getSelection();\n            // @if CK_DEBUG_TYPING // \tconsole.group( '%c[SelectionObserver]%c selectionchange', 'color:green', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c DOM Selection:', 'font-weight:bold;color:green', '',\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.anchorNode, offset: domSelection!.anchorOffset },\n            // @if CK_DEBUG_TYPING // \t\t{ node: domSelection!.focusNode, offset: domSelection!.focusOffset }\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // The Renderer is disabled while composing on non-android browsers, so we can't update the view selection\n            // because the DOM and view tree drifted apart. Position mapping could fail because of it.\n            if (this.document.isComposing && !env.isAndroid) {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c Selection change ignored (isComposing)',\n                // @if CK_DEBUG_TYPING // \t\t'font-weight:bold;color:green', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n                // @if CK_DEBUG_TYPING // }\n                return;\n            }\n            this._handleSelectionChange(domEvent, domDocument);\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            // Defer the safety timeout when the selection changes (e.g. the user keeps extending the selection\n            // using their mouse).\n            this._documentIsSelectingInactivityTimeoutDebounced();\n        });\n        this._documents.add(domDocument);\n    }\n    /**\n     * @inheritDoc\n     */\n    stopObserving(domElement) {\n        this.stopListening(domElement);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        clearInterval(this._clearInfiniteLoopInterval);\n        this._fireSelectionChangeDoneDebounced.cancel();\n        this._documentIsSelectingInactivityTimeoutDebounced.cancel();\n    }\n    /* istanbul ignore next -- @preserve */\n    _reportInfiniteLoop() {\n        // @if CK_DEBUG //\t\tthrow new Error(\n        // @if CK_DEBUG //\t\t\t'Selection change observer detected an infinite rendering loop.\\n\\n' +\n        // @if CK_DEBUG //\t \t\t'⚠️⚠️ Report this error on https://github.com/ckeditor/ckeditor5/issues/11658.'\n        // @if CK_DEBUG //\t\t);\n    }\n    /**\n     * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n     * a selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n     * and {@link module:engine/view/document~Document#event:selectionChangeDone} when a selection stop changing.\n     *\n     * @param domEvent DOM event.\n     * @param domDocument DOM document.\n     */\n    _handleSelectionChange(domEvent, domDocument) {\n        if (!this.isEnabled) {\n            return;\n        }\n        const domSelection = domDocument.defaultView.getSelection();\n        if (this.checkShouldIgnoreEventFromTarget(domSelection.anchorNode)) {\n            return;\n        }\n        // Ensure the mutation event will be before selection event on all browsers.\n        this.mutationObserver.flush();\n        const newViewSelection = this.domConverter.domSelectionToView(domSelection);\n        // Do not convert selection change if the new view selection has no ranges in it.\n        //\n        // It means that the DOM selection is in some way incorrect. Ranges that were in the DOM selection could not be\n        // converted to the view. This happens when the DOM selection was moved outside of the editable element.\n        if (newViewSelection.rangeCount == 0) {\n            this.view.hasDomSelection = false;\n            return;\n        }\n        this.view.hasDomSelection = true;\n        if (this.selection.isEqual(newViewSelection) && this.domConverter.isDomSelectionCorrect(domSelection)) {\n            return;\n        }\n        // Ensure we are not in the infinite loop (#400).\n        // This counter is reset each second. 60 selection changes in 1 second is enough high number\n        // to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n        if (++this._loopbackCounter > 60) {\n            // Selection change observer detected an infinite rendering loop.\n            // Most probably you try to put the selection in the position which is not allowed\n            // by the browser and browser fixes it automatically what causes `selectionchange` event on\n            // which a loopback through a model tries to re-render the wrong selection and again.\n            this._reportInfiniteLoop();\n            return;\n        }\n        // Mark the latest focus change as complete (we got new selection after the focus so the selection is in the focused element).\n        this.focusObserver.flush();\n        if (this.selection.isSimilar(newViewSelection)) {\n            // If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n            // Just re-render it, no need to fire any events, etc.\n            this.view.forceRender();\n        }\n        else {\n            const data = {\n                oldSelection: this.selection,\n                newSelection: newViewSelection,\n                domSelection\n            };\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[SelectionObserver]%c Fire selection change:',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight:bold;color:green', '',\n            // @if CK_DEBUG_TYPING // \t\tnewViewSelection.getFirstRange()\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // Prepare data for new selection and fire appropriate events.\n            this.document.fire('selectionChange', data);\n            // Call `#_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n            // This function is debounced what means that `selectionChangeDone` event will be fired only when\n            // defined int the function time will elapse since the last time the function was called.\n            // So `selectionChangeDone` will be fired when selection will stop changing.\n            this._fireSelectionChangeDoneDebounced(data);\n        }\n    }\n    /**\n     * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n     */\n    _clearInfiniteLoop() {\n        this._loopbackCounter = 0;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/compositionobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class CompositionObserver extends DomEventObserver {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['compositionstart', 'compositionupdate', 'compositionend'];\n        const document = this.document;\n        document.on('compositionstart', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[CompositionObserver] ' +\n            // @if CK_DEBUG_TYPING // \t\t'┌───────────────────────────── isComposing = true ─────────────────────────────┐',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            document.isComposing = true;\n        }, { priority: 'low' });\n        document.on('compositionend', () => {\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[CompositionObserver] ' +\n            // @if CK_DEBUG_TYPING // \t\t'└───────────────────────────── isComposing = false ─────────────────────────────┘',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            document.isComposing = false;\n        }, { priority: 'low' });\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( `%c[CompositionObserver]%c ${ domEvent.type }`, 'color: green', '' );\n        // @if CK_DEBUG_TYPING // }\n        this.fire(domEvent.type, domEvent, {\n            data: domEvent.data\n        });\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * A facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n    /**\n     * @param nativeDataTransfer The native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n     * @param options.cacheFiles Whether `files` list should be initialized in the constructor.\n     */\n    constructor(nativeDataTransfer, options = {}) {\n        // We should store references to the File instances in case someone would like to process this files\n        // outside the event handler. Files are stored only for `drop` and `paste` events because they are not usable\n        // in other events and are generating a huge delay on Firefox while dragging.\n        // See https://github.com/ckeditor/ckeditor5/issues/13366.\n        this._files = options.cacheFiles ? getFiles(nativeDataTransfer) : null;\n        this._native = nativeDataTransfer;\n    }\n    /**\n     * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n     */\n    get files() {\n        if (!this._files) {\n            this._files = getFiles(this._native);\n        }\n        return this._files;\n    }\n    /**\n     * Returns an array of available native content types.\n     */\n    get types() {\n        return this._native.types;\n    }\n    /**\n     * Gets the data from the data transfer by its MIME type.\n     *\n     * ```ts\n     * dataTransfer.getData( 'text/plain' );\n     * ```\n     *\n     * @param type The MIME type. E.g. `text/html` or `text/plain`.\n     */\n    getData(type) {\n        return this._native.getData(type);\n    }\n    /**\n     * Sets the data in the data transfer.\n     *\n     * @param type The MIME type. E.g. `text/html` or `text/plain`.\n     */\n    setData(type, data) {\n        this._native.setData(type, data);\n    }\n    /**\n     * The effect that is allowed for a drag operation.\n     */\n    set effectAllowed(value) {\n        this._native.effectAllowed = value;\n    }\n    get effectAllowed() {\n        return this._native.effectAllowed;\n    }\n    /**\n     * The actual drop effect.\n     */\n    set dropEffect(value) {\n        this._native.dropEffect = value;\n    }\n    get dropEffect() {\n        return this._native.dropEffect;\n    }\n    /**\n     * Set a preview image of the dragged content.\n     */\n    setDragImage(image, x, y) {\n        this._native.setDragImage(image, x, y);\n    }\n    /**\n     * Whether the dragging operation was canceled.\n     */\n    get isCanceled() {\n        return this._native.dropEffect == 'none' || !!this._native.mozUserCancelled;\n    }\n}\nfunction getFiles(nativeDataTransfer) {\n    // DataTransfer.files and items are array-like and might not have an iterable interface.\n    const files = Array.from(nativeDataTransfer.files || []);\n    const items = Array.from(nativeDataTransfer.items || []);\n    if (files.length) {\n        return files;\n    }\n    // Chrome has empty DataTransfer.files, but allows getting files through the items interface.\n    return items\n        .filter(item => item.kind === 'file')\n        .map(item => item.getAsFile());\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/inputobserver\n */\nimport DomEventObserver from './domeventobserver';\nimport DataTransfer from '../datatransfer';\nimport { env } from '@ckeditor/ckeditor5-utils';\n/**\n * Observer for events connected with data input.\n *\n * **Note**: This observer is attached by {@link module:engine/view/view~View} and available by default in all\n * editor instances.\n */\nexport default class InputObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = 'beforeinput';\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( `%c[InputObserver]%c ${ domEvent.type }: ${ domEvent.inputType }`,\n        // @if CK_DEBUG_TYPING // \t\t'color: green', 'color: default'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const domTargetRanges = domEvent.getTargetRanges();\n        const view = this.view;\n        const viewDocument = view.document;\n        let dataTransfer = null;\n        let data = null;\n        let targetRanges = [];\n        if (domEvent.dataTransfer) {\n            dataTransfer = new DataTransfer(domEvent.dataTransfer);\n        }\n        if (domEvent.data !== null) {\n            data = domEvent.data;\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( `%c[InputObserver]%c event data: %c${ JSON.stringify( data ) }`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', 'font-weight:bold', 'color: blue;'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        else if (dataTransfer) {\n            data = dataTransfer.getData('text/plain');\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( `%c[InputObserver]%c event data transfer: %c${ JSON.stringify( data ) }`,\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', 'font-weight:bold', 'color: blue;'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // If the editor selection is fake (an object is selected), the DOM range does not make sense because it is anchored\n        // in the fake selection container.\n        if (viewDocument.selection.isFake) {\n            // Future-proof: in case of multi-range fake selections being possible.\n            targetRanges = Array.from(viewDocument.selection.getRanges());\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using fake selection:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', 'font-weight:bold', targetRanges,\n            // @if CK_DEBUG_TYPING // \t\tviewDocument.selection.isFake ? 'fake view selection' : 'fake DOM parent'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        else if (domTargetRanges.length) {\n            targetRanges = domTargetRanges.map(domRange => {\n                // Sometimes browser provides range that starts before editable node.\n                // We try to fall back to collapsed range at the valid end position.\n                // See https://github.com/ckeditor/ckeditor5/issues/14411.\n                // See https://github.com/ckeditor/ckeditor5/issues/14050.\n                const viewStart = view.domConverter.domPositionToView(domRange.startContainer, domRange.startOffset);\n                const viewEnd = view.domConverter.domPositionToView(domRange.endContainer, domRange.endOffset);\n                if (viewStart) {\n                    return view.createRange(viewStart, viewEnd);\n                }\n                else if (viewEnd) {\n                    return view.createRange(viewEnd);\n                }\n            }).filter((range) => !!range);\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using target ranges:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', 'font-weight:bold', targetRanges\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // For Android devices we use a fallback to the current DOM selection, Android modifies it according\n        // to the expected target ranges of input event.\n        else if (env.isAndroid) {\n            const domSelection = domEvent.target.ownerDocument.defaultView.getSelection();\n            targetRanges = Array.from(view.domConverter.domSelectionToView(domSelection).getRanges());\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.info( '%c[InputObserver]%c using selection ranges:',\n            // @if CK_DEBUG_TYPING // \t\t'color: green;font-weight: bold', 'font-weight:bold', targetRanges\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n        }\n        // Android sometimes fires insertCompositionText with a new-line character at the end of the data\n        // instead of firing insertParagraph beforeInput event.\n        // Fire the correct type of beforeInput event and ignore the replaced fragment of text because\n        // it wants to replace \"test\" with \"test\\n\".\n        // https://github.com/ckeditor/ckeditor5/issues/12368.\n        if (env.isAndroid && domEvent.inputType == 'insertCompositionText' && data && data.endsWith('\\n')) {\n            this.fire(domEvent.type, domEvent, {\n                inputType: 'insertParagraph',\n                targetRanges: [view.createRange(targetRanges[0].end)]\n            });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // Normalize the insertText data that includes new-line characters.\n        // https://github.com/ckeditor/ckeditor5/issues/2045.\n        if (domEvent.inputType == 'insertText' && data && data.includes('\\n')) {\n            // There might be a single new-line or double for new paragraph, but we translate\n            // it to paragraphs as it is our default action for enter handling.\n            const parts = data.split(/\\n{1,2}/g);\n            let partTargetRanges = targetRanges;\n            for (let i = 0; i < parts.length; i++) {\n                const dataPart = parts[i];\n                if (dataPart != '') {\n                    this.fire(domEvent.type, domEvent, {\n                        data: dataPart,\n                        dataTransfer,\n                        targetRanges: partTargetRanges,\n                        inputType: domEvent.inputType,\n                        isComposing: domEvent.isComposing\n                    });\n                    // Use the result view selection so following events will be added one after another.\n                    partTargetRanges = [viewDocument.selection.getFirstRange()];\n                }\n                if (i + 1 < parts.length) {\n                    this.fire(domEvent.type, domEvent, {\n                        inputType: 'insertParagraph',\n                        targetRanges: partTargetRanges\n                    });\n                    // Use the result view selection so following events will be added one after another.\n                    partTargetRanges = [viewDocument.selection.getFirstRange()];\n                }\n            }\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            return;\n        }\n        // Fire the normalized beforeInput event.\n        this.fire(domEvent.type, domEvent, {\n            data,\n            dataTransfer,\n            targetRanges,\n            inputType: domEvent.inputType,\n            isComposing: domEvent.isComposing\n        });\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n        // @if CK_DEBUG_TYPING // }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/arrowkeysobserver\n */\nimport Observer from './observer';\nimport BubblingEventInfo from './bubblingeventinfo';\nimport { isArrowKeyCode } from '@ckeditor/ckeditor5-utils';\n/**\n * Arrow keys observer introduces the {@link module:engine/view/document~Document#event:arrowKey `Document#arrowKey`} event.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n */\nexport default class ArrowKeysObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        this.document.on('keydown', (event, data) => {\n            if (this.isEnabled && isArrowKeyCode(data.keyCode)) {\n                const eventInfo = new BubblingEventInfo(this.document, 'arrowKey', this.document.selection.getFirstRange());\n                this.document.fire(eventInfo, data);\n                if (eventInfo.stop.called) {\n                    event.stop();\n                }\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Observer from './observer';\nimport BubblingEventInfo from './bubblingeventinfo';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils';\n/**\n * Tab observer introduces the {@link module:engine/view/document~Document#event:tab `Document#tab`} event.\n *\n * Note that because {@link module:engine/view/observer/tabobserver~TabObserver} is attached by the\n * {@link module:engine/view/view~View}, this event is available by default.\n */\nexport default class TabObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        const doc = this.document;\n        doc.on('keydown', (evt, data) => {\n            if (!this.isEnabled ||\n                data.keyCode != keyCodes.tab ||\n                data.ctrlKey) {\n                return;\n            }\n            const event = new BubblingEventInfo(doc, 'tab', doc.selection.getFirstRange());\n            doc.fire(event, data);\n            if (event.stop.called) {\n                evt.stop();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport MutationObserver from './observer/mutationobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\nimport TabObserver from './observer/tabobserver';\nimport { CKEditorError, ObservableMixin, scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n * ```ts\n * view.change( writer => {\n * \twriter.insert( position, writer.createText( 'foo' ) );\n * } );\n * ```\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n * * {@link module:engine/view/observer/inputobserver~InputObserver}.\n * * {@link module:engine/view/observer/arrowkeysobserver~ArrowKeysObserver}.\n * * {@link module:engine/view/observer/tabobserver~TabObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n */\nexport default class View extends ObservableMixin() {\n    /**\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(stylesProcessor) {\n        super();\n        /**\n         * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n         */\n        this.domRoots = new Map();\n        /**\n         * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n         * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n         * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n         * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n         */\n        this._initialDomRootAttributes = new WeakMap();\n        /**\n         * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n         */\n        this._observers = new Map();\n        /**\n         * Is set to `true` when {@link #change view changes} are currently in progress.\n         */\n        this._ongoingChange = false;\n        /**\n         * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n         */\n        this._postFixersInProgress = false;\n        /**\n         * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n         */\n        this._renderingDisabled = false;\n        /**\n         * Internal flag that disables rendering when there are no changes since the last rendering.\n         * It stores information about changed selection and changed elements from attached document roots.\n         */\n        this._hasChangedSinceTheLastRendering = false;\n        this.document = new Document(stylesProcessor);\n        this.domConverter = new DomConverter(this.document);\n        this.set('isRenderingInProgress', false);\n        this.set('hasDomSelection', false);\n        this._renderer = new Renderer(this.domConverter, this.document.selection);\n        this._renderer.bind('isFocused', 'isSelecting', 'isComposing')\n            .to(this.document, 'isFocused', 'isSelecting', 'isComposing');\n        this._writer = new DowncastWriter(this.document);\n        // Add default observers.\n        this.addObserver(MutationObserver);\n        this.addObserver(FocusObserver);\n        this.addObserver(SelectionObserver);\n        this.addObserver(KeyObserver);\n        this.addObserver(FakeSelectionObserver);\n        this.addObserver(CompositionObserver);\n        this.addObserver(ArrowKeysObserver);\n        this.addObserver(InputObserver);\n        this.addObserver(TabObserver);\n        // Inject quirks handlers.\n        injectQuirksHandling(this);\n        injectUiElementHandling(this);\n        // Use 'normal' priority so that rendering is performed as first when using that priority.\n        this.on('render', () => {\n            this._render();\n            // Informs that layout has changed after render.\n            this.document.fire('layoutChanged');\n            // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n            this._hasChangedSinceTheLastRendering = false;\n        });\n        // Listen to the document selection changes directly.\n        this.listenTo(this.document.selection, 'change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        // Trigger re-render if only the focus changed.\n        this.listenTo(this.document, 'change:isFocused', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n    }\n    /**\n     * Attaches a DOM root element to the view element and enable all observers on that element.\n     * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n     * with the view what means that all child nodes will be removed and replaced with content of the view root.\n     *\n     * This method also will change view element name as the same as tag name of given dom root.\n     * Name is always transformed to lower case.\n     *\n     * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n     *\n     * @param domRoot DOM root element.\n     * @param name Name of the root.\n     */\n    attachDomRoot(domRoot, name = 'main') {\n        const viewRoot = this.document.getRoot(name);\n        // Set view root name the same as DOM root tag name.\n        viewRoot._name = domRoot.tagName.toLowerCase();\n        const initialDomRootAttributes = {};\n        // 1. Copy and cache the attributes to remember the state of the element before attaching.\n        //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n        //    clean state as if the editing view never used it.\n        // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n        //    The editing view takes over the attribute management completely because various\n        //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n        //    cannot be managed by the engine and the UI library at the same time.\n        for (const { name, value } of Array.from(domRoot.attributes)) {\n            initialDomRootAttributes[name] = value;\n            // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n            // and its descendants could have already set some using the writer.addClass() on the view\n            // document root. They haven't been rendered yet so they are not present in the DOM root.\n            // Using writer.setAttribute( 'class', ... ) would override them completely.\n            if (name === 'class') {\n                this._writer.addClass(value.split(' '), viewRoot);\n            }\n            else {\n                this._writer.setAttribute(name, value, viewRoot);\n            }\n        }\n        this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n        const updateContenteditableAttribute = () => {\n            this._writer.setAttribute('contenteditable', (!viewRoot.isReadOnly).toString(), viewRoot);\n            if (viewRoot.isReadOnly) {\n                this._writer.addClass('ck-read-only', viewRoot);\n            }\n            else {\n                this._writer.removeClass('ck-read-only', viewRoot);\n            }\n        };\n        // Set initial value.\n        updateContenteditableAttribute();\n        this.domRoots.set(name, domRoot);\n        this.domConverter.bindElements(domRoot, viewRoot);\n        this._renderer.markToSync('children', viewRoot);\n        this._renderer.markToSync('attributes', viewRoot);\n        this._renderer.domDocuments.add(domRoot.ownerDocument);\n        viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n        viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n        viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n        viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n        viewRoot.on('change', () => {\n            this._hasChangedSinceTheLastRendering = true;\n        });\n        for (const observer of this._observers.values()) {\n            observer.observe(domRoot, name);\n        }\n    }\n    /**\n     * Detaches a DOM root element from the view element and restores its attributes to the state before\n     * {@link #attachDomRoot `attachDomRoot()`}.\n     *\n     * @param name Name of the root to detach.\n     */\n    detachDomRoot(name) {\n        const domRoot = this.domRoots.get(name);\n        // Remove all root attributes so the DOM element is \"bare\".\n        Array.from(domRoot.attributes).forEach(({ name }) => domRoot.removeAttribute(name));\n        const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot);\n        // Revert all view root attributes back to the state before attachDomRoot was called.\n        for (const attribute in initialDomRootAttributes) {\n            domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n        }\n        this.domRoots.delete(name);\n        this.domConverter.unbindDomElement(domRoot);\n        for (const observer of this._observers.values()) {\n            observer.stopObserving(domRoot);\n        }\n    }\n    /**\n     * Gets DOM root element.\n     *\n     * @param name  Name of the root.\n     * @returns DOM root element instance.\n     */\n    getDomRoot(name = 'main') {\n        return this.domRoots.get(name);\n    }\n    /**\n     * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n     * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n     * {@link #domRoots DOM roots}.\n     *\n     * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n     * when registered for the first time. This means that features and other components can register a single observer\n     * multiple times without caring whether it has been already added or not.\n     *\n     * @param ObserverConstructor The constructor of an observer to add.\n     * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n     * @returns Added observer instance.\n     */\n    addObserver(ObserverConstructor) {\n        let observer = this._observers.get(ObserverConstructor);\n        if (observer) {\n            return observer;\n        }\n        observer = new ObserverConstructor(this);\n        this._observers.set(ObserverConstructor, observer);\n        for (const [name, domElement] of this.domRoots) {\n            observer.observe(domElement, name);\n        }\n        observer.enable();\n        return observer;\n    }\n    /**\n     * Returns observer of the given type or `undefined` if such observer has not been added yet.\n     *\n     * @param ObserverConstructor The constructor of an observer to get.\n     * @returns Observer instance or undefined.\n     */\n    getObserver(ObserverConstructor) {\n        return this._observers.get(ObserverConstructor);\n    }\n    /**\n     * Disables all added observers.\n     */\n    disableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.disable();\n        }\n    }\n    /**\n     * Enables all added observers.\n     */\n    enableObservers() {\n        for (const observer of this._observers.values()) {\n            observer.enable();\n        }\n    }\n    /**\n     * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n     * caret, **if not already visible to the user**.\n     *\n     * **Note**: Calling this method fires the {@link module:engine/view/view~ViewScrollToTheSelectionEvent} event that\n     * allows custom behaviors.\n     *\n     * @param options Additional configuration of the scrolling behavior.\n     * @param options.viewportOffset A distance between the DOM selection and the viewport boundary to be maintained\n     * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at\n     * the viewport boundary.\n     * @param options.ancestorOffset A distance between the DOM selection and scrollable DOM root ancestor(s) to be maintained\n     * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at\n     * the scrollable ancestor(s) boundary.\n     * @param options.alignToTop When set `true`, the DOM selection will be aligned to the top of the viewport if not already visible\n     * (see `forceScroll` to learn more).\n     * @param options.forceScroll When set `true`, the DOM selection will be aligned to the top of the viewport and scrollable ancestors\n     * whether it is already visible or not. This option will only work when `alignToTop` is `true`.\n     */\n    scrollToTheSelection({ alignToTop, forceScroll, viewportOffset = 20, ancestorOffset = 20 } = {}) {\n        const range = this.document.selection.getFirstRange();\n        if (!range) {\n            return;\n        }\n        // Clone to make sure properties like `viewportOffset` are not mutated in the event listeners.\n        const originalArgs = cloneDeep({ alignToTop, forceScroll, viewportOffset, ancestorOffset });\n        if (typeof viewportOffset === 'number') {\n            viewportOffset = {\n                top: viewportOffset,\n                bottom: viewportOffset,\n                left: viewportOffset,\n                right: viewportOffset\n            };\n        }\n        const options = {\n            target: this.domConverter.viewRangeToDom(range),\n            viewportOffset,\n            ancestorOffset,\n            alignToTop,\n            forceScroll\n        };\n        this.fire('scrollToTheSelection', options, originalArgs);\n        scrollViewportToShowTarget(options);\n    }\n    /**\n     * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n     * that is currently having selection inside.\n     */\n    focus() {\n        if (!this.document.isFocused) {\n            const editable = this.document.selection.editableElement;\n            if (editable) {\n                this.domConverter.focus(editable);\n                this.forceRender();\n            }\n            else {\n                // Before focusing view document, selection should be placed inside one of the view's editables.\n                // Normally its selection will be converted from model document (which have default selection), but\n                // when using view document on its own, we need to manually place selection before focusing it.\n                //\n                // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n            }\n        }\n    }\n    /**\n     * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n     * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n     * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n     * to nest calls one inside another and still performs a single rendering after all those changes are made.\n     * It also returns the return value of its callback.\n     *\n     * ```ts\n     * const text = view.change( writer => {\n     * \tconst newText = writer.createText( 'foo' );\n     * \twriter.insert( position1, newText );\n     *\n     * \tview.change( writer => {\n     * \t\twriter.insert( position2, writer.createText( 'bar' ) );\n     * \t} );\n     *\n     * \twriter.remove( range );\n     *\n     * \treturn newText;\n     * } );\n     * ```\n     *\n     * When the outermost change block is done and rendering to the DOM is over the\n     * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n     *\n     * This method throws a `applying-view-changes-on-rendering` error when\n     * the change block is used after rendering to the DOM has started.\n     *\n     * @param callback Callback function which may modify the view.\n     * @returns Value returned by the callback.\n     */\n    change(callback) {\n        if (this.isRenderingInProgress || this._postFixersInProgress) {\n            /**\n             * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n             * cause some unexpected behaviour and inconsistency between the DOM and the view.\n             * This may be caused by:\n             *\n             * * calling {@link module:engine/view/view~View#change} or {@link module:engine/view/view~View#forceRender} during rendering\n             * process,\n             * * calling {@link module:engine/view/view~View#change} or {@link module:engine/view/view~View#forceRender} inside of\n             *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n             *\n             * @error cannot-change-view-tree\n             */\n            throw new CKEditorError('cannot-change-view-tree', this);\n        }\n        try {\n            // Recursive call to view.change() method - execute listener immediately.\n            if (this._ongoingChange) {\n                return callback(this._writer);\n            }\n            // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n            // event for all nested calls.\n            this._ongoingChange = true;\n            const callbackResult = callback(this._writer);\n            this._ongoingChange = false;\n            // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n            // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n            // changes. Also, we don't need to render anything if there're no changes since last rendering.\n            if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n                this._postFixersInProgress = true;\n                this.document._callPostFixers(this._writer);\n                this._postFixersInProgress = false;\n                this.fire('render');\n            }\n            return callbackResult;\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n     * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n     *\n     * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n     * block and the view will automatically check whether it needs to render DOM or not.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n     * trying to re-render when rendering to DOM has already started.\n     */\n    forceRender() {\n        this._hasChangedSinceTheLastRendering = true;\n        this.getObserver(FocusObserver).flush();\n        this.change(() => { });\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n    destroy() {\n        for (const observer of this._observers.values()) {\n            observer.destroy();\n        }\n        this.document.destroy();\n        this.stopListening();\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param item View item after which the position should be located.\n     */\n    createPositionAfter(item) {\n        return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param item View item before which the position should be located.\n     */\n    createPositionBefore(item) {\n        return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     */\n    createRangeOn(item) {\n        return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return Range._createIn(element);\n    }\n    createSelection(...args) {\n        return new Selection(...args);\n    }\n    /**\n     * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n     * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n     *\n     * @internal\n     * @param flag A flag indicates whether the rendering should be disabled.\n     */\n    _disableRendering(flag) {\n        this._renderingDisabled = flag;\n        if (flag == false) {\n            // Render when you stop blocking rendering.\n            this.change(() => { });\n        }\n    }\n    /**\n     * Renders all changes. In order to avoid triggering the observers (e.g. selection) all observers are disabled\n     * before rendering and re-enabled after that.\n     */\n    _render() {\n        this.isRenderingInProgress = true;\n        this.disableObservers();\n        this._renderer.render();\n        this.enableObservers();\n        this.isRenderingInProgress = false;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nexport default class TypeCheckable {\n    /* istanbul ignore next -- @preserve */\n    is() {\n        // There are a lot of overloads above.\n        // Overriding method in derived classes remove them and only `is( type: string ): boolean` is visible which we don't want.\n        // One option would be to copy them all to all classes, but that's ugly.\n        // It's best when TypeScript compiler doesn't see those overloads, except the one in the top base class.\n        // To overload a method, but not let the compiler see it, do after class definition:\n        // `MyClass.prototype.is = function( type: string ) {...}`\n        throw new Error('is() method is abstract');\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * @module engine/model/node\n */\nimport TypeCheckable from './typecheckable';\nimport { CKEditorError, compareArrays, toMap } from '@ckeditor/ckeditor5-utils';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node extends TypeCheckable {\n    /**\n     * Creates a model node.\n     *\n     * This is an abstract class, so this constructor should not be used directly.\n     *\n     * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(attrs) {\n        super();\n        /**\n         * Parent of this node. It could be {@link module:engine/model/element~Element}\n         * or {@link module:engine/model/documentfragment~DocumentFragment}.\n         * Equals to `null` if the node has no parent.\n         */\n        this.parent = null;\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     */\n    get document() {\n        return null;\n    }\n    /**\n     * Index of this node in its parent or `null` if the node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that model tree got broken.\n     */\n    get index() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        if ((pos = this.parent.getChildIndex(this)) === null) {\n            throw new CKEditorError('model-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Offset at which this node starts in its parent. It is equal to the sum of {@link #offsetSize offsetSize}\n     * of all its previous siblings. Equals to `null` if node has no parent.\n     *\n     * Accessing this property throws an error if this node's parent element does not contain it.\n     * This means that model tree got broken.\n     */\n    get startOffset() {\n        let pos;\n        if (!this.parent) {\n            return null;\n        }\n        if ((pos = this.parent.getChildStartOffset(this)) === null) {\n            throw new CKEditorError('model-node-not-found-in-parent', this);\n        }\n        return pos;\n    }\n    /**\n     * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n     * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n     * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n     * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n     */\n    get offsetSize() {\n        return 1;\n    }\n    /**\n     * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n     * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n     * Equals to `null` if the node has no parent.\n     */\n    get endOffset() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.startOffset + this.offsetSize;\n    }\n    /**\n     * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n     */\n    get nextSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index + 1)) || null;\n    }\n    /**\n     * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n     */\n    get previousSibling() {\n        const index = this.index;\n        return (index !== null && this.parent.getChild(index - 1)) || null;\n    }\n    /**\n     * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n     * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n     */\n    get root() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let root = this;\n        while (root.parent) {\n            root = root.parent;\n        }\n        return root;\n    }\n    /**\n     * Returns `true` if the node is inside a document root that is attached to the document.\n     */\n    isAttached() {\n        // If the node has no parent it means that it is a root.\n        // But this is not a `RootElement`, so it means that it is not attached.\n        //\n        // If this is not the root, check if this element's root is attached.\n        return this.parent === null ? false : this.root.isAttached();\n    }\n    /**\n     * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n     * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n     * create {@link module:engine/model/position~Position Position} instance.\n     *\n     * ```ts\n     * const abc = new Text( 'abc' );\n     * const foo = new Text( 'foo' );\n     * const h1 = new Element( 'h1', null, new Text( 'header' ) );\n     * const p = new Element( 'p', null, [ abc, foo ] );\n     * const div = new Element( 'div', null, [ h1, p ] );\n     * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n     * h1.getPath(); // Returns [ 0 ].\n     * div.getPath(); // Returns [].\n     * ```\n     */\n    getPath() {\n        const path = [];\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        while (node.parent) {\n            path.unshift(node.startOffset);\n            node = node.parent;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this node.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of both nodes.\n     *\n     * @param node The second node.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` both nodes will be considered \"ancestors\" too.\n     * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n     */\n    getCommonAncestor(node, options = {}) {\n        const ancestorsA = this.getAncestors(options);\n        const ancestorsB = node.getAncestors(options);\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isBefore(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        const thisPath = this.getPath();\n        const nodePath = node.getPath();\n        const result = compareArrays(thisPath, nodePath);\n        switch (result) {\n            case 'prefix':\n                return true;\n            case 'extension':\n                return false;\n            default:\n                return thisPath[result] < nodePath[result];\n        }\n    }\n    /**\n     * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n     * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n     *\n     * @param node Node to compare with.\n     */\n    isAfter(node) {\n        // Given node is not before this node if they are same.\n        if (this == node) {\n            return false;\n        }\n        // Return `false` if it is impossible to compare nodes.\n        if (this.root !== node.root) {\n            return false;\n        }\n        // In other cases, just check if the `node` is before, and return the opposite.\n        return !this.isBefore(node);\n    }\n    /**\n     * Checks if the node has an attribute with given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on node, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._attrs.has(key);\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns iterator that iterates over this node's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._attrs.entries();\n    }\n    /**\n     * Returns iterator that iterates over this node's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._attrs.keys();\n    }\n    /**\n     * Converts `Node` to plain object and returns it.\n     *\n     * @returns `Node` converted to plain object.\n     */\n    toJSON() {\n        const json = {};\n        // Serializes attributes to the object.\n        // attributes = { a: 'foo', b: 1, c: true }.\n        if (this._attrs.size) {\n            json.attributes = Array.from(this._attrs).reduce((result, attr) => {\n                result[attr[0]] = attr[1];\n                return result;\n            }, {});\n        }\n        return json;\n    }\n    /**\n     * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n     *\n     * @internal\n     * @returns Node with same attributes as this node.\n     */\n    _clone(_deep) {\n        return new this.constructor(this._attrs);\n    }\n    /**\n     * Removes this node from it's parent.\n     *\n     * @internal\n     * @see module:engine/model/writer~Writer#remove\n     */\n    _remove() {\n        this.parent._removeChildren(this.index);\n    }\n    /**\n     * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n     *\n     * @see module:engine/model/writer~Writer#setAttribute\n     * @internal\n     * @param key Key of attribute to set.\n     * @param value Attribute value.\n     */\n    _setAttribute(key, value) {\n        this._attrs.set(key, value);\n    }\n    /**\n     * Removes all attributes from the node and sets given attributes.\n     *\n     * @see module:engine/model/writer~Writer#setAttributes\n     * @internal\n     * @param attrs Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    _setAttributesTo(attrs) {\n        this._attrs = toMap(attrs);\n    }\n    /**\n     * Removes an attribute with given key from the node.\n     *\n     * @see module:engine/model/writer~Writer#removeAttribute\n     * @internal\n     * @param key Key of attribute to remove.\n     * @returns `true` if the attribute was set on the element, `false` otherwise.\n     */\n    _removeAttribute(key) {\n        return this._attrs.delete(key);\n    }\n    /**\n     * Removes all attributes from the node.\n     *\n     * @see module:engine/model/writer~Writer#clearAttributes\n     * @internal\n     */\n    _clearAttributes() {\n        this._attrs.clear();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nNode.prototype.is = function (type) {\n    return type === 'node' || type === 'model:node';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/nodelist\n */\nimport Node from './node';\nimport { CKEditorError, spliceArray } from '@ckeditor/ckeditor5-utils';\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n    /**\n     * Creates an empty node list.\n     *\n     * @internal\n     * @param nodes Nodes contained in this node list.\n     */\n    constructor(nodes) {\n        /**\n         * Nodes contained in this node list.\n         */\n        this._nodes = [];\n        if (nodes) {\n            this._insertNodes(0, nodes);\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all nodes contained inside this node list.\n     */\n    [Symbol.iterator]() {\n        return this._nodes[Symbol.iterator]();\n    }\n    /**\n     * Number of nodes contained inside this node list.\n     */\n    get length() {\n        return this._nodes.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n     */\n    get maxOffset() {\n        return this._nodes.reduce((sum, node) => sum + node.offsetSize, 0);\n    }\n    /**\n     * Gets the node at the given index. Returns `null` if incorrect index was passed.\n     */\n    getNode(index) {\n        return this._nodes[index] || null;\n    }\n    /**\n     * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n     */\n    getNodeIndex(node) {\n        const index = this._nodes.indexOf(node);\n        return index == -1 ? null : index;\n    }\n    /**\n     * Returns the starting offset of given node. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n     */\n    getNodeStartOffset(node) {\n        const index = this.getNodeIndex(node);\n        return index === null ? null : this._nodes.slice(0, index).reduce((sum, node) => sum + node.offsetSize, 0);\n    }\n    /**\n     * Converts index to offset in node list.\n     *\n     * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n     */\n    indexToOffset(index) {\n        if (index == this._nodes.length) {\n            return this.maxOffset;\n        }\n        const node = this._nodes[index];\n        if (!node) {\n            /**\n             * Given index cannot be found in the node list.\n             *\n             * @error model-nodelist-index-out-of-bounds\n             */\n            throw new CKEditorError('model-nodelist-index-out-of-bounds', this);\n        }\n        return this.getNodeStartOffset(node);\n    }\n    /**\n     * Converts offset in node list to index.\n     *\n     * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n     */\n    offsetToIndex(offset) {\n        let totalOffset = 0;\n        for (const node of this._nodes) {\n            if (offset >= totalOffset && offset < totalOffset + node.offsetSize) {\n                return this.getNodeIndex(node);\n            }\n            totalOffset += node.offsetSize;\n        }\n        if (totalOffset != offset) {\n            /**\n             * Given offset cannot be found in the node list.\n             *\n             * @error model-nodelist-offset-out-of-bounds\n             * @param offset\n             * @param nodeList Stringified node list.\n             */\n            throw new CKEditorError('model-nodelist-offset-out-of-bounds', this, {\n                offset,\n                nodeList: this\n            });\n        }\n        return this.length;\n    }\n    /**\n     * Inserts given nodes at given index.\n     *\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param nodes Nodes to be inserted.\n     */\n    _insertNodes(index, nodes) {\n        // Validation.\n        for (const node of nodes) {\n            if (!(node instanceof Node)) {\n                /**\n                 * Trying to insert an object which is not a Node instance.\n                 *\n                 * @error model-nodelist-insertnodes-not-node\n                 */\n                throw new CKEditorError('model-nodelist-insertnodes-not-node', this);\n            }\n        }\n        this._nodes = spliceArray(this._nodes, Array.from(nodes), index, 0);\n    }\n    /**\n     * Removes one or more nodes starting at the given index.\n     *\n     * @internal\n     * @param indexStart Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeNodes(indexStart, howMany = 1) {\n        return this._nodes.splice(indexStart, howMany);\n    }\n    /**\n     * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n     * are also converted to their plain object representation.\n     *\n     * @returns `NodeList` instance converted to `Array`.\n     */\n    toJSON() {\n        return this._nodes.map(node => node.toJSON());\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/splicearray\n */\nconst BIG_CHUNK_SIZE = 10000;\n/**\n * Splices one array into another. To be used instead of `Array.prototype.splice` as the latter may\n * throw \"Maximum call stack size exceeded\" when passed huge number of items to insert.\n *\n * Note: in contrary to Array.splice, this function does not modify the original `target`.\n *\n * ```ts\n * spliceArray( [ 1, 2 ], [ 3, 4 ], 0, 0 );\t// [ 3, 4, 1, 2 ]\n * spliceArray( [ 1, 2 ], [ 3, 4 ], 1, 1 );\t// [ 1, 3, 4 ]\n * spliceArray( [ 1, 2 ], [ 3, 4 ], 1, 0 );\t// [ 1, 3, 4, 2 ]\n * spliceArray( [ 1, 2 ], [ 3, 4 ], 2, 0 );\t// [ 1, 2, 3, 4 ]\n * spliceArray( [ 1, 2 ], [],       0, 1 );\t// [ 2 ]\n * ```\n *\n * @param target Array to be spliced.\n * @param source Array of elements to be inserted to target.\n * @param start Index at which nodes should be inserted/removed.\n * @param count Number of items.\n *\n * @returns New spliced array.\n */\nexport default function spliceArray(target, source, start, count) {\n    // In case of performance problems, see: https://github.com/ckeditor/ckeditor5/pull/12429/files#r965850568\n    if (Math.max(source.length, target.length) > BIG_CHUNK_SIZE) {\n        return target.slice(0, start).concat(source).concat(target.slice(start + count, target.length));\n    }\n    else {\n        const newTarget = Array.from(target);\n        newTarget.splice(start, count, ...source);\n        return newTarget;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/text\n */\nimport Node from './node';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n */\nexport default class Text extends Node {\n    /**\n     * Creates a text node.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n     *\n     * @internal\n     * @param data Node's text.\n     * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     */\n    constructor(data, attrs) {\n        super(attrs);\n        this._data = data || '';\n    }\n    /**\n     * @inheritDoc\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Returns a text data contained in the node.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Converts `Text` instance to plain object and returns it.\n     *\n     * @returns`Text` instance converted to plain object.\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.data = this.data;\n        return json;\n    }\n    /**\n     * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n     *\n     * @internal\n     * @returns `Text` instance created using given plain object.\n     */\n    _clone() {\n        return new Text(this.data, this.getAttributes());\n    }\n    /**\n     * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Text`.\n     * @returns `Text` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        return new Text(json.data, json.attributes);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nText.prototype.is = function (type) {\n    return type === '$text' || type === 'model:$text' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'text' || type === 'model:text' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'node' || type === 'model:node';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/textproxy\n */\nimport TypeCheckable from './typecheckable';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy extends TypeCheckable {\n    /**\n     * Creates a text proxy.\n     *\n     * @internal\n     * @param textNode Text node which part is represented by this text proxy.\n     * @param offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n     * starts.\n     * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n     */\n    constructor(textNode, offsetInText, length) {\n        super();\n        this.textNode = textNode;\n        if (offsetInText < 0 || offsetInText > textNode.offsetSize) {\n            /**\n             * Given `offsetInText` value is incorrect.\n             *\n             * @error model-textproxy-wrong-offsetintext\n             */\n            throw new CKEditorError('model-textproxy-wrong-offsetintext', this);\n        }\n        if (length < 0 || offsetInText + length > textNode.offsetSize) {\n            /**\n             * Given `length` value is incorrect.\n             *\n             * @error model-textproxy-wrong-length\n             */\n            throw new CKEditorError('model-textproxy-wrong-length', this);\n        }\n        this.data = textNode.data.substring(offsetInText, offsetInText + length);\n        this.offsetInText = offsetInText;\n    }\n    /**\n     * Offset at which this text proxy starts in it's parent.\n     *\n     * @see module:engine/model/node~Node#startOffset\n     */\n    get startOffset() {\n        return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n    }\n    /**\n     * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n     *\n     * @see module:engine/model/node~Node#offsetSize\n     */\n    get offsetSize() {\n        return this.data.length;\n    }\n    /**\n     * Offset at which this text proxy ends in it's parent.\n     *\n     * @see module:engine/model/node~Node#endOffset\n     */\n    get endOffset() {\n        return this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n    }\n    /**\n     * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n     * (`true`) or the whole text node (`false`).\n     *\n     * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n     * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n     * text node size.\n     */\n    get isPartial() {\n        return this.offsetSize !== this.textNode.offsetSize;\n    }\n    /**\n     * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n     */\n    get parent() {\n        return this.textNode.parent;\n    }\n    /**\n     * Root of this text proxy, which is same as root of text node represented by this text proxy.\n     */\n    get root() {\n        return this.textNode.root;\n    }\n    /**\n     * Gets path to this text proxy.\n     *\n     * @see module:engine/model/node~Node#getPath\n     */\n    getPath() {\n        const path = this.textNode.getPath();\n        if (path.length > 0) {\n            path[path.length - 1] += this.offsetInText;\n        }\n        return path;\n    }\n    /**\n     * Returns ancestors array of this text proxy.\n     *\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this text proxy will be also included in parent's array.\n     * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to root element,\n     * otherwise root element will be the first item in the array.\n     * @returns Array with ancestors.\n     */\n    getAncestors(options = {}) {\n        const ancestors = [];\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n            parent = parent.parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Checks if this text proxy has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on text proxy, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this.textNode.hasAttribute(key);\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this.textNode.getAttribute(key);\n    }\n    /**\n     * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n     * items. First one is attribute key and second is attribute value.\n     *\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this.textNode.getAttributes();\n    }\n    /**\n     * Returns iterator that iterates over this node's attribute keys.\n     */\n    getAttributeKeys() {\n        return this.textNode.getAttributeKeys();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nTextProxy.prototype.is = function (type) {\n    return type === '$textProxy' || type === 'model:$textProxy' ||\n        // This are legacy values kept for backward compatibility.\n        type === 'textProxy' || type === 'model:textProxy';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/element\n */\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { isIterable } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { stringifyMap, convertMapToStringifiedObject, convertMapToTags } = require( '../dev-utils/utils' );\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n */\nexport default class Element extends Node {\n    /**\n     * Creates a model element.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n     *\n     * @internal\n     * @param name Element's name.\n     * @param attrs Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n     * @param children One or more nodes to be inserted as children of created element.\n     */\n    constructor(name, attrs, children) {\n        super(attrs);\n        /**\n         * List of children nodes.\n         */\n        this._children = new NodeList();\n        this.name = name;\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Number of this element's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n     */\n    get maxOffset() {\n        return this._children.maxOffset;\n    }\n    /**\n     * Is `true` if there are no nodes inside this element, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Gets the child at the given index.\n     */\n    getChild(index) {\n        return this._children.getNode(index);\n    }\n    /**\n     * Returns an iterator that iterates over all of this element's children.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's index in this element.\n     */\n    getChildIndex(node) {\n        return this._children.getNodeIndex(node);\n    }\n    /**\n     * Returns the starting offset of given child. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n     * given node is not a child of this element.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's starting offset.\n     */\n    getChildStartOffset(node) {\n        return this._children.getNodeStartOffset(node);\n    }\n    /**\n     * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n     * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n     *\n     * ```ts\n     * const textNode = new Text( 'foo' );\n     * const pElement = new Element( 'p' );\n     * const divElement = new Element( [ textNode, pElement ] );\n     * divElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n     * divElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n     * divElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n     * divElement.offsetToIndex( 2 ); // Returns 0.\n     * divElement.offsetToIndex( 3 ); // Returns 1.\n     * divElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n     * ```\n     */\n    offsetToIndex(offset) {\n        return this._children.offsetToIndex(offset);\n    }\n    /**\n     * Returns a descendant node by its path relative to this element.\n     *\n     * ```ts\n     * // <this>a<b>c</b></this>\n     * this.getNodeByPath( [ 0 ] );     // -> \"a\"\n     * this.getNodeByPath( [ 1 ] );     // -> <b>\n     * this.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n     * ```\n     *\n     * @param relativePath Path of the node to find, relative to this element.\n     */\n    getNodeByPath(relativePath) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        for (const index of relativePath) {\n            node = node.getChild(node.offsetToIndex(index));\n        }\n        return node;\n    }\n    /**\n     * Returns the parent element of the given name. Returns null if the element is not inside the desired parent.\n     *\n     * @param parentName The name of the parent element to find.\n     * @param options Options object.\n     * @param options.includeSelf When set to `true` this node will be also included while searching.\n     */\n    findAncestor(parentName, options = {}) {\n        let parent = options.includeSelf ? this : this.parent;\n        while (parent) {\n            if (parent.name === parentName) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n     *\n     * @returns `Element` instance converted to plain object.\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.name = this.name;\n        if (this._children.length > 0) {\n            json.children = [];\n            for (const node of this._children) {\n                json.children.push(node.toJSON());\n            }\n        }\n        return json;\n    }\n    /**\n     * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n     * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.\n     *\n     * @internal\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any child.\n     */\n    _clone(deep = false) {\n        const children = deep ? Array.from(this._children).map(node => node._clone(true)) : undefined;\n        return new Element(this.name, this.getAttributes(), children);\n    }\n    /**\n     * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n     *\n     * @see module:engine/model/writer~Writer#append\n     * @internal\n     * @param nodes Nodes to be inserted.\n     */\n    _appendChild(nodes) {\n        this._insertChild(this.childCount, nodes);\n    }\n    /**\n     * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n     * to this element.\n     *\n     * @see module:engine/model/writer~Writer#insert\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param items Items to be inserted.\n     */\n    _insertChild(index, items) {\n        const nodes = normalize(items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n        }\n        this._children._insertNodes(index, nodes);\n    }\n    /**\n     * Removes one or more nodes starting at the given index and sets\n     * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n     *\n     * @see module:engine/model/writer~Writer#remove\n     * @internal\n     * @param index Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        const nodes = this._children._removeNodes(index, howMany);\n        for (const node of nodes) {\n            node.parent = null;\n        }\n        return nodes;\n    }\n    /**\n     * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n     * Converts `Element` children to proper nodes.\n     *\n     * @param json Plain object to be converted to `Element`.\n     * @returns `Element` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        let children;\n        if (json.children) {\n            children = [];\n            for (const child of json.children) {\n                if (child.name) {\n                    // If child has name property, it is an Element.\n                    children.push(Element.fromJSON(child));\n                }\n                else {\n                    // Otherwise, it is a Text node.\n                    children.push(Text.fromJSON(child));\n                }\n            }\n        }\n        return new Element(json.name, json.attributes, children);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'element' || type === 'model:element' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'node' || type === 'model:node';\n    }\n    return name === this.name && (type === 'element' || type === 'model:element');\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(node.data, node.getAttributes());\n        }\n        return node;\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/treewalker\n */\nimport Element from './element';\nimport { default as Position, getTextNodeAtPosition, getNodeAfterPosition, getNodeBeforePosition } from './position';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n    /**\n     * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n     *\n     * @param options Object with configuration.\n     */\n    constructor(options) {\n        if (!options || (!options.boundaries && !options.startPosition)) {\n            /**\n             * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n             *\n             * @error model-tree-walker-no-start-position\n             */\n            throw new CKEditorError('model-tree-walker-no-start-position', null);\n        }\n        const direction = options.direction || 'forward';\n        if (direction != 'forward' && direction != 'backward') {\n            /**\n             * Only `backward` and `forward` direction allowed.\n             *\n             * @error model-tree-walker-unknown-direction\n             */\n            throw new CKEditorError('model-tree-walker-unknown-direction', options, { direction });\n        }\n        this.direction = direction;\n        this.boundaries = options.boundaries || null;\n        if (options.startPosition) {\n            this._position = options.startPosition.clone();\n        }\n        else {\n            this._position = Position._createAt(this.boundaries[this.direction == 'backward' ? 'end' : 'start']);\n        }\n        // Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n        this.position.stickiness = 'toNone';\n        this.singleCharacters = !!options.singleCharacters;\n        this.shallow = !!options.shallow;\n        this.ignoreElementEnd = !!options.ignoreElementEnd;\n        this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n        this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n        this._visitedParent = this.position.parent;\n    }\n    /**\n     * Iterable interface.\n     *\n     * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Iterator position. This is always static position, even if the initial position was a\n     * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n     * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n     * is `'backward'` position starts from the end.\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n     *\n     * For example:\n     *\n     * ```ts\n     * walker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n     * walker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n     * walker.skip( () => false ); // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     */\n    skip(skip) {\n        let done, value, prevPosition, prevVisitedParent;\n        do {\n            prevPosition = this.position;\n            prevVisitedParent = this._visitedParent;\n            ({ done, value } = this.next());\n        } while (!done && skip(value));\n        if (!done) {\n            this._position = prevPosition;\n            this._visitedParent = prevVisitedParent;\n        }\n    }\n    /**\n     * Gets the next tree walker's value.\n     */\n    next() {\n        if (this.direction == 'forward') {\n            return this._next();\n        }\n        else {\n            return this._previous();\n        }\n    }\n    /**\n     * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n     */\n    _next() {\n        const previousPosition = this.position;\n        const position = this.position.clone();\n        const parent = this._visitedParent;\n        // We are at the end of the root.\n        if (parent.parent === null && position.offset === parent.maxOffset) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just after the current position.\n        // Use a highly optimized version instead of checking the text node first and then getting the node after. See #6582.\n        const textNodeAtPosition = getTextNodeAtPosition(position, parent);\n        const node = textNodeAtPosition || getNodeAfterPosition(position, parent, textNodeAtPosition);\n        if (node instanceof Element) {\n            if (!this.shallow) {\n                // Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n                position.path.push(0);\n                this._visitedParent = node;\n            }\n            else {\n                // We are past the walker boundaries.\n                if (this.boundaries && this.boundaries.end.isBefore(position)) {\n                    return { done: true, value: undefined };\n                }\n                position.offset++;\n            }\n            this._position = position;\n            return formatReturnValue('elementStart', node, previousPosition, position, 1);\n        }\n        if (node instanceof Text) {\n            let charactersCount;\n            if (this.singleCharacters) {\n                charactersCount = 1;\n            }\n            else {\n                let offset = node.endOffset;\n                if (this._boundaryEndParent == parent && this.boundaries.end.offset < offset) {\n                    offset = this.boundaries.end.offset;\n                }\n                charactersCount = offset - position.offset;\n            }\n            const offsetInTextNode = position.offset - node.startOffset;\n            const item = new TextProxy(node, offsetInTextNode, charactersCount);\n            position.offset += charactersCount;\n            this._position = position;\n            return formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        // `node` is not set, we reached the end of current `parent`.\n        position.path.pop();\n        position.offset++;\n        this._position = position;\n        this._visitedParent = parent.parent;\n        if (this.ignoreElementEnd) {\n            return this._next();\n        }\n        return formatReturnValue('elementEnd', parent, previousPosition, position);\n    }\n    /**\n     * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n     */\n    _previous() {\n        const previousPosition = this.position;\n        const position = this.position.clone();\n        const parent = this._visitedParent;\n        // We are at the beginning of the root.\n        if (parent.parent === null && position.offset === 0) {\n            return { done: true, value: undefined };\n        }\n        // We reached the walker boundary.\n        if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n            return { done: true, value: undefined };\n        }\n        // Get node just before the current position.\n        // Use a highly optimized version instead of checking the text node first and then getting the node before. See #6582.\n        const positionParent = position.parent;\n        const textNodeAtPosition = getTextNodeAtPosition(position, positionParent);\n        const node = textNodeAtPosition || getNodeBeforePosition(position, positionParent, textNodeAtPosition);\n        if (node instanceof Element) {\n            position.offset--;\n            if (this.shallow) {\n                this._position = position;\n                return formatReturnValue('elementStart', node, previousPosition, position, 1);\n            }\n            position.path.push(node.maxOffset);\n            this._position = position;\n            this._visitedParent = node;\n            if (this.ignoreElementEnd) {\n                return this._previous();\n            }\n            return formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n        if (node instanceof Text) {\n            let charactersCount;\n            if (this.singleCharacters) {\n                charactersCount = 1;\n            }\n            else {\n                let offset = node.startOffset;\n                if (this._boundaryStartParent == parent && this.boundaries.start.offset > offset) {\n                    offset = this.boundaries.start.offset;\n                }\n                charactersCount = position.offset - offset;\n            }\n            const offsetInTextNode = position.offset - node.startOffset;\n            const item = new TextProxy(node, offsetInTextNode - charactersCount, charactersCount);\n            position.offset -= charactersCount;\n            this._position = position;\n            return formatReturnValue('text', item, previousPosition, position, charactersCount);\n        }\n        // `node` is not set, we reached the beginning of current `parent`.\n        position.path.pop();\n        this._position = position;\n        this._visitedParent = parent.parent;\n        return formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n}\nfunction formatReturnValue(type, item, previousPosition, nextPosition, length) {\n    return {\n        done: false,\n        value: {\n            type,\n            item,\n            previousPosition,\n            nextPosition,\n            length\n        }\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/position\n */\nimport TypeCheckable from './typecheckable';\nimport TreeWalker from './treewalker';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position extends TypeCheckable {\n    /**\n     * Creates a position.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    constructor(root, path, stickiness = 'toNone') {\n        super();\n        if (!root.is('element') && !root.is('documentFragment')) {\n            /**\n             * Position root is invalid.\n             *\n             * Positions can only be anchored in elements or document fragments.\n             *\n             * @error model-position-root-invalid\n             */\n            throw new CKEditorError('model-position-root-invalid', root);\n        }\n        if (!(path instanceof Array) || path.length === 0) {\n            /**\n             * Position path must be an array with at least one item.\n             *\n             * @error model-position-path-incorrect-format\n             * @param path\n             */\n            throw new CKEditorError('model-position-path-incorrect-format', root, { path });\n        }\n        // Normalize the root and path when element (not root) is passed.\n        if (root.is('rootElement')) {\n            path = path.slice();\n        }\n        else {\n            path = [...root.getPath(), ...path];\n            root = root.root;\n        }\n        this.root = root;\n        this.path = path;\n        this.stickiness = stickiness;\n    }\n    /**\n     * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n     * to the last item in position {@link module:engine/model/position~Position#path path}.\n     *\n     * @type {Number}\n     */\n    get offset() {\n        return this.path[this.path.length - 1];\n    }\n    set offset(newOffset) {\n        this.path[this.path.length - 1] = newOffset;\n    }\n    /**\n     * Parent element of this position.\n     *\n     * Keep in mind that `parent` value is calculated when the property is accessed.\n     * If {@link module:engine/model/position~Position#path position path}\n     * leads to a non-existing element, `parent` property will throw error.\n     *\n     * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n     */\n    get parent() {\n        let parent = this.root;\n        for (let i = 0; i < this.path.length - 1; i++) {\n            parent = parent.getChild(parent.offsetToIndex(this.path[i]));\n            if (!parent) {\n                /**\n                 * The position's path is incorrect. This means that a position does not point to\n                 * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n                 *\n                 * **Note**: Unlike DOM and view positions, in the model, the\n                 * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n                 * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element\n                 * where this position points.\n                 *\n                 * Read more about model positions and offsets in\n                 * the {@glink framework/architecture/editing-engine#indexes-and-offsets Editing engine architecture} guide.\n                 *\n                 * @error model-position-path-incorrect\n                 * @param position The incorrect position.\n                 */\n                throw new CKEditorError('model-position-path-incorrect', this, { position: this });\n            }\n        }\n        if (parent.is('$text')) {\n            throw new CKEditorError('model-position-path-incorrect', this, { position: this });\n        }\n        return parent;\n    }\n    /**\n     * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n     * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n     * in text node, position index is equal to the index of that text node.\n     */\n    get index() {\n        return this.parent.offsetToIndex(this.offset);\n    }\n    /**\n     * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n     * position is not in a text node.\n     */\n    get textNode() {\n        return getTextNodeAtPosition(this, this.parent);\n    }\n    /**\n     * Node directly after this position or `null` if this position is in text node.\n     */\n    get nodeAfter() {\n        // Cache the parent and reuse for performance reasons. See #6579 and #6582.\n        const parent = this.parent;\n        return getNodeAfterPosition(this, parent, getTextNodeAtPosition(this, parent));\n    }\n    /**\n     * Node directly before this position or `null` if this position is in text node.\n     */\n    get nodeBefore() {\n        // Cache the parent and reuse for performance reasons. See #6579 and #6582.\n        const parent = this.parent;\n        return getNodeBeforePosition(this, parent, getTextNodeAtPosition(this, parent));\n    }\n    /**\n     * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtStart() {\n        return this.offset === 0;\n    }\n    /**\n     * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n     */\n    get isAtEnd() {\n        return this.offset == this.parent.maxOffset;\n    }\n    /**\n     * Checks whether this position is before or after given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     */\n    compareWith(otherPosition) {\n        if (this.root != otherPosition.root) {\n            return 'different';\n        }\n        const result = compareArrays(this.path, otherPosition.path);\n        switch (result) {\n            case 'same':\n                return 'same';\n            case 'prefix':\n                return 'before';\n            case 'extension':\n                return 'after';\n            default:\n                return this.path[result] < otherPosition.path[result] ? 'before' : 'after';\n        }\n    }\n    /**\n     * Gets the farthest position which matches the callback using\n     * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n     *\n     * For example:\n     *\n     * ```ts\n     * getLastMatchingPosition( value => value.type == 'text' );\n     * // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n     *\n     * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n     * // <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n     *\n     * getLastMatchingPosition( value => false );\n     * // Do not move the position.\n     * ```\n     *\n     * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n     * return `true` if the value should be skipped or `false` if not.\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     *\n     * @returns The position after the last item which matches the `skip` callback test.\n     */\n    getLastMatchingPosition(skip, options = {}) {\n        options.startPosition = this;\n        const treeWalker = new TreeWalker(options);\n        treeWalker.skip(skip);\n        return treeWalker.position;\n    }\n    /**\n     * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n     * but without the last item.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @returns Path to the parent.\n     */\n    getParentPath() {\n        return this.path.slice(0, -1);\n    }\n    /**\n     * Returns ancestors array of this position, that is this position's parent and its ancestors.\n     *\n     * @returns Array with ancestors.\n     */\n    getAncestors() {\n        const parent = this.parent;\n        if (parent.is('documentFragment')) {\n            return [parent];\n        }\n        else {\n            return parent.getAncestors({ includeSelf: true });\n        }\n    }\n    /**\n     * Returns the parent element of the given name. Returns null if the position is not inside the desired parent.\n     *\n     * @param parentName The name of the parent element to find.\n     */\n    findAncestor(parentName) {\n        const parent = this.parent;\n        if (parent.is('element')) {\n            return parent.findAncestor(parentName, { includeSelf: true });\n        }\n        return null;\n    }\n    /**\n     * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n     * of these two paths must be identical.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param position The second position.\n     * @returns The common path.\n     */\n    getCommonPath(position) {\n        if (this.root != position.root) {\n            return [];\n        }\n        // We find on which tree-level start and end have the lowest common ancestor\n        const cmp = compareArrays(this.path, position.path);\n        // If comparison returned string it means that arrays are same.\n        const diffAt = (typeof cmp == 'string') ? Math.min(this.path.length, position.path.length) : cmp;\n        return this.path.slice(0, diffAt);\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n     *\n     * @param position The second position.\n     */\n    getCommonAncestor(position) {\n        const ancestorsA = this.getAncestors();\n        const ancestorsB = position.getAncestors();\n        let i = 0;\n        while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n            i++;\n        }\n        return i === 0 ? null : ancestorsA[i - 1];\n    }\n    /**\n     * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n     * is shifted by `shift` value (can be a negative value).\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param shift Offset shift. Can be a negative value.\n     * @returns Shifted position.\n     */\n    getShiftedBy(shift) {\n        const shifted = this.clone();\n        const offset = shifted.offset + shift;\n        shifted.offset = offset < 0 ? 0 : offset;\n        return shifted;\n    }\n    /**\n     * Checks whether this position is after given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @see module:engine/model/position~Position#isBefore\n     * @param  otherPosition Position to compare with.\n     * @returns True if this position is after given position.\n     */\n    isAfter(otherPosition) {\n        return this.compareWith(otherPosition) == 'after';\n    }\n    /**\n     * Checks whether this position is before given position.\n     *\n     * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n     * be `true` if positions are in different roots and you might not expect this. You should probably use\n     * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n     * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n     *\n     * ```ts\n     * if ( a.isBefore( b ) && c.isAfter( d ) ) {\n     * \t// do A.\n     * } else {\n     * \t// do B.\n     * }\n     * ```\n     *\n     * or, if you have only one if-branch:\n     *\n     * ```ts\n     * if ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n     * \t// do B.\n     * }\n     * ```\n     *\n     * rather than:\n     *\n     * ```ts\n     * if ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n     * \t// do B.\n     * } else {\n     * \t// do A.\n     * }\n     * ```\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if this position is before given position.\n     */\n    isBefore(otherPosition) {\n        return this.compareWith(otherPosition) == 'before';\n    }\n    /**\n     * Checks whether this position is equal to given position.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions are same.\n     */\n    isEqual(otherPosition) {\n        return this.compareWith(otherPosition) == 'same';\n    }\n    /**\n     * Checks whether this position is touching given position. Positions touch when there are no text nodes\n     * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n     * they are very similar or even indistinguishable.\n     *\n     * @param otherPosition Position to compare with.\n     * @returns True if positions touch.\n     */\n    isTouching(otherPosition) {\n        if (this.root !== otherPosition.root) {\n            return false;\n        }\n        const commonLevel = Math.min(this.path.length, otherPosition.path.length);\n        for (let level = 0; level < commonLevel; level++) {\n            const diff = this.path[level] - otherPosition.path[level];\n            // Positions are spread by a node, so they are not touching.\n            if (diff < -1 || diff > 1) {\n                return false;\n            }\n            else if (diff === 1) {\n                // `otherPosition` is on the left.\n                // `this` is on the right.\n                return checkTouchingBranch(otherPosition, this, level);\n            }\n            else if (diff === -1) {\n                // `this` is on the left.\n                // `otherPosition` is on the right.\n                return checkTouchingBranch(this, otherPosition, level);\n            }\n            // `diff === 0`.\n            // Positions are inside the same element on this level, compare deeper.\n        }\n        // If we ended up here, it means that positions paths have the same beginning.\n        // If the paths have the same length, then it means that they are identical, so the positions are same.\n        if (this.path.length === otherPosition.path.length) {\n            return true;\n        }\n        // If positions have different length of paths, then the common part is the same.\n        // In this case, the \"shorter\" position is on the left, the \"longer\" position is on the right.\n        //\n        // If the positions are touching, the \"longer\" position must have only zeroes. For example:\n        // [ 1, 2 ] vs [ 1, 2, 0 ]\n        // [ 1, 2 ] vs [ 1, 2, 0, 0, 0 ]\n        else if (this.path.length > otherPosition.path.length) {\n            return checkOnlyZeroes(this.path, commonLevel);\n        }\n        else {\n            return checkOnlyZeroes(otherPosition.path, commonLevel);\n        }\n    }\n    /**\n     * Checks if two positions are in the same parent.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param position Position to compare with.\n     * @returns `true` if positions have the same parent, `false` otherwise.\n     */\n    hasSameParentAs(position) {\n        if (this.root !== position.root) {\n            return false;\n        }\n        const thisParentPath = this.getParentPath();\n        const posParentPath = position.getParentPath();\n        return compareArrays(thisParentPath, posParentPath) == 'same';\n    }\n    /**\n     * Returns a copy of this position that is transformed by given `operation`.\n     *\n     * The new position's parameters are updated accordingly to the effect of the `operation`.\n     *\n     * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n     * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n     *\n     * This method is safe to use it on non-existing positions (for example during operational transformation).\n     *\n     * @param operation Operation to transform by.\n     * @returns Transformed position.\n     */\n    getTransformedByOperation(operation) {\n        let result;\n        switch (operation.type) {\n            case 'insert':\n                result = this._getTransformedByInsertOperation(operation);\n                break;\n            case 'move':\n            case 'remove':\n            case 'reinsert':\n                result = this._getTransformedByMoveOperation(operation);\n                break;\n            case 'split':\n                result = this._getTransformedBySplitOperation(operation);\n                break;\n            case 'merge':\n                result = this._getTransformedByMergeOperation(operation);\n                break;\n            default:\n                result = Position._createAt(this);\n                break;\n        }\n        return result;\n    }\n    /**\n     * Returns a copy of this position transformed by an insert operation.\n     *\n     * @internal\n     */\n    _getTransformedByInsertOperation(operation) {\n        return this._getTransformedByInsertion(operation.position, operation.howMany);\n    }\n    /**\n     * Returns a copy of this position transformed by a move operation.\n     *\n     * @internal\n     */\n    _getTransformedByMoveOperation(operation) {\n        return this._getTransformedByMove(operation.sourcePosition, operation.targetPosition, operation.howMany);\n    }\n    /**\n     * Returns a copy of this position transformed by a split operation.\n     *\n     * @internal\n     */\n    _getTransformedBySplitOperation(operation) {\n        const movedRange = operation.movedRange;\n        const isContained = movedRange.containsPosition(this) ||\n            (movedRange.start.isEqual(this) && this.stickiness == 'toNext');\n        if (isContained) {\n            return this._getCombined(operation.splitPosition, operation.moveTargetPosition);\n        }\n        else {\n            if (operation.graveyardPosition) {\n                return this._getTransformedByMove(operation.graveyardPosition, operation.insertionPosition, 1);\n            }\n            else {\n                return this._getTransformedByInsertion(operation.insertionPosition, 1);\n            }\n        }\n    }\n    /**\n     * Returns a copy of this position transformed by merge operation.\n     *\n     * @internal\n     */\n    _getTransformedByMergeOperation(operation) {\n        const movedRange = operation.movedRange;\n        const isContained = movedRange.containsPosition(this) || movedRange.start.isEqual(this);\n        let pos;\n        if (isContained) {\n            pos = this._getCombined(operation.sourcePosition, operation.targetPosition);\n            if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n                // Above happens during OT when the merged element is moved before the merged-to element.\n                pos = pos._getTransformedByDeletion(operation.deletionPosition, 1);\n            }\n        }\n        else if (this.isEqual(operation.deletionPosition)) {\n            pos = Position._createAt(operation.deletionPosition);\n        }\n        else {\n            pos = this._getTransformedByMove(operation.deletionPosition, operation.graveyardPosition, 1);\n        }\n        return pos;\n    }\n    /**\n     * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n     * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n     *\n     * @internal\n     * @param deletePosition Position before the first removed node.\n     * @param howMany How many nodes are removed.\n     * @returns Transformed position or `null`.\n     */\n    _getTransformedByDeletion(deletePosition, howMany) {\n        const transformed = Position._createAt(this);\n        // This position can't be affected if deletion was in a different root.\n        if (this.root != deletePosition.root) {\n            return transformed;\n        }\n        if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'same') {\n            // If nodes are removed from the node that is pointed by this position...\n            if (deletePosition.offset < this.offset) {\n                // And are removed from before an offset of that position...\n                if (deletePosition.offset + howMany > this.offset) {\n                    // Position is in removed range, it's no longer in the tree.\n                    return null;\n                }\n                else {\n                    // Decrement the offset accordingly.\n                    transformed.offset -= howMany;\n                }\n            }\n        }\n        else if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'prefix') {\n            // If nodes are removed from a node that is on a path to this position...\n            const i = deletePosition.path.length - 1;\n            if (deletePosition.offset <= this.path[i]) {\n                // And are removed from before next node of that path...\n                if (deletePosition.offset + howMany > this.path[i]) {\n                    // If the next node of that path is removed return null\n                    // because the node containing this position got removed.\n                    return null;\n                }\n                else {\n                    // Otherwise, decrement index on that path.\n                    transformed.path[i] -= howMany;\n                }\n            }\n        }\n        return transformed;\n    }\n    /**\n     * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n     *\n     * @internal\n     * @param insertPosition Position where nodes are inserted.\n     * @param howMany How many nodes are inserted.\n     * @returns Transformed position.\n     */\n    _getTransformedByInsertion(insertPosition, howMany) {\n        const transformed = Position._createAt(this);\n        // This position can't be affected if insertion was in a different root.\n        if (this.root != insertPosition.root) {\n            return transformed;\n        }\n        if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'same') {\n            // If nodes are inserted in the node that is pointed by this position...\n            if (insertPosition.offset < this.offset || (insertPosition.offset == this.offset && this.stickiness != 'toPrevious')) {\n                // And are inserted before an offset of that position...\n                // \"Push\" this positions offset.\n                transformed.offset += howMany;\n            }\n        }\n        else if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'prefix') {\n            // If nodes are inserted in a node that is on a path to this position...\n            const i = insertPosition.path.length - 1;\n            if (insertPosition.offset <= this.path[i]) {\n                // And are inserted before next node of that path...\n                // \"Push\" the index on that path.\n                transformed.path[i] += howMany;\n            }\n        }\n        return transformed;\n    }\n    /**\n     * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n     *\n     * @internal\n     * @param sourcePosition Position before the first element to move.\n     * @param targetPosition Position where moved elements will be inserted.\n     * @param howMany How many consecutive nodes to move, starting from `sourcePosition`.\n     * @returns Transformed position.\n     */\n    _getTransformedByMove(sourcePosition, targetPosition, howMany) {\n        // Update target position, as it could be affected by nodes removal.\n        targetPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n        if (sourcePosition.isEqual(targetPosition)) {\n            // If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n            return Position._createAt(this);\n        }\n        // Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n        const transformed = this._getTransformedByDeletion(sourcePosition, howMany);\n        const isMoved = transformed === null ||\n            (sourcePosition.isEqual(this) && this.stickiness == 'toNext') ||\n            (sourcePosition.getShiftedBy(howMany).isEqual(this) && this.stickiness == 'toPrevious');\n        if (isMoved) {\n            // This position is inside moved range (or sticks to it).\n            // In this case, we calculate a combination of this position, move source position and target position.\n            return this._getCombined(sourcePosition, targetPosition);\n        }\n        else {\n            // This position is not inside a removed range.\n            //\n            // In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n            return transformed._getTransformedByInsertion(targetPosition, howMany);\n        }\n    }\n    /**\n     * Returns a new position that is a combination of this position and given positions.\n     *\n     * The combined position is a copy of this position transformed by moving a range starting at `source` position\n     * to the `target` position. It is expected that this position is inside the moved range.\n     *\n     * Example:\n     *\n     * ```ts\n     * let original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n     * let source = model.createPositionFromPath( root, [ 2, 2 ] );\n     * let target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n     * original._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n     * ```\n     *\n     * Explanation:\n     *\n     * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n     * was inside moved nodes and now should point to the new place. The moved nodes will be after\n     * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n     * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n     * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n     * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n     *\n     * @internal\n     * @param source Beginning of the moved range.\n     * @param target Position where the range is moved.\n     * @returns Combined position.\n     */\n    _getCombined(source, target) {\n        const i = source.path.length - 1;\n        // The first part of a path to combined position is a path to the place where nodes were moved.\n        const combined = Position._createAt(target);\n        combined.stickiness = this.stickiness;\n        // Then we have to update the rest of the path.\n        // Fix the offset because this position might be after `from` position and we have to reflect that.\n        combined.offset = combined.offset + this.path[i] - source.offset;\n        // Then, add the rest of the path.\n        // If this position is at the same level as `from` position nothing will get added.\n        combined.path = [...combined.path, ...this.path.slice(i + 1)];\n        return combined;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        return {\n            root: this.root.toJSON(),\n            path: Array.from(this.path),\n            stickiness: this.stickiness\n        };\n    }\n    /**\n     * Returns a new position that is equal to current position.\n     */\n    clone() {\n        return new this.constructor(this.root, this.path, this.stickiness);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/model/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n     *\n     * This method is a shortcut to other factory methods such as:\n     *\n     * * {@link module:engine/model/position~Position._createBefore},\n     * * {@link module:engine/model/position~Position._createAfter}.\n     *\n     * @internal\n     * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.\n     * @param stickiness Position stickiness. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    static _createAt(itemOrPosition, offset, stickiness = 'toNone') {\n        if (itemOrPosition instanceof Position) {\n            return new Position(itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness);\n        }\n        else {\n            const node = itemOrPosition;\n            if (offset == 'end') {\n                offset = node.maxOffset;\n            }\n            else if (offset == 'before') {\n                return this._createBefore(node, stickiness);\n            }\n            else if (offset == 'after') {\n                return this._createAfter(node, stickiness);\n            }\n            else if (offset !== 0 && !offset) {\n                /**\n                 * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n                 * requires the offset to be specified when the first parameter is a model item.\n                 *\n                 * @error model-createpositionat-offset-required\n                 */\n                throw new CKEditorError('model-createpositionat-offset-required', [this, itemOrPosition]);\n            }\n            if (!node.is('element') && !node.is('documentFragment')) {\n                /**\n                 * Position parent have to be a model element or model document fragment.\n                 *\n                 * @error model-position-parent-incorrect\n                 */\n                throw new CKEditorError('model-position-parent-incorrect', [this, itemOrPosition]);\n            }\n            const path = node.getPath();\n            path.push(offset);\n            return new this(node.root, path, stickiness);\n        }\n    }\n    /**\n     * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n     *\n     * @internal\n     * @param item Item after which the position should be placed.\n     * @param stickiness Position stickiness.\n     */\n    static _createAfter(item, stickiness) {\n        if (!item.parent) {\n            /**\n             * You can not make a position after a root element.\n             *\n             * @error model-position-after-root\n             * @param root\n             */\n            throw new CKEditorError('model-position-after-root', [this, item], { root: item });\n        }\n        return this._createAt(item.parent, item.endOffset, stickiness);\n    }\n    /**\n     * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n     *\n     * @internal\n     * @param item Item before which the position should be placed.\n     * @param stickiness Position stickiness.\n     */\n    static _createBefore(item, stickiness) {\n        if (!item.parent) {\n            /**\n             * You can not make a position before a root element.\n             *\n             * @error model-position-before-root\n             * @param root\n             */\n            throw new CKEditorError('model-position-before-root', item, { root: item });\n        }\n        return this._createAt(item.parent, item.startOffset, stickiness);\n    }\n    /**\n     * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Position`.\n     * @param doc Document object that will be position owner.\n     * @returns `Position` instance created using given plain object.\n     */\n    static fromJSON(json, doc) {\n        if (json.root === '$graveyard') {\n            const pos = new Position(doc.graveyard, json.path);\n            pos.stickiness = json.stickiness;\n            return pos;\n        }\n        if (!doc.getRoot(json.root)) {\n            /**\n             * Cannot create position for document. Root with specified name does not exist.\n             *\n             * @error model-position-fromjson-no-root\n             * @param rootName\n             */\n            throw new CKEditorError('model-position-fromjson-no-root', doc, { rootName: json.root });\n        }\n        return new Position(doc.getRoot(json.root), json.path, json.stickiness);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nPosition.prototype.is = function (type) {\n    return type === 'position' || type === 'model:position';\n};\n/**\n * Returns a text node at the given position.\n *\n * This is a helper function optimized to reuse the position parent instance for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#textNode `Position#textNode`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`}\n * check if your algorithm does not access it multiple times (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getNodeAfterPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param positionParent The parent of the given position.\n */\nexport function getTextNodeAtPosition(position, positionParent) {\n    const node = positionParent.getChild(positionParent.offsetToIndex(position.offset));\n    if (node && node.is('$text') && node.startOffset < position.offset) {\n        return node;\n    }\n    return null;\n}\n/**\n * Returns the node after the given position.\n *\n * This is a helper function optimized to reuse the position parent instance and the calculation of the text node at the\n * specific position for performance reasons.\n *\n * Normally, you should use {@link module:engine/model/position~Position#nodeAfter `Position#nodeAfter`}.\n * If you start hitting performance issues with {@link module:engine/model/position~Position#parent `Position#parent`} and/or\n * {@link module:engine/model/position~Position#textNode `Position#textNode`}\n * check if your algorithm does not access those properties multiple times\n * (which can happen directly or indirectly via other position properties).\n *\n * See https://github.com/ckeditor/ckeditor5/issues/6579 and https://github.com/ckeditor/ckeditor5/issues/6582.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeBeforePosition}\n *\n * @param positionParent The parent of the given position.\n * @param textNode Text node at the given position.\n */\nexport function getNodeAfterPosition(position, positionParent, textNode) {\n    if (textNode !== null) {\n        return null;\n    }\n    return positionParent.getChild(positionParent.offsetToIndex(position.offset));\n}\n/**\n * Returns the node before the given position.\n *\n * Refer to {@link module:engine/model/position~getNodeBeforePosition} for documentation on when to use this util method.\n *\n * See also:\n *\n * * {@link module:engine/model/position~getTextNodeAtPosition}\n * * {@link module:engine/model/position~getNodeAfterPosition}\n *\n * @param positionParent The parent of the given position.\n * @param textNode Text node at the given position.\n */\nexport function getNodeBeforePosition(position, positionParent, textNode) {\n    if (textNode !== null) {\n        return null;\n    }\n    return positionParent.getChild(positionParent.offsetToIndex(position.offset) - 1);\n}\n/**\n * This is a helper function for `Position#isTouching()`.\n *\n * It checks whether to given positions are touching, considering that they have the same root and paths\n * until given level, and at given level they differ by 1 (so they are branching at `level` point).\n *\n * The exact requirements for touching positions are described in `Position#isTouching()` and also\n * in the body of this function.\n *\n * @param left Position \"on the left\" (it is before `right`).\n * @param right Position \"on the right\" (it is after `left`).\n * @param level Level on which the positions are different.\n */\nfunction checkTouchingBranch(left, right, level) {\n    if (level + 1 === left.path.length) {\n        // Left position does not have any more entries after the point where the positions differ.\n        // [ 2 ] vs [ 3 ]\n        // [ 2 ] vs [ 3, 0, 0 ]\n        // The positions are spread by node at [ 2 ].\n        return false;\n    }\n    if (!checkOnlyZeroes(right.path, level + 1)) {\n        // Right position does not have only zeroes, so we have situation like:\n        // [ 2, maxOffset ] vs [ 3, 1 ]\n        // [ 2, maxOffset ] vs [ 3, 1, 0, 0 ]\n        // The positions are spread by node at [ 3, 0 ].\n        return false;\n    }\n    if (!checkOnlyMaxOffset(left, level + 1)) {\n        // Left position does not have only max offsets, so we have situation like:\n        // [ 2, 4 ] vs [ 3 ]\n        // [ 2, 4 ] vs [ 3, 0, 0 ]\n        // The positions are spread by node at [ 2, 5 ].\n        return false;\n    }\n    // Left position has only max offsets and right position has only zeroes or nothing.\n    // [ 2, maxOffset ] vs [ 3 ]\n    // [ 2, maxOffset, maxOffset ] vs [ 3, 0 ]\n    // There are not elements between positions. The positions are touching.\n    return true;\n}\n/**\n * Checks whether for given array, starting from given index until the end of the array, all items are `0`s.\n *\n * This is a helper function for `Position#isTouching()`.\n */\nfunction checkOnlyZeroes(arr, idx) {\n    while (idx < arr.length) {\n        if (arr[idx] !== 0) {\n            return false;\n        }\n        idx++;\n    }\n    return true;\n}\n/**\n * Checks whether for given position, starting from given path level, whether the position is at the end of\n * its parent and whether each element on the path to the position is also at at the end of its parent.\n *\n * This is a helper function for `Position#isTouching()`.\n */\nfunction checkOnlyMaxOffset(pos, level) {\n    let parent = pos.parent;\n    let idx = pos.path.length - 1;\n    let add = 0;\n    while (idx >= level) {\n        if (pos.path[idx] + add !== parent.maxOffset) {\n            return false;\n        }\n        // After the first check, we \"go up\", and check whether the position's parent-parent is the last element.\n        // However, we need to add 1 to the value in the path to \"simulate\" moving the path after the parent.\n        // It happens just once.\n        add = 1;\n        idx--;\n        parent = parent.parent;\n    }\n    return true;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/range\n */\nimport TypeCheckable from './typecheckable';\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range extends TypeCheckable {\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * @param start The start position.\n     * @param end The end position. If not set, the range will be collapsed at the `start` position.\n     */\n    constructor(start, end) {\n        super();\n        this.start = Position._createAt(start);\n        this.end = end ? Position._createAt(end) : Position._createAt(start);\n        // If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n        // In other case, make the boundaries stick to the \"inside\" of the range.\n        this.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n        this.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n     * them together with additional information like length or {@link module:engine/model/position~Position positions},\n     * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n     * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n     * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n     *\n     * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n     * and `ignoreElementEnd` option set to `true`.\n     */\n    *[Symbol.iterator]() {\n        yield* new TreeWalker({ boundaries: this, ignoreElementEnd: true });\n    }\n    /**\n     * Describes whether the range is collapsed, that is if {@link #start} and\n     * {@link #end} positions are equal.\n     */\n    get isCollapsed() {\n        return this.start.isEqual(this.end);\n    }\n    /**\n     * Describes whether this range is flat, that is if {@link #start} position and\n     * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n     */\n    get isFlat() {\n        const startParentPath = this.start.getParentPath();\n        const endParentPath = this.end.getParentPath();\n        return compareArrays(startParentPath, endParentPath) == 'same';\n    }\n    /**\n     * Range root element.\n     */\n    get root() {\n        return this.start.root;\n    }\n    /**\n     * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n     *\n     * @param position Position to check.\n     * @returns `true` if given {@link module:engine/model/position~Position position} is contained\n     * in this range,`false` otherwise.\n     */\n    containsPosition(position) {\n        return position.isAfter(this.start) && position.isBefore(this.end);\n    }\n    /**\n     * Checks whether this range contains given {@link ~Range range}.\n     *\n     * @param otherRange Range to check.\n     * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n     * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n     * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n     * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n     */\n    containsRange(otherRange, loose = false) {\n        if (otherRange.isCollapsed) {\n            loose = false;\n        }\n        const containsStart = this.containsPosition(otherRange.start) || (loose && this.start.isEqual(otherRange.start));\n        const containsEnd = this.containsPosition(otherRange.end) || (loose && this.end.isEqual(otherRange.end));\n        return containsStart && containsEnd;\n    }\n    /**\n     * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n     */\n    containsItem(item) {\n        const pos = Position._createBefore(item);\n        return this.containsPosition(pos) || this.start.isEqual(pos);\n    }\n    /**\n     * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges are equal, `false` otherwise.\n     */\n    isEqual(otherRange) {\n        return this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end);\n    }\n    /**\n     * Checks and returns whether this range intersects with given range.\n     *\n     * @param otherRange Range to compare with.\n     * @returns `true` if ranges intersect, `false` otherwise.\n     */\n    isIntersecting(otherRange) {\n        return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n    }\n    /**\n     * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n     * Returned array contains zero, one or two {@link ~Range ranges}.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n     * let transformed = range.getDifference( otherRange );\n     * // transformed array has no ranges because `otherRange` contains `range`\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n     * transformed = range.getDifference( otherRange );\n     * // transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @param otherRange Range to differentiate against.\n     * @returns The difference between ranges.\n     */\n    getDifference(otherRange) {\n        const ranges = [];\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect.\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means that we have to\n                // add shrunken range - from the start to the middle of this range.\n                ranges.push(new Range(this.start, otherRange.start));\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // add shrunken range - from the middle of this range to the end.\n                ranges.push(new Range(otherRange.end, this.end));\n            }\n        }\n        else {\n            // Ranges do not intersect, return the original range.\n            ranges.push(new Range(this.start, this.end));\n        }\n        return ranges;\n    }\n    /**\n     * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n     * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n     * let transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n     *\n     * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n     * transformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @param otherRange Range to check for intersection.\n     * @returns A common part of given ranges or `null` if ranges have no common part.\n     */\n    getIntersection(otherRange) {\n        if (this.isIntersecting(otherRange)) {\n            // Ranges intersect, so a common range will be returned.\n            // At most, it will be same as this range.\n            let commonRangeStart = this.start;\n            let commonRangeEnd = this.end;\n            if (this.containsPosition(otherRange.start)) {\n                // Given range start is inside this range. This means thaNt we have to\n                // shrink common range to the given range start.\n                commonRangeStart = otherRange.start;\n            }\n            if (this.containsPosition(otherRange.end)) {\n                // Given range end is inside this range. This means that we have to\n                // shrink common range to the given range end.\n                commonRangeEnd = otherRange.end;\n            }\n            return new Range(commonRangeStart, commonRangeEnd);\n        }\n        // Ranges do not intersect, so they do not have common part.\n        return null;\n    }\n    /**\n     * Returns a range created by joining this {@link ~Range range} with the given {@link ~Range range}.\n     * If ranges have no common part, returns `null`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let otherRange = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 1 ] ),\n     * \tmodel.createPositionFromPath( root, [ 2 ] )\n     * );\n     * let transformed = range.getJoined( otherRange ); // null - ranges have no common part\n     *\n     * otherRange = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 3 ] ),\n     * \tmodel.createPositionFromPath( root, [ 5 ] )\n     * );\n     * transformed = range.getJoined( otherRange ); // range from [ 2, 7 ] to [ 5 ]\n     * ```\n     *\n     * @param otherRange Range to be joined.\n     * @param loose Whether the intersection check is loose or strict. If the check is strict (`false`),\n     * ranges are tested for intersection or whether start/end positions are equal. If the check is loose (`true`),\n     * compared range is also checked if it's {@link module:engine/model/position~Position#isTouching touching} current range.\n     * @returns A sum of given ranges or `null` if ranges have no common part.\n     */\n    getJoined(otherRange, loose = false) {\n        let shouldJoin = this.isIntersecting(otherRange);\n        if (!shouldJoin) {\n            if (this.start.isBefore(otherRange.start)) {\n                shouldJoin = loose ? this.end.isTouching(otherRange.start) : this.end.isEqual(otherRange.start);\n            }\n            else {\n                shouldJoin = loose ? otherRange.end.isTouching(this.start) : otherRange.end.isEqual(this.start);\n            }\n        }\n        if (!shouldJoin) {\n            return null;\n        }\n        let startPosition = this.start;\n        let endPosition = this.end;\n        if (otherRange.start.isBefore(startPosition)) {\n            startPosition = otherRange.start;\n        }\n        if (otherRange.end.isAfter(endPosition)) {\n            endPosition = otherRange.end;\n        }\n        return new Range(startPosition, endPosition);\n    }\n    /**\n     * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n     *\n     * See an example of a model structure (`[` and `]` are range boundaries):\n     *\n     * ```\n     * root                                                            root\n     *  |- element DIV                         DIV             P2              P3             DIV\n     *  |   |- element H                   H        P1        f o o           b a r       H         P4\n     *  |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n     *  |   |- element P1\n     *  |   |   |- \"lorem\"                                              ||\n     *  |- element P2                                                   ||\n     *  |   |- \"foo\"                                                    VV\n     *  |- element P3\n     *  |   |- \"bar\"                                                   root\n     *  |- element DIV                         DIV             [P2             P3]             DIV\n     *  |   |- element H                   H       [P1]       f o o           b a r        H         P4\n     *  |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n     *  |   |- element P4\n     *  |   |   |- \"ipsum\"\n     * ```\n     *\n     * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n     * We are looking for minimal set of flat ranges that contains the same nodes.\n     *\n     * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n     *\n     * ```\n     * ( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n     * ( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n     * ( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n     * ( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n     * ```\n     *\n     * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n     * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n     * were omitted. Only their parts that were wholly in the range were returned.\n     *\n     * **Note:** this method is not returning flat ranges that contain no nodes.\n     *\n     * @returns Array of flat ranges covering this range.\n     */\n    getMinimalFlatRanges() {\n        const ranges = [];\n        const diffAt = this.start.getCommonPath(this.end).length;\n        const pos = Position._createAt(this.start);\n        let posParent = pos.parent;\n        // Go up.\n        while (pos.path.length > diffAt + 1) {\n            const howMany = posParent.maxOffset - pos.offset;\n            if (howMany !== 0) {\n                ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n            }\n            pos.path = pos.path.slice(0, -1);\n            pos.offset++;\n            posParent = posParent.parent;\n        }\n        // Go down.\n        while (pos.path.length <= this.end.path.length) {\n            const offset = this.end.path[pos.path.length - 1];\n            const howMany = offset - pos.offset;\n            if (howMany !== 0) {\n                ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n            }\n            pos.offset = offset;\n            pos.path.push(0);\n        }\n        return ranges;\n    }\n    /**\n     * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n     *\n     * For example, to iterate over all items in the entire document root:\n     *\n     * ```ts\n     * // Create a range spanning over the entire root content:\n     * const range = editor.model.createRangeIn( editor.model.document.getRoot() );\n     *\n     * // Iterate over all items in this range:\n     * for ( const value of range.getWalker() ) {\n     * \tconsole.log( value.item );\n     * }\n     * ```\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    getWalker(options = {}) {\n        options.boundaries = this;\n        return new TreeWalker(options);\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n     * them.\n     *\n     * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n     * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n     * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    *getItems(options = {}) {\n        options.boundaries = this;\n        options.ignoreElementEnd = true;\n        const treeWalker = new TreeWalker(options);\n        for (const value of treeWalker) {\n            yield value.item;\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n     * contained in this range.\n     *\n     * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n     * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n     *\n     * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n     * a full list of available options.\n     *\n     * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n     */\n    *getPositions(options = {}) {\n        options.boundaries = this;\n        const treeWalker = new TreeWalker(options);\n        yield treeWalker.position;\n        for (const value of treeWalker) {\n            yield value.nextPosition;\n        }\n    }\n    /**\n     * Returns a range that is a result of transforming this range by given `operation`.\n     *\n     * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n     * moved to a different part of document tree). For this reason, an array is returned by this method and it\n     * may contain one or more `Range` instances.\n     *\n     * @param operation Operation to transform range by.\n     * @returns Range which is the result of transformation.\n     */\n    getTransformedByOperation(operation) {\n        switch (operation.type) {\n            case 'insert':\n                return this._getTransformedByInsertOperation(operation);\n            case 'move':\n            case 'remove':\n            case 'reinsert':\n                return this._getTransformedByMoveOperation(operation);\n            case 'split':\n                return [this._getTransformedBySplitOperation(operation)];\n            case 'merge':\n                return [this._getTransformedByMergeOperation(operation)];\n        }\n        return [new Range(this.start, this.end)];\n    }\n    /**\n     * Returns a range that is a result of transforming this range by multiple `operations`.\n     *\n     * @see ~Range#getTransformedByOperation\n     * @param operations Operations to transform the range by.\n     * @returns Range which is the result of transformation.\n     */\n    getTransformedByOperations(operations) {\n        const ranges = [new Range(this.start, this.end)];\n        for (const operation of operations) {\n            for (let i = 0; i < ranges.length; i++) {\n                const result = ranges[i].getTransformedByOperation(operation);\n                ranges.splice(i, 1, ...result);\n                i += result.length - 1;\n            }\n        }\n        // It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n        // \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n        // because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n        // are inside other ranges and we simply remove them.\n        for (let i = 0; i < ranges.length; i++) {\n            const range = ranges[i];\n            for (let j = i + 1; j < ranges.length; j++) {\n                const next = ranges[j];\n                if (range.containsRange(next) || next.containsRange(range) || range.isEqual(next)) {\n                    ranges.splice(j, 1);\n                }\n            }\n        }\n        return ranges;\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n     * which is a common ancestor of the range's both ends (in which the entire range is contained).\n     */\n    getCommonAncestor() {\n        return this.start.getCommonAncestor(this.end);\n    }\n    /**\n     * Returns an {@link module:engine/model/element~Element Element} contained by the range.\n     * The element will be returned when it is the **only** node within the range and **fully–contained**\n     * at the same time.\n     */\n    getContainedElement() {\n        if (this.isCollapsed) {\n            return null;\n        }\n        const nodeAfterStart = this.start.nodeAfter;\n        const nodeBeforeEnd = this.end.nodeBefore;\n        if (nodeAfterStart && nodeAfterStart.is('element') && nodeAfterStart === nodeBeforeEnd) {\n            return nodeAfterStart;\n        }\n        return null;\n    }\n    /**\n     * Converts `Range` to plain object and returns it.\n     *\n     * @returns `Node` converted to plain object.\n     */\n    toJSON() {\n        return {\n            start: this.start.toJSON(),\n            end: this.end.toJSON()\n        };\n    }\n    /**\n     * Returns a new range that is equal to current range.\n     */\n    clone() {\n        return new this.constructor(this.start, this.end);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by insert operation.\n     *\n     * One or more ranges may be returned as a result of this transformation.\n     *\n     * @internal\n     */\n    _getTransformedByInsertOperation(operation, spread = false) {\n        return this._getTransformedByInsertion(operation.position, operation.howMany, spread);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by move operation.\n     *\n     * One or more ranges may be returned as a result of this transformation.\n     *\n     * @internal\n     */\n    _getTransformedByMoveOperation(operation, spread = false) {\n        const sourcePosition = operation.sourcePosition;\n        const howMany = operation.howMany;\n        const targetPosition = operation.targetPosition;\n        return this._getTransformedByMove(sourcePosition, targetPosition, howMany, spread);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by split operation.\n     *\n     * Always one range is returned. The transformation is done in a way to not break the range.\n     *\n     * @internal\n     */\n    _getTransformedBySplitOperation(operation) {\n        const start = this.start._getTransformedBySplitOperation(operation);\n        let end = this.end._getTransformedBySplitOperation(operation);\n        if (this.end.isEqual(operation.insertionPosition)) {\n            end = this.end.getShiftedBy(1);\n        }\n        // Below may happen when range contains graveyard element used by split operation.\n        if (start.root != end.root) {\n            // End position was next to the moved graveyard element and was moved with it.\n            // Fix it by using old `end` which has proper `root`.\n            end = this.end.getShiftedBy(-1);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Returns a result of transforming a copy of this range by merge operation.\n     *\n     * Always one range is returned. The transformation is done in a way to not break the range.\n     *\n     * @internal\n     */\n    _getTransformedByMergeOperation(operation) {\n        // Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n        // transformations, especially when a content of a few block elements were removed. For example:\n        //\n        // {} is the transformed range, [] is the removed range.\n        // <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n        //\n        // <p>Fo{o</p><p>B}ar</p><p>z</p>\n        // <p>F{</p><p>B}ar</p><p>z</p>\n        // <p>F{</p>}<p>z</p>\n        // <p>F{}z</p>\n        //\n        if (this.start.isEqual(operation.targetPosition) && this.end.isEqual(operation.deletionPosition)) {\n            return new Range(this.start);\n        }\n        let start = this.start._getTransformedByMergeOperation(operation);\n        let end = this.end._getTransformedByMergeOperation(operation);\n        if (start.root != end.root) {\n            // This happens when the end position was next to the merged (deleted) element.\n            // Then, the end position was moved to the graveyard root. In this case we need to fix\n            // the range cause its boundaries would be in different roots.\n            end = this.end.getShiftedBy(-1);\n        }\n        if (start.isAfter(end)) {\n            // This happens in three following cases:\n            //\n            // Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n            //         This means that start can be moved before the end of the range.\n            //\n            // Before: <p>a{a</p><p>b}b</p><p>cc</p>\n            // Merge:  <p>b}b</p><p>cca{a</p>\n            // Fix:    <p>{b}b</p><p>ccaa</p>\n            //\n            // Case 2: Range start is before merged node but not directly.\n            //         Result should include all nodes that were in the original range.\n            //\n            // Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n            // Merge:  <p>aab}b</p>{<p>cc</p>\n            // Fix:    <p>aa{bb</p><p>cc</p>}\n            //\n            //         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n            //\n            // Case 3: Range start is directly before merged node.\n            //         Resulting range should include only nodes from the merged element:\n            //\n            // Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n            // Merge:  <p>aab}b</p>{<p>cc</p>\n            // Fix:    <p>aa{b}b</p><p>cc</p>\n            //\n            if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n                // Case 1.\n                start = Position._createAt(end);\n                start.offset = 0;\n            }\n            else {\n                if (!operation.deletionPosition.isEqual(start)) {\n                    // Case 2.\n                    end = operation.deletionPosition;\n                }\n                // In both case 2 and 3 start is at the end of the merge-to element.\n                start = operation.targetPosition;\n            }\n            return new Range(start, end);\n        }\n        return new Range(start, end);\n    }\n    /**\n     * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n     * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n     * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n     *\n     * Examples:\n     *\n     * ```ts\n     * let range = model.createRange(\n     * \tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n     * \tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n     * );\n     * let transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n     * // transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n     * // transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n     * // transformed array has one range, which is equal to original range\n     *\n     * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n     * // transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n     * ```\n     *\n     * @internal\n     * @param insertPosition Position where nodes are inserted.\n     * @param howMany How many nodes are inserted.\n     * @param spread Flag indicating whether this range should be spread if insertion\n     * was inside the range. Defaults to `false`.\n     * @returns Result of the transformation.\n     */\n    _getTransformedByInsertion(insertPosition, howMany, spread = false) {\n        if (spread && this.containsPosition(insertPosition)) {\n            // Range has to be spread. The first part is from original start to the spread point.\n            // The other part is from spread point to the original end, but transformed by\n            // insertion to reflect insertion changes.\n            return [\n                new Range(this.start, insertPosition),\n                new Range(insertPosition.getShiftedBy(howMany), this.end._getTransformedByInsertion(insertPosition, howMany))\n            ];\n        }\n        else {\n            const range = new Range(this.start, this.end);\n            range.start = range.start._getTransformedByInsertion(insertPosition, howMany);\n            range.end = range.end._getTransformedByInsertion(insertPosition, howMany);\n            return [range];\n        }\n    }\n    /**\n     * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n     * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n     *\n     * @internal\n     * @param sourcePosition Position from which nodes are moved.\n     * @param targetPosition Position to where nodes are moved.\n     * @param howMany How many nodes are moved.\n     * @param spread Whether the range should be spread if the move points inside the range.\n     * @returns  Result of the transformation.\n     */\n    _getTransformedByMove(sourcePosition, targetPosition, howMany, spread = false) {\n        // Special case for transforming a collapsed range. Just transform it like a position.\n        if (this.isCollapsed) {\n            const newPos = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n            return [new Range(newPos)];\n        }\n        // Special case for transformation when a part of the range is moved towards the range.\n        //\n        // Examples:\n        //\n        // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n        // <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n        //\n        // Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n        //\n        // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n        //\n        // This special case is applied only if the range is to be kept together (not spread).\n        const moveRange = Range._createFromPositionAndShift(sourcePosition, howMany);\n        const insertPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n        if (this.containsPosition(targetPosition) && !spread) {\n            if (moveRange.containsPosition(this.start) || moveRange.containsPosition(this.end)) {\n                const start = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n                const end = this.end._getTransformedByMove(sourcePosition, targetPosition, howMany);\n                return [new Range(start, end)];\n            }\n        }\n        // Default algorithm.\n        let result;\n        const differenceSet = this.getDifference(moveRange);\n        let difference = null;\n        const common = this.getIntersection(moveRange);\n        if (differenceSet.length == 1) {\n            // `moveRange` and this range may intersect but may be separate.\n            difference = new Range(differenceSet[0].start._getTransformedByDeletion(sourcePosition, howMany), differenceSet[0].end._getTransformedByDeletion(sourcePosition, howMany));\n        }\n        else if (differenceSet.length == 2) {\n            // `moveRange` is inside this range.\n            difference = new Range(this.start, this.end._getTransformedByDeletion(sourcePosition, howMany));\n        } // else, `moveRange` contains this range.\n        if (difference) {\n            result = difference._getTransformedByInsertion(insertPosition, howMany, common !== null || spread);\n        }\n        else {\n            result = [];\n        }\n        if (common) {\n            const transformedCommon = new Range(common.start._getCombined(moveRange.start, insertPosition), common.end._getCombined(moveRange.start, insertPosition));\n            if (result.length == 2) {\n                result.splice(1, 0, transformedCommon);\n            }\n            else {\n                result.push(transformedCommon);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n     *\n     * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n     *\n     * If the deleted range contains transformed range, `null` will be returned.\n     *\n     * @internal\n     * @param deletionPosition Position from which nodes are removed.\n     * @param howMany How many nodes are removed.\n     * @returns Result of the transformation.\n     */\n    _getTransformedByDeletion(deletePosition, howMany) {\n        let newStart = this.start._getTransformedByDeletion(deletePosition, howMany);\n        let newEnd = this.end._getTransformedByDeletion(deletePosition, howMany);\n        if (newStart == null && newEnd == null) {\n            return null;\n        }\n        if (newStart == null) {\n            newStart = deletePosition;\n        }\n        if (newEnd == null) {\n            newEnd = deletePosition;\n        }\n        return new Range(newStart, newEnd);\n    }\n    /**\n     * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n     * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n     *\n     * @internal\n     * @param position Beginning of the range.\n     * @param shift How long the range should be.\n     */\n    static _createFromPositionAndShift(position, shift) {\n        const start = position;\n        const end = position.getShiftedBy(shift);\n        return shift > 0 ? new this(start, end) : new this(end, start);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @internal\n     * @param element Element which is a parent for the range.\n     */\n    static _createIn(element) {\n        return new this(Position._createAt(element, 0), Position._createAt(element, element.maxOffset));\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n     *\n     * @internal\n     */\n    static _createOn(item) {\n        return this._createFromPositionAndShift(Position._createBefore(item), item.offsetSize);\n    }\n    /**\n     * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n     * Passed ranges must not have common parts.\n     *\n     * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n     * the reference range, they get combined into one range.\n     *\n     * ```\n     * [  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n     * [    ]                                       // The result of the function if the first range was a reference range.\n     *         [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n     *                                        [  ]  // The result of the function if the last range was a reference range.\n     * ```\n     *\n     * @internal\n     * @param ranges Ranges to combine.\n     * @returns Combined range.\n     */\n    static _createFromRanges(ranges) {\n        if (ranges.length === 0) {\n            /**\n             * At least one range has to be passed to\n             * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n             *\n             * @error range-create-from-ranges-empty-array\n             */\n            throw new CKEditorError('range-create-from-ranges-empty-array', null);\n        }\n        else if (ranges.length == 1) {\n            return ranges[0].clone();\n        }\n        // 1. Set the first range in `ranges` array as a reference range.\n        // If we are going to return just a one range, one of the ranges need to be the reference one.\n        // Other ranges will be stuck to that range, if possible.\n        const ref = ranges[0];\n        // 2. Sort all the ranges so it's easier to process them.\n        ranges.sort((a, b) => {\n            return a.start.isAfter(b.start) ? 1 : -1;\n        });\n        // 3. Check at which index the reference range is now.\n        const refIndex = ranges.indexOf(ref);\n        // 4. At this moment we don't need the original range.\n        // We are going to modify the result and we need to return a new instance of Range.\n        // We have to create a copy of the reference range.\n        const result = new this(ref.start, ref.end);\n        // 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n        // Since ranges are sorted, start with the range with index that is closest to reference range index.\n        if (refIndex > 0) {\n            // eslint-disable-next-line no-constant-condition\n            for (let i = refIndex - 1; true; i++) {\n                if (ranges[i].end.isEqual(result.start)) {\n                    result.start = Position._createAt(ranges[i].start);\n                }\n                else {\n                    // If ranges are not starting/ending at the same position there is no point in looking further.\n                    break;\n                }\n            }\n        }\n        // 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n        // Since ranges are sorted, start with the range with index that is closest to reference range index.\n        for (let i = refIndex + 1; i < ranges.length; i++) {\n            if (ranges[i].start.isEqual(result.end)) {\n                result.end = Position._createAt(ranges[i].end);\n            }\n            else {\n                // If ranges are not starting/ending at the same position there is no point in looking further.\n                break;\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n     *\n     * @param json Plain object to be converted to `Range`.\n     * @param doc Document object that will be range owner.\n     * @returns `Range` instance created using given plain object.\n     */\n    static fromJSON(json, doc) {\n        return new this(Position.fromJSON(json.start, doc), Position.fromJSON(json.end, doc));\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRange.prototype.is = function (type) {\n    return type === 'range' || type === 'model:range';\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/mapper\n */\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Maps elements, positions and markers between the {@link module:engine/view/document~Document view} and\n * the {@link module:engine/model/model model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map the complex model to/from view relations, you may provide custom callbacks for the\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by the {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds its own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper extends EmitterMixin() {\n    /**\n     * Creates an instance of the mapper.\n     */\n    constructor() {\n        super();\n        /**\n         * Model element to view element mapping.\n         */\n        this._modelToViewMapping = new WeakMap();\n        /**\n         * View element to model element mapping.\n         */\n        this._viewToModelMapping = new WeakMap();\n        /**\n         * A map containing callbacks between view element names and functions evaluating length of view elements\n         * in model.\n         */\n        this._viewToModelLengthCallbacks = new Map();\n        /**\n         * Model marker name to view elements mapping.\n         *\n         * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n         * One marker (name) can be mapped to multiple elements.\n         */\n        this._markerNameToElements = new Map();\n        /**\n         * View element to model marker names mapping.\n         *\n         * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n         */\n        this._elementToMarkerNames = new Map();\n        /**\n         * The map of removed view elements with their current root (used for deferred unbinding).\n         */\n        this._deferredBindingRemovals = new Map();\n        /**\n         * Stores marker names of markers which have changed due to unbinding a view element (so it is assumed that the view element\n         * has been removed, moved or renamed).\n         */\n        this._unboundMarkerNames = new Set();\n        // Default mapper algorithm for mapping model position to view position.\n        this.on('modelToViewPosition', (evt, data) => {\n            if (data.viewPosition) {\n                return;\n            }\n            const viewContainer = this._modelToViewMapping.get(data.modelPosition.parent);\n            if (!viewContainer) {\n                /**\n                 * A model position could not be mapped to the view because the parent of the model position\n                 * does not have a mapped view element (might have not been converted yet or it has no converter).\n                 *\n                 * Make sure that the model element is correctly converted to the view.\n                 *\n                 * @error mapping-model-position-view-parent-not-found\n                 */\n                throw new CKEditorError('mapping-model-position-view-parent-not-found', this, { modelPosition: data.modelPosition });\n            }\n            data.viewPosition = this.findPositionIn(viewContainer, data.modelPosition.offset);\n        }, { priority: 'low' });\n        // Default mapper algorithm for mapping view position to model position.\n        this.on('viewToModelPosition', (evt, data) => {\n            if (data.modelPosition) {\n                return;\n            }\n            const viewBlock = this.findMappedViewAncestor(data.viewPosition);\n            const modelParent = this._viewToModelMapping.get(viewBlock);\n            const modelOffset = this._toModelOffset(data.viewPosition.parent, data.viewPosition.offset, viewBlock);\n            data.modelPosition = ModelPosition._createAt(modelParent, modelOffset);\n        }, { priority: 'low' });\n    }\n    /**\n     * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n     * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n     * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n     * The information that elements are bound is also used to translate positions.\n     *\n     * @param modelElement Model element.\n     * @param viewElement View element.\n     */\n    bindElements(modelElement, viewElement) {\n        this._modelToViewMapping.set(modelElement, viewElement);\n        this._viewToModelMapping.set(viewElement, modelElement);\n    }\n    /**\n     * Unbinds the given {@link module:engine/view/element~Element view element} from the map.\n     *\n     * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n     * will be removed only if model element is still bound to the passed `viewElement`.\n     *\n     * This behavior allows for re-binding model element to another view element without fear of losing the new binding\n     * when the previously bound view element is unbound.\n     *\n     * @param viewElement View element to unbind.\n     * @param options The options object.\n     * @param options.defer Controls whether the binding should be removed immediately or deferred until a\n     * {@link #flushDeferredBindings `flushDeferredBindings()`} call.\n     */\n    unbindViewElement(viewElement, options = {}) {\n        const modelElement = this.toModelElement(viewElement);\n        if (this._elementToMarkerNames.has(viewElement)) {\n            for (const markerName of this._elementToMarkerNames.get(viewElement)) {\n                this._unboundMarkerNames.add(markerName);\n            }\n        }\n        if (options.defer) {\n            this._deferredBindingRemovals.set(viewElement, viewElement.root);\n        }\n        else {\n            this._viewToModelMapping.delete(viewElement);\n            if (this._modelToViewMapping.get(modelElement) == viewElement) {\n                this._modelToViewMapping.delete(modelElement);\n            }\n        }\n    }\n    /**\n     * Unbinds the given {@link module:engine/model/element~Element model element} from the map.\n     *\n     * **Note:** the model-to-view binding will be removed, if it existed. However, the corresponding view-to-model binding\n     * will be removed only if the view element is still bound to the passed `modelElement`.\n     *\n     * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n     * when the previously bound model element is unbound.\n     *\n     * @param modelElement Model element to unbind.\n     */\n    unbindModelElement(modelElement) {\n        const viewElement = this.toViewElement(modelElement);\n        this._modelToViewMapping.delete(modelElement);\n        if (this._viewToModelMapping.get(viewElement) == modelElement) {\n            this._viewToModelMapping.delete(viewElement);\n        }\n    }\n    /**\n     * Binds the given marker name with the given {@link module:engine/view/element~Element view element}. The element\n     * will be added to the current set of elements bound with the given marker name.\n     *\n     * @param element Element to bind.\n     * @param name Marker name.\n     */\n    bindElementToMarker(element, name) {\n        const elements = this._markerNameToElements.get(name) || new Set();\n        elements.add(element);\n        const names = this._elementToMarkerNames.get(element) || new Set();\n        names.add(name);\n        this._markerNameToElements.set(name, elements);\n        this._elementToMarkerNames.set(element, names);\n    }\n    /**\n     * Unbinds an element from given marker name.\n     *\n     * @param element Element to unbind.\n     * @param name Marker name.\n     */\n    unbindElementFromMarkerName(element, name) {\n        const nameToElements = this._markerNameToElements.get(name);\n        if (nameToElements) {\n            nameToElements.delete(element);\n            if (nameToElements.size == 0) {\n                this._markerNameToElements.delete(name);\n            }\n        }\n        const elementToNames = this._elementToMarkerNames.get(element);\n        if (elementToNames) {\n            elementToNames.delete(name);\n            if (elementToNames.size == 0) {\n                this._elementToMarkerNames.delete(element);\n            }\n        }\n    }\n    /**\n     * Returns all marker names of markers which have changed due to unbinding a view element (so it is assumed that the view element\n     * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n     */\n    flushUnboundMarkerNames() {\n        const markerNames = Array.from(this._unboundMarkerNames);\n        this._unboundMarkerNames.clear();\n        return markerNames;\n    }\n    /**\n     * Unbinds all deferred binding removals of view elements that in the meantime were not re-attached to some root or document fragment.\n     *\n     * See: {@link #unbindViewElement `unbindViewElement()`}.\n     */\n    flushDeferredBindings() {\n        for (const [viewElement, root] of this._deferredBindingRemovals) {\n            // Unbind it only if it wasn't re-attached to some root or document fragment.\n            if (viewElement.root == root) {\n                this.unbindViewElement(viewElement);\n            }\n        }\n        this._deferredBindingRemovals = new Map();\n    }\n    /**\n     * Removes all model to view and view to model bindings.\n     */\n    clearBindings() {\n        this._modelToViewMapping = new WeakMap();\n        this._viewToModelMapping = new WeakMap();\n        this._markerNameToElements = new Map();\n        this._elementToMarkerNames = new Map();\n        this._unboundMarkerNames = new Set();\n        this._deferredBindingRemovals = new Map();\n    }\n    toModelElement(viewElement) {\n        return this._viewToModelMapping.get(viewElement);\n    }\n    toViewElement(modelElement) {\n        return this._modelToViewMapping.get(modelElement);\n    }\n    /**\n     * Gets the corresponding model range.\n     *\n     * @param viewRange View range.\n     * @returns Corresponding model range.\n     */\n    toModelRange(viewRange) {\n        return new ModelRange(this.toModelPosition(viewRange.start), this.toModelPosition(viewRange.end));\n    }\n    /**\n     * Gets the corresponding view range.\n     *\n     * @param modelRange Model range.\n     * @returns Corresponding view range.\n     */\n    toViewRange(modelRange) {\n        return new ViewRange(this.toViewPosition(modelRange.start), this.toViewPosition(modelRange.end));\n    }\n    /**\n     * Gets the corresponding model position.\n     *\n     * @fires viewToModelPosition\n     * @param viewPosition View position.\n     * @returns Corresponding model position.\n     */\n    toModelPosition(viewPosition) {\n        const data = {\n            viewPosition,\n            mapper: this\n        };\n        this.fire('viewToModelPosition', data);\n        return data.modelPosition;\n    }\n    /**\n     * Gets the corresponding view position.\n     *\n     * @fires modelToViewPosition\n     * @param modelPosition Model position.\n     * @param options Additional options for position mapping process.\n     * @param options.isPhantom Should be set to `true` if the model position to map is pointing to a place\n     * in model tree which no longer exists. For example, it could be an end of a removed model range.\n     * @returns Corresponding view position.\n     */\n    toViewPosition(modelPosition, options = {}) {\n        const data = {\n            modelPosition,\n            mapper: this,\n            isPhantom: options.isPhantom\n        };\n        this.fire('modelToViewPosition', data);\n        return data.viewPosition;\n    }\n    /**\n     * Gets all view elements bound to the given marker name.\n     *\n     * @param name Marker name.\n     * @returns View elements bound with the given marker name or `null`\n     * if no elements are bound to the given marker name.\n     */\n    markerNameToElements(name) {\n        const boundElements = this._markerNameToElements.get(name);\n        if (!boundElements) {\n            return null;\n        }\n        const elements = new Set();\n        for (const element of boundElements) {\n            if (element.is('attributeElement')) {\n                for (const clone of element.getElementsWithSameId()) {\n                    elements.add(clone);\n                }\n            }\n            else {\n                elements.add(element);\n            }\n        }\n        return elements;\n    }\n    /**\n     * Registers a callback that evaluates the length in the model of a view element with the given name.\n     *\n     * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n     * a number representing the length of the view element in the model.\n     *\n     * ```ts\n     * // List item in view may contain nested list, which have other list items. In model though,\n     * // the lists are represented by flat structure. Because of those differences, length of list view element\n     * // may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n     *\n     * function getViewListItemLength( element ) {\n     * \tlet length = 1;\n     *\n     * \tfor ( let child of element.getChildren() ) {\n     * \t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n     * \t\t\tfor ( let item of child.getChildren() ) {\n     * \t\t\t\tlength += getViewListItemLength( item );\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     *\n     * \treturn length;\n     * }\n     *\n     * mapper.registerViewToModelLength( 'li', getViewListItemLength );\n     * ```\n     *\n     * @param viewElementName Name of view element for which callback is registered.\n     * @param lengthCallback Function return a length of view element instance in model.\n     */\n    registerViewToModelLength(viewElementName, lengthCallback) {\n        this._viewToModelLengthCallbacks.set(viewElementName, lengthCallback);\n    }\n    /**\n     * For the given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n     * the model.\n     *\n     * @param viewPosition Position for which a mapped ancestor should be found.\n     */\n    findMappedViewAncestor(viewPosition) {\n        let parent = viewPosition.parent;\n        while (!this._viewToModelMapping.has(parent)) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     * Calculates model offset based on the view position and the block element.\n     *\n     * Example:\n     *\n     * ```html\n     * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n     * ```\n     *\n     * Is a sum of:\n     *\n     * ```html\n     * <p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n     * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n     * ```\n     *\n     * @param viewParent Position parent.\n     * @param viewOffset Position offset.\n     * @param viewBlock Block used as a base to calculate offset.\n     * @returns Offset in the model.\n     */\n    _toModelOffset(viewParent, viewOffset, viewBlock) {\n        if (viewBlock != viewParent) {\n            // See example.\n            const offsetToParentStart = this._toModelOffset(viewParent.parent, viewParent.index, viewBlock);\n            const offsetInParent = this._toModelOffset(viewParent, viewOffset, viewParent);\n            return offsetToParentStart + offsetInParent;\n        }\n        // viewBlock == viewParent, so we need to calculate the offset in the parent element.\n        // If the position is a text it is simple (\"ba|r\" -> 2).\n        if (viewParent.is('$text')) {\n            return viewOffset;\n        }\n        // If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n        let modelOffset = 0;\n        for (let i = 0; i < viewOffset; i++) {\n            modelOffset += this.getModelLength(viewParent.getChild(i));\n        }\n        return modelOffset;\n    }\n    /**\n     * Gets the length of the view element in the model.\n     *\n     * The length is calculated as follows:\n     * * if a {@link #registerViewToModelLength length mapping callback} is provided for the given `viewNode`, it is used to\n     * evaluate the model length (`viewNode` is used as first and only parameter passed to the callback),\n     * * length of a {@link module:engine/view/text~Text text node} is equal to the length of its\n     * {@link module:engine/view/text~Text#data data},\n     * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n     * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n     * * length of a non-mapped {@link module:engine/view/element~Element element} is equal to the length of its children.\n     *\n     * Examples:\n     *\n     * ```\n     * foo                          -> 3 // Text length is equal to its data length.\n     * <p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n     * <b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n     * <div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n     * ```\n     *\n     * @param viewNode View node.\n     * @returns Length of the node in the tree model.\n     */\n    getModelLength(viewNode) {\n        if (this._viewToModelLengthCallbacks.get(viewNode.name)) {\n            const callback = this._viewToModelLengthCallbacks.get(viewNode.name);\n            return callback(viewNode);\n        }\n        else if (this._viewToModelMapping.has(viewNode)) {\n            return 1;\n        }\n        else if (viewNode.is('$text')) {\n            return viewNode.data.length;\n        }\n        else if (viewNode.is('uiElement')) {\n            return 0;\n        }\n        else {\n            let len = 0;\n            for (const child of viewNode.getChildren()) {\n                len += this.getModelLength(child);\n            }\n            return len;\n        }\n    }\n    /**\n     * Finds the position in the view node (or in its children) with the expected model offset.\n     *\n     * Example:\n     *\n     * ```\n     * <p>fo<b>bar</b>bom</p> -> expected offset: 4\n     *\n     * findPositionIn( p, 4 ):\n     * <p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n     * <p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n     * <p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n     *\n     * findPositionIn( b, 4 - ( 5 - 3 ) ):\n     * <p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n     * <p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n     *\n     * findPositionIn( bar, 2 - ( 3 - 3 ) ):\n     * We are in the text node so we can simple find the offset.\n     * <p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n     * ```\n     *\n     * @param viewParent Tree view element in which we are looking for the position.\n     * @param expectedOffset Expected offset.\n     * @returns Found position.\n     */\n    findPositionIn(viewParent, expectedOffset) {\n        // Last scanned view node.\n        let viewNode;\n        // Length of the last scanned view node.\n        let lastLength = 0;\n        let modelOffset = 0;\n        let viewOffset = 0;\n        // In the text node it is simple: the offset in the model equals the offset in the text.\n        if (viewParent.is('$text')) {\n            return new ViewPosition(viewParent, expectedOffset);\n        }\n        // In other cases we add lengths of child nodes to find the proper offset.\n        // If it is smaller we add the length.\n        while (modelOffset < expectedOffset) {\n            viewNode = viewParent.getChild(viewOffset);\n            lastLength = this.getModelLength(viewNode);\n            modelOffset += lastLength;\n            viewOffset++;\n        }\n        // If it equals we found the position.\n        if (modelOffset == expectedOffset) {\n            return this._moveViewPositionToTextNode(new ViewPosition(viewParent, viewOffset));\n        }\n        // If it is higher we need to enter last child.\n        else {\n            // ( modelOffset - lastLength ) is the offset to the child we enter,\n            // so we subtract it from the expected offset to fine the offset in the child.\n            return this.findPositionIn(viewNode, expectedOffset - (modelOffset - lastLength));\n        }\n    }\n    /**\n     * Because we prefer positions in the text nodes over positions next to text nodes, if the view position was next to a text node,\n     * it moves it into the text node instead.\n     *\n     * ```\n     * <p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n     * <p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n     * <p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n     * ```\n     *\n     * @param viewPosition Position potentially next to the text node.\n     * @returns Position in the text node if possible.\n     */\n    _moveViewPositionToTextNode(viewPosition) {\n        // If the position is just after a text node, put it at the end of that text node.\n        // If the position is just before a text node, put it at the beginning of that text node.\n        const nodeBefore = viewPosition.nodeBefore;\n        const nodeAfter = viewPosition.nodeAfter;\n        if (nodeBefore instanceof ViewText) {\n            return new ViewPosition(nodeBefore, nodeBefore.data.length);\n        }\n        else if (nodeAfter instanceof ViewText) {\n            return new ViewPosition(nodeAfter, 0);\n        }\n        // Otherwise, just return the given position.\n        return viewPosition;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/modelconsumable\n */\nimport TextProxy from '../model/textproxy';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Manages a list of consumable values for the {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into separate, single properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing the changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and its attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when the given part of a model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), the consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let th {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * the {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, the others should not, because they would duplicate the results. Using `ModelConsumable` helps to avoid\n * this situation, because callbacks should only convert these values that were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n * ```ts\n * // Converter for custom `imageBlock` element that might have a `caption` element inside which changes\n * // how the image is displayed in the view:\n * //\n * // Model:\n * //\n * // [imageBlock]\n * //   └─ [caption]\n * //       └─ foo\n * //\n * // View:\n * //\n * // <figure>\n * //   ├─ <img />\n * //   └─ <caption>\n * //       └─ foo\n * modelConversionDispatcher.on( 'insert:imageBlock', ( evt, data, conversionApi ) => {\n * \t// First, consume the `imageBlock` element.\n * \tconversionApi.consumable.consume( data.item, 'insert' );\n *\n * \t// Just create normal image element for the view.\n * \t// Maybe it will be \"decorated\" later.\n * \tconst viewImage = new ViewElement( 'img' );\n * \tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n * \tconst viewWriter = conversionApi.writer;\n *\n * \t// Check if the `imageBlock` element has children.\n * \tif ( data.item.childCount > 0 ) {\n * \t\tconst modelCaption = data.item.getChild( 0 );\n *\n * \t\t// `modelCaption` insertion change is consumed from consumable values.\n * \t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n * \t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n * \t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n * \t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n * \t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n * \t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n * \t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n * \t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n * \t\t}\n * \t} else {\n * \t\tconversionApi.mapper.bindElements( data.item, viewImage );\n * \t\tviewWriter.insert( insertPosition, viewImage );\n * \t}\n *\n * \tevt.stop();\n * } );\n * ```\n */\nexport default class ModelConsumable {\n    constructor() {\n        /**\n         * Contains list of consumable values.\n         */\n        this._consumable = new Map();\n        /**\n         * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds a parent\n         * of that `TextProxy` and the start and end indices of that `TextProxy`. This allows identification of the `TextProxy`\n         * instances that point to the same part of the model but are different instances. Each distinct `TextProxy`\n         * is given a unique `Symbol` which is then registered as consumable. This process is transparent for the `ModelConsumable`\n         * API user because whenever `TextProxy` is added, tested, consumed or reverted, the internal mechanisms of\n         * `ModelConsumable` translate `TextProxy` to that unique `Symbol`.\n         */\n        this._textProxyRegistry = new Map();\n    }\n    /**\n     * Adds a consumable value to the consumables list and links it with a given model item.\n     *\n     * ```ts\n     * modelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n     * modelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n     * modelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n     * modelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n     * ```\n     *\n     * @param item Model item, range or selection that has the consumable.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     */\n    add(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (!this._consumable.has(item)) {\n            this._consumable.set(item, new Map());\n        }\n        this._consumable.get(item).set(type, true);\n    }\n    /**\n     * Removes a given consumable value from a given model item.\n     *\n     * ```ts\n     * modelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n     * modelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n     * modelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n     * modelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n     * ```\n     *\n     * @param item Model item, range or selection from which consumable will be consumed.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns `true` if consumable value was available and was consumed, `false` otherwise.\n     */\n    consume(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        if (this.test(item, type)) {\n            this._consumable.get(item).set(type, false);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Tests whether there is a consumable value of a given type connected with a given model item.\n     *\n     * ```ts\n     * modelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n     * modelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n     * modelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n     * modelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n     * modelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n     * ```\n     *\n     * @param item Model item, range or selection to be tested.\n     * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n     * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n     * @returns `null` if such consumable was never added, `false` if the consumable values was\n     * already consumed or `true` if it was added and not consumed yet.\n     */\n    test(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const itemConsumables = this._consumable.get(item);\n        if (itemConsumables === undefined) {\n            return null;\n        }\n        const value = itemConsumables.get(type);\n        if (value === undefined) {\n            return null;\n        }\n        return value;\n    }\n    /**\n     * Reverts consuming of a consumable value.\n     *\n     * ```ts\n     * modelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n     * modelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n     * modelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n     * modelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n     * modelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n     * ```\n     *\n     * @param item Model item, range or selection to be reverted.\n     * @param type Consumable type.\n     * @returns `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n     * never been added.\n     */\n    revert(item, type) {\n        type = _normalizeConsumableType(type);\n        if (item instanceof TextProxy) {\n            item = this._getSymbolForTextProxy(item);\n        }\n        const test = this.test(item, type);\n        if (test === false) {\n            this._consumable.get(item).set(type, true);\n            return true;\n        }\n        else if (test === true) {\n            return false;\n        }\n        return null;\n    }\n    /**\n     * Verifies if all events from the specified group were consumed.\n     *\n     * @param eventGroup The events group to verify.\n     */\n    verifyAllConsumed(eventGroup) {\n        const items = [];\n        for (const [item, consumables] of this._consumable) {\n            for (const [event, canConsume] of consumables) {\n                const eventPrefix = event.split(':')[0];\n                if (canConsume && eventGroup == eventPrefix) {\n                    items.push({\n                        event,\n                        item: item.name || item.description\n                    });\n                }\n            }\n        }\n        if (items.length) {\n            /**\n             * Some of the {@link module:engine/model/item~Item model items} were not consumed while downcasting the model to view.\n             *\n             * This might be the effect of:\n             *\n             * * A missing converter for some model elements. Make sure that you registered downcast converters for all model elements.\n             * * A custom converter that does not consume converted items. Make sure that you\n             * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} all model elements that you converted\n             * from the model to the view.\n             * * A custom converter that called `event.stop()`. When providing a custom converter, keep in mind that you should not stop\n             * the event. If you stop it then the default converter at the `lowest` priority will not trigger the conversion of this node's\n             * attributes and child nodes.\n             *\n             * @error conversion-model-consumable-not-consumed\n             * @param {Array.<module:engine/model/item~Item>} items Items that were not consumed.\n             */\n            throw new CKEditorError('conversion-model-consumable-not-consumed', null, { items });\n        }\n    }\n    /**\n     * Gets a unique symbol for the passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n     * have same parent, same start index and same end index will get the same symbol.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @internal\n     * @param textProxy `TextProxy` instance to get a symbol for.\n     * @returns Symbol representing all equal instances of `TextProxy`.\n     */\n    _getSymbolForTextProxy(textProxy) {\n        let symbol = null;\n        const startMap = this._textProxyRegistry.get(textProxy.startOffset);\n        if (startMap) {\n            const endMap = startMap.get(textProxy.endOffset);\n            if (endMap) {\n                symbol = endMap.get(textProxy.parent);\n            }\n        }\n        if (!symbol) {\n            symbol = this._addSymbolForTextProxy(textProxy);\n        }\n        return symbol;\n    }\n    /**\n     * Adds a symbol for the given {@link module:engine/model/textproxy~TextProxy} instance.\n     *\n     * Used internally to correctly consume `TextProxy` instances.\n     *\n     * @param textProxy Text proxy instance.\n     * @returns Symbol generated for given `TextProxy`.\n     */\n    _addSymbolForTextProxy(textProxy) {\n        const start = textProxy.startOffset;\n        const end = textProxy.endOffset;\n        const parent = textProxy.parent;\n        const symbol = Symbol('$textProxy:' + textProxy.data);\n        let startMap;\n        let endMap;\n        startMap = this._textProxyRegistry.get(start);\n        if (!startMap) {\n            startMap = new Map();\n            this._textProxyRegistry.set(start, startMap);\n        }\n        endMap = startMap.get(end);\n        if (!endMap) {\n            endMap = new Map();\n            startMap.set(end, endMap);\n        }\n        endMap.set(parent, symbol);\n        return symbol;\n    }\n}\n/**\n * Returns a normalized consumable type name from the given string. A normalized consumable type name is a string that has\n * at most one colon, for example: `insert` or `addMarker:highlight`. If a string to normalize has more \"parts\" (more colons),\n * the further parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n *\n * @param type Consumable type.\n * @returns Normalized consumable type.\n */\nfunction _normalizeConsumableType(type) {\n    const parts = type.split(':');\n    // For inserts allow passing event name, it's stored in the context of a specified element so the element name is not needed.\n    if (parts[0] == 'insert') {\n        return parts[0];\n    }\n    // Markers are identified by the whole name (otherwise we would consume the whole markers group).\n    if (parts[0] == 'addMarker' || parts[0] == 'removeMarker') {\n        return type;\n    }\n    return parts.length > 1 ? parts[0] + ':' + parts[1] : parts[0];\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/downcastdispatcher\n */\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The downcast dispatcher is a central point of downcasting (conversion from the model to the view), which is a process of reacting\n * to changes in the model and firing a set of events. The callbacks listening to these events are called converters. The\n * converters' role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During the conversion process, downcast dispatcher fires events basing on the state of the model and prepares\n * data for these events. It is important to understand that the events are connected with the changes done on the model,\n * for example: \"a node has been inserted\" or \"an attribute has changed\". This is in contrary to upcasting (a view-to-model conversion)\n * where you convert the view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by the {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to the downcast dispatcher as a diff between the old model state and the new model state.\n *\n * Note that because the changes are converted, there is a need to have a mapping between the model structure and the view structure.\n * To map positions and elements during the downcast (a model-to-view conversion), use {@link module:engine/conversion/mapper~Mapper}.\n *\n * Downcast dispatcher fires the following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`} &ndash;\n * If a range of nodes was inserted to the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove `remove`} &ndash;\n * If a range of nodes was removed from the model tree.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`} &ndash;\n * If an attribute was added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert`}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`},\n * the downcast dispatcher generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have control over which changes have already been consumed. It is useful when some converters\n * overwrite others or convert multiple changes (for example, it converts an insertion of an element and also converts that\n * element's attributes during the insertion).\n *\n * Additionally, downcast dispatcher fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker `addMarker`} &ndash; If a marker was added.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker `removeMarker`} &ndash; If a marker was\n * removed.\n *\n * Note that changing a marker is done through removing the marker from the old range and adding it to the new range,\n * so both of these events are fired.\n *\n * Finally, a downcast dispatcher also handles firing events for the {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection `selection`}\n * &ndash; Converts the selection from the model to the view.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute`}\n * &ndash; Fired for every selection attribute.\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker `addMarker`}\n * &ndash; Fired for every marker that contains a selection.\n *\n * Unlike the model tree and the markers, the events for selection are not fired for changes but for a selection state.\n *\n * When providing custom listeners for a downcast dispatcher, remember to check whether a given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for a downcast dispatcher, keep in mind that you **should not** stop the event. If you stop it,\n * then the default converter at the `lowest` priority will not trigger the conversion of this node's attributes and child nodes.\n *\n * When providing custom listeners for a downcast dispatcher, remember to use the provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * You can read more about conversion in the following guide:\n *\n * * {@glink framework/deep-dive/conversion/downcast Downcast conversion}\n *\n * An example of a custom converter for the downcast dispatcher:\n *\n * ```ts\n * // You will convert inserting a \"paragraph\" model element into the model.\n * downcastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n * \t// Remember to check whether the change has not been consumed yet and consume it.\n * \tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n * \t\treturn;\n * \t}\n *\n * \t// Translate the position in the model to a position in the view.\n * \tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n * \t// Create a <p> element that will be inserted into the view at the `viewPosition`.\n * \tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n * \t// Bind the newly created view element to the model element so positions will map accordingly in the future.\n * \tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n * \t// Add the newly created view element to the view.\n * \tconversionApi.writer.insert( viewPosition, viewElement );\n * } );\n * ```\n */\nexport default class DowncastDispatcher extends EmitterMixin() {\n    /**\n     * Creates a downcast dispatcher instance.\n     *\n     * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n     *\n     * @param conversionApi Additional properties for an interface that will be passed to events fired\n     * by the downcast dispatcher.\n     */\n    constructor(conversionApi) {\n        super();\n        this._conversionApi = { dispatcher: this, ...conversionApi };\n        this._firedEventsMap = new WeakMap();\n    }\n    /**\n     * Converts changes buffered in the given {@link module:engine/model/differ~Differ model differ}\n     * and fires conversion events based on it.\n     *\n     * @fires insert\n     * @fires remove\n     * @fires attribute\n     * @fires addMarker\n     * @fires removeMarker\n     * @fires reduceChanges\n     * @param differ The differ object with buffered changes.\n     * @param markers Markers related to the model fragment to convert.\n     * @param writer The view writer that should be used to modify the view document.\n     */\n    convertChanges(differ, markers, writer) {\n        const conversionApi = this._createConversionApi(writer, differ.getRefreshedItems());\n        // Before the view is updated, remove markers which have changed.\n        for (const change of differ.getMarkersToRemove()) {\n            this._convertMarkerRemove(change.name, change.range, conversionApi);\n        }\n        // Let features modify the change list (for example to allow reconversion).\n        const changes = this._reduceChanges(differ.getChanges());\n        // Convert changes that happened on model tree.\n        for (const entry of changes) {\n            if (entry.type === 'insert') {\n                this._convertInsert(Range._createFromPositionAndShift(entry.position, entry.length), conversionApi);\n            }\n            else if (entry.type === 'reinsert') {\n                this._convertReinsert(Range._createFromPositionAndShift(entry.position, entry.length), conversionApi);\n            }\n            else if (entry.type === 'remove') {\n                this._convertRemove(entry.position, entry.length, entry.name, conversionApi);\n            }\n            else {\n                // Defaults to 'attribute' change.\n                this._convertAttribute(entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, conversionApi);\n            }\n        }\n        for (const markerName of conversionApi.mapper.flushUnboundMarkerNames()) {\n            const markerRange = markers.get(markerName).getRange();\n            this._convertMarkerRemove(markerName, markerRange, conversionApi);\n            this._convertMarkerAdd(markerName, markerRange, conversionApi);\n        }\n        // After the view is updated, convert markers which have changed.\n        for (const change of differ.getMarkersToAdd()) {\n            this._convertMarkerAdd(change.name, change.range, conversionApi);\n        }\n        // Remove mappings for all removed view elements.\n        conversionApi.mapper.flushDeferredBindings();\n        // Verify if all insert consumables were consumed.\n        conversionApi.consumable.verifyAllConsumed('insert');\n    }\n    /**\n     * Starts a conversion of a model range and the provided markers.\n     *\n     * @fires insert\n     * @fires attribute\n     * @fires addMarker\n     * @param range The inserted range.\n     * @param markers The map of markers that should be down-casted.\n     * @param writer The view writer that should be used to modify the view document.\n     * @param options Optional options object passed to `convertionApi.options`.\n     */\n    convert(range, markers, writer, options = {}) {\n        const conversionApi = this._createConversionApi(writer, undefined, options);\n        this._convertInsert(range, conversionApi);\n        for (const [name, range] of markers) {\n            this._convertMarkerAdd(name, range, conversionApi);\n        }\n        // Verify if all insert consumables were consumed.\n        conversionApi.consumable.verifyAllConsumed('insert');\n    }\n    /**\n     * Starts the model selection conversion.\n     *\n     * Fires events for a given {@link module:engine/model/selection~Selection selection} to start the selection conversion.\n     *\n     * @fires selection\n     * @fires addMarker\n     * @fires attribute\n     * @param selection The selection to convert.\n     * @param markers Markers connected with the converted model.\n     * @param writer View writer that should be used to modify the view document.\n     */\n    convertSelection(selection, markers, writer) {\n        const markersAtSelection = Array.from(markers.getMarkersAtPosition(selection.getFirstPosition()));\n        const conversionApi = this._createConversionApi(writer);\n        this._addConsumablesForSelection(conversionApi.consumable, selection, markersAtSelection);\n        this.fire('selection', { selection }, conversionApi);\n        if (!selection.isCollapsed) {\n            return;\n        }\n        for (const marker of markersAtSelection) {\n            const markerRange = marker.getRange();\n            if (!shouldMarkerChangeBeConverted(selection.getFirstPosition(), marker, conversionApi.mapper)) {\n                continue;\n            }\n            const data = {\n                item: selection,\n                markerName: marker.name,\n                markerRange\n            };\n            if (conversionApi.consumable.test(selection, 'addMarker:' + marker.name)) {\n                this.fire(`addMarker:${marker.name}`, data, conversionApi);\n            }\n        }\n        for (const key of selection.getAttributeKeys()) {\n            const data = {\n                item: selection,\n                range: selection.getFirstRange(),\n                attributeKey: key,\n                attributeOldValue: null,\n                attributeNewValue: selection.getAttribute(key)\n            };\n            // Do not fire event if the attribute has been consumed.\n            if (conversionApi.consumable.test(selection, 'attribute:' + data.attributeKey)) {\n                this.fire(`attribute:${data.attributeKey}:$text`, data, conversionApi);\n            }\n        }\n    }\n    /**\n     * Fires insertion conversion of a range of nodes.\n     *\n     * For each node in the range, {@link #event:insert `insert` event is fired}. For each attribute on each node,\n     * {@link #event:attribute `attribute` event is fired}.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param range The inserted range.\n     * @param conversionApi The conversion API object.\n     * @param options.doNotAddConsumables Whether the ModelConsumable should not get populated\n     * for items in the provided range.\n     */\n    _convertInsert(range, conversionApi, options = {}) {\n        if (!options.doNotAddConsumables) {\n            // Collect a list of things that can be consumed, consisting of nodes and their attributes.\n            this._addConsumablesForInsert(conversionApi.consumable, Array.from(range));\n        }\n        // Fire a separate insert event for each node and text fragment contained in the range.\n        for (const data of Array.from(range.getWalker({ shallow: true })).map(walkerValueToEventData)) {\n            this._testAndFire('insert', data, conversionApi);\n        }\n    }\n    /**\n     * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n     *\n     * @param position Position from which node was removed.\n     * @param length Offset size of removed node.\n     * @param name Name of removed node.\n     * @param conversionApi The conversion API object.\n     */\n    _convertRemove(position, length, name, conversionApi) {\n        this.fire(`remove:${name}`, { position, length }, conversionApi);\n    }\n    /**\n     * Starts a conversion of an attribute change on a given `range`.\n     *\n     * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n     *\n     * @fires attribute\n     * @param range Changed range.\n     * @param key Key of the attribute that has changed.\n     * @param oldValue Attribute value before the change or `null` if the attribute has not been set before.\n     * @param newValue New attribute value or `null` if the attribute has been removed.\n     * @param conversionApi The conversion API object.\n     */\n    _convertAttribute(range, key, oldValue, newValue, conversionApi) {\n        // Create a list with attributes to consume.\n        this._addConsumablesForRange(conversionApi.consumable, range, `attribute:${key}`);\n        // Create a separate attribute event for each node in the range.\n        for (const value of range) {\n            const data = {\n                item: value.item,\n                range: Range._createFromPositionAndShift(value.previousPosition, value.length),\n                attributeKey: key,\n                attributeOldValue: oldValue,\n                attributeNewValue: newValue\n            };\n            this._testAndFire(`attribute:${key}`, data, conversionApi);\n        }\n    }\n    /**\n     * Fires re-insertion conversion (with a `reconversion` flag passed to `insert` events)\n     * of a range of elements (only elements on the range depth, without children).\n     *\n     * For each node in the range on its depth (without children), {@link #event:insert `insert` event} is fired.\n     * For each attribute on each node, {@link #event:attribute `attribute` event} is fired.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param range The range to reinsert.\n     * @param conversionApi The conversion API object.\n     */\n    _convertReinsert(range, conversionApi) {\n        // Convert the elements - without converting children.\n        const walkerValues = Array.from(range.getWalker({ shallow: true }));\n        // Collect a list of things that can be consumed, consisting of nodes and their attributes.\n        this._addConsumablesForInsert(conversionApi.consumable, walkerValues);\n        // Fire a separate insert event for each node and text fragment contained shallowly in the range.\n        for (const data of walkerValues.map(walkerValueToEventData)) {\n            this._testAndFire('insert', { ...data, reconversion: true }, conversionApi);\n        }\n    }\n    /**\n     * Converts the added marker. Fires the {@link #event:addMarker `addMarker`} event for each item\n     * in the marker's range. If the range is collapsed, a single event is dispatched. See the event description for more details.\n     *\n     * @fires addMarker\n     * @param markerName Marker name.\n     * @param markerRange The marker range.\n     * @param conversionApi The conversion API object.\n     */\n    _convertMarkerAdd(markerName, markerRange, conversionApi) {\n        // Do not convert if range is in graveyard.\n        if (markerRange.root.rootName == '$graveyard') {\n            return;\n        }\n        // In markers' case, event name == consumable name.\n        const eventName = `addMarker:${markerName}`;\n        //\n        // First, fire an event for the whole marker.\n        //\n        conversionApi.consumable.add(markerRange, eventName);\n        this.fire(eventName, { markerName, markerRange }, conversionApi);\n        //\n        // Do not fire events for each item inside the range if the range got consumed.\n        // Also consume the whole marker consumable if it wasn't consumed.\n        //\n        if (!conversionApi.consumable.consume(markerRange, eventName)) {\n            return;\n        }\n        //\n        // Then, fire an event for each item inside the marker range.\n        //\n        this._addConsumablesForRange(conversionApi.consumable, markerRange, eventName);\n        for (const item of markerRange.getItems()) {\n            // Do not fire event for already consumed items.\n            if (!conversionApi.consumable.test(item, eventName)) {\n                continue;\n            }\n            const data = { item, range: Range._createOn(item), markerName, markerRange };\n            this.fire(eventName, data, conversionApi);\n        }\n    }\n    /**\n     * Fires the conversion of the marker removal. Fires the {@link #event:removeMarker `removeMarker`} event with the provided data.\n     *\n     * @fires removeMarker\n     * @param markerName Marker name.\n     * @param markerRange The marker range.\n     * @param conversionApi The conversion API object.\n     */\n    _convertMarkerRemove(markerName, markerRange, conversionApi) {\n        // Do not convert if range is in graveyard.\n        if (markerRange.root.rootName == '$graveyard') {\n            return;\n        }\n        this.fire(`removeMarker:${markerName}`, { markerName, markerRange }, conversionApi);\n    }\n    /**\n     * Fires the reduction of changes buffered in the {@link module:engine/model/differ~Differ `Differ`}.\n     *\n     * Features can replace selected {@link module:engine/model/differ~DiffItem `DiffItem`}s with `reinsert` entries to trigger\n     * reconversion. The {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n     * `DowncastHelpers.elementToStructure()`} is using this event to trigger reconversion.\n     *\n     * @fires reduceChanges\n     */\n    _reduceChanges(changes) {\n        const data = { changes };\n        this.fire('reduceChanges', data);\n        return data.changes;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from a given range,\n     * assuming that the range has just been inserted to the model.\n     *\n     * @param consumable The consumable.\n     * @param walkerValues The walker values for the inserted range.\n     * @returns The values to consume.\n     */\n    _addConsumablesForInsert(consumable, walkerValues) {\n        for (const value of walkerValues) {\n            const item = value.item;\n            // Add consumable if it wasn't there yet.\n            if (consumable.test(item, 'insert') === null) {\n                consumable.add(item, 'insert');\n                for (const key of item.getAttributeKeys()) {\n                    consumable.add(item, 'attribute:' + key);\n                }\n            }\n        }\n        return consumable;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for a given range.\n     *\n     * @param consumable The consumable.\n     * @param range The affected range.\n     * @param type Consumable type.\n     * @returns The values to consume.\n     */\n    _addConsumablesForRange(consumable, range, type) {\n        for (const item of range.getItems()) {\n            consumable.add(item, type);\n        }\n        return consumable;\n    }\n    /**\n     * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n     *\n     * @param consumable The consumable.\n     * @param selection The selection to create the consumable from.\n     * @param markers Markers that contain the selection.\n     * @returns The values to consume.\n     */\n    _addConsumablesForSelection(consumable, selection, markers) {\n        consumable.add(selection, 'selection');\n        for (const marker of markers) {\n            consumable.add(selection, 'addMarker:' + marker.name);\n        }\n        for (const key of selection.getAttributeKeys()) {\n            consumable.add(selection, 'attribute:' + key);\n        }\n        return consumable;\n    }\n    /**\n     * Tests whether given event wasn't already fired and if so, fires it.\n     *\n     * @fires insert\n     * @fires attribute\n     * @param type Event type.\n     * @param data Event data.\n     * @param conversionApi The conversion API object.\n     */\n    _testAndFire(type, data, conversionApi) {\n        const eventName = getEventName(type, data);\n        const itemKey = data.item.is('$textProxy') ? conversionApi.consumable._getSymbolForTextProxy(data.item) : data.item;\n        const eventsFiredForConversion = this._firedEventsMap.get(conversionApi);\n        const eventsFiredForItem = eventsFiredForConversion.get(itemKey);\n        if (!eventsFiredForItem) {\n            eventsFiredForConversion.set(itemKey, new Set([eventName]));\n        }\n        else if (!eventsFiredForItem.has(eventName)) {\n            eventsFiredForItem.add(eventName);\n        }\n        else {\n            return;\n        }\n        this.fire(eventName, data, conversionApi);\n    }\n    /**\n     * Fires not already fired events for setting attributes on just inserted item.\n     *\n     * @param item The model item to convert attributes for.\n     * @param conversionApi The conversion API object.\n     */\n    _testAndFireAddAttributes(item, conversionApi) {\n        const data = {\n            item,\n            range: Range._createOn(item)\n        };\n        for (const key of data.item.getAttributeKeys()) {\n            data.attributeKey = key;\n            data.attributeOldValue = null;\n            data.attributeNewValue = data.item.getAttribute(key);\n            this._testAndFire(`attribute:${key}`, data, conversionApi);\n        }\n    }\n    /**\n     * Builds an instance of the {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi} from a template and a given\n     * {@link module:engine/view/downcastwriter~DowncastWriter `DowncastWriter`} and options object.\n     *\n     * @param writer View writer that should be used to modify the view document.\n     * @param refreshedItems A set of model elements that should not reuse their\n     * previous view representations.\n     * @param options Optional options passed to `convertionApi.options`.\n     * @return The conversion API object.\n     */\n    _createConversionApi(writer, refreshedItems = new Set(), options = {}) {\n        const conversionApi = {\n            ...this._conversionApi,\n            consumable: new Consumable(),\n            writer,\n            options,\n            convertItem: item => this._convertInsert(Range._createOn(item), conversionApi),\n            convertChildren: element => this._convertInsert(Range._createIn(element), conversionApi, { doNotAddConsumables: true }),\n            convertAttributes: item => this._testAndFireAddAttributes(item, conversionApi),\n            canReuseView: viewElement => !refreshedItems.has(conversionApi.mapper.toModelElement(viewElement))\n        };\n        this._firedEventsMap.set(conversionApi, new Map());\n        return conversionApi;\n    }\n}\n/**\n * Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n * converted if they happen inside an element with custom conversion method.\n */\nfunction shouldMarkerChangeBeConverted(modelPosition, marker, mapper) {\n    const range = marker.getRange();\n    const ancestors = Array.from(modelPosition.getAncestors());\n    ancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n    ancestors.reverse();\n    const hasCustomHandling = ancestors.some(element => {\n        if (range.containsItem(element)) {\n            const viewElement = mapper.toViewElement(element);\n            return !!viewElement.getCustomProperty('addHighlight');\n        }\n    });\n    return !hasCustomHandling;\n}\nfunction getEventName(type, data) {\n    const name = data.item.is('element') ? data.item.name : '$text';\n    return `${type}:${name}`;\n}\nfunction walkerValueToEventData(value) {\n    const item = value.item;\n    const itemRange = Range._createFromPositionAndShift(value.previousPosition, value.length);\n    return {\n        item,\n        range: itemRange\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/selection\n */\nimport TypeCheckable from './typecheckable';\nimport Node from './node';\nimport Position from './position';\nimport Range from './range';\nimport { CKEditorError, EmitterMixin, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n */\nexport default class Selection extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n     * or creates an empty selection if no arguments were passed.\n     *\n     * ```ts\n     * // Creates empty selection without ranges.\n     * const selection = writer.createSelection();\n     *\n     * // Creates selection at the given range.\n     * const range = writer.createRange( start, end );\n     * const selection = writer.createSelection( range );\n     *\n     * // Creates selection at the given ranges\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * const selection = writer.createSelection( ranges );\n     *\n     * // Creates selection from the other selection.\n     * // Note: It doesn't copy selection attributes.\n     * const otherSelection = writer.createSelection();\n     * const selection = writer.createSelection( otherSelection );\n     *\n     * // Creates selection from the given document selection.\n     * // Note: It doesn't copy selection attributes.\n     * const documentSelection = model.document.selection;\n     * const selection = writer.createSelection( documentSelection );\n     *\n     * // Creates selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * const selection = writer.createSelection( position );\n     *\n     * // Creates selection at the given offset in the given element.\n     * const paragraph = writer.createElement( 'paragraph' );\n     * const selection = writer.createSelection( paragraph, offset );\n     *\n     * // Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n     * // first child of that element and ends after the last child of that element.\n     * const selection = writer.createSelection( paragraph, 'in' );\n     *\n     * // Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n     * // just after the item.\n     * const selection = writer.createSelection( paragraph, 'on' );\n     * ```\n     *\n     * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n     *\n     * ```ts\n     * // Creates backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     *\n     * @internal\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Specifies whether the last added range was added as a backward or forward range.\n         */\n        this._lastRangeBackward = false;\n        /**\n         * List of attributes set on current selection.\n         */\n        this._attrs = new Map();\n        /** @internal */\n        this._ranges = [];\n        if (args.length) {\n            this.setTo(...args);\n        }\n    }\n    /**\n     * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n     * by dragging the mouse, the anchor is where the user pressed the mouse button (the beginning of the selection).\n     *\n     * Anchor and {@link #focus} define the direction of the selection, which is important\n     * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n     *\n     * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n     * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n     * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n     *\n     * May be set to `null` if there are no ranges in the selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        if (this._ranges.length > 0) {\n            const range = this._ranges[this._ranges.length - 1];\n            return this._lastRangeBackward ? range.end : range.start;\n        }\n        return null;\n    }\n    /**\n     * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n     * by dragging the mouse, the focus is where the mouse cursor is.\n     *\n     * May be set to `null` if there are no ranges in the selection.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        if (this._ranges.length > 0) {\n            const range = this._ranges[this._ranges.length - 1];\n            return this._lastRangeBackward ? range.start : range.end;\n        }\n        return null;\n    }\n    /**\n     * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n     * and it is collapsed.\n     */\n    get isCollapsed() {\n        const length = this._ranges.length;\n        if (length === 1) {\n            return this._ranges[0].isCollapsed;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Returns the number of ranges in the selection.\n     */\n    get rangeCount() {\n        return this._ranges.length;\n    }\n    /**\n     * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n     */\n    get isBackward() {\n        return !this.isCollapsed && this._lastRangeBackward;\n    }\n    /**\n     * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n     * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n     *\n     * @param otherSelection Selection to compare with.\n     * @returns `true` if selections are equal, `false` otherwise.\n     */\n    isEqual(otherSelection) {\n        if (this.rangeCount != otherSelection.rangeCount) {\n            return false;\n        }\n        else if (this.rangeCount === 0) {\n            return true;\n        }\n        if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n            return false;\n        }\n        for (const thisRange of this._ranges) {\n            let found = false;\n            for (const otherRange of otherSelection._ranges) {\n                if (thisRange.isEqual(otherRange)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns an iterable object that iterates over copies of selection ranges.\n     */\n    *getRanges() {\n        for (const range of this._ranges) {\n            yield new Range(range.start, range.end);\n        }\n    }\n    /**\n     * Returns a copy of the first range in the selection.\n     * First range is the one which {@link module:engine/model/range~Range#start start} position\n     * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n     * (not to confuse with the first range added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstRange() {\n        let first = null;\n        for (const range of this._ranges) {\n            if (!first || range.start.isBefore(first.start)) {\n                first = range;\n            }\n        }\n        return first ? new Range(first.start, first.end) : null;\n    }\n    /**\n     * Returns a copy of the last range in the selection.\n     * Last range is the one which {@link module:engine/model/range~Range#end end} position\n     * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n     * recently added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastRange() {\n        let last = null;\n        for (const range of this._ranges) {\n            if (!last || range.end.isAfter(last.end)) {\n                last = range;\n            }\n        }\n        return last ? new Range(last.start, last.end) : null;\n    }\n    /**\n     * Returns the first position in the selection.\n     * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstPosition() {\n        const first = this.getFirstRange();\n        return first ? first.start.clone() : null;\n    }\n    /**\n     * Returns the last position in the selection.\n     * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastPosition() {\n        const lastRange = this.getLastRange();\n        return lastRange ? lastRange.end.clone() : null;\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/model/selection~Selectable selectable}.\n     *\n     * ```ts\n     * // Removes all selection's ranges.\n     * selection.setTo( null );\n     *\n     * // Sets selection to the given range.\n     * const range = writer.createRange( start, end );\n     * selection.setTo( range );\n     *\n     * // Sets selection to given ranges.\n     * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n     * selection.setTo( ranges );\n     *\n     * // Sets selection to other selection.\n     * // Note: It doesn't copy selection attributes.\n     * const otherSelection = writer.createSelection();\n     * selection.setTo( otherSelection );\n     *\n     * // Sets selection to the given document selection.\n     * // Note: It doesn't copy selection attributes.\n     * const documentSelection = new DocumentSelection( doc );\n     * selection.setTo( documentSelection );\n     *\n     * // Sets collapsed selection at the given position.\n     * const position = writer.createPositionFromPath( root, path );\n     * selection.setTo( position );\n     *\n     * // Sets collapsed selection at the position of the given node and an offset.\n     * selection.setTo( paragraph, offset );\n     * ```\n     *\n     * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'in' );\n     * ```\n     *\n     * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n     *\n     * ```ts\n     * selection.setTo( paragraph, 'on' );\n     * ```\n     *\n     * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n     *\n     * ```ts\n     * // Sets backward selection.\n     * const selection = writer.createSelection( range, { backward: true } );\n     * ```\n     */\n    setTo(...args) {\n        let [selectable, placeOrOffset, options] = args;\n        if (typeof placeOrOffset == 'object') {\n            options = placeOrOffset;\n            placeOrOffset = undefined;\n        }\n        if (selectable === null) {\n            this._setRanges([]);\n        }\n        else if (selectable instanceof Selection) {\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n        }\n        else if (selectable && typeof selectable.getRanges == 'function') {\n            // We assume that the selectable is a DocumentSelection.\n            // It can't be imported here, because it would lead to circular imports.\n            this._setRanges(selectable.getRanges(), selectable.isBackward);\n        }\n        else if (selectable instanceof Range) {\n            this._setRanges([selectable], !!options && !!options.backward);\n        }\n        else if (selectable instanceof Position) {\n            this._setRanges([new Range(selectable)]);\n        }\n        else if (selectable instanceof Node) {\n            const backward = !!options && !!options.backward;\n            let range;\n            if (placeOrOffset == 'in') {\n                range = Range._createIn(selectable);\n            }\n            else if (placeOrOffset == 'on') {\n                range = Range._createOn(selectable);\n            }\n            else if (placeOrOffset !== undefined) {\n                range = new Range(Position._createAt(selectable, placeOrOffset));\n            }\n            else {\n                /**\n                 * selection.setTo requires the second parameter when the first parameter is a node.\n                 *\n                 * @error model-selection-setto-required-second-parameter\n                 */\n                throw new CKEditorError('model-selection-setto-required-second-parameter', [this, selectable]);\n            }\n            this._setRanges([range], backward);\n        }\n        else if (isIterable(selectable)) {\n            // We assume that the selectable is an iterable of ranges.\n            this._setRanges(selectable, options && !!options.backward);\n        }\n        else {\n            /**\n             * Cannot set the selection to the given place.\n             *\n             * Invalid parameters were specified when setting the selection. Common issues:\n             *\n             * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n             * a real {@link module:engine/model/text~Text}.\n             * * View nodes were passed instead of model nodes.\n             * * `null`/`undefined` was passed.\n             *\n             * @error model-selection-setto-not-selectable\n             */\n            throw new CKEditorError('model-selection-setto-not-selectable', [this, selectable]);\n        }\n    }\n    /**\n     * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n     * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n     * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n     *\n     * @fires change:range\n     * @param newRanges Ranges to set.\n     * @param isLastBackward Flag describing if last added range was selected forward - from start to end (`false`)\n     * or backward - from end to start (`true`).\n     */\n    _setRanges(newRanges, isLastBackward = false) {\n        const ranges = Array.from(newRanges);\n        // Check whether there is any range in new ranges set that is different than all already added ranges.\n        const anyNewRange = ranges.some(newRange => {\n            if (!(newRange instanceof Range)) {\n                /**\n                 * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n                 *\n                 * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n                 * Common mistakes leading to this error are:\n                 *\n                 * * using DOM `Range` object,\n                 * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n                 *\n                 * @error model-selection-set-ranges-not-range\n                 */\n                throw new CKEditorError('model-selection-set-ranges-not-range', [this, newRanges]);\n            }\n            return this._ranges.every(oldRange => {\n                return !oldRange.isEqual(newRange);\n            });\n        });\n        // Don't do anything if nothing changed.\n        if (ranges.length === this._ranges.length && !anyNewRange) {\n            return;\n        }\n        this._replaceAllRanges(ranges);\n        this._lastRangeBackward = !!isLastBackward;\n        this.fire('change:range', { directChange: true });\n    }\n    /**\n     * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n     *\n     * The location can be specified in the same form as\n     * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n     *\n     * @fires change:range\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    setFocus(itemOrPosition, offset) {\n        if (this.anchor === null) {\n            /**\n             * Cannot set selection focus if there are no ranges in selection.\n             *\n             * @error model-selection-setfocus-no-ranges\n             */\n            throw new CKEditorError('model-selection-setfocus-no-ranges', [this, itemOrPosition]);\n        }\n        const newFocus = Position._createAt(itemOrPosition, offset);\n        if (newFocus.compareWith(this.focus) == 'same') {\n            return;\n        }\n        const anchor = this.anchor;\n        if (this._ranges.length) {\n            this._popRange();\n        }\n        if (newFocus.compareWith(anchor) == 'before') {\n            this._pushRange(new Range(newFocus, anchor));\n            this._lastRangeBackward = true;\n        }\n        else {\n            this._pushRange(new Range(anchor, newFocus));\n            this._lastRangeBackward = false;\n        }\n        this.fire('change:range', { directChange: true });\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._attrs.get(key);\n    }\n    /**\n     * Returns iterable that iterates over this selection's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._attrs.entries();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._attrs.keys();\n    }\n    /**\n     * Checks if the selection has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on selection, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._attrs.has(key);\n    }\n    /**\n     * Removes an attribute with given key from the selection.\n     *\n     * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n     * removed attribute key.\n     *\n     * @fires change:attribute\n     * @param key Key of attribute to remove.\n     */\n    removeAttribute(key) {\n        if (this.hasAttribute(key)) {\n            this._attrs.delete(key);\n            this.fire('change:attribute', { attributeKeys: [key], directChange: true });\n        }\n    }\n    /**\n     * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n     *\n     * If the attribute value has changed, fires the {@link #event:change:range} event with\n     * the attribute key.\n     *\n     * @fires change:attribute\n     * @param key Key of attribute to set.\n     * @param value Attribute value.\n     */\n    setAttribute(key, value) {\n        if (this.getAttribute(key) !== value) {\n            this._attrs.set(key, value);\n            this.fire('change:attribute', { attributeKeys: [key], directChange: true });\n        }\n    }\n    /**\n     * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        if (this.rangeCount !== 1) {\n            return null;\n        }\n        return this.getFirstRange().getContainedElement();\n    }\n    /**\n     * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n     *\n     * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n     *\n     * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n     * but will not return blocks nested in other blocks.\n     *\n     * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n     *\n     * ```xml\n     * <paragraph>[a</paragraph>\n     * <blockQuote>\n     * \t<paragraph>b</paragraph>\n     * </blockQuote>\n     * <paragraph>c]d</paragraph>\n     * ```\n     *\n     * In this case the paragraph will also be returned, despite the collapsed selection:\n     *\n     * ```xml\n     * <paragraph>[]a</paragraph>\n     * ```\n     *\n     * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n     *\n     * ```xml\n     * [<blockA></blockA>\n     * <blockB>\n     * \t<blockC></blockC>\n     * \t<blockD></blockD>\n     * </blockB>\n     * <blockE></blockE>]\n     * ```\n     *\n     * If the selection is inside a block all the inner blocks (A & B) are returned:\n     *\n     * ```xml\n     * <block>\n     * \t<blockA>[a</blockA>\n     * \t<blockB>b]</blockB>\n     * </block>\n     * ```\n     *\n     * **Special case**: Selection ignores first and/or last blocks if nothing (from user perspective) is selected in them.\n     *\n     * ```xml\n     * // Selection ends and the beginning of the last block.\n     * <paragraph>[a</paragraph>\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // This block will not be returned\n     *\n     * // Selection begins at the end of the first block.\n     * <paragraph>a[</paragraph> // This block will not be returned\n     * <paragraph>b</paragraph>\n     * <paragraph>c]</paragraph>\n     *\n     * // Selection begings at the end of the first block and ends at the beginning of the last block.\n     * <paragraph>a[</paragraph> // This block will not be returned\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // This block will not be returned\n     * ```\n     */\n    *getSelectedBlocks() {\n        const visited = new WeakSet();\n        for (const range of this.getRanges()) {\n            // Get start block of range in case of a collapsed range.\n            const startBlock = getParentBlock(range.start, visited);\n            if (isStartBlockSelected(startBlock, range)) {\n                yield startBlock;\n            }\n            for (const value of range.getWalker()) {\n                const block = value.item;\n                if (value.type == 'elementEnd' && isUnvisitedTopBlock(block, visited, range)) {\n                    yield block;\n                }\n            }\n            const endBlock = getParentBlock(range.end, visited);\n            if (isEndBlockSelected(endBlock, range)) {\n                yield endBlock;\n            }\n        }\n    }\n    /**\n     * Checks whether the selection contains the entire content of the given element. This means that selection must start\n     * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n     * touching the element's end.\n     *\n     * By default, this method will check whether the entire content of the selection's current root is selected.\n     * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n     */\n    containsEntireContent(element = this.anchor.root) {\n        const limitStartPosition = Position._createAt(element, 0);\n        const limitEndPosition = Position._createAt(element, 'end');\n        return limitStartPosition.isTouching(this.getFirstPosition()) &&\n            limitEndPosition.isTouching(this.getLastPosition());\n    }\n    /**\n     * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n     * if given range is intersecting with any range that is already stored in this selection.\n     */\n    _pushRange(range) {\n        this._checkRange(range);\n        this._ranges.push(new Range(range.start, range.end));\n    }\n    /**\n     * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n     */\n    _checkRange(range) {\n        for (let i = 0; i < this._ranges.length; i++) {\n            if (range.isIntersecting(this._ranges[i])) {\n                /**\n                 * Trying to add a range that intersects with another range in the selection.\n                 *\n                 * @error model-selection-range-intersects\n                 * @param addedRange Range that was added to the selection.\n                 * @param intersectingRange Range in the selection that intersects with `addedRange`.\n                 */\n                throw new CKEditorError('model-selection-range-intersects', [this, range], { addedRange: range, intersectingRange: this._ranges[i] });\n            }\n        }\n    }\n    /**\n     * Replaces all the ranges by the given ones.\n     * Uses {@link #_popRange _popRange} and {@link #_pushRange _pushRange} to ensure proper ranges removal and addition.\n     */\n    _replaceAllRanges(ranges) {\n        this._removeAllRanges();\n        for (const range of ranges) {\n            this._pushRange(range);\n        }\n    }\n    /**\n     * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n     * ensure proper ranges removal.\n     */\n    _removeAllRanges() {\n        while (this._ranges.length > 0) {\n            this._popRange();\n        }\n    }\n    /**\n     * Removes most recently added range from the selection.\n     */\n    _popRange() {\n        this._ranges.pop();\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nSelection.prototype.is = function (type) {\n    return type === 'selection' || type === 'model:selection';\n};\n/**\n * Checks whether the given element extends $block in the schema and has a parent (is not a root).\n * Marks it as already visited.\n */\nfunction isUnvisitedBlock(element, visited) {\n    if (visited.has(element)) {\n        return false;\n    }\n    visited.add(element);\n    return element.root.document.model.schema.isBlock(element) && !!element.parent;\n}\n/**\n * Checks if the given element is a $block was not previously visited and is a top block in a range.\n */\nfunction isUnvisitedTopBlock(element, visited, range) {\n    return isUnvisitedBlock(element, visited) && isTopBlockInRange(element, range);\n}\n/**\n * Finds the lowest element in position's ancestors which is a block.\n * It will search until first ancestor that is a limit element.\n * Marks all ancestors as already visited to not include any of them later on.\n */\nfunction getParentBlock(position, visited) {\n    const element = position.parent;\n    const schema = element.root.document.model.schema;\n    const ancestors = position.parent.getAncestors({ parentFirst: true, includeSelf: true });\n    let hasParentLimit = false;\n    const block = ancestors.find((element) => {\n        // Stop searching after first parent node that is limit element.\n        if (hasParentLimit) {\n            return false;\n        }\n        hasParentLimit = schema.isLimit(element);\n        return !hasParentLimit && isUnvisitedBlock(element, visited);\n    });\n    // Mark all ancestors of this position's parent, because find() might've stopped early and\n    // the found block may be a child of another block.\n    ancestors.forEach(element => visited.add(element));\n    return block;\n}\n/**\n * Checks if the blocks is not nested in other block inside a range.\n */\nfunction isTopBlockInRange(block, range) {\n    const parentBlock = findAncestorBlock(block);\n    if (!parentBlock) {\n        return true;\n    }\n    // Add loose flag to check as parentRange can be equal to range.\n    const isParentInRange = range.containsRange(Range._createOn(parentBlock), true);\n    return !isParentInRange;\n}\n/**\n * If a selection starts at the end of a block, that block is not returned as from the user's perspective this block wasn't selected.\n * See [#11585](https://github.com/ckeditor/ckeditor5/issues/11585) for more details.\n *\n * ```xml\n * <paragraph>a[</paragraph> // This block will not be returned\n * <paragraph>b</paragraph>\n * <paragraph>c]</paragraph>\n * ```\n *\n * Collapsed selection is not affected by it:\n *\n * ```xml\n * <paragraph>a[]</paragraph> // This block will be returned\n * ```\n */\nfunction isStartBlockSelected(startBlock, range) {\n    if (!startBlock) {\n        return false;\n    }\n    if (range.isCollapsed || startBlock.isEmpty) {\n        return true;\n    }\n    if (range.start.isTouching(Position._createAt(startBlock, startBlock.maxOffset))) {\n        return false;\n    }\n    return isTopBlockInRange(startBlock, range);\n}\n/**\n * If a selection ends at the beginning of a block, that block is not returned as from the user's perspective this block wasn't selected.\n * See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n *\n * ```xml\n * <paragraph>[a</paragraph>\n * <paragraph>b</paragraph>\n * <paragraph>]c</paragraph> // this block will not be returned\n * ```\n *\n * Collapsed selection is not affected by it:\n *\n * ```xml\n * <paragraph>[]a</paragraph> // this block will be returned\n * ```\n */\nfunction isEndBlockSelected(endBlock, range) {\n    if (!endBlock) {\n        return false;\n    }\n    if (range.isCollapsed || endBlock.isEmpty) {\n        return true;\n    }\n    if (range.end.isTouching(Position._createAt(endBlock, 0))) {\n        return false;\n    }\n    return isTopBlockInRange(endBlock, range);\n}\n/**\n * Returns first ancestor block of a node.\n */\nfunction findAncestorBlock(node) {\n    const schema = node.root.document.model.schema;\n    let parent = node.parent;\n    while (parent) {\n        if (schema.isBlock(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/liverange\n */\nimport Range from './range';\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends EmitterMixin(Range) {\n    /**\n     * Creates a live range.\n     *\n     * @see module:engine/model/range~Range\n     */\n    constructor(start, end) {\n        super(start, end);\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n     */\n    toRange() {\n        return new Range(this.start, this.end);\n    }\n    /**\n     * Creates a `LiveRange` instance that is equal to the given range.\n     */\n    static fromRange(range) {\n        return new LiveRange(range.start, range.end);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nLiveRange.prototype.is = function (type) {\n    return type === 'liveRange' || type === 'model:liveRange' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'range' || type === 'model:range';\n};\n/**\n * Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n * that owns this range's {@link module:engine/model/range~Range#root root}.\n */\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n/**\n * Updates this range accordingly to the updates applied to the model. Bases on change events.\n */\nfunction transform(operation) {\n    // Transform the range by the operation. Join the result ranges if needed.\n    const ranges = this.getTransformedByOperation(operation);\n    const result = Range._createFromRanges(ranges);\n    const boundariesChanged = !result.isEqual(this);\n    const contentChanged = doesOperationChangeRangeContent(this, operation);\n    let deletionPosition = null;\n    if (boundariesChanged) {\n        // If range boundaries have changed, fire `change:range` event.\n        //\n        if (result.root.rootName == '$graveyard') {\n            // If the range was moved to the graveyard root, set `deletionPosition`.\n            if (operation.type == 'remove') {\n                deletionPosition = operation.sourcePosition;\n            }\n            else {\n                // Merge operation.\n                deletionPosition = operation.deletionPosition;\n            }\n        }\n        const oldRange = this.toRange();\n        this.start = result.start;\n        this.end = result.end;\n        this.fire('change:range', oldRange, { deletionPosition });\n    }\n    else if (contentChanged) {\n        // If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n        this.fire('change:content', this.toRange(), { deletionPosition });\n    }\n}\n/**\n * Checks whether given operation changes something inside the range (even if it does not change boundaries).\n */\nfunction doesOperationChangeRangeContent(range, operation) {\n    switch (operation.type) {\n        case 'insert':\n            return range.containsPosition(operation.position);\n        case 'move':\n        case 'remove':\n        case 'reinsert':\n        case 'merge':\n            return range.containsPosition(operation.sourcePosition) ||\n                range.start.isEqual(operation.sourcePosition) ||\n                range.containsPosition(operation.targetPosition);\n        case 'split':\n            return range.containsPosition(operation.splitPosition) || range.containsPosition(operation.insertionPosition);\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/documentselection\n */\nimport TypeCheckable from './typecheckable';\nimport LiveRange from './liverange';\nimport Selection from './selection';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { CKEditorError, Collection, EmitterMixin, toMap, uid } from '@ckeditor/ckeditor5-utils';\nconst storePrefix = 'selection:';\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n */\nexport default class DocumentSelection extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n     *\n     * @param doc Document which owns this selection.\n     */\n    constructor(doc) {\n        super();\n        this._selection = new LiveSelection(doc);\n        this._selection.delegate('change:range').to(this);\n        this._selection.delegate('change:attribute').to(this);\n        this._selection.delegate('change:marker').to(this);\n    }\n    /**\n     * Describes whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n     * collapsed.\n     */\n    get isCollapsed() {\n        return this._selection.isCollapsed;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n     * Together with {@link #focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n     * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #focus\n     */\n    get anchor() {\n        return this._selection.anchor;\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #anchor\n     */\n    get focus() {\n        return this._selection.focus;\n    }\n    /**\n     * Number of ranges in selection.\n     */\n    get rangeCount() {\n        return this._selection.rangeCount;\n    }\n    /**\n     * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n     * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n     */\n    get hasOwnRange() {\n        return this._selection.hasOwnRange;\n    }\n    /**\n     * Specifies whether the {@link #focus}\n     * precedes {@link #anchor}.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n    get isBackward() {\n        return this._selection.isBackward;\n    }\n    /**\n     * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n     *\n     * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n     */\n    get isGravityOverridden() {\n        return this._selection.isGravityOverridden;\n    }\n    /**\n     * A collection of selection {@link module:engine/model/markercollection~Marker markers}.\n     * Marker is a selection marker when selection range is inside the marker range.\n     *\n     * **Note**: Only markers from {@link ~DocumentSelection#observeMarkers observed markers groups} are collected.\n     */\n    get markers() {\n        return this._selection.markers;\n    }\n    /**\n     * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n     *\n     * @internal\n     */\n    get _ranges() {\n        return this._selection._ranges;\n    }\n    /**\n     * Returns an iterable that iterates over copies of selection ranges.\n     */\n    getRanges() {\n        return this._selection.getRanges();\n    }\n    /**\n     * Returns the first position in the selection.\n     * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstPosition() {\n        return this._selection.getFirstPosition();\n    }\n    /**\n     * Returns the last position in the selection.\n     * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastPosition() {\n        return this._selection.getLastPosition();\n    }\n    /**\n     * Returns a copy of the first range in the selection.\n     * First range is the one which {@link module:engine/model/range~Range#start start} position\n     * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n     * (not to confuse with the first range added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getFirstRange() {\n        return this._selection.getFirstRange();\n    }\n    /**\n     * Returns a copy of the last range in the selection.\n     * Last range is the one which {@link module:engine/model/range~Range#end end} position\n     * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n     * recently added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     */\n    getLastRange() {\n        return this._selection.getLastRange();\n    }\n    /**\n     * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n     *\n     * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n     *\n     * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n     * but will not return blocks nested in other blocks.\n     *\n     * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n     *\n     * ```\n     * <paragraph>[a</paragraph>\n     * <blockQuote>\n     * \t<paragraph>b</paragraph>\n     * </blockQuote>\n     * <paragraph>c]d</paragraph>\n     * ```\n     *\n     * In this case the paragraph will also be returned, despite the collapsed selection:\n     *\n     * ```\n     * <paragraph>[]a</paragraph>\n     * ```\n     *\n     * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n     *\n     * ```\n     * [<blockA></blockA>\n     * <blockB>\n     * \t<blockC></blockC>\n     * \t<blockD></blockD>\n     * </blockB>\n     * <blockE></blockE>]\n     * ```\n     *\n     * If the selection is inside a block all the inner blocks (A & B) are returned:\n     *\n     * ```\n     * <block>\n     * \t<blockA>[a</blockA>\n     * \t<blockB>b]</blockB>\n     * </block>\n     * ```\n     *\n     * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n     * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n     *\n     * ```\n     * <paragraph>[a</paragraph>\n     * <paragraph>b</paragraph>\n     * <paragraph>]c</paragraph> // this block will not be returned\n     * ```\n     */\n    getSelectedBlocks() {\n        return this._selection.getSelectedBlocks();\n    }\n    /**\n     * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     */\n    getSelectedElement() {\n        return this._selection.getSelectedElement();\n    }\n    /**\n     * Checks whether the selection contains the entire content of the given element. This means that selection must start\n     * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n     * touching the element's end.\n     *\n     * By default, this method will check whether the entire content of the selection's current root is selected.\n     * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n     */\n    containsEntireContent(element) {\n        return this._selection.containsEntireContent(element);\n    }\n    /**\n     * Unbinds all events previously bound by document selection.\n     */\n    destroy() {\n        this._selection.destroy();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attribute keys.\n     */\n    getAttributeKeys() {\n        return this._selection.getAttributeKeys();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     */\n    getAttributes() {\n        return this._selection.getAttributes();\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n     *\n     * @param key Key of attribute to look for.\n     * @returns Attribute value or `undefined`.\n     */\n    getAttribute(key) {\n        return this._selection.getAttribute(key);\n    }\n    /**\n     * Checks if the selection has an attribute for given key.\n     *\n     * @param key Key of attribute to check.\n     * @returns `true` if attribute with given key is set on selection, `false` otherwise.\n     */\n    hasAttribute(key) {\n        return this._selection.hasAttribute(key);\n    }\n    /**\n     * Refreshes selection attributes and markers according to the current position in the model.\n     */\n    refresh() {\n        this._selection.updateMarkers();\n        this._selection._updateAttributes(false);\n    }\n    /**\n     * Registers a marker group prefix or a marker name to be collected in the\n     * {@link ~DocumentSelection#markers selection markers collection}.\n     *\n     * See also {@link module:engine/model/markercollection~MarkerCollection#getMarkersGroup `MarkerCollection#getMarkersGroup()`}.\n     *\n     * @param prefixOrName The marker group prefix or marker name.\n     */\n    observeMarkers(prefixOrName) {\n        this._selection.observeMarkers(prefixOrName);\n    }\n    /**\n     * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n     *\n     * The location can be specified in the same form as\n     * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionFocus\n     * @internal\n     * @param offset Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    _setFocus(itemOrPosition, offset) {\n        this._selection.setFocus(itemOrPosition, offset);\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/model/selection~Selectable selectable}.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelection\n     * @internal\n     */\n    _setTo(...args) {\n        this._selection.setTo(...args);\n    }\n    /**\n     * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionAttribute\n     * @internal\n     * @param key Key of the attribute to set.\n     * @param value Attribute value.\n     */\n    _setAttribute(key, value) {\n        this._selection.setAttribute(key, value);\n    }\n    /**\n     * Removes an attribute with given key from the selection.\n     * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n     * event with removed attribute key.\n     * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#removeSelectionAttribute\n     * @internal\n     * @param key Key of the attribute to remove.\n     */\n    _removeAttribute(key) {\n        this._selection.removeAttribute(key);\n    }\n    /**\n     * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n     *\n     * @internal\n     */\n    _getStoredAttributes() {\n        return this._selection.getStoredAttributes();\n    }\n    /**\n     * Temporarily changes the gravity of the selection from the left to the right.\n     *\n     * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n     * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n     * This method allows to temporarily override this behavior by forcing the gravity to the right.\n     *\n     * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n     * of the process.\n     *\n     * @see module:engine/model/writer~Writer#overrideSelectionGravity\n     * @internal\n     * @returns The unique id which allows restoring the gravity.\n     */\n    _overrideGravity() {\n        return this._selection.overrideGravity();\n    }\n    /**\n     * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n     *\n     * Restoring the gravity is only possible using the unique identifier returned by\n     * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n     * the same number of times it was overridden.\n     *\n     * @see module:engine/model/writer~Writer#restoreSelectionGravity\n     * @internal\n     * @param uid The unique id returned by {@link #_overrideGravity}.\n     */\n    _restoreGravity(uid) {\n        this._selection.restoreGravity(uid);\n    }\n    /**\n     * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n     *\n     * @internal\n     * @param key Attribute key to convert.\n     * @returns Converted attribute key, applicable for selection store.\n     */\n    static _getStoreAttributeKey(key) {\n        return storePrefix + key;\n    }\n    /**\n     * Checks whether the given attribute key is an attribute stored on an element.\n     *\n     * @internal\n     */\n    static _isStoreAttributeKey(key) {\n        return key.startsWith(storePrefix);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentSelection.prototype.is = function (type) {\n    return type === 'selection' ||\n        type == 'model:selection' ||\n        type == 'documentSelection' ||\n        type == 'model:documentSelection';\n};\n/**\n * `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n *\n * LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n * * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `LiveSelection` are updated automatically according to selection ranges.\n */\nclass LiveSelection extends Selection {\n    /**\n     * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n     *\n     * @param doc Document which owns this selection.\n     */\n    constructor(doc) {\n        super();\n        /**\n         * List of selection markers.\n         * Marker is a selection marker when selection range is inside the marker range.\n         */\n        this.markers = new Collection({ idProperty: 'name' });\n        /**\n         * Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n         * last time. Possible values of priority are: `'low'` and `'normal'`.\n         *\n         * Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n         * attributes API are set with `'normal'` priority.\n         */\n        this._attributePriority = new Map();\n        /**\n         * Position to which the selection should be set if the last selection range was moved to the graveyard.\n         */\n        this._selectionRestorePosition = null;\n        /**\n         * Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n         */\n        this._hasChangedRange = false;\n        /**\n         * Each overriding gravity adds an UID to the set and each removal removes it.\n         * Gravity is overridden when there's at least one UID in the set.\n         * Gravity is restored when the set is empty.\n         * This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n         */\n        this._overriddenGravityRegister = new Set();\n        /**\n         * Prefixes of marker names that should affect `LiveSelection#markers` collection.\n         */\n        this._observedMarkers = new Set();\n        this._model = doc.model;\n        this._document = doc;\n        // Ensure selection is correct after each operation.\n        this.listenTo(this._model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (!operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop') {\n                return;\n            }\n            // Fix selection if the last range was removed from it and we have a position to which we can restore the selection.\n            if (this._ranges.length == 0 && this._selectionRestorePosition) {\n                this._fixGraveyardSelection(this._selectionRestorePosition);\n            }\n            // \"Forget\" the restore position even if it was not \"used\".\n            this._selectionRestorePosition = null;\n            if (this._hasChangedRange) {\n                this._hasChangedRange = false;\n                this.fire('change:range', { directChange: false });\n            }\n        }, { priority: 'lowest' });\n        // Ensure selection is correct and up to date after each range change.\n        this.on('change:range', () => {\n            this._validateSelectionRanges(this.getRanges());\n        });\n        // Update markers data stored by the selection after each marker change.\n        // This handles only marker changes done through marker operations (not model tree changes).\n        this.listenTo(this._model.markers, 'update', (evt, marker, oldRange, newRange) => {\n            this._updateMarker(marker, newRange);\n        });\n        // Ensure selection is up to date after each change block.\n        this.listenTo(this._document, 'change', (evt, batch) => {\n            clearAttributesStoredInElement(this._model, batch);\n        });\n    }\n    get isCollapsed() {\n        const length = this._ranges.length;\n        return length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n    }\n    get anchor() {\n        return super.anchor || this._document._getDefaultRange().start;\n    }\n    get focus() {\n        return super.focus || this._document._getDefaultRange().end;\n    }\n    get rangeCount() {\n        return this._ranges.length ? this._ranges.length : 1;\n    }\n    /**\n     * Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n     * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n     */\n    get hasOwnRange() {\n        return this._ranges.length > 0;\n    }\n    /**\n     * When set to `true` then selection attributes on node before the caret won't be taken\n     * into consideration while updating selection attributes.\n     */\n    get isGravityOverridden() {\n        return !!this._overriddenGravityRegister.size;\n    }\n    /**\n     * Unbinds all events previously bound by live selection.\n     */\n    destroy() {\n        for (let i = 0; i < this._ranges.length; i++) {\n            this._ranges[i].detach();\n        }\n        this.stopListening();\n    }\n    *getRanges() {\n        if (this._ranges.length) {\n            yield* super.getRanges();\n        }\n        else {\n            yield this._document._getDefaultRange();\n        }\n    }\n    getFirstRange() {\n        return super.getFirstRange() || this._document._getDefaultRange();\n    }\n    getLastRange() {\n        return super.getLastRange() || this._document._getDefaultRange();\n    }\n    setTo(...args) {\n        super.setTo(...args);\n        this._updateAttributes(true);\n        this.updateMarkers();\n    }\n    setFocus(itemOrPosition, offset) {\n        super.setFocus(itemOrPosition, offset);\n        this._updateAttributes(true);\n        this.updateMarkers();\n    }\n    setAttribute(key, value) {\n        if (this._setAttribute(key, value)) {\n            // Fire event with exact data.\n            const attributeKeys = [key];\n            this.fire('change:attribute', { attributeKeys, directChange: true });\n        }\n    }\n    removeAttribute(key) {\n        if (this._removeAttribute(key)) {\n            // Fire event with exact data.\n            const attributeKeys = [key];\n            this.fire('change:attribute', { attributeKeys, directChange: true });\n        }\n    }\n    overrideGravity() {\n        const overrideUid = uid();\n        // Remember that another overriding has been requested. It will need to be removed\n        // before the gravity is to be restored.\n        this._overriddenGravityRegister.add(overrideUid);\n        if (this._overriddenGravityRegister.size === 1) {\n            this._updateAttributes(true);\n        }\n        return overrideUid;\n    }\n    restoreGravity(uid) {\n        if (!this._overriddenGravityRegister.has(uid)) {\n            /**\n             * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n             * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n             *\n             * @error document-selection-gravity-wrong-restore\n             * @param uid The unique identifier returned by\n             * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n             */\n            throw new CKEditorError('document-selection-gravity-wrong-restore', this, { uid });\n        }\n        this._overriddenGravityRegister.delete(uid);\n        // Restore gravity only when all overriding have been restored.\n        if (!this.isGravityOverridden) {\n            this._updateAttributes(true);\n        }\n    }\n    observeMarkers(prefixOrName) {\n        this._observedMarkers.add(prefixOrName);\n        this.updateMarkers();\n    }\n    _replaceAllRanges(ranges) {\n        this._validateSelectionRanges(ranges);\n        super._replaceAllRanges(ranges);\n    }\n    _popRange() {\n        this._ranges.pop().detach();\n    }\n    _pushRange(range) {\n        const liveRange = this._prepareRange(range);\n        // `undefined` is returned when given `range` is in graveyard root.\n        if (liveRange) {\n            this._ranges.push(liveRange);\n        }\n    }\n    _validateSelectionRanges(ranges) {\n        for (const range of ranges) {\n            if (!this._document._validateSelectionRange(range)) {\n                /**\n                 * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n                 * starts or ends at incorrect position.\n                 *\n                 * @error document-selection-wrong-position\n                 * @param range\n                 */\n                throw new CKEditorError('document-selection-wrong-position', this, { range });\n            }\n        }\n    }\n    /**\n     * Prepares given range to be added to selection. Checks if it is correct,\n     * converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n     * and sets listeners listening to the range's change event.\n     */\n    _prepareRange(range) {\n        this._checkRange(range);\n        if (range.root == this._document.graveyard) {\n            // @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n            return;\n        }\n        const liveRange = LiveRange.fromRange(range);\n        // If selection range is moved to the graveyard remove it from the selection object.\n        // Also, save some data that can be used to restore selection later, on `Model#applyOperation` event.\n        liveRange.on('change:range', (evt, oldRange, data) => {\n            this._hasChangedRange = true;\n            if (liveRange.root == this._document.graveyard) {\n                this._selectionRestorePosition = data.deletionPosition;\n                const index = this._ranges.indexOf(liveRange);\n                this._ranges.splice(index, 1);\n                liveRange.detach();\n            }\n        });\n        return liveRange;\n    }\n    updateMarkers() {\n        if (!this._observedMarkers.size) {\n            return;\n        }\n        const markers = [];\n        let changed = false;\n        for (const marker of this._model.markers) {\n            const markerGroup = marker.name.split(':', 1)[0];\n            if (!this._observedMarkers.has(markerGroup)) {\n                continue;\n            }\n            const markerRange = marker.getRange();\n            for (const selectionRange of this.getRanges()) {\n                if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n                    markers.push(marker);\n                }\n            }\n        }\n        const oldMarkers = Array.from(this.markers);\n        for (const marker of markers) {\n            if (!this.markers.has(marker)) {\n                this.markers.add(marker);\n                changed = true;\n            }\n        }\n        for (const marker of Array.from(this.markers)) {\n            if (!markers.includes(marker)) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        if (changed) {\n            this.fire('change:marker', { oldMarkers, directChange: false });\n        }\n    }\n    _updateMarker(marker, markerRange) {\n        const markerGroup = marker.name.split(':', 1)[0];\n        if (!this._observedMarkers.has(markerGroup)) {\n            return;\n        }\n        let changed = false;\n        const oldMarkers = Array.from(this.markers);\n        const hasMarker = this.markers.has(marker);\n        if (!markerRange) {\n            if (hasMarker) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        else {\n            let contained = false;\n            for (const selectionRange of this.getRanges()) {\n                if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (contained && !hasMarker) {\n                this.markers.add(marker);\n                changed = true;\n            }\n            else if (!contained && hasMarker) {\n                this.markers.remove(marker);\n                changed = true;\n            }\n        }\n        if (changed) {\n            this.fire('change:marker', { oldMarkers, directChange: false });\n        }\n    }\n    /**\n     * Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n     */\n    _updateAttributes(clearAll) {\n        const newAttributes = toMap(this._getSurroundingAttributes());\n        const oldAttributes = toMap(this.getAttributes());\n        if (clearAll) {\n            // If `clearAll` remove all attributes and reset priorities.\n            this._attributePriority = new Map();\n            this._attrs = new Map();\n        }\n        else {\n            // If not, remove only attributes added with `low` priority.\n            for (const [key, priority] of this._attributePriority) {\n                if (priority == 'low') {\n                    this._attrs.delete(key);\n                    this._attributePriority.delete(key);\n                }\n            }\n        }\n        this._setAttributesTo(newAttributes);\n        // Let's evaluate which attributes really changed.\n        const changed = [];\n        // First, loop through all attributes that are set on selection right now.\n        // Check which of them are different than old attributes.\n        for (const [newKey, newValue] of this.getAttributes()) {\n            if (!oldAttributes.has(newKey) || oldAttributes.get(newKey) !== newValue) {\n                changed.push(newKey);\n            }\n        }\n        // Then, check which of old attributes got removed.\n        for (const [oldKey] of oldAttributes) {\n            if (!this.hasAttribute(oldKey)) {\n                changed.push(oldKey);\n            }\n        }\n        // Fire event with exact data (fire only if anything changed).\n        if (changed.length > 0) {\n            this.fire('change:attribute', { attributeKeys: changed, directChange: false });\n        }\n    }\n    /**\n     * Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n     * parameter).\n     */\n    _setAttribute(key, value, directChange = true) {\n        const priority = directChange ? 'normal' : 'low';\n        if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n            // Priority too low.\n            return false;\n        }\n        const oldValue = super.getAttribute(key);\n        // Don't do anything if value has not changed.\n        if (oldValue === value) {\n            return false;\n        }\n        this._attrs.set(key, value);\n        // Update priorities map.\n        this._attributePriority.set(key, priority);\n        return true;\n    }\n    /**\n     * Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n     * parameter).\n     *\n     * NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n     * be changed according to `directChange` parameter.\n     */\n    _removeAttribute(key, directChange = true) {\n        const priority = directChange ? 'normal' : 'low';\n        if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n            // Priority too low.\n            return false;\n        }\n        // Update priorities map.\n        this._attributePriority.set(key, priority);\n        // Don't do anything if value has not changed.\n        if (!super.hasAttribute(key)) {\n            return false;\n        }\n        this._attrs.delete(key);\n        return true;\n    }\n    /**\n     * Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n     * `directChange` parameter).\n     */\n    _setAttributesTo(attrs) {\n        const changed = new Set();\n        for (const [oldKey, oldValue] of this.getAttributes()) {\n            // Do not remove attribute if attribute with same key and value is about to be set.\n            if (attrs.get(oldKey) === oldValue) {\n                continue;\n            }\n            // All rest attributes will be removed so changed attributes won't change .\n            this._removeAttribute(oldKey, false);\n        }\n        for (const [key, value] of attrs) {\n            // Attribute may not be set because of attributes or because same key/value is already added.\n            const gotAdded = this._setAttribute(key, value, false);\n            if (gotAdded) {\n                changed.add(key);\n            }\n        }\n        return changed;\n    }\n    /**\n     * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n     */\n    *getStoredAttributes() {\n        const selectionParent = this.getFirstPosition().parent;\n        if (this.isCollapsed && selectionParent.isEmpty) {\n            for (const key of selectionParent.getAttributeKeys()) {\n                if (key.startsWith(storePrefix)) {\n                    const realKey = key.substr(storePrefix.length);\n                    yield [realKey, selectionParent.getAttribute(key)];\n                }\n            }\n        }\n    }\n    /**\n     * Checks model text nodes that are closest to the selection's first position and returns attributes of first\n     * found element. If there are no text nodes in selection's first position parent, it returns selection\n     * attributes stored in that parent.\n     */\n    _getSurroundingAttributes() {\n        const position = this.getFirstPosition();\n        const schema = this._model.schema;\n        let attrs = null;\n        if (!this.isCollapsed) {\n            // 1. If selection is a range...\n            const range = this.getFirstRange();\n            // ...look for a first character node in that range and take attributes from it.\n            for (const value of range) {\n                // If the item is an object, we don't want to get attributes from its children.\n                if (value.item.is('element') && schema.isObject(value.item)) {\n                    break;\n                }\n                if (value.type == 'text') {\n                    attrs = value.item.getAttributes();\n                    break;\n                }\n            }\n        }\n        else {\n            // 2. If the selection is a caret or the range does not contain a character node...\n            const nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n            const nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n            // When gravity is overridden then don't take node before into consideration.\n            if (!this.isGravityOverridden) {\n                // ...look at the node before caret and take attributes from it if it is a character node.\n                attrs = getTextAttributes(nodeBefore, schema);\n            }\n            // 3. If not, look at the node after caret...\n            if (!attrs) {\n                attrs = getTextAttributes(nodeAfter, schema);\n            }\n            // 4. If not, try to find the first character on the left, that is in the same node.\n            // When gravity is overridden then don't take node before into consideration.\n            if (!this.isGravityOverridden && !attrs) {\n                let node = nodeBefore;\n                while (node && !attrs) {\n                    node = node.previousSibling;\n                    attrs = getTextAttributes(node, schema);\n                }\n            }\n            // 5. If not found, try to find the first character on the right, that is in the same node.\n            if (!attrs) {\n                let node = nodeAfter;\n                while (node && !attrs) {\n                    node = node.nextSibling;\n                    attrs = getTextAttributes(node, schema);\n                }\n            }\n            // 6. If not found, selection should retrieve attributes from parent.\n            if (!attrs) {\n                attrs = this.getStoredAttributes();\n            }\n        }\n        return attrs;\n    }\n    /**\n     * Fixes the selection after all its ranges got removed.\n     * @param deletionPosition Position where the deletion happened.\n     */\n    _fixGraveyardSelection(deletionPosition) {\n        // Find a range that is a correct selection range and is closest to the position where the deletion happened.\n        const selectionRange = this._model.schema.getNearestSelectionRange(deletionPosition);\n        // If nearest valid selection range has been found - add it in the place of old range.\n        if (selectionRange) {\n            // Check the range, convert it to live range, bind events, etc.\n            this._pushRange(selectionRange);\n        }\n        // If nearest valid selection range cannot be found don't add any range. Selection will be set to the default range.\n    }\n}\n/**\n * Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n *\n * It checks if the passed model item is a text node (or text proxy) and, if so, returns it's attributes.\n * If not, it checks if item is an inline object and does the same. Otherwise it returns `null`.\n */\nfunction getTextAttributes(node, schema) {\n    if (!node) {\n        return null;\n    }\n    if (node instanceof TextProxy || node instanceof Text) {\n        return node.getAttributes();\n    }\n    if (!schema.isInline(node)) {\n        return null;\n    }\n    // Stop on inline elements (such as `<softBreak>`) that are not objects (such as `<imageInline>` or `<mathml>`).\n    if (!schema.isObject(node)) {\n        return [];\n    }\n    const attributes = [];\n    // Collect all attributes that can be applied to the text node.\n    for (const [key, value] of node.getAttributes()) {\n        if (schema.checkAttribute('$text', key)) {\n            attributes.push([key, value]);\n        }\n    }\n    return attributes;\n}\n/**\n * Removes selection attributes from element which is not empty anymore.\n */\nfunction clearAttributesStoredInElement(model, batch) {\n    const differ = model.document.differ;\n    for (const entry of differ.getChanges()) {\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const changeParent = entry.position.parent;\n        const isNoLongerEmpty = entry.length === changeParent.maxOffset;\n        if (isNoLongerEmpty) {\n            model.enqueueChange(batch, writer => {\n                const storedAttributes = Array.from(changeParent.getAttributeKeys())\n                    .filter(key => key.startsWith(storePrefix));\n                for (const key of storedAttributes) {\n                    writer.removeAttribute(key, changeParent);\n                }\n            });\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversionhelpers\n */\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n    /**\n     * Creates a conversion helpers instance.\n     */\n    constructor(dispatchers) {\n        this._dispatchers = dispatchers;\n    }\n    /**\n     * Registers a conversion helper.\n     *\n     * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n     * method description.\n     *\n     * @param conversionHelper The function to be called on event.\n     */\n    add(conversionHelper) {\n        for (const dispatcher of this._dispatchers) {\n            conversionHelper(dispatcher);\n        }\n        return this;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelDocumentSelection from '../model/documentselection';\nimport ModelElement from '../model/element';\nimport ModelPosition from '../model/position';\nimport ViewAttributeElement from '../view/attributeelement';\nimport ConversionHelpers from './conversionhelpers';\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Downcast conversion helper functions.\n *\n * Learn more about {@glink framework/deep-dive/conversion/downcast downcast helpers}.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n    /**\n     * Model element to view element conversion helper.\n     *\n     * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'p'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'div',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'fancyParagraph',\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: 'heading',\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );\n     * \t}\n     * } );\n     * ```\n     *\n     * The element-to-element conversion supports the reconversion mechanism. It can be enabled by using either the `attributes` or\n     * the `children` props on a model description. You will find a couple examples below.\n     *\n     * In order to reconvert an element if any of its direct children have been added or removed, use the `children` property on a `model`\n     * description. For example, this model:\n     *\n     * ```xml\n     * <box>\n     * \t<paragraph>Some text.</paragraph>\n     * </box>\n     * ```\n     *\n     * will be converted into this structure in the view:\n     *\n     * ```html\n     * <div class=\"box\" data-type=\"single\">\n     * \t<p>Some text.</p>\n     * </div>\n     * ```\n     *\n     * But if more items were inserted in the model:\n     *\n     * ```xml\n     * <box>\n     * \t<paragraph>Some text.</paragraph>\n     * \t<paragraph>Other item.</paragraph>\n     * </box>\n     * ```\n     *\n     * it will be converted into this structure in the view (note the element `data-type` change):\n     *\n     * ```html\n     * <div class=\"box\" data-type=\"multiple\">\n     * \t<p>Some text.</p>\n     * \t<p>Other item.</p>\n     * </div>\n     * ```\n     *\n     * Such a converter would look like this (note that the `paragraph` elements are converted separately):\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: {\n     * \t\tname: 'box',\n     * \t\tchildren: true\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'div', {\n     * \t\t\tclass: 'box',\n     * \t\t\t'data-type': modelElement.childCount == 1 ? 'single' : 'multiple'\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * In order to reconvert element if any of its attributes have been updated, use the `attributes` property on a `model`\n     * description. For example, this model:\n     *\n     * ```xml\n     * <heading level=\"2\">Some text.</heading>\n     * ```\n     *\n     * will be converted into this structure in the view:\n     *\n     * ```html\n     * <h2>Some text.</h2>\n     * ```\n     *\n     * But if the `heading` element's `level` attribute has been updated to `3` for example, then\n     * it will be converted into this structure in the view:\n     *\n     * ```html\n     * <h3>Some text.</h3>\n     * ```\n     *\n     * Such a converter would look as follows:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToElement( {\n     * \tmodel: {\n     * \t\tname: 'heading',\n     * \t\tattributes: 'level'\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * You can read more about the element-to-element conversion in the\n     * {@glink framework/deep-dive/conversion/downcast downcast conversion} guide.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The description or a name of the model element to convert.\n     * @param config.model.attributes The list of attribute names that should be consumed while creating\n     * the view element. Note that the view will be reconverted if any of the listed attributes changes.\n     * @param config.model.children Specifies whether the view element requires reconversion if the list\n     * of the model child nodes changed.\n     * @param config.view A view element definition or a function that takes the model element and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as parameters and returns a view container element.\n     */\n    elementToElement(config) {\n        return this.add(downcastElementToElement(config));\n    }\n    /**\n     * The model element to view structure (several elements) conversion helper.\n     *\n     * This conversion results in creating a view structure with one or more slots defined for the child nodes.\n     * For example, a model `<table>` may become this structure in the view:\n     *\n     * ```html\n     * <figure class=\"table\">\n     * \t<table>\n     * \t\t<tbody>${ slot for table rows }</tbody>\n     * \t</table>\n     * </figure>\n     * ```\n     *\n     * The children of the model's `<table>` element will be inserted into the `<tbody>` element.\n     * If the `elementToElement()` helper was used, the children would be inserted into the `<figure>`.\n     *\n     * An example converter that converts the following model structure:\n     *\n     * ```xml\n     * <wrappedParagraph>Some text.</wrappedParagraph>\n     * ```\n     *\n     * into this structure in the view:\n     *\n     * ```html\n     * <div class=\"wrapper\">\n     * \t<p>Some text.</p>\n     * </div>\n     * ```\n     *\n     * would look like this:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToStructure( {\n     * \tmodel: 'wrappedParagraph',\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\tconst wrapperViewElement = writer.createContainerElement( 'div', { class: 'wrapper' } );\n     * \t\tconst paragraphViewElement = writer.createContainerElement( 'p' );\n     *\n     * \t\twriter.insert( writer.createPositionAt( wrapperViewElement, 0 ), paragraphViewElement );\n     * \t\twriter.insert( writer.createPositionAt( paragraphViewElement, 0 ), writer.createSlot() );\n     *\n     * \t\treturn wrapperViewElement;\n     * \t}\n     * } );\n     * ```\n     *\n     * The `createSlot()` function can also take a callback that allows filtering which children of the model element\n     * should be converted into this slot.\n     *\n     * Imagine a table feature where for this model structure:\n     *\n     * ```xml\n     * <table headingRows=\"1\">\n     * \t<tableRow> ... table cells 1 ... </tableRow>\n     * \t<tableRow> ... table cells 2 ... </tableRow>\n     * \t<tableRow> ... table cells 3 ... </tableRow>\n     * \t<caption>Caption text</caption>\n     * </table>\n     * ```\n     *\n     * we want to generate this view structure:\n     *\n     * ```html\n     * <figure class=\"table\">\n     * \t<table>\n     * \t\t<thead>\n     * \t\t\t<tr> ... table cells 1 ... </tr>\n     * \t\t</thead>\n     * \t\t<tbody>\n     * \t\t\t<tr> ... table cells 2 ... </tr>\n     * \t\t\t<tr> ... table cells 3 ... </tr>\n     * \t\t</tbody>\n     * \t</table>\n     * \t<figcaption>Caption text</figcaption>\n     * </figure>\n     * ```\n     *\n     * The converter has to take the `headingRows` attribute into consideration when allocating the `<tableRow>` elements\n     * into the `<tbody>` and `<thead>` elements. Hence, we need two slots and need to define proper filter callbacks for them.\n     *\n     * Additionally, all elements other than `<tableRow>` should be placed outside the `<table>` tag.\n     * In the example above, this will handle the table caption.\n     *\n     * Such a converter would look like this:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).elementToStructure( {\n     * \tmodel: {\n     * \t\tname: 'table',\n     * \t\tattributes: [ 'headingRows' ]\n     * \t},\n     * \tview: ( modelElement, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\tconst figureElement = writer.createContainerElement( 'figure', { class: 'table' } );\n     * \t\tconst tableElement = writer.createContainerElement( 'table' );\n     *\n     * \t\twriter.insert( writer.createPositionAt( figureElement, 0 ), tableElement );\n     *\n     * \t\tconst headingRows = modelElement.getAttribute( 'headingRows' ) || 0;\n     *\n     * \t\tif ( headingRows > 0 ) {\n     * \t\t\tconst tableHead = writer.createContainerElement( 'thead' );\n     *\n     * \t\t\tconst headSlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index < headingRows );\n     *\n     * \t\t\twriter.insert( writer.createPositionAt( tableElement, 'end' ), tableHead );\n     * \t\t\twriter.insert( writer.createPositionAt( tableHead, 0 ), headSlot );\n     * \t\t}\n     *\n     * \t\tif ( headingRows < tableUtils.getRows( table ) ) {\n     * \t\t\tconst tableBody = writer.createContainerElement( 'tbody' );\n     *\n     * \t\t\tconst bodySlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index >= headingRows );\n     *\n     * \t\t\twriter.insert( writer.createPositionAt( tableElement, 'end' ), tableBody );\n     * \t\t\twriter.insert( writer.createPositionAt( tableBody, 0 ), bodySlot );\n     * \t\t}\n     *\n     * \t\tconst restSlot = writer.createSlot( node => !node.is( 'element', 'tableRow' ) );\n     *\n     * \t\twriter.insert( writer.createPositionAt( figureElement, 'end' ), restSlot );\n     *\n     * \t\treturn figureElement;\n     * \t}\n     * } );\n     * ```\n     *\n     * Note: The children of a model element that's being converted must be allocated in the same order in the view\n     * in which they are placed in the model.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The description or a name of the model element to convert.\n     * @param config.model.name The name of the model element to convert.\n     * @param config.model.attributes The list of attribute names that should be consumed while creating\n     * the view structure. Note that the view will be reconverted if any of the listed attributes will change.\n     * @param config.view A function that takes the model element and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters\n     * and returns a view container element with slots for model child nodes to be converted into.\n     */\n    elementToStructure(config) {\n        return this.add(downcastElementToStructure(config));\n    }\n    /**\n     * Model attribute to view element conversion helper.\n     *\n     * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n     * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'strong'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'b',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'invert',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: [ 'font-light', 'bg-dark' ]\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalues: [ 'big', 'small' ]\n     * \t},\n     * \tview: {\n     * \t\tbig: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '1.2em'\n     * \t\t\t}\n     * \t\t},\n     * \t\tsmall: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '0.8em'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: ( modelAttributeValue, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createAttributeElement( 'span', {\n     * \t\t\tstyle: 'font-weight:' + modelAttributeValue\n     * \t\t} );\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'color',\n     * \t\tname: '$text'\n     * \t},\n     * \tview: ( modelAttributeValue, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createAttributeElement( 'span', {\n     * \t\t\tstyle: 'color:' + modelAttributeValue\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n     * of `String`s with possible values if the model attribute is an enumerable.\n     * @param config.view A view element definition or a function\n     * that takes the model attribute value and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters and returns a view\n     * attribute element. If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values`\n     * to view element definitions or functions.\n     * @param config.converterPriority Converter priority.\n     */\n    attributeToElement(config) {\n        return this.add(downcastAttributeToElement(config));\n    }\n    /**\n     * Model attribute to view attribute conversion helper.\n     *\n     * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n     * `<imageInline src='foo.jpg'></imageInline>` is converted to `<img src='foo.jpg'></img>`.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'source',\n     * \tview: 'src'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'source',\n     * \tview: 'href',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'source'\n     * \t},\n     * \tview: 'src'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'styled',\n     * \t\tvalues: [ 'dark', 'light' ]\n     * \t},\n     * \tview: {\n     * \t\tdark: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'styled', 'styled-dark' ]\n     * \t\t},\n     * \t\tlight: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'styled', 'styled-light' ]\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'styled',\n     * \tview: modelAttributeValue => ( {\n     * \t\tkey: 'class',\n     * \t\tvalue: 'styled-' + modelAttributeValue\n     * \t} )\n     * } );\n     * ```\n     *\n     * **Note**: Downcasting to a style property requires providing `value` as an object:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n     * \tmodel: 'lineHeight',\n     * \tview: modelAttributeValue => ( {\n     * \t\tkey: 'style',\n     * \t\tvalue: {\n     * \t\t\t'line-height': modelAttributeValue,\n     * \t\t\t'border-bottom': '1px dotted #ba2'\n     * \t\t}\n     * \t} )\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n     * the attribute key, possible values and, optionally, an element name to convert from.\n     * @param config.view A view attribute key, or a `{ key, value }` object or a function that takes the model attribute value and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as parameters and returns a `{ key, value }` object. If the `key` is `'class'`, the `value` can be a `String` or an\n     * array of `String`s. If the `key` is `'style'`, the `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n     * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n     * `{ key, value }` objects or a functions.\n     * @param config.converterPriority Converter priority.\n     */\n    attributeToAttribute(config) {\n        return this.add(downcastAttributeToAttribute(config));\n    }\n    /**\n     * Model marker to view element conversion helper.\n     *\n     * **Note**: This method should be used mainly for editing the downcast and it is recommended\n     * to use the {@link #markerToData `#markerToData()`} helper instead.\n     *\n     * This helper may produce invalid HTML code (e.g. a span between table cells).\n     * It should only be used when you are sure that the produced HTML will be semantically correct.\n     *\n     * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n     * is collapsed, only one element is created. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n     * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n     *\n     * ```ts\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: 'marker-search'\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: 'search-result',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tattributes: {\n     * \t\t\t'data-marker': 'search'\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'editingDowncast' ).markerToElement( {\n     * \tmodel: 'search',\n     * \tview: ( markerData, conversionApi ) => {\n     * \t\tconst { writer } = conversionApi;\n     *\n     * \t\treturn writer.createUIElement( 'span', {\n     * \t\t\t'data-marker': 'search',\n     * \t\t\t'data-start': markerData.isOpening\n     * \t\t} );\n     * \t}\n     * } );\n     * ```\n     *\n     * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n     * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as a parameters and should return an instance of the\n     * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n     * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n     * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` for\n     * the marker end boundary element.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or model marker group) to convert.\n     * @param config.view A view element definition or a function that takes the model marker data and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n     * and returns a view UI element.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToElement(config) {\n        return this.add(downcastMarkerToElement(config));\n    }\n    /**\n     * Model marker to highlight conversion helper.\n     *\n     * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n     * the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n     *\n     * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n     * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n     * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n     *\n     * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n     * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n     * For example, a model marker set like this:\n     * `[<imageInline src=\"foo.jpg\"></imageInline>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>` in the view.\n     *\n     * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n     * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n     * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n     *\n     * editor.conversion.for( 'downcast' ).markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: { classes: 'comment' },\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'downcast' ).markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: ( data, conversionApi ) => {\n     * \t\t// Assuming that the marker name is in a form of comment:commentType:commentId.\n     * \t\tconst [ , commentType, commentId ] = data.markerName.split( ':' );\n     *\n     * \t\treturn {\n     * \t\t\tclasses: [ 'comment', 'comment-' + commentType ],\n     * \t\t\tattributes: { 'data-comment-id': commentId }\n     * \t\t};\n     * \t}\n     * } );\n     * ```\n     *\n     * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n     * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}\n     * as the parameters and should return a\n     * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n     * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or model marker group) to convert.\n     * @param config.view A highlight descriptor that will be used for highlighting or a function that takes the model marker data and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters\n     * and returns a highlight descriptor.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToHighlight(config) {\n        return this.add(downcastMarkerToHighlight(config));\n    }\n    /**\n     * Model marker converter for data downcast.\n     *\n     * This conversion creates a representation for model marker boundaries in the view:\n     *\n     * * If the marker boundary is before or after a model element, a view attribute is set on a corresponding view element.\n     * * In other cases, a view element with the specified tag name is inserted at the corresponding view position.\n     *\n     * Typically, the marker names use the `group:uniqueId:otherData` convention. For example: `comment:e34zfk9k2n459df53sjl34:zx32c`.\n     * The default configuration for this conversion is that the first part is the `group` part and the rest of\n     * the marker name becomes the `name` part.\n     *\n     * Tag and attribute names and values are generated from the marker name:\n     *\n     * * The templates for attributes are `data-[group]-start-before=\"[name]\"`, `data-[group]-start-after=\"[name]\"`,\n     * `data-[group]-end-before=\"[name]\"` and `data-[group]-end-after=\"[name]\"`.\n     * * The templates for view elements are `<[group]-start name=\"[name]\">` and `<[group]-end name=\"[name]\">`.\n     *\n     * Attributes mark whether the given marker's start or end boundary is before or after the given element.\n     * The `data-[group]-start-before` and `data-[group]-end-after` attributes are favored.\n     * The other two are used when the former two cannot be used.\n     *\n     * The conversion configuration can take a function that will generate different group and name parts.\n     * If such a function is set as the `config.view` parameter, it is passed a marker name and it is expected to return an object with two\n     * properties: `group` and `name`. If the function returns a falsy value, the conversion will not take place.\n     *\n     * Basic usage:\n     *\n     * ```ts\n     * // Using the default conversion.\n     * // In this case, all markers with names starting with 'comment:' will be converted.\n     * // The `group` parameter will be set to `comment`.\n     * // The `name` parameter will be the rest of the marker name (without the `:`).\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment'\n     * } );\n     * ```\n     *\n     * An example of a view that may be generated by this conversion (assuming a marker with the name `comment:commentId:uid` marked\n     * by `[]`):\n     *\n     * ```\n     * // Model:\n     * <paragraph>Foo[bar</paragraph>\n     * <imageBlock src=\"abc.jpg\"></imageBlock>]\n     *\n     * // View:\n     * <p>Foo<comment-start name=\"commentId:uid\"></comment-start>bar</p>\n     * <figure data-comment-end-after=\"commentId:uid\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     * ```\n     *\n     * In the example above, the comment starts before \"bar\" and ends after the image.\n     *\n     * If the `name` part is empty, the following view may be generated:\n     *\n     * ```html\n     * <p>Foo <myMarker-start></myMarker-start>bar</p>\n     * <figure data-myMarker-end-after=\"\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     * ```\n     *\n     * **Note:** A situation where some markers have the `name` part and some do not, is incorrect and should be avoided.\n     *\n     * Examples where `data-group-start-after` and `data-group-end-before` are used:\n     *\n     * ```\n     * // Model:\n     * <blockQuote>[]<paragraph>Foo</paragraph></blockQuote>\n     *\n     * // View:\n     * <blockquote><p data-group-end-before=\"name\" data-group-start-before=\"name\">Foo</p></blockquote>\n     * ```\n     *\n     * Similarly, when a marker is collapsed after the last element:\n     *\n     * ```\n     * // Model:\n     * <blockQuote><paragraph>Foo</paragraph>[]</blockQuote>\n     *\n     * // View:\n     * <blockquote><p data-group-end-after=\"name\" data-group-start-after=\"name\">Foo</p></blockquote>\n     * ```\n     *\n     * When there are multiple markers from the same group stored in the same attribute of the same element, their\n     * name parts are put together in the attribute value, for example: `data-group-start-before=\"name1,name2,name3\"`.\n     *\n     * Other examples of usage:\n     *\n     * ```ts\n     * // Using a custom function which is the same as the default conversion:\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment'\n     * \tview: markerName => ( {\n     * \t\tgroup: 'comment',\n     * \t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n     * \t} )\n     * } );\n     *\n     * // Using the converter priority:\n     * editor.conversion.for( 'dataDowncast' ).markerToData( {\n     * \tmodel: 'comment'\n     * \tview: markerName => ( {\n     * \t\tgroup: 'comment',\n     * \t\tname: markerName.substr( 8 ) // Removes 'comment:' part.\n     * \t} ),\n     * \tconverterPriority: 'high'\n     * } );\n     * ```\n     *\n     * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n     *\n     * See the {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} API guide to learn how to\n     * add a converter to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.model The name of the model marker (or the model marker group) to convert.\n     * @param config.view A function that takes the model marker name and\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as the parameters\n     * and returns an object with the `group` and `name` properties.\n     * @param config.converterPriority Converter priority.\n     */\n    markerToData(config) {\n        return this.add(downcastMarkerToData(config));\n    }\n}\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'insert:$text', insertText() );\n * ```\n *\n * @returns Insert text event converter.\n */\nexport function insertText() {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        const viewText = viewWriter.createText(data.item.data);\n        viewWriter.insert(viewPosition, viewText);\n    };\n}\n/**\n * Function factory that creates a default downcast converter for triggering attributes and children conversion.\n *\n * @returns The converter.\n */\nexport function insertAttributesAndChildren() {\n    return (evt, data, conversionApi) => {\n        conversionApi.convertAttributes(data.item);\n        // Start converting children of the current item.\n        // In case of reconversion children were already re-inserted or converted separately.\n        if (!data.reconversion && data.item.is('element') && !data.item.isEmpty) {\n            conversionApi.convertChildren(data.item);\n        }\n    };\n}\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n * ```ts\n * modelDispatcher.on( 'remove', remove() );\n * ```\n *\n * @returns Remove event converter.\n */\nexport function remove() {\n    return (evt, data, conversionApi) => {\n        // Find the view range start position by mapping the model position at which the remove happened.\n        const viewStart = conversionApi.mapper.toViewPosition(data.position);\n        const modelEnd = data.position.getShiftedBy(data.length);\n        const viewEnd = conversionApi.mapper.toViewPosition(modelEnd, { isPhantom: true });\n        const viewRange = conversionApi.writer.createRange(viewStart, viewEnd);\n        // Trim the range to remove in case some UI elements are on the view range boundaries.\n        const removed = conversionApi.writer.remove(viewRange.getTrimmed());\n        // After the range is removed, unbind all view elements from the model.\n        // Range inside view document fragment is used to unbind deeply.\n        for (const child of conversionApi.writer.createRangeIn(removed).getItems()) {\n            conversionApi.mapper.unbindViewElement(child, { defer: true });\n        }\n    };\n}\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If the priority\n * is not provided in the descriptor, the default priority will be used.\n */\nexport function createViewElementFromHighlightDescriptor(writer, descriptor) {\n    const viewElement = writer.createAttributeElement('span', descriptor.attributes);\n    if (descriptor.classes) {\n        viewElement._addClass(descriptor.classes);\n    }\n    if (typeof descriptor.priority === 'number') {\n        viewElement._priority = descriptor.priority;\n    }\n    viewElement._id = descriptor.id;\n    return viewElement;\n}\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n * ```ts\n * modelDispatcher.on( 'selection', convertRangeSelection() );\n * ```\n *\n * @returns Selection converter.\n */\nexport function convertRangeSelection() {\n    return (evt, data, conversionApi) => {\n        const selection = data.selection;\n        if (selection.isCollapsed) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(selection, 'selection')) {\n            return;\n        }\n        const viewRanges = [];\n        for (const range of selection.getRanges()) {\n            viewRanges.push(conversionApi.mapper.toViewRange(range));\n        }\n        conversionApi.writer.setSelection(viewRanges, { backward: selection.isBackward });\n    };\n}\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n * ```ts\n * modelDispatcher.on( 'selection', convertCollapsedSelection() );\n * ```\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n * ```\n *    <p><strong>f^oo<strong>bar</p>\n * -> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n * ```\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns Selection converter.\n */\nexport function convertCollapsedSelection() {\n    return (evt, data, conversionApi) => {\n        const selection = data.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(selection, 'selection')) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const modelPosition = selection.getFirstPosition();\n        const viewPosition = conversionApi.mapper.toViewPosition(modelPosition);\n        const brokenPosition = viewWriter.breakAttributes(viewPosition);\n        viewWriter.setSelection(brokenPosition);\n    };\n}\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n * ```\n *    <p><strong>^</strong></p>\n * -> <p>^</p>\n *\n *    <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n * -> <p><strong>foo^bar<strong>bar</p>\n *\n *    <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n * -> <p><strong>foo^bar<strong>bar</p>\n * ```\n *\n * This listener should be assigned before any converter for the new selection:\n *\n * ```ts\n * modelDispatcher.on( 'selection', clearAttributes() );\n * ```\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns Selection converter.\n */\nexport function clearAttributes() {\n    return (evt, data, conversionApi) => {\n        const viewWriter = conversionApi.writer;\n        const viewSelection = viewWriter.document.selection;\n        for (const range of viewSelection.getRanges()) {\n            // Not collapsed selection should not have artifacts.\n            if (range.isCollapsed) {\n                // Position might be in the node removed by the view writer.\n                if (range.end.parent.isAttached()) {\n                    conversionApi.writer.mergeAttributes(range.start);\n                }\n            }\n        }\n        viewWriter.setSelection(null);\n    };\n}\n/**\n * Function factory that creates a converter which converts the set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n * ```\n * [paragraph]              MODEL ====> VIEW        <p>\n * \t|- a {bold: true}                             |- <b>\n * \t|- b {bold: true}                             |   |- ab\n * \t|- c                                          |- c\n * \t```\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, { writer } ) => {\n * \treturn writer.createAttributeElement( 'strong' );\n * } );\n * ```\n *\n * @internal\n * @param elementCreator Function returning a view element that will be used for wrapping.\n * @returns Set/change attribute converter.\n */\nexport function wrap(elementCreator) {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        // Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n        // or the attribute was removed.\n        const oldViewElement = elementCreator(data.attributeOldValue, conversionApi, data);\n        // Create node to wrap with.\n        const newViewElement = elementCreator(data.attributeNewValue, conversionApi, data);\n        if (!oldViewElement && !newViewElement) {\n            return;\n        }\n        conversionApi.consumable.consume(data.item, evt.name);\n        const viewWriter = conversionApi.writer;\n        const viewSelection = viewWriter.document.selection;\n        if (data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) {\n            // Selection attribute conversion.\n            viewWriter.wrap(viewSelection.getFirstRange(), newViewElement);\n        }\n        else {\n            // Node attribute conversion.\n            let viewRange = conversionApi.mapper.toViewRange(data.range);\n            // First, unwrap the range from current wrapper.\n            if (data.attributeOldValue !== null && oldViewElement) {\n                viewRange = viewWriter.unwrap(viewRange, oldViewElement);\n            }\n            if (data.attributeNewValue !== null && newViewElement) {\n                viewWriter.wrap(viewRange, newViewElement);\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list and binds the model and view elements.\n *\n * ```ts\n * downcastDispatcher.on(\n * \t'insert:myElem',\n * \tinsertElement( ( modelItem, { writer } ) => {\n * \t\tconst text = writer.createText( 'myText' );\n * \t\tconst myElem = writer.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n * \t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n * \t\treturn myElem;\n * \t}\n * ) );\n * ```\n *\n * @internal\n * @param  elementCreator Function returning a view element, which will be inserted.\n * @param consumer Function defining element consumption process.\n * By default this function just consume passed item insertion.\n * @returns Insert element event converter.\n */\nexport function insertElement(elementCreator, consumer = defaultConsumer) {\n    return (evt, data, conversionApi) => {\n        if (!consumer(data.item, conversionApi.consumable, { preflight: true })) {\n            return;\n        }\n        const viewElement = elementCreator(data.item, conversionApi, data);\n        if (!viewElement) {\n            return;\n        }\n        // Consume an element insertion and all present attributes that are specified as a reconversion triggers.\n        consumer(data.item, conversionApi.consumable);\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        conversionApi.mapper.bindElements(data.item, viewElement);\n        conversionApi.writer.insert(viewPosition, viewElement);\n        // Convert attributes before converting children.\n        conversionApi.convertAttributes(data.item);\n        // Convert children or reinsert previous view elements.\n        reinsertOrConvertNodes(viewElement, data.item.getChildren(), conversionApi, { reconversion: data.reconversion });\n    };\n}\n/**\n * Function factory that creates a converter which converts a single model node insertion to a view structure.\n *\n * It is expected that the passed element creator function returns an {@link module:engine/view/element~Element} with attached slots\n * created with `writer.createSlot()` to indicate where child nodes should be converted.\n *\n * @see module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure\n *\n * @internal\n * @param elementCreator Function returning a view structure, which will be inserted.\n * @param consumer A callback that is expected to consume all the consumables\n * that were used by the element creator.\n * @returns Insert element event converter.\n*/\nexport function insertStructure(elementCreator, consumer) {\n    return (evt, data, conversionApi) => {\n        if (!consumer(data.item, conversionApi.consumable, { preflight: true })) {\n            return;\n        }\n        const slotsMap = new Map();\n        conversionApi.writer._registerSlotFactory(createSlotFactory(data.item, slotsMap, conversionApi));\n        // View creation.\n        const viewElement = elementCreator(data.item, conversionApi, data);\n        conversionApi.writer._clearSlotFactory();\n        if (!viewElement) {\n            return;\n        }\n        // Check if all children are covered by slots and there is no child that landed in multiple slots.\n        validateSlotsChildren(data.item, slotsMap, conversionApi);\n        // Consume an element insertion and all present attributes that are specified as a reconversion triggers.\n        consumer(data.item, conversionApi.consumable);\n        const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        conversionApi.mapper.bindElements(data.item, viewElement);\n        conversionApi.writer.insert(viewPosition, viewElement);\n        // Convert attributes before converting children.\n        conversionApi.convertAttributes(data.item);\n        // Fill view slots with previous view elements or create new ones.\n        fillSlots(viewElement, slotsMap, conversionApi, { reconversion: data.reconversion });\n    };\n}\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @internal\n * @param elementCreator A view UI element or a function returning the view element that will be inserted.\n * @returns Insert element event converter.\n */\nexport function insertUIElement(elementCreator) {\n    return (evt, data, conversionApi) => {\n        // Create two view elements. One will be inserted at the beginning of marker, one at the end.\n        // If marker is collapsed, only \"opening\" element will be inserted.\n        data.isOpening = true;\n        const viewStartElement = elementCreator(data, conversionApi);\n        data.isOpening = false;\n        const viewEndElement = elementCreator(data, conversionApi);\n        if (!viewStartElement || !viewEndElement) {\n            return;\n        }\n        const markerRange = data.markerRange;\n        // Marker that is collapsed has consumable build differently that non-collapsed one.\n        // For more information see `addMarker` event description.\n        // If marker's range is collapsed - check if it can be consumed.\n        if (markerRange.isCollapsed && !conversionApi.consumable.consume(markerRange, evt.name)) {\n            return;\n        }\n        // If marker's range is not collapsed - consume all items inside.\n        for (const value of markerRange) {\n            if (!conversionApi.consumable.consume(value.item, evt.name)) {\n                return;\n            }\n        }\n        const mapper = conversionApi.mapper;\n        const viewWriter = conversionApi.writer;\n        // Add \"opening\" element.\n        viewWriter.insert(mapper.toViewPosition(markerRange.start), viewStartElement);\n        conversionApi.mapper.bindElementToMarker(viewStartElement, data.markerName);\n        // Add \"closing\" element only if range is not collapsed.\n        if (!markerRange.isCollapsed) {\n            viewWriter.insert(mapper.toViewPosition(markerRange.end), viewEndElement);\n            conversionApi.mapper.bindElementToMarker(viewEndElement, data.markerName);\n        }\n        evt.stop();\n    };\n}\n/**\n * Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n * based on marker remove change.\n *\n * This converter unbinds elements from the marker name.\n *\n * @returns Removed UI element converter.\n */\nfunction removeUIElement() {\n    return (evt, data, conversionApi) => {\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            conversionApi.writer.clear(conversionApi.writer.createRangeOn(element), element);\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n    };\n}\n/**\n * Function factory that creates a default converter for model markers.\n *\n * See {@link DowncastHelpers#markerToData} for more information what type of view is generated.\n *\n * This converter binds created UI elements and affected view elements with the marker name\n * using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @returns Add marker converter.\n */\nfunction insertMarkerData(viewCreator) {\n    return (evt, data, conversionApi) => {\n        const viewMarkerData = viewCreator(data.markerName, conversionApi);\n        if (!viewMarkerData) {\n            return;\n        }\n        const markerRange = data.markerRange;\n        if (!conversionApi.consumable.consume(markerRange, evt.name)) {\n            return;\n        }\n        // Adding closing data first to keep the proper order in the view.\n        handleMarkerBoundary(markerRange, false, conversionApi, data, viewMarkerData);\n        handleMarkerBoundary(markerRange, true, conversionApi, data, viewMarkerData);\n        evt.stop();\n    };\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary at the beginning or end of given `range`.\n */\nfunction handleMarkerBoundary(range, isStart, conversionApi, data, viewMarkerData) {\n    const modelPosition = isStart ? range.start : range.end;\n    const elementAfter = modelPosition.nodeAfter && modelPosition.nodeAfter.is('element') ? modelPosition.nodeAfter : null;\n    const elementBefore = modelPosition.nodeBefore && modelPosition.nodeBefore.is('element') ? modelPosition.nodeBefore : null;\n    if (elementAfter || elementBefore) {\n        let modelElement;\n        let isBefore;\n        // If possible, we want to add `data-group-start-before` and `data-group-end-after` attributes.\n        if (isStart && elementAfter || !isStart && !elementBefore) {\n            // [<elementAfter>...</elementAfter> -> <elementAfter data-group-start-before=\"...\">...</elementAfter>\n            // <parent>]<elementAfter> -> <parent><elementAfter data-group-end-before=\"...\">\n            modelElement = elementAfter;\n            isBefore = true;\n        }\n        else {\n            // <elementBefore>...</elementBefore>] -> <elementBefore data-group-end-after=\"...\">...</elementBefore>\n            // </elementBefore>[</parent> -> </elementBefore data-group-start-after=\"...\"></parent>\n            modelElement = elementBefore;\n            isBefore = false;\n        }\n        const viewElement = conversionApi.mapper.toViewElement(modelElement);\n        // In rare circumstances, the model element may be not mapped to any view element and that would cause an error.\n        // One of those situations is a soft break inside code block.\n        if (viewElement) {\n            insertMarkerAsAttribute(viewElement, isStart, isBefore, conversionApi, data, viewMarkerData);\n            return;\n        }\n    }\n    const viewPosition = conversionApi.mapper.toViewPosition(modelPosition);\n    insertMarkerAsElement(viewPosition, isStart, conversionApi, data, viewMarkerData);\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary in the view as an attribute on a view element.\n */\nfunction insertMarkerAsAttribute(viewElement, isStart, isBefore, conversionApi, data, viewMarkerData) {\n    const attributeName = `data-${viewMarkerData.group}-${isStart ? 'start' : 'end'}-${isBefore ? 'before' : 'after'}`;\n    const markerNames = viewElement.hasAttribute(attributeName) ? viewElement.getAttribute(attributeName).split(',') : [];\n    // Adding marker name at the beginning to have the same order in the attribute as there is with marker elements.\n    markerNames.unshift(viewMarkerData.name);\n    conversionApi.writer.setAttribute(attributeName, markerNames.join(','), viewElement);\n    conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n}\n/**\n * Helper function for `insertMarkerData()` that marks a marker boundary in the view as a separate view ui element.\n */\nfunction insertMarkerAsElement(position, isStart, conversionApi, data, viewMarkerData) {\n    const viewElementName = `${viewMarkerData.group}-${isStart ? 'start' : 'end'}`;\n    const attrs = viewMarkerData.name ? { 'name': viewMarkerData.name } : null;\n    const viewElement = conversionApi.writer.createUIElement(viewElementName, attrs);\n    conversionApi.writer.insert(position, viewElement);\n    conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n}\n/**\n * Function factory that creates a converter for removing a model marker data added by the {@link #insertMarkerData} converter.\n *\n * @returns Remove marker converter.\n */\nfunction removeMarkerData(viewCreator) {\n    return (evt, data, conversionApi) => {\n        const viewData = viewCreator(data.markerName, conversionApi);\n        if (!viewData) {\n            return;\n        }\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            if (element.is('containerElement')) {\n                removeMarkerFromAttribute(`data-${viewData.group}-start-before`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-start-after`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-end-before`, element);\n                removeMarkerFromAttribute(`data-${viewData.group}-end-after`, element);\n            }\n            else {\n                conversionApi.writer.clear(conversionApi.writer.createRangeOn(element), element);\n            }\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n        function removeMarkerFromAttribute(attributeName, element) {\n            if (element.hasAttribute(attributeName)) {\n                const markerNames = new Set(element.getAttribute(attributeName).split(','));\n                markerNames.delete(viewData.name);\n                if (markerNames.size == 0) {\n                    conversionApi.writer.removeAttribute(attributeName, element);\n                }\n                else {\n                    conversionApi.writer.setAttribute(attributeName, Array.from(markerNames).join(','), element);\n                }\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the set/change/remove attribute changes from the model to the view.\n *\n * Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n * a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n * attributes on a one-to-one basis.\n *\n * *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n * ```ts\n * modelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n * \t// Change attribute key from `customAttr` to `class` in the view.\n * \tconst key = 'class';\n * \tlet value = data.attributeNewValue;\n *\n * \t// Force attribute value to 'empty' if the model element is empty.\n * \tif ( data.item.childCount === 0 ) {\n * \t\tvalue = 'empty';\n * \t}\n *\n * \t// Return the key-value pair.\n * \treturn { key, value };\n * } ) );\n * ```\n *\n * @param attributeCreator Function returning an object with two properties: `key` and `value`, which\n * represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n * The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n * @returns Set/change attribute converter.\n */\nfunction changeAttribute(attributeCreator) {\n    return (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        const oldAttribute = attributeCreator(data.attributeOldValue, conversionApi, data);\n        const newAttribute = attributeCreator(data.attributeNewValue, conversionApi, data);\n        if (!oldAttribute && !newAttribute) {\n            return;\n        }\n        conversionApi.consumable.consume(data.item, evt.name);\n        const viewElement = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        // If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n        // Only elements can have attributes in a view so do not proceed for anything else (#1587).\n        if (!viewElement) {\n            /**\n             * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n             * by an {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n             * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).attributeToAttribute( {\n             * \tmodel: 'attribute-name',\n             * \tview: 'attribute-name'\n             * } ) );\n             * ```\n             *\n             * and given attribute is used on text node, for example:\n             *\n             * ```ts\n             * model.change( writer => {\n             * \twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n             * } );\n             * ```\n             *\n             * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n             * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n             * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n             * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).attributeToElement( {\n             * \tmodel: {\n             * \t\tkey: 'attribute-name',\n             * \t\tname: '$text'\n             * \t},\n             * \tview: ( value, { writer } ) => {\n             * \t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n             * \t},\n             * \tconverterPriority: 'high'\n             * } ) );\n             * ```\n             *\n             * @error conversion-attribute-to-attribute-on-text\n             */\n            throw new CKEditorError('conversion-attribute-to-attribute-on-text', conversionApi.dispatcher, data);\n        }\n        // First remove the old attribute if there was one.\n        if (data.attributeOldValue !== null && oldAttribute) {\n            if (oldAttribute.key == 'class') {\n                const classes = toArray(oldAttribute.value);\n                for (const className of classes) {\n                    viewWriter.removeClass(className, viewElement);\n                }\n            }\n            else if (oldAttribute.key == 'style') {\n                const keys = Object.keys(oldAttribute.value);\n                for (const key of keys) {\n                    viewWriter.removeStyle(key, viewElement);\n                }\n            }\n            else {\n                viewWriter.removeAttribute(oldAttribute.key, viewElement);\n            }\n        }\n        // Then set the new attribute.\n        if (data.attributeNewValue !== null && newAttribute) {\n            if (newAttribute.key == 'class') {\n                const classes = toArray(newAttribute.value);\n                for (const className of classes) {\n                    viewWriter.addClass(className, viewElement);\n                }\n            }\n            else if (newAttribute.key == 'style') {\n                const keys = Object.keys(newAttribute.value);\n                for (const key of keys) {\n                    viewWriter.setStyle(key, newAttribute.value[key], viewElement);\n                }\n            }\n            else {\n                viewWriter.setAttribute(newAttribute.key, newAttribute.value, viewElement);\n            }\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n * {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n * See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n *\n * It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n * created and the selection will be put inside it.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n * using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n */\nfunction highlightText(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        if (!data.item) {\n            return;\n        }\n        if (!(data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) && !data.item.is('$textProxy')) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewWriter = conversionApi.writer;\n        const viewElement = createViewElementFromHighlightDescriptor(viewWriter, descriptor);\n        const viewSelection = viewWriter.document.selection;\n        if (data.item instanceof ModelSelection || data.item instanceof ModelDocumentSelection) {\n            viewWriter.wrap(viewSelection.getFirstRange(), viewElement);\n        }\n        else {\n            const viewRange = conversionApi.mapper.toViewRange(data.range);\n            const rangeAfterWrap = viewWriter.wrap(viewRange, viewElement);\n            for (const element of rangeAfterWrap.getItems()) {\n                if (element.is('attributeElement') && element.isSimilar(viewElement)) {\n                    conversionApi.mapper.bindElementToMarker(element, data.markerName);\n                    // One attribute element is enough, because all of them are bound together by the view writer.\n                    // Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n                    break;\n                }\n            }\n        }\n    };\n}\n/**\n * Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n *\n * The converter checks if an element has the `addHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n * In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n *\n * When the `addHighlight` custom property is not present, the element is not converted in any special way.\n * This means that converters will proceed to convert the element's child nodes.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n * the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n */\nfunction highlightElement(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        if (!data.item) {\n            return;\n        }\n        if (!(data.item instanceof ModelElement)) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        if (!conversionApi.consumable.test(data.item, evt.name)) {\n            return;\n        }\n        const viewElement = conversionApi.mapper.toViewElement(data.item);\n        if (viewElement && viewElement.getCustomProperty('addHighlight')) {\n            // Consume element itself.\n            conversionApi.consumable.consume(data.item, evt.name);\n            // Consume all children nodes.\n            for (const value of ModelRange._createIn(data.item)) {\n                conversionApi.consumable.consume(value.item, evt.name);\n            }\n            const addHighlightCallback = viewElement.getCustomProperty('addHighlight');\n            addHighlightCallback(viewElement, descriptor, conversionApi.writer);\n            conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n        }\n    };\n}\n/**\n * Function factory that creates a converter which converts the removing model marker to the view.\n *\n * Both text nodes and elements are handled by this converter but they are handled a bit differently.\n *\n * Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n * provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * For elements, the converter checks if an element has the `removeHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n * In such case, the children of that element will not be converted.\n *\n * When `removeHighlight` is not present, the element is not converted in any special way.\n * The converter will proceed to convert the element's child nodes instead.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter unbinds elements from the marker name.\n */\nfunction removeHighlight(highlightDescriptor) {\n    return (evt, data, conversionApi) => {\n        // This conversion makes sense only for non-collapsed range.\n        if (data.markerRange.isCollapsed) {\n            return;\n        }\n        const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n        if (!descriptor) {\n            return;\n        }\n        // View element that will be used to unwrap `AttributeElement`s.\n        const viewHighlightElement = createViewElementFromHighlightDescriptor(conversionApi.writer, descriptor);\n        // Get all elements bound with given marker name.\n        const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n            if (element.is('attributeElement')) {\n                conversionApi.writer.unwrap(conversionApi.writer.createRangeOn(element), viewHighlightElement);\n            }\n            else {\n                // if element.is( 'containerElement' ).\n                const removeHighlightCallback = element.getCustomProperty('removeHighlight');\n                removeHighlightCallback(element, descriptor.id, conversionApi.writer);\n            }\n        }\n        conversionApi.writer.clearClonedElementsGroup(data.markerName);\n        evt.stop();\n    };\n}\n/**\n * Model element to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples and config params description.\n *\n * @param config Conversion configuration.\n * @param config.model The description or a name of the model element to convert.\n * @param config.model.attributes List of attributes triggering element reconversion.\n * @param config.model.children Should reconvert element if the list of model child nodes changed.\n * @returns Conversion helper.\n */\nfunction downcastElementToElement(config) {\n    const model = normalizeModelElementConfig(config.model);\n    const view = normalizeToElementConfig(config.view, 'container');\n    // Trigger reconversion on children list change if element is a subject to any reconversion.\n    // This is required to be able to trigger Differ#refreshItem() on a direct child of the reconverted element.\n    if (model.attributes.length) {\n        model.children = true;\n    }\n    return (dispatcher) => {\n        dispatcher.on(`insert:${model.name}`, insertElement(view, createConsumer(model)), { priority: config.converterPriority || 'normal' });\n        if (model.children || model.attributes.length) {\n            dispatcher.on('reduceChanges', createChangeReducer(model), { priority: 'low' });\n        }\n    };\n}\n/**\n * Model element to view structure conversion helper.\n *\n * See {@link ~DowncastHelpers#elementToStructure `.elementToStructure()` downcast helper} for examples and config params description.\n *\n * @param config Conversion configuration.\n * @returns Conversion helper.\n */\nfunction downcastElementToStructure(config) {\n    const model = normalizeModelElementConfig(config.model);\n    const view = normalizeToElementConfig(config.view, 'container');\n    // Trigger reconversion on children list change because it always needs to use slots to put children in proper places.\n    // This is required to be able to trigger Differ#refreshItem() on a direct child of the reconverted element.\n    model.children = true;\n    return (dispatcher) => {\n        if (dispatcher._conversionApi.schema.checkChild(model.name, '$text')) {\n            /**\n             * This error occurs when a {@link module:engine/model/element~Element model element} is downcasted\n             * via {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure} helper but the element was\n             * allowed to host `$text` by the {@link module:engine/model/schema~Schema model schema}.\n             *\n             * For instance, this may be the result of `myElement` allowing the content of\n             * {@glink framework/deep-dive/schema#generic-items `$block`} in its schema definition:\n             *\n             * ```ts\n             * // Element definition in schema.\n             * schema.register( 'myElement', {\n             * \tallowContentOf: '$block',\n             *\n             * \t// ...\n             * } );\n             *\n             * // ...\n             *\n             * // Conversion of myElement with the use of elementToStructure().\n             * editor.conversion.for( 'downcast' ).elementToStructure( {\n             * \tmodel: 'myElement',\n             * \tview: ( modelElement, { writer } ) => {\n             * \t\t// ...\n             * \t}\n             * } );\n             * ```\n             *\n             * In such case, {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`} helper\n             * can be used instead to get around this problem:\n             *\n             * ```ts\n             * editor.conversion.for( 'downcast' ).elementToElement( {\n             * \tmodel: 'myElement',\n             * \tview: ( modelElement, { writer } ) => {\n             * \t\t// ...\n             * \t}\n             * } );\n             * ```\n             *\n             * @error conversion-element-to-structure-disallowed-text\n             * @param {String} elementName The name of the element the structure is to be created for.\n             */\n            throw new CKEditorError('conversion-element-to-structure-disallowed-text', dispatcher, { elementName: model.name });\n        }\n        dispatcher.on(`insert:${model.name}`, insertStructure(view, createConsumer(model)), { priority: config.converterPriority || 'normal' });\n        dispatcher.on('reduceChanges', createChangeReducer(model), { priority: 'low' });\n    };\n}\n/**\n * Model attribute to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n * of `String`s with possible values if the model attribute is an enumerable.\n * @param config.view A view element definition or a function that takes the model attribute value and\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} as parameters and returns a view attribute element.\n * If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values` to view element\n * definitions or functions.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastAttributeToElement(config) {\n    config = cloneDeep(config);\n    let model = config.model;\n    if (typeof model == 'string') {\n        model = { key: model };\n    }\n    let eventName = `attribute:${model.key}`;\n    if (model.name) {\n        eventName += ':' + model.name;\n    }\n    if (model.values) {\n        for (const modelValue of model.values) {\n            config.view[modelValue] = normalizeToElementConfig(config.view[modelValue], 'attribute');\n        }\n    }\n    else {\n        config.view = normalizeToElementConfig(config.view, 'attribute');\n    }\n    const elementCreator = getFromAttributeCreator(config);\n    return (dispatcher) => {\n        dispatcher.on(eventName, wrap(elementCreator), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model attribute to view attribute conversion helper.\n *\n * See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n * the attribute key, possible values and, optionally, an element name to convert from.\n * @param config.view A view attribute key, or a `{ key, value }` object or a function that takes the model attribute value and returns\n * a `{ key, value }` object.\n * If `key` is `'class'`, `value` can be a `String` or an array of `String`s. If `key` is `'style'`, `value` is an object with\n * key-value pairs. In other cases, `value` is a `String`.\n * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n * `{ key, value }` objects or a functions.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastAttributeToAttribute(config) {\n    config = cloneDeep(config);\n    let model = config.model;\n    if (typeof model == 'string') {\n        model = { key: model };\n    }\n    let eventName = `attribute:${model.key}`;\n    if (model.name) {\n        eventName += ':' + model.name;\n    }\n    if (model.values) {\n        for (const modelValue of model.values) {\n            config.view[modelValue] = normalizeToAttributeConfig(config.view[modelValue]);\n        }\n    }\n    else {\n        config.view = normalizeToAttributeConfig(config.view);\n    }\n    const elementCreator = getFromAttributeCreator(config);\n    return (dispatcher) => {\n        dispatcher.on(eventName, changeAttribute(elementCreator), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to view element conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The name of the model marker (or model marker group) to convert.\n * @param config.view A view element definition or a function that takes the model marker data as a parameter and returns a view UI element.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastMarkerToElement(config) {\n    const view = normalizeToElementConfig(config.view, 'ui');\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${config.model}`, insertUIElement(view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${config.model}`, removeUIElement(), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to view data conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToData `markerToData()` downcast helper} to learn more.\n *\n * @returns Conversion helper.\n */\nfunction downcastMarkerToData(config) {\n    config = cloneDeep(config);\n    const group = config.model;\n    let view = config.view;\n    // Default conversion.\n    if (!view) {\n        view = markerName => ({\n            group,\n            name: markerName.substr(config.model.length + 1)\n        });\n    }\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${group}`, insertMarkerData(view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${group}`, removeMarkerData(view), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Model marker to highlight conversion helper.\n *\n * See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.model The name of the model marker (or model marker group) to convert.\n * @param config.view A highlight descriptor that will be used for highlighting or a function that takes\n * the model marker data as a parameter and returns a highlight descriptor.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction downcastMarkerToHighlight(config) {\n    return (dispatcher) => {\n        dispatcher.on(`addMarker:${config.model}`, highlightText(config.view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`addMarker:${config.model}`, highlightElement(config.view), { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`removeMarker:${config.model}`, removeHighlight(config.view), { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * Takes `config.model`, and converts it to an object with normalized structure.\n *\n * @param model Model configuration or element name.\n */\nfunction normalizeModelElementConfig(model) {\n    if (typeof model == 'string') {\n        model = { name: model };\n    }\n    // List of attributes that should trigger reconversion.\n    if (!model.attributes) {\n        model.attributes = [];\n    }\n    else if (!Array.isArray(model.attributes)) {\n        model.attributes = [model.attributes];\n    }\n    // Whether a children insertion/deletion should trigger reconversion.\n    model.children = !!model.children;\n    return model;\n}\n/**\n * Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n * to a function (because lower level converters accept only element creator functions).\n *\n * @param view View configuration.\n * @param viewElementType View element type to create.\n * @returns Element creator function to use in lower level converters.\n */\nfunction normalizeToElementConfig(view, viewElementType) {\n    if (typeof view == 'function') {\n        // If `view` is already a function, don't do anything.\n        return view;\n    }\n    return ((modelData, conversionApi) => createViewElementFromDefinition(view, conversionApi, viewElementType));\n}\n/**\n * Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n */\nfunction createViewElementFromDefinition(viewElementDefinition, conversionApi, viewElementType) {\n    if (typeof viewElementDefinition == 'string') {\n        // If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n        viewElementDefinition = { name: viewElementDefinition };\n    }\n    let element;\n    const viewWriter = conversionApi.writer;\n    const attributes = Object.assign({}, viewElementDefinition.attributes);\n    if (viewElementType == 'container') {\n        element = viewWriter.createContainerElement(viewElementDefinition.name, attributes);\n    }\n    else if (viewElementType == 'attribute') {\n        const options = {\n            priority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n        };\n        element = viewWriter.createAttributeElement(viewElementDefinition.name, attributes, options);\n    }\n    else {\n        // 'ui'.\n        element = viewWriter.createUIElement(viewElementDefinition.name, attributes);\n    }\n    if (viewElementDefinition.styles) {\n        const keys = Object.keys(viewElementDefinition.styles);\n        for (const key of keys) {\n            viewWriter.setStyle(key, viewElementDefinition.styles[key], element);\n        }\n    }\n    if (viewElementDefinition.classes) {\n        const classes = viewElementDefinition.classes;\n        if (typeof classes == 'string') {\n            viewWriter.addClass(classes, element);\n        }\n        else {\n            for (const className of classes) {\n                viewWriter.addClass(className, element);\n            }\n        }\n    }\n    return element;\n}\nfunction getFromAttributeCreator(config) {\n    if (config.model.values) {\n        return ((modelAttributeValue, conversionApi, data) => {\n            const view = config.view[modelAttributeValue];\n            if (view) {\n                return view(modelAttributeValue, conversionApi, data);\n            }\n            return null;\n        });\n    }\n    else {\n        return config.view;\n    }\n}\n/**\n * Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n * for generating a view attribute.\n *\n * @param view View configuration.\n */\nfunction normalizeToAttributeConfig(view) {\n    if (typeof view == 'string') {\n        return modelAttributeValue => ({ key: view, value: modelAttributeValue });\n    }\n    else if (typeof view == 'object') {\n        // { key, value, ... }\n        if (view.value) {\n            return () => view;\n        }\n        // { key, ... }\n        else {\n            return modelAttributeValue => ({ key: view.key, value: modelAttributeValue });\n        }\n    }\n    else {\n        // function.\n        return view;\n    }\n}\n/**\n * Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\n */\nfunction prepareDescriptor(highlightDescriptor, data, conversionApi) {\n    // If passed descriptor is a creator function, call it. If not, just use passed value.\n    const descriptor = typeof highlightDescriptor == 'function' ?\n        highlightDescriptor(data, conversionApi) :\n        highlightDescriptor;\n    if (!descriptor) {\n        return null;\n    }\n    // Apply default descriptor priority.\n    if (!descriptor.priority) {\n        descriptor.priority = 10;\n    }\n    // Default descriptor id is marker name.\n    if (!descriptor.id) {\n        descriptor.id = data.markerName;\n    }\n    return descriptor;\n}\n/**\n * Creates a function that checks a single differ diff item whether it should trigger reconversion.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createChangeReducerCallback(model) {\n    return (node, change) => {\n        if (!node.is('element', model.name)) {\n            return false;\n        }\n        if (change.type == 'attribute') {\n            if (model.attributes.includes(change.attributeKey)) {\n                return true;\n            }\n        }\n        else {\n            /* istanbul ignore else: This is always true because otherwise it would not register a reducer callback. -- @preserve */\n            if (model.children) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Creates a `reduceChanges` event handler for reconversion.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createChangeReducer(model) {\n    const shouldReplace = createChangeReducerCallback(model);\n    return (evt, data) => {\n        const reducedChanges = [];\n        if (!data.reconvertedElements) {\n            data.reconvertedElements = new Set();\n        }\n        for (const change of data.changes) {\n            // For attribute use node affected by the change.\n            // For insert or remove use parent element because we need to check if it's added/removed child.\n            const node = change.type == 'attribute' ? change.range.start.nodeAfter : change.position.parent;\n            if (!node || !shouldReplace(node, change)) {\n                reducedChanges.push(change);\n                continue;\n            }\n            // If it's already marked for reconversion, so skip this change, otherwise add the diff items.\n            if (!data.reconvertedElements.has(node)) {\n                data.reconvertedElements.add(node);\n                const position = ModelPosition._createBefore(node);\n                let changeIndex = reducedChanges.length;\n                // We need to insert remove+reinsert before any other change on and inside the re-converted element.\n                // This is important because otherwise we would remove element that had already been modified by the previous change.\n                // Note that there could be some element removed before the re-converted element, so we must not break this behavior.\n                for (let i = reducedChanges.length - 1; i >= 0; i--) {\n                    const change = reducedChanges[i];\n                    const changePosition = change.type == 'attribute' ? change.range.start : change.position;\n                    const positionRelation = changePosition.compareWith(position);\n                    if (positionRelation == 'before' || change.type == 'remove' && positionRelation == 'same') {\n                        break;\n                    }\n                    changeIndex = i;\n                }\n                reducedChanges.splice(changeIndex, 0, {\n                    type: 'remove',\n                    name: node.name,\n                    position,\n                    length: 1\n                }, {\n                    type: 'reinsert',\n                    name: node.name,\n                    position,\n                    length: 1\n                });\n            }\n        }\n        data.changes = reducedChanges;\n    };\n}\n/**\n * Creates a function that checks if an element and its watched attributes can be consumed and consumes them.\n *\n * @param model A normalized `config.model` converter configuration.\n * @param model.name The name of element.\n * @param model.attributes The list of attribute names that should trigger reconversion.\n * @param model.children Whether the child list change should trigger reconversion.\n */\nfunction createConsumer(model) {\n    return (node, consumable, options = {}) => {\n        const events = ['insert'];\n        // Collect all set attributes that are triggering conversion.\n        for (const attributeName of model.attributes) {\n            if (node.hasAttribute(attributeName)) {\n                events.push(`attribute:${attributeName}`);\n            }\n        }\n        if (!events.every(event => consumable.test(node, event))) {\n            return false;\n        }\n        if (!options.preflight) {\n            events.forEach(event => consumable.consume(node, event));\n        }\n        return true;\n    };\n}\n/**\n * Creates a function that create view slots.\n *\n * @returns Function exposed by writer as createSlot().\n */\nfunction createSlotFactory(element, slotsMap, conversionApi) {\n    return (writer, modeOrFilter) => {\n        const slot = writer.createContainerElement('$slot');\n        let children = null;\n        if (modeOrFilter === 'children') {\n            children = Array.from(element.getChildren());\n        }\n        else if (typeof modeOrFilter == 'function') {\n            children = Array.from(element.getChildren()).filter(element => modeOrFilter(element));\n        }\n        else {\n            /**\n             * Unknown slot mode was provided to `writer.createSlot()` in downcast converter.\n             *\n             * @error conversion-slot-mode-unknown\n             */\n            throw new CKEditorError('conversion-slot-mode-unknown', conversionApi.dispatcher, { modeOrFilter });\n        }\n        slotsMap.set(slot, children);\n        return slot;\n    };\n}\n/**\n * Checks if all children are covered by slots and there is no child that landed in multiple slots.\n */\nfunction validateSlotsChildren(element, slotsMap, conversionApi) {\n    const childrenInSlots = Array.from(slotsMap.values()).flat();\n    const uniqueChildrenInSlots = new Set(childrenInSlots);\n    if (uniqueChildrenInSlots.size != childrenInSlots.length) {\n        /**\n         * Filters provided to `writer.createSlot()` overlap (at least two filters accept the same child element).\n         *\n         * @error conversion-slot-filter-overlap\n         * @param {module:engine/model/element~Element} element The element of which children would not be properly\n         * allocated to multiple slots.\n         */\n        throw new CKEditorError('conversion-slot-filter-overlap', conversionApi.dispatcher, { element });\n    }\n    if (uniqueChildrenInSlots.size != element.childCount) {\n        /**\n         * Filters provided to `writer.createSlot()` are incomplete and exclude at least one children element (one of\n         * the children elements would not be assigned to any of the slots).\n         *\n         * @error conversion-slot-filter-incomplete\n         * @param {module:engine/model/element~Element} element The element of which children would not be properly\n         * allocated to multiple slots.\n         */\n        throw new CKEditorError('conversion-slot-filter-incomplete', conversionApi.dispatcher, { element });\n    }\n}\n/**\n * Fill slots with appropriate view elements.\n */\nfunction fillSlots(viewElement, slotsMap, conversionApi, options) {\n    // Set temporary position mapping to redirect child view elements into a proper slots.\n    conversionApi.mapper.on('modelToViewPosition', toViewPositionMapping, { priority: 'highest' });\n    let currentSlot = null;\n    let currentSlotNodes = null;\n    // Fill slots with nested view nodes.\n    for ([currentSlot, currentSlotNodes] of slotsMap) {\n        reinsertOrConvertNodes(viewElement, currentSlotNodes, conversionApi, options);\n        conversionApi.writer.move(conversionApi.writer.createRangeIn(currentSlot), conversionApi.writer.createPositionBefore(currentSlot));\n        conversionApi.writer.remove(currentSlot);\n    }\n    conversionApi.mapper.off('modelToViewPosition', toViewPositionMapping);\n    function toViewPositionMapping(evt, data) {\n        const element = data.modelPosition.nodeAfter;\n        // Find the proper offset within the slot.\n        const index = currentSlotNodes.indexOf(element);\n        if (index < 0) {\n            return;\n        }\n        data.viewPosition = data.mapper.findPositionIn(currentSlot, index);\n    }\n}\n/**\n * Inserts view representation of `nodes` into the `viewElement` either by bringing back just removed view nodes\n * or by triggering conversion for them.\n */\nfunction reinsertOrConvertNodes(viewElement, modelNodes, conversionApi, options) {\n    // Fill with nested view nodes.\n    for (const modelChildNode of modelNodes) {\n        // Try reinserting the view node for the specified model node...\n        if (!reinsertNode(viewElement.root, modelChildNode, conversionApi, options)) {\n            // ...or else convert the model element to the view.\n            conversionApi.convertItem(modelChildNode);\n        }\n    }\n}\n/**\n * Checks if the view for the given model element could be reused and reinserts it to the view.\n *\n * @returns `false` if view element can't be reused.\n */\nfunction reinsertNode(viewRoot, modelNode, conversionApi, options) {\n    const { writer, mapper } = conversionApi;\n    // Don't reinsert if this is not a reconversion...\n    if (!options.reconversion) {\n        return false;\n    }\n    const viewChildNode = mapper.toViewElement(modelNode);\n    // ...or there is no view to reinsert or it was already inserted to the view structure...\n    if (!viewChildNode || viewChildNode.root == viewRoot) {\n        return false;\n    }\n    // ...or it was strictly marked as not to be reused.\n    if (!conversionApi.canReuseView(viewChildNode)) {\n        return false;\n    }\n    // Otherwise reinsert the view node.\n    writer.move(writer.createRangeOn(viewChildNode), mapper.toViewPosition(ModelPosition._createBefore(modelNode)));\n    return true;\n}\n/**\n * The default consumer for insert events.\n *\n * @param item Model item.\n * @param consumable The model consumable.\n * @param options.preflight Whether should consume or just check if can be consumed.\n */\nfunction defaultConsumer(item, consumable, { preflight } = {}) {\n    if (preflight) {\n        return consumable.test(item, 'insert');\n    }\n    else {\n        return consumable.consume(item, 'insert');\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/autoparagraphing\n */\n/**\n * Fixes all empty roots.\n *\n * @internal\n * @param writer The model writer.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nexport function autoParagraphEmptyRoots(writer) {\n    const { schema, document } = writer.model;\n    for (const rootName of document.getRootNames()) {\n        const root = document.getRoot(rootName);\n        if (root.isEmpty && !schema.checkChild(root, '$text')) {\n            // If paragraph element is allowed in the root, create paragraph element.\n            if (schema.checkChild(root, 'paragraph')) {\n                writer.insertElement('paragraph', root);\n                // Other roots will get fixed in the next post-fixer round. Those will be triggered\n                // in the same batch no matter if this method was triggered by the post-fixing or not\n                // (the above insertElement call will trigger the post-fixers).\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Checks if the given node wrapped with a paragraph would be accepted by the schema in the given position.\n *\n * @internal\n * @param position The position at which to check.\n * @param nodeOrType The child node or child type to check.\n * @param schema A schema instance used for element validation.\n */\nexport function isParagraphable(position, nodeOrType, schema) {\n    const context = schema.createContext(position);\n    // When paragraph is allowed in this context...\n    if (!schema.checkChild(context, 'paragraph')) {\n        return false;\n    }\n    // And a node would be allowed in this paragraph...\n    if (!schema.checkChild(context.push('paragraph'), nodeOrType)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Inserts a new paragraph at the given position and returns a position inside that paragraph.\n *\n * @internal\n * @param position The position where a paragraph should be inserted.\n * @param writer The model writer.\n * @returns  Position inside the created paragraph.\n */\nexport function wrapInParagraph(position, writer) {\n    const paragraph = writer.createElement('paragraph');\n    writer.insert(paragraph, position);\n    return writer.createPositionAt(paragraph, 0);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Matcher from '../view/matcher';\nimport ConversionHelpers from './conversionhelpers';\nimport { isParagraphable, wrapInParagraph } from '../model/utils/autoparagraphing';\nimport { priorities } from '@ckeditor/ckeditor5-utils';\nimport { cloneDeep } from 'lodash-es';\n/**\n * Contains the {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n/**\n * Upcast conversion helper functions.\n *\n * Learn more about {@glink framework/deep-dive/conversion/upcast upcast helpers}.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class UpcastHelpers extends ConversionHelpers {\n    /**\n     * View element to model element conversion helper.\n     *\n     * This conversion results in creating a model element. For example,\n     * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n     *\n     * Keep in mind that the element will be inserted only if it is allowed\n     * by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: 'p',\n     * \tmodel: 'paragraph'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: 'p',\n     * \tmodel: 'paragraph',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t},\n     * \tmodel: 'fancyParagraph'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToElement( {\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'heading'\n     * \t},\n     * \tmodel: ( viewElement, conversionApi ) => {\n     * \t\tconst modelWriter = conversionApi.writer;\n     *\n     * \t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted. If not set, the converter\n     * will fire for every view element.\n     * @param config.model Name of the model element, a model element instance or a function that takes a view element\n     * and {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API}\n     * and returns a model element. The model element will be inserted in the model.\n     * @param config.converterPriority Converter priority.\n     */\n    elementToElement(config) {\n        return this.add(upcastElementToElement(config));\n    }\n    /**\n     * View element to model attribute conversion helper.\n     *\n     * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n     * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n     *\n     * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n     *\n     * ```\n     * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n     * ```\n     *\n     * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n     * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n     * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n     *\n     * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: 'strong',\n     * \tmodel: 'bold'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: 'strong',\n     * \tmodel: 'bold',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: 'bold'\n     * \t},\n     * \tmodel: 'bold'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: [ 'styled', 'styled-dark' ]\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled',\n     * \t\tvalue: 'dark'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToAttribute( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tstyles: {\n     * \t\t\t'font-size': /[\\s\\S]+/\n     * \t\t}\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalue: ( viewElement, conversionApi ) => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     * \t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n     *\n     * \t\t\tif ( value <= 10 ) {\n     * \t\t\t\treturn 'small';\n     * \t\t\t} else if ( value > 12 ) {\n     * \t\t\t\treturn 'big';\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted.\n     * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n     * the model attribute. `value` property may be set as a function that takes a view element and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.\n     * If `String` is given, the model attribute value will be set to `true`.\n     * @param config.converterPriority Converter priority. Defaults to `low`.\n     */\n    elementToAttribute(config) {\n        return this.add(upcastElementToAttribute(config));\n    }\n    /**\n     * View attribute to model attribute conversion helper.\n     *\n     * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n     * `<imageBlock source=\"foo.jpg\"></imageBlock>` in the model.\n     *\n     * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n     * is set only on the corresponding model node:\n     *\n     * ```\n     * <div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n     * ```\n     *\n     * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n     * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n     * all the children in the model:\n     *\n     * ```\n     * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n     * ```\n     *\n     * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n     * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n     *\n     * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: 'src',\n     * \tmodel: 'source'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: { key: 'src' },\n     * \tmodel: 'source'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: { key: 'src' },\n     * \tmodel: 'source',\n     * \tconverterPriority: 'normal'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tkey: 'data-style',\n     * \t\tvalue: /[\\s\\S]+/\n     * \t},\n     * \tmodel: 'styled'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tname: 'img',\n     * \t\tkey: 'class',\n     * \t\tvalue: 'styled-dark'\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled',\n     * \t\tvalue: 'dark'\n     * \t}\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tkey: 'class',\n     * \t\tvalue: /styled-[\\S]+/\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'styled'\n     * \t\tvalue: ( viewElement, conversionApi ) => {\n     * \t\t\tconst regexp = /styled-([\\S]+)/;\n     * \t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n     *\n     * \t\t\treturn match[ 1 ];\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * Converting styles works a bit differently as it requires `view.styles` to be an object and by default\n     * a model attribute will be set to `true` by such a converter. You can set the model attribute to any value by providing the `value`\n     * callback that returns the desired value.\n     *\n     * ```ts\n     * // Default conversion of font-weight style will result in setting bold attribute to true.\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tstyles: {\n     * \t\t\t'font-weight': 'bold'\n     * \t\t}\n     * \t},\n     * \tmodel: 'bold'\n     * } );\n     *\n     * // This converter will pass any style value to the `lineHeight` model attribute.\n     * editor.conversion.for( 'upcast' ).attributeToAttribute( {\n     * \tview: {\n     * \t\tstyles: {\n     * \t\t\t'line-height': /[\\s\\S]+/\n     * \t\t}\n     * \t},\n     * \tmodel: {\n     * \t\tkey: 'lineHeight',\n     * \t\tvalue: ( viewElement, conversionApi ) => viewElement.getStyle( 'line-height' )\n     * \t}\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Specifies which view attribute will be converted. If a `String` is passed,\n     * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n     * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n     * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n     * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n     * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n     * the model attribute. `value` property may be set as a function that takes a view element and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.\n     * If `String` is given, the model attribute value will be same as view attribute value.\n     * @param config.converterPriority Converter priority. Defaults to `low`.\n     */\n    attributeToAttribute(config) {\n        return this.add(upcastAttributeToAttribute(config));\n    }\n    /**\n     * View element to model marker conversion helper.\n     *\n     * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n     * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n     * after the conversion is done, the marker will be available in\n     * {@link module:engine/model/model~Model#markers model document markers}.\n     *\n     * **Note**: When this helper is used in the data upcast in combination with\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} in the data downcast,\n     * then invalid HTML code (e.g. a span between table cells) may be produced by the latter converter.\n     *\n     * In most of the cases, the {@link #dataToMarker} should be used instead.\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: 'search'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: 'search',\n     * \tconverterPriority: 'high'\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: 'marker-search',\n     * \tmodel: ( viewElement, conversionApi ) => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n     * } );\n     *\n     * editor.conversion.for( 'upcast' ).elementToMarker( {\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tattributes: {\n     * \t\t\t'data-marker': 'search'\n     * \t\t}\n     * \t},\n     * \tmodel: 'search'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view Pattern matching all view elements which should be converted.\n     * @param config.model Name of the model marker, or a function that takes a view element and returns\n     * a model marker name.\n     * @param config.converterPriority Converter priority.\n     */\n    elementToMarker(config) {\n        return this.add(upcastElementToMarker(config));\n    }\n    /**\n     * View-to-model marker conversion helper.\n     *\n     * Converts view data created by {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`}\n     * back to a model marker.\n     *\n     * This converter looks for specific view elements and view attributes that mark marker boundaries. See\n     * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} to learn what view data\n     * is expected by this converter.\n     *\n     * The `config.view` property is equal to the marker group name to convert.\n     *\n     * By default, this converter creates markers with the `group:name` name convention (to match the default `markerToData` conversion).\n     *\n     * The conversion configuration can take a function that will generate a marker name.\n     * If such function is set as the `config.model` parameter, it is passed the `name` part from the view element or attribute and it is\n     * expected to return a string with the marker name.\n     *\n     * Basic usage:\n     *\n     * ```ts\n     * // Using the default conversion.\n     * // In this case, all markers from the `comment` group will be converted.\n     * // The conversion will look for `<comment-start>` and `<comment-end>` tags and\n     * // `data-comment-start-before`, `data-comment-start-after`,\n     * // `data-comment-end-before` and `data-comment-end-after` attributes.\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment'\n     * } );\n     * ```\n     *\n     * An example of a model that may be generated by this conversion:\n     *\n     * ```\n     * // View:\n     * <p>Foo<comment-start name=\"commentId:uid\"></comment-start>bar</p>\n     * <figure data-comment-end-after=\"commentId:uid\" class=\"image\"><img src=\"abc.jpg\" /></figure>\n     *\n     * // Model:\n     * <paragraph>Foo[bar</paragraph>\n     * <imageBlock src=\"abc.jpg\"></imageBlock>]\n     * ```\n     *\n     * Where `[]` are boundaries of a marker that will receive the `comment:commentId:uid` name.\n     *\n     * Other examples of usage:\n     *\n     * ```ts\n     * // Using a custom function which is the same as the default conversion:\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment',\n     * \tmodel: ( name, conversionApi ) => 'comment:' + name,\n     * } );\n     *\n     * // Using the converter priority:\n     * editor.conversion.for( 'upcast' ).dataToMarker( {\n     * \tview: 'comment',\n     * \tmodel: ( name, conversionApi ) => 'comment:' + name,\n     * \tconverterPriority: 'high'\n     * } );\n     * ```\n     *\n     * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n     * to the conversion process.\n     *\n     * @param config Conversion configuration.\n     * @param config.view The marker group name to convert.\n     * @param config.model A function that takes the `name` part from the view element or attribute and\n     * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the marker name.\n     * @param config.converterPriority Converter priority.\n     */\n    dataToMarker(config) {\n        return this.add(upcastDataToMarker(config));\n    }\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n    return (evt, data, conversionApi) => {\n        // Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n        if (!data.modelRange && conversionApi.consumable.consume(data.viewItem, { name: true })) {\n            const { modelRange, modelCursor } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n            data.modelRange = modelRange;\n            data.modelCursor = modelCursor;\n        }\n    };\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n    return (evt, data, { schema, consumable, writer }) => {\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        if (!schema.checkChild(position, '$text')) {\n            if (!isParagraphable(position, '$text', schema)) {\n                return;\n            }\n            // Do not auto-paragraph whitespaces.\n            if (data.viewItem.data.trim().length == 0) {\n                return;\n            }\n            // Wrap `$text` in paragraph and include any marker that is directly before `$text`. See #13053.\n            const nodeBefore = position.nodeBefore;\n            position = wrapInParagraph(position, writer);\n            if (nodeBefore && nodeBefore.is('element', '$marker')) {\n                // Move `$marker` to the paragraph.\n                writer.move(writer.createRangeOn(nodeBefore), position);\n                position = writer.createPositionAfter(nodeBefore);\n            }\n        }\n        consumable.consume(data.viewItem);\n        const text = writer.createText(data.viewItem.data);\n        writer.insert(text, position);\n        data.modelRange = writer.createRange(position, position.getShiftedBy(text.offsetSize));\n        data.modelCursor = data.modelRange.end;\n    };\n}\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n * ```ts\n * view.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n * ```\n *\n * @param model Data model.\n * @param mapper Conversion mapper.\n * @returns {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange(model, mapper) {\n    return (evt, data) => {\n        const viewSelection = data.newSelection;\n        const ranges = [];\n        for (const viewRange of viewSelection.getRanges()) {\n            ranges.push(mapper.toModelRange(viewRange));\n        }\n        const modelSelection = model.createSelection(ranges, { backward: viewSelection.isBackward });\n        if (!modelSelection.isEqual(model.document.selection)) {\n            model.change(writer => {\n                writer.setSelection(modelSelection);\n            });\n        }\n    };\n}\n/**\n * View element to model element conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted. If not\n * set, the converter will fire for every view element.\n * @param config.model Name of the model element, a model element\n * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction upcastElementToElement(config) {\n    config = cloneDeep(config);\n    const converter = prepareToElementConverter(config);\n    const elementName = getViewElementNameFromConfig(config.view);\n    const eventName = elementName ? `element:${elementName}` : 'element';\n    return (dispatcher) => {\n        dispatcher.on(eventName, converter, { priority: config.converterPriority || 'normal' });\n    };\n}\n/**\n * View element to model attribute conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted.\n * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be set to `true`.\n * @param config.converterPriority Converter priority. Defaults to `low`.\n * @returns Conversion helper.\n */\nfunction upcastElementToAttribute(config) {\n    config = cloneDeep(config);\n    normalizeModelAttributeConfig(config);\n    const converter = prepareToAttributeConverter(config, false);\n    const elementName = getViewElementNameFromConfig(config.view);\n    const eventName = elementName ? `element:${elementName}` : 'element';\n    return (dispatcher) => {\n        dispatcher.on(eventName, converter, { priority: config.converterPriority || 'low' });\n    };\n}\n/**\n * View attribute to model attribute conversion helper.\n *\n * See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Specifies which view attribute will be converted. If a `String` is passed,\n * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n * @param config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be same as view attribute value.\n * @param config.converterPriority Converter priority. Defaults to `low`.\n * @returns Conversion helper.\n */\nfunction upcastAttributeToAttribute(config) {\n    config = cloneDeep(config);\n    let viewKey = null;\n    if (typeof config.view == 'string' || config.view.key) {\n        viewKey = normalizeViewAttributeKeyValueConfig(config);\n    }\n    normalizeModelAttributeConfig(config, viewKey);\n    const converter = prepareToAttributeConverter(config, true);\n    return (dispatcher) => {\n        dispatcher.on('element', converter, { priority: config.converterPriority || 'low' });\n    };\n}\n/**\n * View element to model marker conversion helper.\n *\n * See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n *\n * @param config Conversion configuration.\n * @param config.view Pattern matching all view elements which should be converted.\n * @param config.model Name of the model marker, or a function that takes a view element and returns\n * a model marker name.\n * @param config.converterPriority Converter priority.\n * @returns Conversion helper.\n */\nfunction upcastElementToMarker(config) {\n    const model = normalizeElementToMarkerModelConfig(config.model);\n    return upcastElementToElement({ ...config, model });\n}\n/**\n * View data to model marker conversion helper.\n *\n * See {@link ~UpcastHelpers#dataToMarker} to learn more.\n *\n * @returns Conversion helper.\n */\nfunction upcastDataToMarker(config) {\n    config = cloneDeep(config);\n    // Default conversion.\n    if (!config.model) {\n        config.model = name => {\n            return name ? config.view + ':' + name : config.view;\n        };\n    }\n    const normalizedConfig = {\n        view: config.view,\n        model: config.model\n    };\n    const converterStart = prepareToElementConverter(normalizeDataToMarkerConfig(normalizedConfig, 'start'));\n    const converterEnd = prepareToElementConverter(normalizeDataToMarkerConfig(normalizedConfig, 'end'));\n    return (dispatcher) => {\n        dispatcher.on(`element:${config.view}-start`, converterStart, { priority: config.converterPriority || 'normal' });\n        dispatcher.on(`element:${config.view}-end`, converterEnd, { priority: config.converterPriority || 'normal' });\n        // Below is a hack that is needed to properly handle `converterPriority` for both elements and attributes.\n        // Attribute conversion needs to be performed *after* element conversion.\n        // This converter handles both element conversion and attribute conversion, which means that if a single\n        // `config.converterPriority` is used, it will lead to problems. For example, if the `'high'` priority is used,\n        // the attribute conversion will be performed before a lot of element upcast converters.\n        // On the other hand, we want to support `config.converterPriority` and converter overwriting.\n        //\n        // To make it work, we need to do some extra processing for priority for attribute converter.\n        // Priority `'low'` value should be the base value and then we will change it depending on `config.converterPriority` value.\n        //\n        // This hack probably would not be needed if attributes are upcasted separately.\n        //\n        const basePriority = priorities.low;\n        const maxPriority = priorities.highest;\n        const priorityFactor = priorities.get(config.converterPriority) / maxPriority; // Number in range [ -1, 1 ].\n        dispatcher.on('element', upcastAttributeToMarker(normalizedConfig), { priority: basePriority + priorityFactor });\n    };\n}\n/**\n * Function factory, returns a callback function which converts view attributes to a model marker.\n *\n * The converter looks for elements with `data-group-start-before`, `data-group-start-after`, `data-group-end-before`\n * and `data-group-end-after` attributes and inserts `$marker` model elements before/after those elements.\n * `group` part is specified in `config.view`.\n *\n * @returns Marker converter.\n */\nfunction upcastAttributeToMarker(config) {\n    return (evt, data, conversionApi) => {\n        const attrName = `data-${config.view}`;\n        // Check if any attribute for the given view item can be consumed before changing the conversion data\n        // and consuming view items with these attributes.\n        if (!conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-end-after' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-start-after' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-end-before' }) &&\n            !conversionApi.consumable.test(data.viewItem, { attributes: attrName + '-start-before' })) {\n            return;\n        }\n        // This converter wants to add a model element, marking a marker, before/after an element (or maybe even group of elements).\n        // To do that, we can use `data.modelRange` which is set on an element (or a group of elements) that has been upcasted.\n        // But, if the processed view element has not been upcasted yet (it does not have been converted), we need to\n        // fire conversion for its children first, then we will have `data.modelRange` available.\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-end-after' })) {\n            addMarkerElements(data.modelRange.end, data.viewItem.getAttribute(attrName + '-end-after').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-start-after' })) {\n            addMarkerElements(data.modelRange.end, data.viewItem.getAttribute(attrName + '-start-after').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-end-before' })) {\n            addMarkerElements(data.modelRange.start, data.viewItem.getAttribute(attrName + '-end-before').split(','));\n        }\n        if (conversionApi.consumable.consume(data.viewItem, { attributes: attrName + '-start-before' })) {\n            addMarkerElements(data.modelRange.start, data.viewItem.getAttribute(attrName + '-start-before').split(','));\n        }\n        function addMarkerElements(position, markerViewNames) {\n            for (const markerViewName of markerViewNames) {\n                const markerName = config.model(markerViewName, conversionApi);\n                const element = conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n                conversionApi.writer.insert(element, position);\n                if (data.modelCursor.isEqual(position)) {\n                    data.modelCursor = data.modelCursor.getShiftedBy(1);\n                }\n                else {\n                    data.modelCursor = data.modelCursor._getTransformedByInsertion(position, 1);\n                }\n                data.modelRange = data.modelRange._getTransformedByInsertion(position, 1)[0];\n            }\n        }\n    };\n}\n/**\n * Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n * and if so, returns it.\n *\n * @param config Conversion view config.\n * @returns View element name or `null` if name is not directly set.\n */\nfunction getViewElementNameFromConfig(viewConfig) {\n    if (typeof viewConfig == 'string') {\n        return viewConfig;\n    }\n    if (typeof viewConfig == 'object' && typeof viewConfig.name == 'string') {\n        return viewConfig.name;\n    }\n    return null;\n}\n/**\n * Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n *\n * @param config Conversion configuration.\n * @returns View to model converter.\n */\nfunction prepareToElementConverter(config) {\n    const matcher = new Matcher(config.view);\n    return (evt, data, conversionApi) => {\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        const match = matcherResult.match;\n        // Force consuming element's name.\n        match.name = true;\n        if (!conversionApi.consumable.test(data.viewItem, match)) {\n            return;\n        }\n        const modelElement = getModelElement(config.model, data.viewItem, conversionApi);\n        if (!modelElement) {\n            return;\n        }\n        if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n            return;\n        }\n        conversionApi.consumable.consume(data.viewItem, match);\n        conversionApi.convertChildren(data.viewItem, modelElement);\n        conversionApi.updateConversionResult(modelElement, data);\n    };\n}\n/**\n * Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n * and a writer instance and returns a model element instance to be inserted in the model.\n *\n * @param model Model conversion configuration.\n * @param input The converted view node.\n * @param conversionApi The upcast conversion API.\n */\nfunction getModelElement(model, input, conversionApi) {\n    if (model instanceof Function) {\n        return model(input, conversionApi);\n    }\n    else {\n        return conversionApi.writer.createElement(model);\n    }\n}\n/**\n * Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n * as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n * {@link module:engine/view/matcher~MatcherPattern}.\n *\n * @param config Conversion config.\n * @returns Key of the converted view attribute.\n */\nfunction normalizeViewAttributeKeyValueConfig(config) {\n    if (typeof config.view == 'string') {\n        config.view = { key: config.view };\n    }\n    const key = config.view.key;\n    let normalized;\n    if (key == 'class' || key == 'style') {\n        const keyName = key == 'class' ? 'classes' : 'styles';\n        normalized = {\n            [keyName]: config.view.value\n        };\n    }\n    else {\n        const value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n        normalized = {\n            attributes: {\n                [key]: value\n            }\n        };\n    }\n    if (config.view.name) {\n        normalized.name = config.view.name;\n    }\n    config.view = normalized;\n    return key;\n}\n/**\n * Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n * as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n * `config.model` is an `Object` with `key` and `value` properties.\n *\n * @param config Conversion config.\n * @param viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n * will be equal to view attribute value.\n */\nfunction normalizeModelAttributeConfig(config, viewAttributeKeyToCopy = null) {\n    const defaultModelValue = viewAttributeKeyToCopy === null ? true :\n        (viewElement) => viewElement.getAttribute(viewAttributeKeyToCopy);\n    const key = typeof config.model != 'object' ? config.model : config.model.key;\n    const value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n    config.model = { key, value };\n}\n/**\n * Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n * a proper converter function.\n *\n * @param config Conversion configuration. It is possible to provide multiple configurations in an array.\n * @param shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n * on all elements in the range.\n */\nfunction prepareToAttributeConverter(config, shallow) {\n    const matcher = new Matcher(config.view);\n    return (evt, data, conversionApi) => {\n        // Converting an attribute of an element that has not been converted to anything does not make sense\n        // because there will be nowhere to set that attribute on. At this stage, the element should've already\n        // been converted (https://github.com/ckeditor/ckeditor5/issues/11000).\n        if (!data.modelRange && shallow) {\n            return;\n        }\n        const match = matcher.match(data.viewItem);\n        // If there is no match, this callback should not do anything.\n        if (!match) {\n            return;\n        }\n        if (onlyViewNameIsDefined(config.view, data.viewItem)) {\n            match.match.name = true;\n        }\n        else {\n            // Do not test `name` consumable because it could get consumed already while upcasting some other attribute\n            // on the same element (for example <span class=\"big\" style=\"color: red\">foo</span>).\n            delete match.match.name;\n        }\n        // Try to consume appropriate values from consumable values list.\n        if (!conversionApi.consumable.test(data.viewItem, match.match)) {\n            return;\n        }\n        const modelKey = config.model.key;\n        const modelValue = typeof config.model.value == 'function' ?\n            config.model.value(data.viewItem, conversionApi) : config.model.value;\n        // Do not convert if attribute building function returned falsy value.\n        if (modelValue === null) {\n            return;\n        }\n        // Since we are converting to attribute we need a range on which we will set the attribute.\n        // If the range is not created yet, let's create it by converting children of the current node first.\n        if (!data.modelRange) {\n            // Convert children and set conversion result as a current data.\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        // Set attribute on current `output`. `Schema` is checked inside this helper function.\n        const attributeWasSet = setAttributeOn(data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi);\n        // It may happen that a converter will try to set an attribute that is not allowed in the given context.\n        // In such a situation we cannot consume the attribute. See: https://github.com/ckeditor/ckeditor5/pull/9249#issuecomment-815658459.\n        if (attributeWasSet) {\n            // Verify if the element itself wasn't consumed yet. It could be consumed already while upcasting some other attribute\n            // on the same element (for example <span class=\"big\" style=\"color: red\">foo</span>).\n            // We need to consume it so other features (especially GHS) won't try to convert it.\n            // Note that it's not tested by the other element-to-attribute converters whether an element was consumed before\n            // (in case of converters that the element itself is just a context and not the primary information to convert).\n            if (conversionApi.consumable.test(data.viewItem, { name: true })) {\n                match.match.name = true;\n            }\n            conversionApi.consumable.consume(data.viewItem, match.match);\n        }\n    };\n}\n/**\n * Helper function that checks if element name should be consumed in attribute converters.\n *\n * @param viewConfig Conversion view config.\n */\nfunction onlyViewNameIsDefined(viewConfig, viewItem) {\n    // https://github.com/ckeditor/ckeditor5-engine/issues/1786\n    const configToTest = typeof viewConfig == 'function' ? viewConfig(viewItem) : viewConfig;\n    if (typeof configToTest == 'object' && !getViewElementNameFromConfig(configToTest)) {\n        return false;\n    }\n    return !configToTest.classes && !configToTest.attributes && !configToTest.styles;\n}\n/**\n * Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n * to ensure proper model structure.\n *\n * If any node on the given range has already defined an attribute with the same name, its value will not be updated.\n *\n * @param modelRange Model range on which attribute should be set.\n * @param modelAttribute Model attribute to set.\n * @param conversionApi Conversion API.\n * @param shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n * on all elements in the range.\n * @returns `true` if attribute was set on at least one node from given `modelRange`.\n */\nfunction setAttributeOn(modelRange, modelAttribute, shallow, conversionApi) {\n    let result = false;\n    // Set attribute on each item in range according to Schema.\n    for (const node of Array.from(modelRange.getItems({ shallow }))) {\n        // Skip if not allowed.\n        if (!conversionApi.schema.checkAttribute(node, modelAttribute.key)) {\n            continue;\n        }\n        // Mark the node as consumed even if the attribute will not be updated because it's in a valid context (schema)\n        // and would be converted if the attribute wouldn't be present. See #8921.\n        result = true;\n        // Do not override the attribute if it's already present.\n        if (node.hasAttribute(modelAttribute.key)) {\n            continue;\n        }\n        conversionApi.writer.setAttribute(modelAttribute.key, modelAttribute.value, node);\n    }\n    return result;\n}\n/**\n * Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n * function and converts it to a format that is supported by `upcastElementToElement()` function.\n */\nfunction normalizeElementToMarkerModelConfig(model) {\n    return (viewElement, conversionApi) => {\n        const markerName = typeof model == 'string' ? model : model(viewElement, conversionApi);\n        return conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n    };\n}\n/**\n * Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastDataToMarker()`\n * function and converts it to a format that is supported by `upcastElementToElement()` function.\n */\nfunction normalizeDataToMarkerConfig(config, type) {\n    const elementCreatorFunction = (viewElement, conversionApi) => {\n        const viewName = viewElement.getAttribute('name');\n        const markerName = config.model(viewName, conversionApi);\n        return conversionApi.writer.createElement('$marker', { 'data-name': markerName });\n    };\n    return {\n        // Upcast <markerGroup-start> and <markerGroup-end> elements.\n        view: `${config.view}-${type}`,\n        model: elementCreatorFunction\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/selection-post-fixer\n */\nimport Position from '../position';\nimport Range from '../range';\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isSelectable selectable elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><imageBlock></imageBlock>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n * ```\n * root\n *  |- element P1\n *  |   |- \"foo\"                                      root\n *  |- element TABLE (l)                   P1         TABLE             P2\n *  |   |- element TR (l)                 f o[o     TR      TR         b a r\n *  |   |   |- element TD (l)                       TD      TD\n *  |   |       |- \"aaa\"                          a]a a    b b b\n *  |   |- element TR (l)\n *  |   |   |- element TD (l)                           ||\n *  |   |       |- \"bbb\"                                ||\n *  |- element P2                                       VV\n *  |   |- \"bar\"\n *                                                    root\n *                                         P1         TABLE]            P2\n *                                        f o[o     TR      TR         b a r\n *                                                  TD      TD\n *                                                a a a    b b b\n * ```\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n */\nexport function injectSelectionPostFixer(model) {\n    model.document.registerPostFixer(writer => selectionPostFixer(writer, model));\n}\n/**\n * The selection post-fixer.\n */\nfunction selectionPostFixer(writer, model) {\n    const selection = model.document.selection;\n    const schema = model.schema;\n    const ranges = [];\n    let wasFixed = false;\n    for (const modelRange of selection.getRanges()) {\n        // Go through all ranges in selection and try fixing each of them.\n        // Those ranges might overlap but will be corrected later.\n        const correctedRange = tryFixingRange(modelRange, schema);\n        // \"Selection fixing\" algorithms sometimes get lost. In consequence, it may happen\n        // that a new range is returned but, in fact, it has the same positions as the original\n        // range anyway. If this range is not discarded, a new selection will be set and that,\n        // for instance, would destroy the selection attributes. Let's make sure that the post-fixer\n        // actually worked first before setting a new selection.\n        //\n        // https://github.com/ckeditor/ckeditor5/issues/6693\n        if (correctedRange && !correctedRange.isEqual(modelRange)) {\n            ranges.push(correctedRange);\n            wasFixed = true;\n        }\n        else {\n            ranges.push(modelRange);\n        }\n    }\n    // If any of ranges were corrected update the selection.\n    if (wasFixed) {\n        writer.setSelection(mergeIntersectingRanges(ranges), { backward: selection.isBackward });\n    }\n    return false;\n}\n/**\n * Tries fixing a range if it's incorrect.\n *\n * **Note:** This helper is used by the selection post-fixer and to fix the `beforeinput` target ranges.\n *\n * @returns Returns fixed range or null if range is valid.\n */\nexport function tryFixingRange(range, schema) {\n    if (range.isCollapsed) {\n        return tryFixingCollapsedRange(range, schema);\n    }\n    return tryFixingNonCollapsedRage(range, schema);\n}\n/**\n * Tries to fix collapsed ranges.\n *\n * * Fixes situation when a range is in a place where $text is not allowed\n *\n * @param range Collapsed range to fix.\n * @returns Returns fixed range or null if range is valid.\n */\nfunction tryFixingCollapsedRange(range, schema) {\n    const originalPosition = range.start;\n    const nearestSelectionRange = schema.getNearestSelectionRange(originalPosition);\n    // This might be null, i.e. when the editor data is empty or the selection is inside a limit element\n    // that doesn't allow text inside.\n    // In the first case, there is no need to fix the selection range.\n    // In the second, let's go up to the outer selectable element\n    if (!nearestSelectionRange) {\n        const ancestorObject = originalPosition.getAncestors().reverse().find((item) => schema.isObject(item));\n        if (ancestorObject) {\n            return Range._createOn(ancestorObject);\n        }\n        return null;\n    }\n    if (!nearestSelectionRange.isCollapsed) {\n        return nearestSelectionRange;\n    }\n    const fixedPosition = nearestSelectionRange.start;\n    // Fixed position is the same as original - no need to return corrected range.\n    if (originalPosition.isEqual(fixedPosition)) {\n        return null;\n    }\n    return new Range(fixedPosition);\n}\n/**\n * Tries to fix an expanded range.\n *\n * @param range Expanded range to fix.\n * @returns Returns fixed range or null if range is valid.\n */\nfunction tryFixingNonCollapsedRage(range, schema) {\n    const { start, end } = range;\n    const isTextAllowedOnStart = schema.checkChild(start, '$text');\n    const isTextAllowedOnEnd = schema.checkChild(end, '$text');\n    const startLimitElement = schema.getLimitElement(start);\n    const endLimitElement = schema.getLimitElement(end);\n    // Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n    if (startLimitElement === endLimitElement) {\n        // Range is valid when both position allows to place a text:\n        // - <block>f[oobarba]z</block>\n        // This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n        if (isTextAllowedOnStart && isTextAllowedOnEnd) {\n            return null;\n        }\n        // Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n        // - [<block>foo</block>]    ->    <block>[foo]</block>\n        // - [<block>foo]</block>    ->    <block>[foo]</block>\n        // - <block>f[oo</block>]    ->    <block>f[oo]</block>\n        // - [<block>foo</block><selectable></selectable>]    ->    <block>[foo</block><selectable></selectable>]\n        if (checkSelectionOnNonLimitElements(start, end, schema)) {\n            const isStartBeforeSelectable = start.nodeAfter && schema.isSelectable(start.nodeAfter);\n            const fixedStart = isStartBeforeSelectable ? null : schema.getNearestSelectionRange(start, 'forward');\n            const isEndAfterSelectable = end.nodeBefore && schema.isSelectable(end.nodeBefore);\n            const fixedEnd = isEndAfterSelectable ? null : schema.getNearestSelectionRange(end, 'backward');\n            // The schema.getNearestSelectionRange might return null - if that happens use original position.\n            const rangeStart = fixedStart ? fixedStart.start : start;\n            const rangeEnd = fixedEnd ? fixedEnd.end : end;\n            return new Range(rangeStart, rangeEnd);\n        }\n    }\n    const isStartInLimit = startLimitElement && !startLimitElement.is('rootElement');\n    const isEndInLimit = endLimitElement && !endLimitElement.is('rootElement');\n    // At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n    // then the range crossed limit element boundaries and needs to be fixed.\n    if (isStartInLimit || isEndInLimit) {\n        const bothInSameParent = (start.nodeAfter && end.nodeBefore) && start.nodeAfter.parent === end.nodeBefore.parent;\n        const expandStart = isStartInLimit && (!bothInSameParent || !isSelectable(start.nodeAfter, schema));\n        const expandEnd = isEndInLimit && (!bothInSameParent || !isSelectable(end.nodeBefore, schema));\n        // Although we've already found limit element on start/end positions we must find the outer-most limit element.\n        // as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n        let fixedStart = start;\n        let fixedEnd = end;\n        if (expandStart) {\n            fixedStart = Position._createBefore(findOutermostLimitAncestor(startLimitElement, schema));\n        }\n        if (expandEnd) {\n            fixedEnd = Position._createAfter(findOutermostLimitAncestor(endLimitElement, schema));\n        }\n        return new Range(fixedStart, fixedEnd);\n    }\n    // Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n    return null;\n}\n/**\n * Finds the outer-most ancestor.\n */\nfunction findOutermostLimitAncestor(startingNode, schema) {\n    let isLimitNode = startingNode;\n    let parent = isLimitNode;\n    // Find outer most isLimit block as such blocks might be nested (ie. in tables).\n    while (schema.isLimit(parent) && parent.parent) {\n        isLimitNode = parent;\n        parent = parent.parent;\n    }\n    return isLimitNode;\n}\n/**\n * Checks whether any of range boundaries is placed around non-limit elements.\n */\nfunction checkSelectionOnNonLimitElements(start, end, schema) {\n    const startIsOnBlock = (start.nodeAfter && !schema.isLimit(start.nodeAfter)) || schema.checkChild(start, '$text');\n    const endIsOnBlock = (end.nodeBefore && !schema.isLimit(end.nodeBefore)) || schema.checkChild(end, '$text');\n    // We should fix such selection when one of those nodes needs fixing.\n    return startIsOnBlock || endIsOnBlock;\n}\n/**\n * Returns a minimal non-intersecting array of ranges without duplicates.\n *\n * @param ranges Ranges to merge.\n * @returns Array of unique and non-intersecting ranges.\n */\nexport function mergeIntersectingRanges(ranges) {\n    const rangesToMerge = [...ranges];\n    const rangeIndexesToRemove = new Set();\n    let currentRangeIndex = 1;\n    while (currentRangeIndex < rangesToMerge.length) {\n        const currentRange = rangesToMerge[currentRangeIndex];\n        const previousRanges = rangesToMerge.slice(0, currentRangeIndex);\n        for (const [previousRangeIndex, previousRange] of previousRanges.entries()) {\n            if (rangeIndexesToRemove.has(previousRangeIndex)) {\n                continue;\n            }\n            if (currentRange.isEqual(previousRange)) {\n                rangeIndexesToRemove.add(previousRangeIndex);\n            }\n            else if (currentRange.isIntersecting(previousRange)) {\n                rangeIndexesToRemove.add(previousRangeIndex);\n                rangeIndexesToRemove.add(currentRangeIndex);\n                const mergedRange = currentRange.getJoined(previousRange);\n                rangesToMerge.push(mergedRange);\n            }\n        }\n        currentRangeIndex++;\n    }\n    const nonIntersectingRanges = rangesToMerge.filter((_, index) => !rangeIndexesToRemove.has(index));\n    return nonIntersectingRanges;\n}\n/**\n * Checks if node exists and if it's a selectable.\n */\nfunction isSelectable(node, schema) {\n    return node && schema.isSelectable(node);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/editingcontroller\n */\nimport { CKEditorError, ObservableMixin, env } from '@ckeditor/ckeditor5-utils';\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertText, remove } from '../conversion/downcasthelpers';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\nimport { tryFixingRange } from '../model/utils/selection-post-fixer';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n */\nexport default class EditingController extends ObservableMixin() {\n    /**\n     * Creates an editing controller instance.\n     *\n     * @param model Editing model.\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(model, stylesProcessor) {\n        super();\n        this.model = model;\n        this.view = new View(stylesProcessor);\n        this.mapper = new Mapper();\n        this.downcastDispatcher = new DowncastDispatcher({\n            mapper: this.mapper,\n            schema: model.schema\n        });\n        const doc = this.model.document;\n        const selection = doc.selection;\n        const markers = this.model.markers;\n        // When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n        // the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n        // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n        //\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n        this.listenTo(this.model, '_beforeChanges', () => {\n            this.view._disableRendering(true);\n        }, { priority: 'highest' });\n        this.listenTo(this.model, '_afterChanges', () => {\n            this.view._disableRendering(false);\n        }, { priority: 'lowest' });\n        // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n        // Do it on 'low' priority, so changes are converted after other listeners did their job.\n        // Also convert model selection.\n        this.listenTo(doc, 'change', () => {\n            this.view.change(writer => {\n                this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n                this.downcastDispatcher.convertSelection(selection, markers, writer);\n            });\n        }, { priority: 'low' });\n        // Convert selection from the view to the model when it changes in the view.\n        this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper));\n        // Fix `beforeinput` target ranges so that they map to the valid model ranges.\n        this.listenTo(this.view.document, 'beforeinput', fixTargetRanges(this.mapper, this.model.schema, this.view), { priority: 'high' });\n        // Attach default model converters.\n        this.downcastDispatcher.on('insert:$text', insertText(), { priority: 'lowest' });\n        this.downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n        this.downcastDispatcher.on('remove', remove(), { priority: 'low' });\n        // Attach default model selection converters.\n        this.downcastDispatcher.on('selection', clearAttributes(), { priority: 'high' });\n        this.downcastDispatcher.on('selection', convertRangeSelection(), { priority: 'low' });\n        this.downcastDispatcher.on('selection', convertCollapsedSelection(), { priority: 'low' });\n        // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n        // {@link module:engine/model/document~Document#roots model roots collection} so creating\n        // model root automatically creates corresponding view root.\n        this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n            // $graveyard is a special root that has no reflection in the view.\n            if (root.rootName == '$graveyard') {\n                return null;\n            }\n            const viewRoot = new RootEditableElement(this.view.document, root.name);\n            viewRoot.rootName = root.rootName;\n            this.mapper.bindElements(root, viewRoot);\n            return viewRoot;\n        });\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n        // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n        // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n    }\n    /**\n     * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n     * by `EditingController` that need to be destroyed.\n     */\n    destroy() {\n        this.view.destroy();\n        this.stopListening();\n    }\n    /**\n     * Calling this method will refresh the marker by triggering the downcast conversion for it.\n     *\n     * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n     * without changing any marker data. For instance:\n     *\n     * ```ts\n     * let isCommentActive = false;\n     *\n     * model.conversion.markerToHighlight( {\n     * \tmodel: 'comment',\n     * \tview: data => {\n     * \t\tconst classes = [ 'comment-marker' ];\n     *\n     * \t\tif ( isCommentActive ) {\n     * \t\t\tclasses.push( 'comment-marker--active' );\n     * \t\t}\n     *\n     * \t\treturn { classes };\n     * \t}\n     * } );\n     *\n     * // ...\n     *\n     * // Change the property that indicates if marker is displayed as active or not.\n     * isCommentActive = true;\n     *\n     * // Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n     * editor.editing.reconvertMarker( 'comment' );\n     * ```\n     *\n     * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n     *\n     * @param markerOrName Name of a marker to update, or a marker instance.\n     */\n    reconvertMarker(markerOrName) {\n        const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        const currentMarker = this.model.markers.get(markerName);\n        if (!currentMarker) {\n            /**\n             * The marker with the provided name does not exist and cannot be reconverted.\n             *\n             * @error editingcontroller-reconvertmarker-marker-not-exist\n             * @param {String} markerName The name of the reconverted marker.\n             */\n            throw new CKEditorError('editingcontroller-reconvertmarker-marker-not-exist', this, { markerName });\n        }\n        this.model.change(() => {\n            this.model.markers._refresh(currentMarker);\n        });\n    }\n    /**\n     * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n     *\n     * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n     * when the view structure depends not only on the associated model data but also on some external state.\n     *\n     * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n     *\n     * @param item Item to refresh.\n     */\n    reconvertItem(item) {\n        this.model.change(() => {\n            this.model.document.differ._refreshItem(item);\n        });\n    }\n}\n/**\n * Checks whether the target ranges provided by the `beforeInput` event can be properly mapped to model ranges and fixes them if needed.\n *\n * This is using the same logic as the selection post-fixer.\n */\nfunction fixTargetRanges(mapper, schema, view) {\n    return (evt, data) => {\n        // The Renderer is disabled while composing on non-android browsers, so we can't be sure that target ranges\n        // could be properly mapped to view and model because the DOM and view tree drifted apart.\n        if (view.document.isComposing && !env.isAndroid) {\n            return;\n        }\n        for (let i = 0; i < data.targetRanges.length; i++) {\n            const viewRange = data.targetRanges[i];\n            const modelRange = mapper.toModelRange(viewRange);\n            const correctedRange = tryFixingRange(modelRange, schema);\n            if (!correctedRange || correctedRange.isEqual(modelRange)) {\n                continue;\n            }\n            data.targetRanges[i] = mapper.toViewRange(correctedRange);\n        }\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/viewconsumable\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\nimport { isArray } from 'lodash-es';\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n * ```ts\n * viewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n * viewConsumable.add( textNode ); // Adds text node for consumption.\n * viewConsumable.add( docFragment ); // Adds document fragment for consumption.\n * viewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n * viewConsumable.test( textNode ); // Tests if text node can be consumed.\n * viewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n * viewConsumable.consume( element, { name: true }  ); // Consume element's name.\n * viewConsumable.consume( textNode ); // Consume text node.\n * viewConsumable.consume( docFragment ); // Consume document fragment.\n * viewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n * viewConsumable.revert( textNode ); // Revert already consumed text node.\n * viewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n * ```\n */\nexport default class ViewConsumable {\n    constructor() {\n        /**\n         * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n         * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n         * For {@link module:engine/view/text~Text text nodes} and\n         * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n         */\n        this._consumables = new Map();\n    }\n    add(element, consumables) {\n        let elementConsumables;\n        // For text nodes and document fragments just mark them as consumable.\n        if (element.is('$text') || element.is('documentFragment')) {\n            this._consumables.set(element, true);\n            return;\n        }\n        // For elements create new ViewElementConsumables or update already existing one.\n        if (!this._consumables.has(element)) {\n            elementConsumables = new ViewElementConsumables(element);\n            this._consumables.set(element, elementConsumables);\n        }\n        else {\n            elementConsumables = this._consumables.get(element);\n        }\n        elementConsumables.add(consumables);\n    }\n    /**\n     * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n     * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n     * first already consumed item is found and `null` when first non-consumable item is found.\n     *\n     * ```ts\n     * viewConsumable.test( p, { name: true } ); // Tests element's name.\n     * viewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n     * viewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n     * viewConsumable.test( p, { styles: 'color' } ); // Tests style.\n     * viewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n     * viewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n     * viewConsumable.test( textNode ); // Tests text node.\n     * viewConsumable.test( docFragment ); // Tests document fragment.\n     * ```\n     *\n     * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n     *\n     * ```ts\n     * viewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n     * viewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     * @returns Returns `true` when all items included in method's call can be consumed. Returns `false`\n     * when first already consumed item is found and `null` when first non-consumable item is found.\n     */\n    test(element, consumables) {\n        const elementConsumables = this._consumables.get(element);\n        if (elementConsumables === undefined) {\n            return null;\n        }\n        // For text nodes and document fragments return stored boolean value.\n        if (element.is('$text') || element.is('documentFragment')) {\n            return elementConsumables;\n        }\n        // For elements test consumables object.\n        return elementConsumables.test(consumables);\n    }\n    /**\n     * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n     *\n     * ```ts\n     * viewConsumable.consume( p, { name: true } ); // Consumes element's name.\n     * viewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n     * viewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n     * viewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n     * viewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n     * viewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n     * viewConsumable.consume( textNode ); // Consumes text node.\n     * viewConsumable.consume( docFragment ); // Consumes document fragment.\n     * ```\n     *\n     * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n     *\n     * ```ts\n     * viewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n     * viewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     * @returns Returns `true` when all items included in method's call can be consumed,\n     * otherwise returns `false`.\n     */\n    consume(element, consumables) {\n        if (this.test(element, consumables)) {\n            if (element.is('$text') || element.is('documentFragment')) {\n                // For text nodes and document fragments set value to false.\n                this._consumables.set(element, false);\n            }\n            else {\n                // For elements - consume consumables object.\n                this._consumables.get(element).consume(consumables);\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n     * Method does not revert items that were never previously added for consumption, even if they are included in\n     * method's call.\n     *\n     * ```ts\n     * viewConsumable.revert( p, { name: true } ); // Reverts element's name.\n     * viewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n     * viewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n     * viewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n     * viewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n     * viewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n     * viewConsumable.revert( textNode ); // Reverts text node.\n     * viewConsumable.revert( docFragment ); // Reverts document fragment.\n     * ```\n     *\n     * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n     * consumption.\n     *\n     * ```ts\n     * viewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n     * viewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n     * ```\n     *\n     * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n     * @param consumables.name If set to true element's name will be included.\n     * @param consumables.attributes Attribute name or array of attribute names.\n     * @param consumables.classes Class name or array of class names.\n     * @param consumables.styles Style name or array of style names.\n     */\n    revert(element, consumables) {\n        const elementConsumables = this._consumables.get(element);\n        if (elementConsumables !== undefined) {\n            if (element.is('$text') || element.is('documentFragment')) {\n                // For text nodes and document fragments - set consumable to true.\n                this._consumables.set(element, true);\n            }\n            else {\n                // For elements - revert items from consumables object.\n                elementConsumables.revert(consumables);\n            }\n        }\n    }\n    /**\n     * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n     * element's name and all its attributes, classes and styles.\n     */\n    static consumablesFromElement(element) {\n        const consumables = {\n            element,\n            name: true,\n            attributes: [],\n            classes: [],\n            styles: []\n        };\n        const attributes = element.getAttributeKeys();\n        for (const attribute of attributes) {\n            // Skip classes and styles - will be added separately.\n            if (attribute == 'style' || attribute == 'class') {\n                continue;\n            }\n            consumables.attributes.push(attribute);\n        }\n        const classes = element.getClassNames();\n        for (const className of classes) {\n            consumables.classes.push(className);\n        }\n        const styles = element.getStyleNames();\n        for (const style of styles) {\n            consumables.styles.push(style);\n        }\n        return consumables;\n    }\n    /**\n     * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n     * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n     *\n     * @param from View node or document fragment from which `ViewConsumable` will be created.\n     * @param instance If provided, given `ViewConsumable` instance will be used\n     * to add all consumables. It will be returned instead of a new instance.\n     */\n    static createFrom(from, instance) {\n        if (!instance) {\n            instance = new ViewConsumable();\n        }\n        if (from.is('$text')) {\n            instance.add(from);\n            return instance;\n        }\n        // Add `from` itself, if it is an element.\n        if (from.is('element')) {\n            instance.add(from, ViewConsumable.consumablesFromElement(from));\n        }\n        if (from.is('documentFragment')) {\n            instance.add(from);\n        }\n        for (const child of from.getChildren()) {\n            instance = ViewConsumable.createFrom(child, instance);\n        }\n        return instance;\n    }\n}\nconst CONSUMABLE_TYPES = ['attributes', 'classes', 'styles'];\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n */\nexport class ViewElementConsumables {\n    /**\n     * Creates ViewElementConsumables instance.\n     *\n     * @param from View node or document fragment from which `ViewElementConsumables` is being created.\n     */\n    constructor(from) {\n        this.element = from;\n        this._canConsumeName = null;\n        this._consumables = {\n            attributes: new Map(),\n            styles: new Map(),\n            classes: new Map()\n        };\n    }\n    /**\n     * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n     * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n     * styles still could be consumed):\n     *\n     * ```ts\n     * consumables.add( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n     * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n     *\n     * @param consumables Object describing which parts of the element can be consumed.\n     * @param consumables.name If set to `true` element's name will be added as consumable.\n     * @param consumables.attributes Attribute name or array of attribute names to add as consumable.\n     * @param consumables.classes Class name or array of class names to add as consumable.\n     * @param consumables.styles Style name or array of style names to add as consumable.\n     */\n    add(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = true;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._add(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n     *\n     * Element's name can be tested:\n     *\n     * ```ts\n     * consumables.test( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be tested.\n     * @param consumables.name If set to `true` element's name will be tested.\n     * @param consumables.attributes Attribute name or array of attribute names to test.\n     * @param consumables.classes Class name or array of class names to test.\n     * @param consumables.styles Style name or array of style names to test.\n     * @returns `true` when all tested items can be consumed, `null` when even one of the items\n     * was never marked for consumption and `false` when even one of the items was already consumed.\n     */\n    test(consumables) {\n        // Check if name can be consumed.\n        if (consumables.name && !this._canConsumeName) {\n            return this._canConsumeName;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                const value = this._test(type, consumables[type]);\n                if (value !== true) {\n                    return value;\n                }\n            }\n        }\n        // Return true only if all can be consumed.\n        return true;\n    }\n    /**\n     * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n     * is already consumed - it consumes all consumable items provided.\n     * Element's name can be consumed:\n     *\n     * ```ts\n     * consumables.consume( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be consumed.\n     * @param consumables.name If set to `true` element's name will be consumed.\n     * @param consumables.attributes Attribute name or array of attribute names to consume.\n     * @param consumables.classes Class name or array of class names to consume.\n     * @param consumables.styles Style name or array of style names to consume.\n     */\n    consume(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = false;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._consume(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n     * Element's name can be reverted:\n     *\n     * ```ts\n     * consumables.revert( { name: true } );\n     * ```\n     *\n     * Attributes classes and styles:\n     *\n     * ```ts\n     * consumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n     * consumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n     * ```\n     *\n     * @param consumables Object describing which parts of the element should be reverted.\n     * @param consumables.name If set to `true` element's name will be reverted.\n     * @param consumables.attributes Attribute name or array of attribute names to revert.\n     * @param consumables.classes Class name or array of class names to revert.\n     * @param consumables.styles Style name or array of style names to revert.\n     */\n    revert(consumables) {\n        if (consumables.name) {\n            this._canConsumeName = true;\n        }\n        for (const type of CONSUMABLE_TYPES) {\n            if (type in consumables) {\n                this._revert(type, consumables[type]);\n            }\n        }\n    }\n    /**\n     * Helper method that adds consumables of a given type: attribute, class or style.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n     * type is provided - it should be handled separately by providing actual style/class type.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _add(type, item) {\n        const items = isArray(item) ? item : [item];\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                /**\n                 * Class and style attributes should be handled separately in\n                 * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n                 *\n                 * What you have done is trying to use:\n                 *\n                 *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n                 *\n                 * While each class and style should be registered separately:\n                 *\n                 *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n                 *\n                 * @error viewconsumable-invalid-attribute\n                 */\n                throw new CKEditorError('viewconsumable-invalid-attribute', this);\n            }\n            consumables.set(name, true);\n            if (type === 'styles') {\n                for (const alsoName of this.element.document.stylesProcessor.getRelatedStyles(name)) {\n                    consumables.set(alsoName, true);\n                }\n            }\n        }\n    }\n    /**\n     * Helper method that tests consumables of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     * @returns Returns `true` if all items can be consumed, `null` when one of the items cannot be\n     * consumed and `false` when one of the items is already consumed.\n     */\n    _test(type, item) {\n        const items = isArray(item) ? item : [item];\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // Check all classes/styles if class/style attribute is tested.\n                const value = this._test(consumableName, [...this._consumables[consumableName].keys()]);\n                if (value !== true) {\n                    return value;\n                }\n            }\n            else {\n                const value = consumables.get(name);\n                // Return null if attribute is not found.\n                if (value === undefined) {\n                    return null;\n                }\n                if (!value) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Helper method that consumes items of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _consume(type, item) {\n        const items = isArray(item) ? item : [item];\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // If class or style is provided for consumption - consume them all.\n                this._consume(consumableName, [...this._consumables[consumableName].keys()]);\n            }\n            else {\n                consumables.set(name, false);\n                if (type == 'styles') {\n                    for (const toConsume of this.element.document.stylesProcessor.getRelatedStyles(name)) {\n                        consumables.set(toConsume, false);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Helper method that reverts items of a given type: attribute, class or style.\n     *\n     * @param type Type of the consumable item: `attributes`, `classes` or , `styles`.\n     * @param item Consumable item or array of items.\n     */\n    _revert(type, item) {\n        const items = isArray(item) ? item : [item];\n        const consumables = this._consumables[type];\n        for (const name of items) {\n            if (type === 'attributes' && (name === 'class' || name === 'style')) {\n                const consumableName = name == 'class' ? 'classes' : 'styles';\n                // If class or style is provided for reverting - revert them all.\n                this._revert(consumableName, [...this._consumables[consumableName].keys()]);\n            }\n            else {\n                const value = consumables.get(name);\n                if (value === false) {\n                    consumables.set(name, true);\n                }\n            }\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/schema\n */\nimport Element from './element';\nimport Position from './position';\nimport Range from './range';\nimport Text from './text';\nimport TreeWalker from './treewalker';\nimport { CKEditorError, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The model's schema. It defines the allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by the features and based on them, the editing framework and features\n * make decisions on how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * The {@glink framework/architecture/editing-engine#schema schema section} of the\n * {@glink framework/architecture/editing-engine Introduction to the Editing engine architecture} guide.\n * * The {@glink framework/deep-dive/schema Schema deep-dive} guide.\n */\nexport default class Schema extends ObservableMixin() {\n    /**\n     * Creates a schema instance.\n     */\n    constructor() {\n        super();\n        this._sourceDefinitions = {};\n        /**\n         * A dictionary containing attribute properties.\n         */\n        this._attributeProperties = {};\n        this.decorate('checkChild');\n        this.decorate('checkAttribute');\n        this.on('checkAttribute', (evt, args) => {\n            args[0] = new SchemaContext(args[0]);\n        }, { priority: 'highest' });\n        this.on('checkChild', (evt, args) => {\n            args[0] = new SchemaContext(args[0]);\n            args[1] = this.getDefinition(args[1]);\n        }, { priority: 'highest' });\n    }\n    /**\n     * Registers a schema item. Can only be called once for every item name.\n     *\n     * ```ts\n     * schema.register( 'paragraph', {\n     * \tinheritAllFrom: '$block'\n     * } );\n     * ```\n     */\n    register(itemName, definition) {\n        if (this._sourceDefinitions[itemName]) {\n            /**\n             * A single item cannot be registered twice in the schema.\n             *\n             * This situation may happen when:\n             *\n             * * Two or more plugins called {@link module:engine/model/schema~Schema#register `register()`} with the same name.\n             * This will usually mean that there is a collision between plugins which try to use the same element in the model.\n             * Unfortunately, the only way to solve this is by modifying one of these plugins to use a unique model element name.\n             * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n             * and usually means one or more of the following issues:\n             *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n             *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n             *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n             *\n             * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n             *\n             * @param itemName The name of the model element that is being registered twice.\n             * @error schema-cannot-register-item-twice\n             */\n            throw new CKEditorError('schema-cannot-register-item-twice', this, {\n                itemName\n            });\n        }\n        this._sourceDefinitions[itemName] = [\n            Object.assign({}, definition)\n        ];\n        this._clearCache();\n    }\n    /**\n     * Extends a {@link #register registered} item's definition.\n     *\n     * Extending properties such as `allowIn` will add more items to the existing properties,\n     * while redefining properties such as `isBlock` will override the previously defined ones.\n     *\n     * ```ts\n     * schema.register( 'foo', {\n     * \tallowIn: '$root',\n     * \tisBlock: true;\n     * } );\n     * schema.extend( 'foo', {\n     * \tallowIn: 'blockQuote',\n     * \tisBlock: false\n     * } );\n     *\n     * schema.getDefinition( 'foo' );\n     * //\t{\n     * //\t\tallowIn: [ '$root', 'blockQuote' ],\n     * // \t\tisBlock: false\n     * //\t}\n     * ```\n     */\n    extend(itemName, definition) {\n        if (!this._sourceDefinitions[itemName]) {\n            /**\n             * Cannot extend an item which was not registered yet.\n             *\n             * This error happens when a plugin tries to extend the schema definition of an item which was not\n             * {@link module:engine/model/schema~Schema#register registered} yet.\n             *\n             * @param itemName The name of the model element which is being extended.\n             * @error schema-cannot-extend-missing-item\n             */\n            throw new CKEditorError('schema-cannot-extend-missing-item', this, {\n                itemName\n            });\n        }\n        this._sourceDefinitions[itemName].push(Object.assign({}, definition));\n        this._clearCache();\n    }\n    /**\n     * Returns data of all registered items.\n     *\n     * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,\n     * checking a list of all block elements, etc).\n     * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})\n     * in other cases.\n     */\n    getDefinitions() {\n        if (!this._compiledDefinitions) {\n            this._compile();\n        }\n        return this._compiledDefinitions;\n    }\n    /**\n     * Returns a definition of the given item or `undefined` if an item is not registered.\n     *\n     * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,\n     * checking a list of all block elements, etc).\n     * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})\n     * in other cases.\n     */\n    getDefinition(item) {\n        let itemName;\n        if (typeof item == 'string') {\n            itemName = item;\n        }\n        else if ('is' in item && (item.is('$text') || item.is('$textProxy'))) {\n            itemName = '$text';\n        }\n        // Element or module:engine/model/schema~SchemaContextItem.\n        else {\n            itemName = item.name;\n        }\n        return this.getDefinitions()[itemName];\n    }\n    /**\n     * Returns `true` if the given item is registered in the schema.\n     *\n     * ```ts\n     * schema.isRegistered( 'paragraph' ); // -> true\n     * schema.isRegistered( editor.model.document.getRoot() ); // -> true\n     * schema.isRegistered( 'foo' ); // -> false\n     * ```\n     */\n    isRegistered(item) {\n        return !!this.getDefinition(item);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a block by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n     *\n     * ```ts\n     * schema.isBlock( 'paragraph' ); // -> true\n     * schema.isBlock( '$root' ); // -> false\n     *\n     * const paragraphElement = writer.createElement( 'paragraph' );\n     * schema.isBlock( paragraphElement ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#block-elements Block elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isBlock(item) {\n        const def = this.getDefinition(item);\n        return !!(def && def.isBlock);\n    }\n    /**\n     * Returns `true` if the given item should be treated as a limit element.\n     *\n     * It considers an item to be a limit element if its\n     * {@link module:engine/model/schema~SchemaItemDefinition}'s\n     * {@link module:engine/model/schema~SchemaItemDefinition#isLimit `isLimit`} or\n     * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property\n     * was set to `true`.\n     *\n     * ```ts\n     * schema.isLimit( 'paragraph' ); // -> false\n     * schema.isLimit( '$root' ); // -> true\n     * schema.isLimit( editor.model.document.getRoot() ); // -> true\n     * schema.isLimit( 'imageBlock' ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#limit-elements Limit elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isLimit(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isLimit || def.isObject);\n    }\n    /**\n     * Returns `true` if the given item should be treated as an object element.\n     *\n     * It considers an item to be an object element if its\n     * {@link module:engine/model/schema~SchemaItemDefinition}'s\n     * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property\n     * was set to `true`.\n     *\n     * ```ts\n     * schema.isObject( 'paragraph' ); // -> false\n     * schema.isObject( 'imageBlock' ); // -> true\n     *\n     * const imageElement = writer.createElement( 'imageBlock' );\n     * schema.isObject( imageElement ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#object-elements Object elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isObject(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        // Note: Check out the implementation of #isLimit(), #isSelectable(), and #isContent()\n        // to understand why these three constitute an object.\n        return !!(def.isObject || (def.isLimit && def.isSelectable && def.isContent));\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * an inline element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n     *\n     * ```ts\n     * schema.isInline( 'paragraph' ); // -> false\n     * schema.isInline( 'softBreak' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isInline( text ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#inline-elements Inline elements} section of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isInline(item) {\n        const def = this.getDefinition(item);\n        return !!(def && def.isInline);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a selectable element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isSelectable` property.\n     *\n     * ```ts\n     * schema.isSelectable( 'paragraph' ); // -> false\n     * schema.isSelectable( 'heading1' ); // -> false\n     * schema.isSelectable( 'imageBlock' ); // -> true\n     * schema.isSelectable( 'tableCell' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isSelectable( text ); // -> false\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#selectable-elements Selectable elements section} of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isSelectable(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isSelectable || def.isObject);\n    }\n    /**\n     * Returns `true` if the given item is defined to be\n     * a content by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isContent` property.\n     *\n     * ```ts\n     * schema.isContent( 'paragraph' ); // -> false\n     * schema.isContent( 'heading1' ); // -> false\n     * schema.isContent( 'imageBlock' ); // -> true\n     * schema.isContent( 'horizontalLine' ); // -> true\n     *\n     * const text = writer.createText( 'foo' );\n     * schema.isContent( text ); // -> true\n     * ```\n     *\n     * See the {@glink framework/deep-dive/schema#content-elements Content elements section} of\n     * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.\n     */\n    isContent(item) {\n        const def = this.getDefinition(item);\n        if (!def) {\n            return false;\n        }\n        return !!(def.isContent || def.isObject);\n    }\n    /**\n     * Checks whether the given node (`child`) can be a child of the given context.\n     *\n     * ```ts\n     * schema.checkChild( model.document.getRoot(), paragraph ); // -> false\n     *\n     * schema.register( 'paragraph', {\n     * \tallowIn: '$root'\n     * } );\n     * schema.checkChild( model.document.getRoot(), paragraph ); // -> true\n     * ```\n     *\n     * Note: When verifying whether the given node can be a child of the given context, the\n     * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n     * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n     * It happens if one of the context's elements does not allow its child.\n     *\n     * @fires checkChild\n     * @param context The context in which the child will be checked.\n     * @param def The child to check.\n     */\n    checkChild(context, def) {\n        // Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n        if (!def) {\n            return false;\n        }\n        return this._checkContextMatch(def, context);\n    }\n    /**\n     * Checks whether the given attribute can be applied in the given context (on the last\n     * item of the context).\n     *\n     * ```ts\n     * schema.checkAttribute( textNode, 'bold' ); // -> false\n     *\n     * schema.extend( '$text', {\n     * \tallowAttributes: 'bold'\n     * } );\n     * schema.checkAttribute( textNode, 'bold' ); // -> true\n     * ```\n     *\n     * @fires checkAttribute\n     * @param context The context in which the attribute will be checked.\n     */\n    checkAttribute(context, attributeName) {\n        const def = this.getDefinition(context.last);\n        if (!def) {\n            return false;\n        }\n        return def.allowAttributes.includes(attributeName);\n    }\n    /**\n     * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n     *\n     * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n     *\n     * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n     * will be valid.\n     *\n     * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n     * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n     *\n     * @param positionOrBaseElement The position or base element to which the `elementToMerge` will be merged.\n     * @param elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n     */\n    checkMerge(positionOrBaseElement, elementToMerge) {\n        if (positionOrBaseElement instanceof Position) {\n            const nodeBefore = positionOrBaseElement.nodeBefore;\n            const nodeAfter = positionOrBaseElement.nodeAfter;\n            if (!(nodeBefore instanceof Element)) {\n                /**\n                 * The node before the merge position must be an element.\n                 *\n                 * @error schema-check-merge-no-element-before\n                 */\n                throw new CKEditorError('schema-check-merge-no-element-before', this);\n            }\n            if (!(nodeAfter instanceof Element)) {\n                /**\n                 * The node after the merge position must be an element.\n                 *\n                 * @error schema-check-merge-no-element-after\n                 */\n                throw new CKEditorError('schema-check-merge-no-element-after', this);\n            }\n            return this.checkMerge(nodeBefore, nodeAfter);\n        }\n        for (const child of elementToMerge.getChildren()) {\n            if (!this.checkChild(positionOrBaseElement, child)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Allows registering a callback to the {@link #checkChild} method calls.\n     *\n     * Callbacks allow you to implement rules which are not otherwise possible to achieve\n     * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n     * For example, by using this method you can disallow elements in specific contexts.\n     *\n     * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n     * you can use that event instead.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Disallow heading1 directly inside a blockQuote.\n     * schema.addChildCheck( ( context, childDefinition ) => {\n     * \tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n     * \t\treturn false;\n     * \t}\n     * } );\n     * ```\n     *\n     * Which translates to:\n     *\n     * ```ts\n     * schema.on( 'checkChild', ( evt, args ) => {\n     * \tconst context = args[ 0 ];\n     * \tconst childDefinition = args[ 1 ];\n     *\n     * \tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n     * \t\t// Prevent next listeners from being called.\n     * \t\tevt.stop();\n     * \t\t// Set the checkChild()'s return value.\n     * \t\tevt.return = false;\n     * \t}\n     * }, { priority: 'high' } );\n     * ```\n     *\n     * @param callback The callback to be called. It is called with two parameters:\n     * {@link module:engine/model/schema~SchemaContext} (context) instance and\n     * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n     * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n     * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n     */\n    addChildCheck(callback) {\n        this.on('checkChild', (evt, [ctx, childDef]) => {\n            // checkChild() was called with a non-registered child.\n            // In 99% cases such check should return false, so not to overcomplicate all callbacks\n            // don't even execute them.\n            if (!childDef) {\n                return;\n            }\n            const retValue = callback(ctx, childDef);\n            if (typeof retValue == 'boolean') {\n                evt.stop();\n                evt.return = retValue;\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Allows registering a callback to the {@link #checkAttribute} method calls.\n     *\n     * Callbacks allow you to implement rules which are not otherwise possible to achieve\n     * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n     * For example, by using this method you can disallow attribute if node to which it is applied\n     * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n     *\n     * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n     * you can use that event instead.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Disallow bold on $text inside heading1.\n     * schema.addAttributeCheck( ( context, attributeName ) => {\n     * \tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n     * \t\treturn false;\n     * \t}\n     * } );\n     * ```\n     *\n     * Which translates to:\n     *\n     * ```ts\n     * schema.on( 'checkAttribute', ( evt, args ) => {\n     * \tconst context = args[ 0 ];\n     * \tconst attributeName = args[ 1 ];\n     *\n     * \tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n     * \t\t// Prevent next listeners from being called.\n     * \t\tevt.stop();\n     * \t\t// Set the checkAttribute()'s return value.\n     * \t\tevt.return = false;\n     * \t}\n     * }, { priority: 'high' } );\n     * ```\n     *\n     * @param callback The callback to be called. It is called with two parameters:\n     * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n     * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n     * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n     */\n    addAttributeCheck(callback) {\n        this.on('checkAttribute', (evt, [ctx, attributeName]) => {\n            const retValue = callback(ctx, attributeName);\n            if (typeof retValue == 'boolean') {\n                evt.stop();\n                evt.return = retValue;\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * This method allows assigning additional metadata to the model attributes. For example,\n     * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n     * used to mark formatting attributes (like `bold` or `italic`).\n     *\n     * ```ts\n     * // Mark bold as a formatting attribute.\n     * schema.setAttributeProperties( 'bold', {\n     * \tisFormatting: true\n     * } );\n     *\n     * // Override code not to be considered a formatting markup.\n     * schema.setAttributeProperties( 'code', {\n     * \tisFormatting: false\n     * } );\n     * ```\n     *\n     * Properties are not limited to members defined in the\n     * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n     *\n     * ```ts\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \tcustomProperty: 'value'\n     * } );\n     * ```\n     *\n     * Subsequent calls with the same attribute will extend its custom properties:\n     *\n     * ```ts\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \tone: 1\n     * } );\n     *\n     * schema.setAttributeProperties( 'blockQuote', {\n     * \ttwo: 2\n     * } );\n     *\n     * console.log( schema.getAttributeProperties( 'blockQuote' ) );\n     * // Logs: { one: 1, two: 2 }\n     * ```\n     *\n     * @param attributeName A name of the attribute to receive the properties.\n     * @param properties A dictionary of properties.\n     */\n    setAttributeProperties(attributeName, properties) {\n        this._attributeProperties[attributeName] = Object.assign(this.getAttributeProperties(attributeName), properties);\n    }\n    /**\n     * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n     *\n     * @param attributeName A name of the attribute.\n     */\n    getAttributeProperties(attributeName) {\n        return this._attributeProperties[attributeName] || {};\n    }\n    /**\n     * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n     * selection/range/position or the root otherwise.\n     *\n     * @param selectionOrRangeOrPosition The selection/range/position to check.\n     * @returns The lowest limit element containing the entire `selectionOrRangeOrPosition`.\n     */\n    getLimitElement(selectionOrRangeOrPosition) {\n        let element;\n        if (selectionOrRangeOrPosition instanceof Position) {\n            element = selectionOrRangeOrPosition.parent;\n        }\n        else {\n            const ranges = selectionOrRangeOrPosition instanceof Range ?\n                [selectionOrRangeOrPosition] :\n                Array.from(selectionOrRangeOrPosition.getRanges());\n            // Find the common ancestor for all selection's ranges.\n            element = ranges\n                .reduce((element, range) => {\n                const rangeCommonAncestor = range.getCommonAncestor();\n                if (!element) {\n                    return rangeCommonAncestor;\n                }\n                return element.getCommonAncestor(rangeCommonAncestor, { includeSelf: true });\n            }, null);\n        }\n        while (!this.isLimit(element)) {\n            if (element.parent) {\n                element = element.parent;\n            }\n            else {\n                break;\n            }\n        }\n        return element;\n    }\n    /**\n     * Checks whether the attribute is allowed in selection:\n     *\n     * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n     * * if the selection is collapsed, then checks if on the selection position there's a text with the\n     * specified attribute allowed.\n     *\n     * @param selection Selection which will be checked.\n     * @param attribute The name of the attribute to check.\n     */\n    checkAttributeInSelection(selection, attribute) {\n        if (selection.isCollapsed) {\n            const firstPosition = selection.getFirstPosition();\n            const context = [\n                ...firstPosition.getAncestors(),\n                new Text('', selection.getAttributes())\n            ];\n            // Check whether schema allows for a text with the attribute in the selection.\n            return this.checkAttribute(context, attribute);\n        }\n        else {\n            const ranges = selection.getRanges();\n            // For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n            for (const range of ranges) {\n                for (const value of range) {\n                    if (this.checkAttribute(value.item, attribute)) {\n                        // If we found a node that is allowed to have the attribute, return true.\n                        return true;\n                    }\n                }\n            }\n        }\n        // If we haven't found such node, return false.\n        return false;\n    }\n    /**\n     * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n     *\n     * @param ranges Ranges to be validated.\n     * @param attribute The name of the attribute to check.\n     * @returns Ranges in which the attribute is allowed.\n     */\n    *getValidRanges(ranges, attribute) {\n        ranges = convertToMinimalFlatRanges(ranges);\n        for (const range of ranges) {\n            yield* this._getValidRangesForRange(range, attribute);\n        }\n    }\n    /**\n     * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n     * nearest to that `position` and is a correct range for selection.\n     *\n     * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n     * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n     * the {@link module:engine/model/schema~Schema schema}.\n     *\n     * Direction of searching for the nearest correct selection range can be specified as:\n     *\n     * * `both` - searching will be performed in both ways,\n     * * `forward` - searching will be performed only forward,\n     * * `backward` - searching will be performed only backward.\n     *\n     * When valid selection range cannot be found, `null` is returned.\n     *\n     * @param position Reference position where new selection range should be looked for.\n     * @param direction Search direction.\n     * @returns Nearest selection range or `null` if one cannot be found.\n     */\n    getNearestSelectionRange(position, direction = 'both') {\n        // Return collapsed range if provided position is valid.\n        if (this.checkChild(position, '$text')) {\n            return new Range(position);\n        }\n        let backwardWalker, forwardWalker;\n        // Never leave a limit element.\n        const limitElement = position.getAncestors().reverse().find(item => this.isLimit(item)) ||\n            position.root;\n        if (direction == 'both' || direction == 'backward') {\n            backwardWalker = new TreeWalker({\n                boundaries: Range._createIn(limitElement),\n                startPosition: position,\n                direction: 'backward'\n            });\n        }\n        if (direction == 'both' || direction == 'forward') {\n            forwardWalker = new TreeWalker({\n                boundaries: Range._createIn(limitElement),\n                startPosition: position\n            });\n        }\n        for (const data of combineWalkers(backwardWalker, forwardWalker)) {\n            const type = (data.walker == backwardWalker ? 'elementEnd' : 'elementStart');\n            const value = data.value;\n            if (value.type == type && this.isObject(value.item)) {\n                return Range._createOn(value.item);\n            }\n            if (this.checkChild(value.nextPosition, '$text')) {\n                return new Range(value.nextPosition);\n            }\n        }\n        return null;\n    }\n    /**\n     * Tries to find position ancestors that allow to insert a given node.\n     * It starts searching from the given position and goes node by node to the top of the model tree\n     * as long as a {@link module:engine/model/schema~Schema#isLimit limit element}, an\n     * {@link module:engine/model/schema~Schema#isObject object element} or a topmost ancestor is not reached.\n     *\n     * @param position The position that the search will start from.\n     * @param node The node for which an allowed parent should be found or its name.\n     * @returns Allowed parent or null if nothing was found.\n     */\n    findAllowedParent(position, node) {\n        let parent = position.parent;\n        while (parent) {\n            if (this.checkChild(parent, node)) {\n                return parent;\n            }\n            // Do not split limit elements.\n            if (this.isLimit(parent)) {\n                return null;\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n    /**\n     * Sets attributes allowed by the schema on a given node.\n     *\n     * @param node A node to set attributes on.\n     * @param attributes Attributes keys and values.\n     * @param writer An instance of the model writer.\n     */\n    setAllowedAttributes(node, attributes, writer) {\n        const model = writer.model;\n        for (const [attributeName, attributeValue] of Object.entries(attributes)) {\n            if (model.schema.checkAttribute(node, attributeName)) {\n                writer.setAttribute(attributeName, attributeValue, node);\n            }\n        }\n    }\n    /**\n     * Removes attributes disallowed by the schema.\n     *\n     * @param nodes Nodes that will be filtered.\n     */\n    removeDisallowedAttributes(nodes, writer) {\n        for (const node of nodes) {\n            // When node is a `Text` it has no children, so just filter it out.\n            if (node.is('$text')) {\n                removeDisallowedAttributeFromNode(this, node, writer);\n            }\n            // In a case of `Element` iterates through positions between nodes inside this element\n            // and filter out node before the current position, or position parent when position\n            // is at start of an element. Using positions prevent from omitting merged nodes\n            // see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n            else {\n                const rangeInNode = Range._createIn(node);\n                const positionsInRange = rangeInNode.getPositions();\n                for (const position of positionsInRange) {\n                    const item = position.nodeBefore || position.parent;\n                    removeDisallowedAttributeFromNode(this, item, writer);\n                }\n            }\n        }\n    }\n    /**\n     * Gets attributes of a node that have a given property.\n     *\n     * @param node Node to get attributes from.\n     * @param propertyName Name of the property that attribute must have to return it.\n     * @param propertyValue Desired value of the property that we want to check.\n     * When `undefined` attributes will be returned if they have set a given property no matter what the value is. If specified it will\n     * return attributes which given property's value is equal to this parameter.\n     * @returns Object with attributes' names as key and attributes' values as value.\n     */\n    getAttributesWithProperty(node, propertyName, propertyValue) {\n        const attributes = {};\n        for (const [attributeName, attributeValue] of node.getAttributes()) {\n            const attributeProperties = this.getAttributeProperties(attributeName);\n            if (attributeProperties[propertyName] === undefined) {\n                continue;\n            }\n            if (propertyValue === undefined || propertyValue === attributeProperties[propertyName]) {\n                attributes[attributeName] = attributeValue;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates an instance of the schema context.\n     */\n    createContext(context) {\n        return new SchemaContext(context);\n    }\n    _clearCache() {\n        this._compiledDefinitions = null;\n    }\n    _compile() {\n        const compiledDefinitions = {};\n        const sourceRules = this._sourceDefinitions;\n        const itemNames = Object.keys(sourceRules);\n        for (const itemName of itemNames) {\n            compiledDefinitions[itemName] = compileBaseItemRule(sourceRules[itemName], itemName);\n        }\n        for (const itemName of itemNames) {\n            compileAllowChildren(compiledDefinitions, itemName);\n        }\n        for (const itemName of itemNames) {\n            compileAllowContentOf(compiledDefinitions, itemName);\n        }\n        for (const itemName of itemNames) {\n            compileAllowWhere(compiledDefinitions, itemName);\n        }\n        for (const itemName of itemNames) {\n            compileAllowAttributesOf(compiledDefinitions, itemName);\n            compileInheritPropertiesFrom(compiledDefinitions, itemName);\n        }\n        for (const itemName of itemNames) {\n            cleanUpAllowIn(compiledDefinitions, itemName);\n            setupAllowChildren(compiledDefinitions, itemName);\n            cleanUpAllowAttributes(compiledDefinitions, itemName);\n        }\n        this._compiledDefinitions = compiledDefinitions;\n    }\n    _checkContextMatch(def, context, contextItemIndex = context.length - 1) {\n        const contextItem = context.getItem(contextItemIndex);\n        if (def.allowIn.includes(contextItem.name)) {\n            if (contextItemIndex == 0) {\n                return true;\n            }\n            else {\n                const parentRule = this.getDefinition(contextItem);\n                return this._checkContextMatch(parentRule, context, contextItemIndex - 1);\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n     * inside the given range on which the attribute can be applied.\n     *\n     * This is a helper function for {@link ~Schema#getValidRanges}.\n     *\n     * @param range The range to process.\n     * @param attribute The name of the attribute to check.\n     * @returns Ranges in which the attribute is allowed.\n     */\n    *_getValidRangesForRange(range, attribute) {\n        let start = range.start;\n        let end = range.start;\n        for (const item of range.getItems({ shallow: true })) {\n            if (item.is('element')) {\n                yield* this._getValidRangesForRange(Range._createIn(item), attribute);\n            }\n            if (!this.checkAttribute(item, attribute)) {\n                if (!start.isEqual(end)) {\n                    yield new Range(start, end);\n                }\n                start = Position._createAfter(item);\n            }\n            end = Position._createAfter(item);\n        }\n        if (!start.isEqual(end)) {\n            yield new Range(start, end);\n        }\n    }\n}\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n * ```xml\n * <$root>\n * \t<blockQuote>\n * \t\t<paragraph>\n * \t\t\t^\n * \t\t</paragraph>\n * \t</blockQuote>\n * </$root>\n * ```\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n    /**\n     * Creates an instance of the context.\n     */\n    constructor(context) {\n        if (context instanceof SchemaContext) {\n            return context;\n        }\n        let items;\n        if (typeof context == 'string') {\n            items = [context];\n        }\n        else if (!Array.isArray(context)) {\n            // `context` is item or position.\n            // Position#getAncestors() doesn't accept any parameters but it works just fine here.\n            items = context.getAncestors({ includeSelf: true });\n        }\n        else {\n            items = context;\n        }\n        this._items = items.map(mapContextItem);\n    }\n    /**\n     * The number of items.\n     */\n    get length() {\n        return this._items.length;\n    }\n    /**\n     * The last item (the lowest node).\n     */\n    get last() {\n        return this._items[this._items.length - 1];\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all context items.\n     */\n    [Symbol.iterator]() {\n        return this._items[Symbol.iterator]();\n    }\n    /**\n     * Returns a new schema context instance with an additional item.\n     *\n     * Item can be added as:\n     *\n     * ```ts\n     * const context = new SchemaContext( [ '$root' ] );\n     *\n     * // An element.\n     * const fooElement = writer.createElement( 'fooElement' );\n     * const newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n     *\n     * // A text node.\n     * const text = writer.createText( 'foobar' );\n     * const newContext = context.push( text ); // [ '$root', '$text' ]\n     *\n     * // A string (element name).\n     * const newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n     * ```\n     *\n     * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n     * (without ancestors).\n     *\n     * @param item An item that will be added to the current context.\n     * @returns A new schema context instance with an additional item.\n     */\n    push(item) {\n        const ctx = new SchemaContext([item]);\n        ctx._items = [...this._items, ...ctx._items];\n        return ctx;\n    }\n    /**\n     * Gets an item on the given index.\n     */\n    getItem(index) {\n        return this._items[index];\n    }\n    /**\n     * Returns the names of items.\n     */\n    *getNames() {\n        yield* this._items.map(item => item.name);\n    }\n    /**\n     * Checks whether the context ends with the given nodes.\n     *\n     * ```ts\n     * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n     *\n     * ctx.endsWith( '$text' ); // -> true\n     * ctx.endsWith( 'paragraph $text' ); // -> true\n     * ctx.endsWith( '$root' ); // -> false\n     * ctx.endsWith( 'paragraph' ); // -> false\n     * ```\n     */\n    endsWith(query) {\n        return Array.from(this.getNames()).join(' ').endsWith(query);\n    }\n    /**\n     * Checks whether the context starts with the given nodes.\n     *\n     * ```ts\n     * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n     *\n     * ctx.endsWith( '$root' ); // -> true\n     * ctx.endsWith( '$root paragraph' ); // -> true\n     * ctx.endsWith( '$text' ); // -> false\n     * ctx.endsWith( 'paragraph' ); // -> false\n     * ```\n     */\n    startsWith(query) {\n        return Array.from(this.getNames()).join(' ').startsWith(query);\n    }\n}\nfunction compileBaseItemRule(sourceItemRules, itemName) {\n    const itemRule = {\n        name: itemName,\n        allowIn: [],\n        allowContentOf: [],\n        allowWhere: [],\n        allowAttributes: [],\n        allowAttributesOf: [],\n        allowChildren: [],\n        inheritTypesFrom: []\n    };\n    copyTypes(sourceItemRules, itemRule);\n    copyProperty(sourceItemRules, itemRule, 'allowIn');\n    copyProperty(sourceItemRules, itemRule, 'allowContentOf');\n    copyProperty(sourceItemRules, itemRule, 'allowWhere');\n    copyProperty(sourceItemRules, itemRule, 'allowAttributes');\n    copyProperty(sourceItemRules, itemRule, 'allowAttributesOf');\n    copyProperty(sourceItemRules, itemRule, 'allowChildren');\n    copyProperty(sourceItemRules, itemRule, 'inheritTypesFrom');\n    makeInheritAllWork(sourceItemRules, itemRule);\n    return itemRule;\n}\nfunction compileAllowChildren(compiledDefinitions, itemName) {\n    const item = compiledDefinitions[itemName];\n    for (const allowChildrenItem of item.allowChildren) {\n        const allowedChildren = compiledDefinitions[allowChildrenItem];\n        // The allowChildren property may point to an unregistered element.\n        if (!allowedChildren) {\n            continue;\n        }\n        allowedChildren.allowIn.push(itemName);\n    }\n    // The allowIn property already includes correct items, reset the allowChildren property\n    // to avoid duplicates later when setting up compilation results.\n    item.allowChildren.length = 0;\n}\nfunction compileAllowContentOf(compiledDefinitions, itemName) {\n    for (const allowContentOfItemName of compiledDefinitions[itemName].allowContentOf) {\n        // The allowContentOf property may point to an unregistered element.\n        if (compiledDefinitions[allowContentOfItemName]) {\n            const allowedChildren = getAllowedChildren(compiledDefinitions, allowContentOfItemName);\n            allowedChildren.forEach(allowedItem => {\n                allowedItem.allowIn.push(itemName);\n            });\n        }\n    }\n    delete compiledDefinitions[itemName].allowContentOf;\n}\nfunction compileAllowWhere(compiledDefinitions, itemName) {\n    for (const allowWhereItemName of compiledDefinitions[itemName].allowWhere) {\n        const inheritFrom = compiledDefinitions[allowWhereItemName];\n        // The allowWhere property may point to an unregistered element.\n        if (inheritFrom) {\n            const allowedIn = inheritFrom.allowIn;\n            compiledDefinitions[itemName].allowIn.push(...allowedIn);\n        }\n    }\n    delete compiledDefinitions[itemName].allowWhere;\n}\nfunction compileAllowAttributesOf(compiledDefinitions, itemName) {\n    for (const allowAttributeOfItem of compiledDefinitions[itemName].allowAttributesOf) {\n        const inheritFrom = compiledDefinitions[allowAttributeOfItem];\n        if (inheritFrom) {\n            const inheritAttributes = inheritFrom.allowAttributes;\n            compiledDefinitions[itemName].allowAttributes.push(...inheritAttributes);\n        }\n    }\n    delete compiledDefinitions[itemName].allowAttributesOf;\n}\nfunction compileInheritPropertiesFrom(compiledDefinitions, itemName) {\n    const item = compiledDefinitions[itemName];\n    for (const inheritPropertiesOfItem of item.inheritTypesFrom) {\n        const inheritFrom = compiledDefinitions[inheritPropertiesOfItem];\n        if (inheritFrom) {\n            const typeNames = Object.keys(inheritFrom).filter(name => name.startsWith('is'));\n            for (const name of typeNames) {\n                if (!(name in item)) {\n                    item[name] = inheritFrom[name];\n                }\n            }\n        }\n    }\n    delete item.inheritTypesFrom;\n}\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn(compiledDefinitions, itemName) {\n    const itemRule = compiledDefinitions[itemName];\n    const existingItems = itemRule.allowIn.filter(itemToCheck => compiledDefinitions[itemToCheck]);\n    itemRule.allowIn = Array.from(new Set(existingItems));\n}\n// Setup allowChildren items based on allowIn.\nfunction setupAllowChildren(compiledDefinitions, itemName) {\n    const itemRule = compiledDefinitions[itemName];\n    for (const allowedParentItemName of itemRule.allowIn) {\n        const allowedParentItem = compiledDefinitions[allowedParentItemName];\n        allowedParentItem.allowChildren.push(itemName);\n    }\n}\nfunction cleanUpAllowAttributes(compiledDefinitions, itemName) {\n    const itemRule = compiledDefinitions[itemName];\n    itemRule.allowAttributes = Array.from(new Set(itemRule.allowAttributes));\n}\nfunction copyTypes(sourceItemRules, itemRule) {\n    for (const sourceItemRule of sourceItemRules) {\n        const typeNames = Object.keys(sourceItemRule).filter(name => name.startsWith('is'));\n        for (const name of typeNames) {\n            itemRule[name] = !!sourceItemRule[name];\n        }\n    }\n}\nfunction copyProperty(sourceItemRules, itemRule, propertyName) {\n    for (const sourceItemRule of sourceItemRules) {\n        const value = sourceItemRule[propertyName];\n        if (typeof value == 'string') {\n            itemRule[propertyName].push(value);\n        }\n        else if (Array.isArray(value)) {\n            itemRule[propertyName].push(...value);\n        }\n    }\n}\nfunction makeInheritAllWork(sourceItemRules, itemRule) {\n    for (const sourceItemRule of sourceItemRules) {\n        const inheritFrom = sourceItemRule.inheritAllFrom;\n        if (inheritFrom) {\n            itemRule.allowContentOf.push(inheritFrom);\n            itemRule.allowWhere.push(inheritFrom);\n            itemRule.allowAttributesOf.push(inheritFrom);\n            itemRule.inheritTypesFrom.push(inheritFrom);\n        }\n    }\n}\nfunction getAllowedChildren(compiledDefinitions, itemName) {\n    const itemRule = compiledDefinitions[itemName];\n    return getValues(compiledDefinitions).filter(def => def.allowIn.includes(itemRule.name));\n}\nfunction getValues(obj) {\n    return Object.keys(obj).map(key => obj[key]);\n}\nfunction mapContextItem(ctxItem) {\n    if (typeof ctxItem == 'string' || ctxItem.is('documentFragment')) {\n        return {\n            name: typeof ctxItem == 'string' ? ctxItem : '$documentFragment',\n            *getAttributeKeys() { },\n            getAttribute() { }\n        };\n    }\n    else {\n        return {\n            // '$text' means text nodes and text proxies.\n            name: ctxItem.is('element') ? ctxItem.name : '$text',\n            *getAttributeKeys() {\n                yield* ctxItem.getAttributeKeys();\n            },\n            getAttribute(key) {\n                return ctxItem.getAttribute(key);\n            }\n        };\n    }\n}\n/**\n * Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n * is provided it will return data only from that walker.\n *\n * @param backward Walker iterating in backward direction.\n * @param forward Walker iterating in forward direction.\n * @returns Object returned at each iteration contains `value` and `walker` (informing which walker returned\n * given value) fields.\n */\nfunction* combineWalkers(backward, forward) {\n    let done = false;\n    while (!done) {\n        done = true;\n        if (backward) {\n            const step = backward.next();\n            if (!step.done) {\n                done = false;\n                yield {\n                    walker: backward,\n                    value: step.value\n                };\n            }\n        }\n        if (forward) {\n            const step = forward.next();\n            if (!step.done) {\n                done = false;\n                yield {\n                    walker: forward,\n                    value: step.value\n                };\n            }\n        }\n    }\n}\n/**\n * Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n * all those minimal flat ranges.\n *\n * @param ranges Ranges to process.\n * @returns Minimal flat ranges of given `ranges`.\n */\nfunction* convertToMinimalFlatRanges(ranges) {\n    for (const range of ranges) {\n        yield* range.getMinimalFlatRanges();\n    }\n}\nfunction removeDisallowedAttributeFromNode(schema, node, writer) {\n    for (const attribute of node.getAttributeKeys()) {\n        if (!schema.checkAttribute(node, attribute)) {\n            writer.removeAttribute(attribute, node);\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/upcastdispatcher\n */\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema'; // eslint-disable-line no-duplicate-imports\nimport { isParagraphable, wrapInParagraph } from '../model/utils/autoparagraphing';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Upcast dispatcher is a central point of the view-to-model conversion, which is a process of\n * converting a given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element view element} into a correct model structure.\n *\n * During the conversion process, the dispatcher fires events for all {@link module:engine/view/node~Node view nodes}\n * from the converted view document fragment.\n * Special callbacks called \"converters\" should listen to these events in order to convert the view nodes.\n *\n * The second parameter of the callback is the `data` object with the following properties:\n *\n * * `data.viewItem` contains a {@link module:engine/view/node~Node view node} or a\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback.\n * * `data.modelRange` is used to point to the result\n * of the current conversion (e.g. the element that is being inserted)\n * and is always a {@link module:engine/model/range~Range} when the conversion succeeds.\n * * `data.modelCursor` is a {@link module:engine/model/position~Position position} on which the converter should insert\n * the newly created items.\n *\n * The third parameter of the callback is an instance of {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n * which provides additional tools for converters.\n *\n * You can read more about conversion in the {@glink framework/deep-dive/conversion/upcast Upcast conversion} guide.\n *\n * Examples of event-based converters:\n *\n * ```ts\n * // A converter for links (<a>).\n * editor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n * \tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n * \t\t// The <a> element is inline and is represented by an attribute in the model.\n * \t\t// This is why you need to convert only children.\n * \t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n * \t\tfor ( let item of modelRange.getItems() ) {\n * \t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n * \t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n * \t\t\t}\n * \t\t}\n * \t}\n * } );\n *\n * // Convert <p> element's font-size style.\n * // Note: You should use a low-priority observer in order to ensure that\n * // it is executed after the element-to-element converter.\n * editor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n * \tconst { consumable, schema, writer } = conversionApi;\n *\n * \tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n * \t\treturn;\n * \t}\n *\n * \tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n * \t// Do not go for the model element after data.modelCursor because it might happen\n * \t// that a single view element was converted to multiple model elements. Get all of them.\n * \tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n * \t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n * \t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n * \t\t}\n * \t}\n * }, { priority: 'low' } );\n *\n * // Convert all elements which have no custom converter into a paragraph (autoparagraphing).\n * editor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n * \t// Check if an element can be converted.\n * \tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n * \t\t// When an element is already consumed by higher priority converters, do nothing.\n * \t\treturn;\n * \t}\n *\n * \tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n * \t// Try to safely insert a paragraph at the model cursor - it will find an allowed parent for the current element.\n * \tif ( !conversionApi.safeInsert( paragraph, data.modelCursor ) ) {\n * \t\t// When an element was not inserted, it means that you cannot insert a paragraph at this position.\n * \t\treturn;\n * \t}\n *\n * \t// Consume the inserted element.\n * \tconversionApi.consumable.consume( data.viewItem, { name: data.viewItem.name } ) );\n *\n * \t// Convert the children to a paragraph.\n * \tconst { modelRange } = conversionApi.convertChildren( data.viewItem,  paragraph ) );\n *\n * \t// Update `modelRange` and `modelCursor` in the `data` as a conversion result.\n * \tconversionApi.updateConversionResult( paragraph, data );\n * }, { priority: 'low' } );\n * ```\n *\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher extends EmitterMixin() {\n    /**\n     * Creates an upcast dispatcher that operates using the passed API.\n     *\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n     * @param conversionApi Additional properties for an interface that will be passed to events fired\n     * by the upcast dispatcher.\n     */\n    constructor(conversionApi) {\n        super();\n        /**\n         * The list of elements that were created during splitting.\n         *\n         * After the conversion process, the list is cleared.\n         */\n        this._splitParts = new Map();\n        /**\n         * The list of cursor parent elements that were created during splitting.\n         *\n         * After the conversion process the list is cleared.\n         */\n        this._cursorParents = new Map();\n        /**\n         * The position in the temporary structure where the converted content is inserted. The structure reflects the context of\n         * the target position where the content will be inserted. This property is built based on the context parameter of the\n         * convert method.\n         */\n        this._modelCursor = null;\n        /**\n         * The list of elements that were created during the splitting but should not get removed on conversion end even if they are empty.\n         *\n         * The list is cleared after the conversion process.\n         */\n        this._emptyElementsToKeep = new Set();\n        this.conversionApi = {\n            ...conversionApi,\n            consumable: null,\n            writer: null,\n            store: null,\n            convertItem: (viewItem, modelCursor) => this._convertItem(viewItem, modelCursor),\n            convertChildren: (viewElement, positionOrElement) => this._convertChildren(viewElement, positionOrElement),\n            safeInsert: (modelNode, position) => this._safeInsert(modelNode, position),\n            updateConversionResult: (modelElement, data) => this._updateConversionResult(modelElement, data),\n            // Advanced API - use only if custom position handling is needed.\n            splitToAllowedParent: (modelNode, modelCursor) => this._splitToAllowedParent(modelNode, modelCursor),\n            getSplitParts: modelElement => this._getSplitParts(modelElement),\n            keepEmptyElement: modelElement => this._keepEmptyElement(modelElement)\n        };\n    }\n    /**\n     * Starts the conversion process. The entry point for the conversion.\n     *\n     * @fires element\n     * @fires text\n     * @fires documentFragment\n     * @param viewElement The part of the view to be converted.\n     * @param writer An instance of the model writer.\n     * @param context Elements will be converted according to this context.\n     * @returns Model data that is the result of the conversion process\n     * wrapped in `DocumentFragment`. Converted marker elements will be set as the document fragment's\n     * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n     */\n    convert(viewElement, writer, context = ['$root']) {\n        this.fire('viewCleanup', viewElement);\n        // Create context tree and set position in the top element.\n        // Items will be converted according to this position.\n        this._modelCursor = createContextTree(context, writer);\n        // Store writer in conversion as a conversion API\n        // to be sure that conversion process will use the same batch.\n        this.conversionApi.writer = writer;\n        // Create consumable values list for conversion process.\n        this.conversionApi.consumable = ViewConsumable.createFrom(viewElement);\n        // Custom data stored by converter for conversion process.\n        this.conversionApi.store = {};\n        // Do the conversion.\n        const { modelRange } = this._convertItem(viewElement, this._modelCursor);\n        // Conversion result is always a document fragment so let's create it.\n        const documentFragment = writer.createDocumentFragment();\n        // When there is a conversion result.\n        if (modelRange) {\n            // Remove all empty elements that were create while splitting.\n            this._removeEmptyElements();\n            // Move all items that were converted in context tree to the document fragment.\n            for (const item of Array.from(this._modelCursor.parent.getChildren())) {\n                writer.append(item, documentFragment);\n            }\n            // Extract temporary markers elements from model and set as static markers collection.\n            documentFragment.markers = extractMarkersFromModelFragment(documentFragment, writer);\n        }\n        // Clear context position.\n        this._modelCursor = null;\n        // Clear split elements & parents lists.\n        this._splitParts.clear();\n        this._cursorParents.clear();\n        this._emptyElementsToKeep.clear();\n        // Clear conversion API.\n        this.conversionApi.writer = null;\n        this.conversionApi.store = null;\n        // Return fragment as conversion result.\n        return documentFragment;\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n     */\n    _convertItem(viewItem, modelCursor) {\n        const data = { viewItem, modelCursor, modelRange: null };\n        if (viewItem.is('element')) {\n            this.fire(`element:${viewItem.name}`, data, this.conversionApi);\n        }\n        else if (viewItem.is('$text')) {\n            this.fire('text', data, this.conversionApi);\n        }\n        else {\n            this.fire('documentFragment', data, this.conversionApi);\n        }\n        // Handle incorrect conversion result.\n        if (data.modelRange && !(data.modelRange instanceof ModelRange)) {\n            /**\n             * Incorrect conversion result was dropped.\n             *\n             * {@link module:engine/model/range~Range Model range} should be a conversion result.\n             *\n             * @error view-conversion-dispatcher-incorrect-result\n             */\n            throw new CKEditorError('view-conversion-dispatcher-incorrect-result', this);\n        }\n        return { modelRange: data.modelRange, modelCursor: data.modelCursor };\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n     */\n    _convertChildren(viewItem, elementOrModelCursor) {\n        let nextModelCursor = elementOrModelCursor.is('position') ?\n            elementOrModelCursor : ModelPosition._createAt(elementOrModelCursor, 0);\n        const modelRange = new ModelRange(nextModelCursor);\n        for (const viewChild of Array.from(viewItem.getChildren())) {\n            const result = this._convertItem(viewChild, nextModelCursor);\n            if (result.modelRange instanceof ModelRange) {\n                modelRange.end = result.modelRange.end;\n                nextModelCursor = result.modelCursor;\n            }\n        }\n        return { modelRange, modelCursor: nextModelCursor };\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#safeInsert\n     */\n    _safeInsert(modelNode, position) {\n        // Find allowed parent for element that we are going to insert.\n        // If current parent does not allow to insert element but one of the ancestors does\n        // then split nodes to allowed parent.\n        const splitResult = this._splitToAllowedParent(modelNode, position);\n        // When there is no split result it means that we can't insert element to model tree, so let's skip it.\n        if (!splitResult) {\n            return false;\n        }\n        // Insert element on allowed position.\n        this.conversionApi.writer.insert(modelNode, splitResult.position);\n        return true;\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#updateConversionResult\n     */\n    _updateConversionResult(modelElement, data) {\n        const parts = this._getSplitParts(modelElement);\n        const writer = this.conversionApi.writer;\n        // Set conversion result range - only if not set already.\n        if (!data.modelRange) {\n            data.modelRange = writer.createRange(writer.createPositionBefore(modelElement), writer.createPositionAfter(parts[parts.length - 1]));\n        }\n        const savedCursorParent = this._cursorParents.get(modelElement);\n        // Now we need to check where the `modelCursor` should be.\n        if (savedCursorParent) {\n            // If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n            //\n            // before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n            // after:  <allowed><notAllowed>foo</notAllowed> <converted></converted> <notAllowed>[]</notAllowed></allowed>\n            data.modelCursor = writer.createPositionAt(savedCursorParent, 0);\n        }\n        else {\n            // Otherwise just continue after inserted element.\n            data.modelCursor = data.modelRange.end;\n        }\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n     */\n    _splitToAllowedParent(node, modelCursor) {\n        const { schema, writer } = this.conversionApi;\n        // Try to find allowed parent.\n        let allowedParent = schema.findAllowedParent(modelCursor, node);\n        if (allowedParent) {\n            // When current position parent allows to insert node then return this position.\n            if (allowedParent === modelCursor.parent) {\n                return { position: modelCursor };\n            }\n            // When allowed parent is in context tree (it's outside the converted tree).\n            if (this._modelCursor.parent.getAncestors().includes(allowedParent)) {\n                allowedParent = null;\n            }\n        }\n        if (!allowedParent) {\n            // Check if the node wrapped with a paragraph would be accepted by the schema.\n            if (!isParagraphable(modelCursor, node, schema)) {\n                return null;\n            }\n            return {\n                position: wrapInParagraph(modelCursor, writer)\n            };\n        }\n        // Split element to allowed parent.\n        const splitResult = this.conversionApi.writer.split(modelCursor, allowedParent);\n        // Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n        //\n        // The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n        // that got split) to the beginning of the other part of that element:\n        //\n        // <limit><a><b><c>X[]Y</c></b><a></limit> ->\n        // <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n        //\n        // After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n        // Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n        // Also, since we split all those elements, each of them has to have the other part.\n        //\n        // With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n        // them with \"opening tags\" in the reverse order. For that we can use a stack.\n        const stack = [];\n        for (const treeWalkerValue of splitResult.range.getWalker()) {\n            if (treeWalkerValue.type == 'elementEnd') {\n                stack.push(treeWalkerValue.item);\n            }\n            else {\n                // There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n                const originalPart = stack.pop();\n                const splitPart = treeWalkerValue.item;\n                this._registerSplitPair(originalPart, splitPart);\n            }\n        }\n        const cursorParent = splitResult.range.end.parent;\n        this._cursorParents.set(node, cursorParent);\n        return {\n            position: splitResult.position,\n            cursorParent\n        };\n    }\n    /**\n     * Registers that a `splitPart` element is a split part of the `originalPart` element.\n     *\n     * The data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n     */\n    _registerSplitPair(originalPart, splitPart) {\n        if (!this._splitParts.has(originalPart)) {\n            this._splitParts.set(originalPart, [originalPart]);\n        }\n        const list = this._splitParts.get(originalPart);\n        this._splitParts.set(splitPart, list);\n        list.push(splitPart);\n    }\n    /**\n     * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n     */\n    _getSplitParts(element) {\n        let parts;\n        if (!this._splitParts.has(element)) {\n            parts = [element];\n        }\n        else {\n            parts = this._splitParts.get(element);\n        }\n        return parts;\n    }\n    /**\n     * Mark an element that were created during the splitting to not get removed on conversion end even if it is empty.\n     */\n    _keepEmptyElement(element) {\n        this._emptyElementsToKeep.add(element);\n    }\n    /**\n     * Checks if there are any empty elements created while splitting and removes them.\n     *\n     * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n     * as some elements might have become empty after other empty elements were removed from them.\n     */\n    _removeEmptyElements() {\n        let anyRemoved = false;\n        for (const element of this._splitParts.keys()) {\n            if (element.isEmpty && !this._emptyElementsToKeep.has(element)) {\n                this.conversionApi.writer.remove(element);\n                this._splitParts.delete(element);\n                anyRemoved = true;\n            }\n        }\n        if (anyRemoved) {\n            this._removeEmptyElements();\n        }\n    }\n}\n/**\n * Traverses given model item and searches elements which marks marker range. Found element is removed from\n * DocumentFragment but path of this element is stored in a Map which is then returned.\n *\n * @param modelItem Fragment of model.\n * @returns List of static markers.\n */\nfunction extractMarkersFromModelFragment(modelItem, writer) {\n    const markerElements = new Set();\n    const markers = new Map();\n    // Create ModelTreeWalker.\n    const range = ModelRange._createIn(modelItem).getItems();\n    // Walk through DocumentFragment and collect marker elements.\n    for (const item of range) {\n        // Check if current element is a marker.\n        if (item.is('element', '$marker')) {\n            markerElements.add(item);\n        }\n    }\n    // Walk through collected marker elements store its path and remove its from the DocumentFragment.\n    for (const markerElement of markerElements) {\n        const markerName = markerElement.getAttribute('data-name');\n        const currentPosition = writer.createPositionBefore(markerElement);\n        // When marker of given name is not stored it means that we have found the beginning of the range.\n        if (!markers.has(markerName)) {\n            markers.set(markerName, new ModelRange(currentPosition.clone()));\n            // Otherwise is means that we have found end of the marker range.\n        }\n        else {\n            markers.get(markerName).end = currentPosition.clone();\n        }\n        // Remove marker element from DocumentFragment.\n        writer.remove(markerElement);\n    }\n    return markers;\n}\n/**\n * Creates model fragment according to given context and returns position in the bottom (the deepest) element.\n */\nfunction createContextTree(contextDefinition, writer) {\n    let position;\n    for (const item of new SchemaContext(contextDefinition)) {\n        const attributes = {};\n        for (const key of item.getAttributeKeys()) {\n            attributes[key] = item.getAttribute(key);\n        }\n        const current = writer.createElement(item.name, attributes);\n        if (position) {\n            writer.insert(current, position);\n        }\n        position = ModelPosition._createAt(current, 0);\n    }\n    return position;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n */\nexport default class BasicHtmlWriter {\n    /**\n     * Returns an HTML string created from the document fragment.\n     */\n    getHtml(fragment) {\n        const doc = document.implementation.createHTMLDocument('');\n        const container = doc.createElement('div');\n        container.appendChild(fragment);\n        return container.innerHTML;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n/* globals DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */\nexport default class HtmlDataProcessor {\n    /**\n     * Creates a new instance of the HTML data processor class.\n     *\n     * @param document The view document instance.\n     */\n    constructor(document) {\n        this.skipComments = true;\n        this.domParser = new DOMParser();\n        this.domConverter = new DomConverter(document, { renderingMode: 'data' });\n        this.htmlWriter = new BasicHtmlWriter();\n    }\n    /**\n     * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n     * to data format &mdash; in this case to an HTML string.\n     *\n     * @returns HTML string.\n     */\n    toData(viewFragment) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this.domConverter.viewToDom(viewFragment);\n        // Convert DOM DocumentFragment to HTML output.\n        return this.htmlWriter.getHtml(domFragment);\n    }\n    /**\n     * Converts the provided HTML string to a view tree.\n     *\n     * @param data An HTML string.\n     * @returns A converted view element.\n     */\n    toView(data) {\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this.domConverter.domToView(domFragment, { skipComments: this.skipComments });\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from the DOM to the view elements.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching all view elements whose content should be treated as raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        this.domConverter.registerRawContentMatcher(pattern);\n    }\n    /**\n     * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n     * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n     *\n     * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n     * bloats the editor data with additional markup.\n     *\n     * This mode may be required by some features and will be turned on by them automatically.\n     *\n     * @param type Whether to use the default or the marked `&nbsp;` block fillers.\n     */\n    useFillerType(type) {\n        this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n    }\n    /**\n     * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n     * the provided data.\n     */\n    _toDom(data) {\n        // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n        // will be preserved in the body collection.\n        // Do it only for data that is not a full HTML document.\n        if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n            data = `<body>${data}</body>`;\n        }\n        const document = this.domParser.parseFromString(data, 'text/html');\n        const fragment = document.createDocumentFragment();\n        const bodyChildNodes = document.body.childNodes;\n        while (bodyChildNodes.length > 0) {\n            fragment.appendChild(bodyChildNodes[0]);\n        }\n        return fragment;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/controller/datacontroller\n */\nimport { CKEditorError, EmitterMixin, ObservableMixin, logWarning } from '@ckeditor/ckeditor5-utils';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertAttributesAndChildren, insertText } from '../conversion/downcasthelpers';\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers';\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\nimport ModelRange from '../model/range';\nimport { autoParagraphEmptyRoots } from '../model/utils/autoparagraphing';\nimport HtmlDataProcessor from '../dataprocessor/htmldataprocessor';\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using the given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n * ```ts\n * editor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n * ```\n */\nexport default class DataController extends EmitterMixin() {\n    /**\n     * Creates a data controller instance.\n     *\n     * @param model Data model.\n     * @param stylesProcessor The styles processor instance.\n     */\n    constructor(model, stylesProcessor) {\n        super();\n        this.model = model;\n        this.mapper = new Mapper();\n        this.downcastDispatcher = new DowncastDispatcher({\n            mapper: this.mapper,\n            schema: model.schema\n        });\n        this.downcastDispatcher.on('insert:$text', insertText(), { priority: 'lowest' });\n        this.downcastDispatcher.on('insert', insertAttributesAndChildren(), { priority: 'lowest' });\n        this.upcastDispatcher = new UpcastDispatcher({\n            schema: model.schema\n        });\n        this.viewDocument = new ViewDocument(stylesProcessor);\n        this.stylesProcessor = stylesProcessor;\n        this.htmlProcessor = new HtmlDataProcessor(this.viewDocument);\n        this.processor = this.htmlProcessor;\n        this._viewWriter = new ViewDowncastWriter(this.viewDocument);\n        // Define default converters for text and elements.\n        //\n        // Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n        // converted to nothing. We therefore add `convertToModelFragment` as a last converter so it converts children of that\n        // element to the document fragment so `<b>foo</b>` will still be converted to `foo` even if there is no converter for `<b>`.\n        this.upcastDispatcher.on('text', convertText(), { priority: 'lowest' });\n        this.upcastDispatcher.on('element', convertToModelFragment(), { priority: 'lowest' });\n        this.upcastDispatcher.on('documentFragment', convertToModelFragment(), { priority: 'lowest' });\n        ObservableMixin().prototype.decorate.call(this, 'init');\n        ObservableMixin().prototype.decorate.call(this, 'set');\n        ObservableMixin().prototype.decorate.call(this, 'get');\n        ObservableMixin().prototype.decorate.call(this, 'toView');\n        ObservableMixin().prototype.decorate.call(this, 'toModel');\n        // Fire the `ready` event when the initialization has completed. Such low-level listener offers the possibility\n        // to plug into the initialization pipeline without interrupting the initialization flow.\n        this.on('init', () => {\n            this.fire('ready');\n        }, { priority: 'lowest' });\n        // Fix empty roots after DataController is 'ready' (note that the init method could be decorated and stopped).\n        // We need to handle this event because initial data could be empty and the post-fixer would not get triggered.\n        this.on('ready', () => {\n            this.model.enqueueChange({ isUndoable: false }, autoParagraphEmptyRoots);\n        }, { priority: 'lowest' });\n    }\n    /**\n     * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n     * formatted by the {@link #processor data processor}.\n     *\n     * A warning is logged when you try to retrieve data for a detached root, as most probably this is a mistake. A detached root should\n     * be treated like it is removed, and you should not save its data. Note, that the detached root data is always an empty string.\n     *\n     * @fires get\n     * @param options Additional configuration for the retrieved data. `DataController` provides two optional\n     * properties: `rootName` and `trim`. Other properties of this object are specified by various editor features.\n     * @param options.rootName Root name. Default 'main'.\n     * @param options.trim Whether returned data should be trimmed. This option is set to `empty` by default,\n     * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n     * use `'none'`. In such cases the exact content will be returned (for example a `<p>&nbsp;</p>` for an empty editor).\n     * @returns Output data.\n     */\n    get(options = {}) {\n        const { rootName = 'main', trim = 'empty' } = options;\n        if (!this._checkIfRootsExists([rootName])) {\n            /**\n             * Cannot get data from a non-existing root. This error is thrown when\n             * {@link module:engine/controller/datacontroller~DataController#get `DataController#get()` method}\n             * is called with a non-existent root name. For example, if there is an editor instance with only `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#get} like:\n             *\n             * ```ts\n             * data.get( { rootName: 'root2' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-get-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-get-non-existent-root', this);\n        }\n        const root = this.model.document.getRoot(rootName);\n        if (!root.isAttached()) {\n            /**\n             * Retrieving document data for a detached root.\n             *\n             * This usually indicates an error as a detached root should be considered \"removed\" and should not be included in the\n             * document data.\n             *\n             * @error datacontroller-get-detached-root\n             */\n            logWarning('datacontroller-get-detached-root', this);\n        }\n        if (trim === 'empty' && !this.model.hasContent(root, { ignoreWhitespaces: true })) {\n            return '';\n        }\n        return this.stringify(root, options);\n    }\n    /**\n     * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n     * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n     * attached to the {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n     *\n     * @param modelElementOrFragment The element whose content will be stringified.\n     * @param options Additional configuration passed to the conversion process.\n     * @returns Output data.\n     */\n    stringify(modelElementOrFragment, options = {}) {\n        // Model -> view.\n        const viewDocumentFragment = this.toView(modelElementOrFragment, options);\n        // View -> data.\n        return this.processor.toData(viewDocumentFragment);\n    }\n    /**\n     * Returns the content of the given {@link module:engine/model/element~Element model element} or\n     * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n     * converters attached to {@link #downcastDispatcher} into a\n     * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n     *\n     * @fires toView\n     * @param modelElementOrFragment Element or document fragment whose content will be converted.\n     * @param options Additional configuration that will be available through the\n     * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi#options} during the conversion process.\n     * @returns Output view DocumentFragment.\n     */\n    toView(modelElementOrFragment, options = {}) {\n        const viewDocument = this.viewDocument;\n        const viewWriter = this._viewWriter;\n        // Clear bindings so the call to this method returns correct results.\n        this.mapper.clearBindings();\n        // First, convert elements.\n        const modelRange = ModelRange._createIn(modelElementOrFragment);\n        const viewDocumentFragment = new ViewDocumentFragment(viewDocument);\n        this.mapper.bindElements(modelElementOrFragment, viewDocumentFragment);\n        // Prepare list of markers.\n        // For document fragment, simply take the markers assigned to this document fragment.\n        // For model root, all markers in that root will be taken.\n        // For model element, we need to check which markers are intersecting with this element and relatively modify the markers' ranges.\n        // Collapsed markers at element boundary, although considered as not intersecting with the element, will also be returned.\n        const markers = modelElementOrFragment.is('documentFragment') ?\n            modelElementOrFragment.markers :\n            _getMarkersRelativeToElement(modelElementOrFragment);\n        this.downcastDispatcher.convert(modelRange, markers, viewWriter, options);\n        return viewDocumentFragment;\n    }\n    /**\n     * Sets the initial input data parsed by the {@link #processor data processor} and\n     * converted by the {@link #upcastDispatcher view-to-model converters}.\n     * Initial data can be only set to a document whose {@link module:engine/model/document~Document#version} is equal 0.\n     *\n     * **Note** This method is {@link module:utils/observablemixin~Observable#decorate decorated} which is\n     * used by e.g. collaborative editing plugin that syncs remote data on init.\n     *\n     * When data is passed as a string, it is initialized on the default `main` root:\n     *\n     * ```ts\n     * dataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root only, as no other is specified.\n     * ```\n     *\n     * To initialize data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:\n     *\n     * ```ts\n     * dataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on both the `main` and `title` roots.\n     * ```\n     *\n     * @fires init\n     * @param data Input data as a string or an object containing the `rootName` - `data`\n     * pairs to initialize data on multiple roots at once.\n     * @returns Promise that is resolved after the data is set on the editor.\n     */\n    init(data) {\n        if (this.model.document.version) {\n            /**\n             * Cannot set initial data to a non-empty {@link module:engine/model/document~Document}.\n             * Initial data should be set once, during the {@link module:core/editor/editor~Editor} initialization,\n             * when the {@link module:engine/model/document~Document#version} is equal 0.\n             *\n             * @error datacontroller-init-document-not-empty\n             */\n            throw new CKEditorError('datacontroller-init-document-not-empty', this);\n        }\n        let initialData = {};\n        if (typeof data === 'string') {\n            initialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n        }\n        else {\n            initialData = data;\n        }\n        if (!this._checkIfRootsExists(Object.keys(initialData))) {\n            /**\n             * Cannot init data on a non-existent root. This error is thrown when\n             * {@link module:engine/controller/datacontroller~DataController#init DataController#init() method}\n             * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#init} like:\n             *\n             * ```ts\n             * data.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-init-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-init-non-existent-root', this);\n        }\n        this.model.enqueueChange({ isUndoable: false }, writer => {\n            for (const rootName of Object.keys(initialData)) {\n                const modelRoot = this.model.document.getRoot(rootName);\n                writer.insert(this.parse(initialData[rootName], modelRoot), modelRoot, 0);\n            }\n        });\n        return Promise.resolve();\n    }\n    /**\n     * Sets the input data parsed by the {@link #processor data processor} and\n     * converted by the {@link #upcastDispatcher view-to-model converters}.\n     * This method can be used any time to replace existing editor data with the new one without clearing the\n     * {@link module:engine/model/document~Document#history document history}.\n     *\n     * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n     * the {@link #parse} method.\n     *\n     * When data is passed as a string it is set on the default `main` root:\n     *\n     * ```ts\n     * dataController.set( '<p>Foo</p>' ); // Sets data on the `main` root, as no other is specified.\n     * ```\n     *\n     * To set data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:\n     *\n     * ```ts\n     * dataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots as specified.\n     * ```\n     *\n     * To set the data with a preserved undo stack and add the change to the undo stack, set `{ isUndoable: true }` as a `batchType` option.\n     *\n     * ```ts\n     * dataController.set( '<p>Foo</p>', { batchType: { isUndoable: true } } );\n     * ```\n     *\n     * @fires set\n     * @param data Input data as a string or an object containing the `rootName` - `data`\n     * pairs to set data on multiple roots at once.\n     * @param options Options for setting data.\n     * @param options.batchType The batch type that will be used to create a batch for the changes applied by this method.\n     * By default, the batch will be set as {@link module:engine/model/batch~Batch#isUndoable not undoable} and the undo stack will be\n     * cleared after the new data is applied (all undo steps will be removed). If the batch type `isUndoable` flag is be set to `true`,\n     * the undo stack will be preserved instead and not cleared when new data is applied.\n     */\n    set(data, options = {}) {\n        let newData = {};\n        if (typeof data === 'string') {\n            newData.main = data; // The default root is 'main'. To set data on a different root, an object should be passed.\n        }\n        else {\n            newData = data;\n        }\n        if (!this._checkIfRootsExists(Object.keys(newData))) {\n            /**\n             * Cannot set data on a non-existent root. This error is thrown when the\n             * {@link module:engine/controller/datacontroller~DataController#set DataController#set() method}\n             * is called with non-existent root name. For example, if there is an editor instance with only the default `main` root,\n             * calling {@link module:engine/controller/datacontroller~DataController#set} like:\n             *\n             * ```ts\n             * data.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n             * ```\n             *\n             * will throw this error.\n             *\n             * @error datacontroller-set-non-existent-root\n             */\n            throw new CKEditorError('datacontroller-set-non-existent-root', this);\n        }\n        this.model.enqueueChange(options.batchType || {}, writer => {\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());\n            for (const rootName of Object.keys(newData)) {\n                // Save to model.\n                const modelRoot = this.model.document.getRoot(rootName);\n                writer.remove(writer.createRangeIn(modelRoot));\n                writer.insert(this.parse(newData[rootName], modelRoot), modelRoot, 0);\n            }\n        });\n    }\n    /**\n     * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n     * attached to the {@link #upcastDispatcher}.\n     *\n     * @see #set\n     * @param data Data to parse.\n     * @param context Base context in which the view will be converted to the model.\n     * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n     * @returns Parsed data.\n     */\n    parse(data, context = '$root') {\n        // data -> view\n        const viewDocumentFragment = this.processor.toView(data);\n        // view -> model\n        return this.toModel(viewDocumentFragment, context);\n    }\n    /**\n     * Returns the result of the given {@link module:engine/view/element~Element view element} or\n     * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n     * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n     *\n     * When marker elements were converted during the conversion process, it will be set as a document fragment's\n     * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n     *\n     * @fires toModel\n     * @param viewElementOrFragment The element or document fragment whose content will be converted.\n     * @param context Base context in which the view will be converted to the model.\n     * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n     * @returns Output document fragment.\n     */\n    toModel(viewElementOrFragment, context = '$root') {\n        return this.model.change(writer => {\n            return this.upcastDispatcher.convert(viewElementOrFragment, writer, context);\n        });\n    }\n    /**\n     * Adds the style processor normalization rules.\n     *\n     * You can implement your own rules as well as use one of the available processor rules:\n     *\n     * * background: {@link module:engine/view/styles/background~addBackgroundRules}\n     * * border: {@link module:engine/view/styles/border~addBorderRules}\n     * * margin: {@link module:engine/view/styles/margin~addMarginRules}\n     * * padding: {@link module:engine/view/styles/padding~addPaddingRules}\n     */\n    addStyleProcessorRules(callback) {\n        callback(this.stylesProcessor);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} on an {@link #htmlProcessor htmlProcessor}\n     * and a {@link #processor processor} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from DOM to view elements.\n     *\n     * The raw data can be later accessed by the {@link module:engine/view/element~Element#getCustomProperty view element custom property}\n     * `\"$rawContent\"`.\n     *\n     * @param pattern Pattern matching all view elements whose content should be treated as a raw data.\n     */\n    registerRawContentMatcher(pattern) {\n        // No need to register the pattern if both the `htmlProcessor` and `processor` are the same instances.\n        if (this.processor && this.processor !== this.htmlProcessor) {\n            this.processor.registerRawContentMatcher(pattern);\n        }\n        this.htmlProcessor.registerRawContentMatcher(pattern);\n    }\n    /**\n     * Removes all event listeners set by the DataController.\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * Checks whether all provided root names are actually existing editor roots.\n     *\n     * @param rootNames Root names to check.\n     * @returns Whether all provided root names are existing editor roots.\n     */\n    _checkIfRootsExists(rootNames) {\n        for (const rootName of rootNames) {\n            if (!this.model.document.getRoot(rootName)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n/**\n * Helper function for downcast conversion.\n *\n * Takes a document element (element that is added to a model document) and checks which markers are inside it. If the marker is collapsed\n * at element boundary, it is considered as contained inside the element and marker range is returned. Otherwise, if the marker is\n * intersecting with the element, the intersection is returned.\n */\nfunction _getMarkersRelativeToElement(element) {\n    const result = [];\n    const doc = element.root.document;\n    if (!doc) {\n        return new Map();\n    }\n    const elementRange = ModelRange._createIn(element);\n    for (const marker of doc.model.markers) {\n        const markerRange = marker.getRange();\n        const isMarkerCollapsed = markerRange.isCollapsed;\n        const isMarkerAtElementBoundary = markerRange.start.isEqual(elementRange.start) || markerRange.end.isEqual(elementRange.end);\n        if (isMarkerCollapsed && isMarkerAtElementBoundary) {\n            result.push([marker.name, markerRange]);\n        }\n        else {\n            const updatedMarkerRange = elementRange.getIntersection(markerRange);\n            if (updatedMarkerRange) {\n                result.push([marker.name, updatedMarkerRange]);\n            }\n        }\n    }\n    // Sort the markers in a stable fashion to ensure that the order in which they are\n    // added to the model's marker collection does not affect how they are\n    // downcast. One particular use case that we are targeting here, is one where\n    // two markers are adjacent but not overlapping, such as an insertion/deletion\n    // suggestion pair representing the replacement of a range of text. In this\n    // case, putting the markers in DOM order causes the first marker's end to be\n    // serialized right after the second marker's start, while putting the markers\n    // in reverse DOM order causes it to be right before the second marker's\n    // start. So, we sort these in a way that ensures non-intersecting ranges are in\n    // reverse DOM order, and intersecting ranges are in something approximating\n    // reverse DOM order (since reverse DOM order doesn't have a precise meaning\n    // when working with intersecting ranges).\n    result.sort(([n1, r1], [n2, r2]) => {\n        if (r1.end.compareWith(r2.start) !== 'after') {\n            // m1.end <= m2.start -- m1 is entirely <= m2\n            return 1;\n        }\n        else if (r1.start.compareWith(r2.end) !== 'before') {\n            // m1.start >= m2.end -- m1 is entirely >= m2\n            return -1;\n        }\n        else {\n            // they overlap, so use their start positions as the primary sort key and\n            // end positions as the secondary sort key\n            switch (r1.start.compareWith(r2.start)) {\n                case 'before':\n                    return 1;\n                case 'after':\n                    return -1;\n                default:\n                    switch (r1.end.compareWith(r2.end)) {\n                        case 'before':\n                            return 1;\n                        case 'after':\n                            return -1;\n                        default:\n                            return n2.localeCompare(n1);\n                    }\n            }\n        }\n    });\n    return new Map(result);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/conversion/conversion\n */\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/deep-dive/conversion/intro editor conversion} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n * ```ts\n * // Add a converter to editing downcast and data downcast.\n * editor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n * // Add a converter to the data pipepline only:\n * editor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n * // And a slightly different one for the editing pipeline:\n * editor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n * ```\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view attribute and vice versa.\n */\nexport default class Conversion {\n    /**\n     * Creates a new conversion instance.\n     */\n    constructor(downcastDispatchers, upcastDispatchers) {\n        /**\n         * Maps dispatchers group name to ConversionHelpers instances.\n         */\n        this._helpers = new Map();\n        // Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n        this._downcast = toArray(downcastDispatchers);\n        this._createConversionHelpers({ name: 'downcast', dispatchers: this._downcast, isDowncast: true });\n        this._upcast = toArray(upcastDispatchers);\n        this._createConversionHelpers({ name: 'upcast', dispatchers: this._upcast, isDowncast: false });\n    }\n    /**\n     * Define an alias for registered dispatcher.\n     *\n     * ```ts\n     * const conversion = new Conversion(\n     * \t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n     * \tupcastDispatcher\n     * );\n     *\n     * conversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n     * ```\n     *\n     * @param alias An alias of a dispatcher.\n     * @param dispatcher Dispatcher which should have an alias.\n     */\n    addAlias(alias, dispatcher) {\n        const isDowncast = this._downcast.includes(dispatcher);\n        const isUpcast = this._upcast.includes(dispatcher);\n        if (!isUpcast && !isDowncast) {\n            /**\n             * Trying to register an alias for a dispatcher that nas not been registered.\n             *\n             * @error conversion-add-alias-dispatcher-not-registered\n             */\n            throw new CKEditorError('conversion-add-alias-dispatcher-not-registered', this);\n        }\n        this._createConversionHelpers({ name: alias, dispatchers: [dispatcher], isDowncast });\n    }\n    /**\n     * Provides a chainable API to assign converters to a conversion dispatchers group.\n     *\n     * If the given group name has not been registered, the\n     * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n     *\n     * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n     * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n     *\n     * # Using built-in conversion helpers\n     *\n     * The `for()` chain comes with a set of conversion helpers which you can use like this:\n     *\n     * ```ts\n     * editor.conversion.for( 'downcast' )\n     * \t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n     * \t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n     *\n     * editor.conversion.for( 'upcast' )\n     * \t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n     * ```\n     *\n     * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n     *\n     * * downcast (model-to-view) conversion helpers:\n     *\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n     *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n     *\n     * * upcast (view-to-model) conversion helpers:\n     *\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n     *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n     *\n     * # Using custom conversion helpers\n     *\n     * If you need to implement an atypical converter, you can do so by calling:\n     *\n     * ```ts\n     * editor.conversion.for( direction ).add( customHelper );\n     * ```\n     *\n     * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n     * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n     *\n     * Example:\n     *\n     * ```ts\n     * editor.conversion.for( 'upcast' ).add( dispatcher => {\n     * \tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n     * \t\t// Do something with a view <a> element.\n     * \t} );\n     * } );\n     * ```\n     *\n     * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n     * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n     * custom converters.\n     *\n     * @param groupName The name of dispatchers group to add the converters to.\n     */\n    for(groupName) {\n        if (!this._helpers.has(groupName)) {\n            /**\n             * Trying to add a converter to an unknown dispatchers group.\n             *\n             * @error conversion-for-unknown-group\n             */\n            throw new CKEditorError('conversion-for-unknown-group', this);\n        }\n        return this._helpers.get(groupName);\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n     * For example, the model `<paragraph>Foo</paragraph>` is turned into `<p>Foo</p>` in the view.\n     *\n     * ```ts\n     * // A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n     * editor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n     *\n     * // Override other converters by specifying a converter definition with a higher priority.\n     * editor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n     *\n     * // View specified as an object instead of a string.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'fancyParagraph',\n     * \tview: {\n     * \t\tname: 'p',\n     * \t\tclasses: 'fancy'\n     * \t}\n     * } );\n     *\n     * // Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'paragraph',\n     * \tview: 'p',\n     * \tupcastAlso: [\n     * \t\t'div',\n     * \t\t{\n     * \t\t\t// Any element with the `display: block` style.\n     * \t\t\tstyles: {\n     * \t\t\t\tdisplay: 'block'\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n     * editor.conversion.elementToElement( {\n     * \tmodel: 'heading',\n     * \tview: 'h2',\n     * \t// Convert \"heading-like\" paragraphs to headings.\n     * \tupcastAlso: viewElement => {\n     * \t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\tif ( !fontSize ) {\n     * \t\t\treturn null;\n     * \t\t}\n     *\n     * \t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\tif ( !match ) {\n     * \t\t\treturn null;\n     * \t\t}\n     *\n     * \t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\tif ( size > 26 ) {\n     * \t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t}\n     *\n     * \t\treturn null;\n     * \t}\n     * } );\n     * ```\n     *\n     * `definition.model` is a `String` with a model element name to convert from or to.\n     *\n     * @param definition The converter definition.\n     */\n    elementToElement(definition) {\n        // Set up downcast converter.\n        this.for('downcast').elementToElement(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .elementToElement({\n                model,\n                view,\n                converterPriority: definition.converterPriority\n            });\n        }\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n     * For example, a model text node with `\"Foo\"` as data and the `bold` attribute will be turned to `<strong>Foo</strong>` in the view.\n     *\n     * ```ts\n     * // A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n     * editor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n     *\n     * // Override other converters by specifying a converter definition with a higher priority.\n     * editor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n     *\n     * // View specified as an object instead of a string.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: {\n     * \t\tname: 'span',\n     * \t\tclasses: 'bold'\n     * \t}\n     * } );\n     *\n     * // Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n     * // The same attribute on different elements may then be handled by a different converter.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'textDecoration',\n     * \t\tvalues: [ 'underline', 'lineThrough' ],\n     * \t\tname: '$text'\n     * \t},\n     * \tview: {\n     * \t\tunderline: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-decoration': 'underline'\n     * \t\t\t}\n     * \t\t},\n     * \t\tlineThrough: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-decoration': 'line-through'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: 'bold',\n     * \tview: 'strong',\n     * \tupcastAlso: [\n     * \t\t'b',\n     * \t\t{\n     * \t\t\tname: 'span',\n     * \t\t\tclasses: 'bold'\n     * \t\t},\n     * \t\t{\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-weight': 'bold'\n     * \t\t\t}\n     * \t\t},\n     * \t\tviewElement => {\n     * \t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn {\n     * \t\t\t\t\tname: true,\n     * \t\t\t\t\tstyles: [ 'font-weight' ]\n     * \t\t\t\t};\n     * \t\t\t}\n     * \t\t}\n     * \t]\n     * } );\n     *\n     * // Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n     * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n     * editor.conversion.attributeToElement( {\n     * \tmodel: {\n     * \t\tkey: 'fontSize',\n     * \t\tvalues: [ 'big', 'small' ]\n     * \t},\n     * \tview: {\n     * \t\tbig: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '1.2em'\n     * \t\t\t}\n     * \t\t},\n     * \t\tsmall: {\n     * \t\t\tname: 'span',\n     * \t\t\tstyles: {\n     * \t\t\t\t'font-size': '0.8em'\n     * \t\t\t}\n     * \t\t}\n     * \t},\n     * \tupcastAlso: {\n     * \t\tbig: viewElement => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\t\tif ( !fontSize ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\t\tif ( !match ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && size > 10 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t},\n     * \t\tsmall: viewElement => {\n     * \t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n     *\n     * \t\t\tif ( !fontSize ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n     *\n     * \t\t\tif ( !match ) {\n     * \t\t\t\treturn null;\n     * \t\t\t}\n     *\n     * \t\t\tconst size = Number( match[ 1 ] );\n     *\n     * \t\t\tif ( viewElement.is( 'element', 'span' ) && size < 10 ) {\n     * \t\t\t\t// Returned value can be an object with the matched properties.\n     * \t\t\t\t// These properties will be \"consumed\" during the conversion.\n     * \t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n     *\n     * \t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n     * \t\t\t}\n     *\n     * \t\t\treturn null;\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n     * describing the attribute key and value to convert or a `String` specifying just the attribute key (in such a case\n     * `value` is set to `true`).\n     *\n     * @param definition The converter definition.\n     */\n    attributeToElement(definition) {\n        // Set up downcast converter.\n        this.for('downcast').attributeToElement(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .elementToAttribute({\n                view,\n                model,\n                converterPriority: definition.converterPriority\n            });\n        }\n    }\n    /**\n     * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa). For example,\n     * `<imageBlock src='foo.jpg'></imageBlock>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n     * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n     * To convert the text attributes,\n     * the {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}should be set up.\n     *\n     * ```ts\n     * // A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n     * editor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n     *\n     * // Attribute values are strictly specified.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'aside',\n     * \t\tvalues: [ 'aside' ]\n     * \t},\n     * \tview: {\n     * \t\taside: {\n     * \t\t\tname: 'img',\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: [ 'aside', 'half-size' ]\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Set the style attribute.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tname: 'imageInline',\n     * \t\tkey: 'aside',\n     * \t\tvalues: [ 'aside' ]\n     * \t},\n     * \tview: {\n     * \t\taside: {\n     * \t\t\tname: 'img',\n     * \t\t\tkey: 'style',\n     * \t\t\tvalue: {\n     * \t\t\t\tfloat: 'right',\n     * \t\t\t\twidth: '50%',\n     * \t\t\t\tmargin: '5px'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     *\n     * // Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n     * // Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n     * editor.conversion.attributeToAttribute( {\n     * \tmodel: {\n     * \t\tkey: 'align',\n     * \t\tvalues: [ 'right', 'center' ]\n     * \t},\n     * \tview: {\n     * \t\tright: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: 'align-right'\n     * \t\t},\n     * \t\tcenter: {\n     * \t\t\tkey: 'class',\n     * \t\t\tvalue: 'align-center'\n     * \t\t}\n     * \t},\n     * \tupcastAlso: {\n     * \t\tright: {\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-align': 'right'\n     * \t\t\t}\n     * \t\t},\n     * \t\tcenter: {\n     * \t\t\tstyles: {\n     * \t\t\t\t'text-align': 'center'\n     * \t\t\t}\n     * \t\t}\n     * \t}\n     * } );\n     * ```\n     *\n     * The `definition.model` parameter specifies which model attribute should be converted from and to.\n     * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n     * The `key` property is the model attribute key to convert from and to.\n     * The `values` are the possible model attribute values. If the `values` parameter is not set, the model attribute value\n     * will be the same as the view attribute value.\n     * If `name` is set, the conversion will be set up only for model elements with the given name.\n     *\n     * The `definition.view` parameter specifies which view attribute should be converted from and to.\n     * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n     * The `key` property is the view attribute key to convert from and to.\n     * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n     * the same as the model attribute value.\n     * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n     * If `key` is `'style'`, `value` is an object with key-value pairs.\n     * In other cases, `value` is a `String`.\n     * If `name` is set, the conversion will be set up only for model elements with the given name.\n     * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n     * to `{ key, value, [ name ] }` objects.\n     *\n     * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n     * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n     * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n     *\n     * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n     * be given in both parameters.\n     *\n     * @param definition The converter definition.\n     * @param definition.model The model attribute to convert from and to.\n     * @param definition.view The view attribute to convert from and to.\n     * @param definition.upcastAlso Any view element matching `definition.upcastAlso` will also be converted to the given model attribute.\n     * `definition.upcastAlso` is used only if `config.model.values` is specified.\n     */\n    attributeToAttribute(definition) {\n        // Set up downcast converter.\n        this.for('downcast').attributeToAttribute(definition);\n        // Set up upcast converter.\n        for (const { model, view } of _getAllUpcastDefinitions(definition)) {\n            this.for('upcast')\n                .attributeToAttribute({\n                view,\n                model\n            });\n        }\n    }\n    /**\n     * Creates and caches conversion helpers for given dispatchers group.\n     *\n     * @param options.name Group name.\n     */\n    _createConversionHelpers({ name, dispatchers, isDowncast }) {\n        if (this._helpers.has(name)) {\n            /**\n             * Trying to register a group name that has already been registered.\n             *\n             * @error conversion-group-exists\n             */\n            throw new CKEditorError('conversion-group-exists', this);\n        }\n        const helpers = isDowncast ?\n            new DowncastHelpers(dispatchers) :\n            new UpcastHelpers(dispatchers);\n        this._helpers.set(name, helpers);\n    }\n}\n/**\n * Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n * `definition.upcastAlso`.\n */\nfunction* _getAllUpcastDefinitions(definition) {\n    if (definition.model.values) {\n        for (const value of definition.model.values) {\n            const model = { key: definition.model.key, value };\n            const view = definition.view[value];\n            const upcastAlso = definition.upcastAlso ? definition.upcastAlso[value] : undefined;\n            yield* _getUpcastDefinition(model, view, upcastAlso);\n        }\n    }\n    else {\n        yield* _getUpcastDefinition(definition.model, definition.view, definition.upcastAlso);\n    }\n}\nfunction* _getUpcastDefinition(model, view, upcastAlso) {\n    yield { model, view };\n    if (upcastAlso) {\n        for (const upcastAlsoItem of toArray(upcastAlso)) {\n            yield { model, view: upcastAlsoItem };\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/operation\n */\n/**\n * Abstract base operation class.\n */\nexport default class Operation {\n    /**\n     * Base operation constructor.\n     *\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(baseVersion) {\n        this.baseVersion = baseVersion;\n        this.isDocumentOperation = this.baseVersion !== null;\n        this.batch = null;\n    }\n    /**\n     * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n     * an error if operation is not valid.\n     *\n     * @internal\n     */\n    _validate() {\n    }\n    /**\n     * Custom toJSON method to solve child-parent circular dependencies.\n     *\n     * @returns Clone of this object with the operation property replaced with string.\n     */\n    toJSON() {\n        // This method creates only a shallow copy, all nested objects should be defined separately.\n        // See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n        const json = Object.assign({}, this);\n        json.__className = this.constructor.className;\n        // Remove reference to the parent `Batch` to avoid circular dependencies.\n        delete json.batch;\n        // Only document operations are shared with other clients so it is not necessary to keep this information.\n        delete json.isDocumentOperation;\n        return json;\n    }\n    /**\n     * Name of the operation class used for serialization.\n     */\n    static get className() {\n        return 'Operation';\n    }\n    /**\n     * Creates `Operation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param doc Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new this(json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/utils\n */\nimport Node from '../node';\nimport Range from '../range';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport { CKEditorError, isIterable } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts given nodes at given position.\n *\n * @internal\n * @param position Position at which nodes should be inserted.\n * @param normalizedNodes Nodes to insert.\n * @returns Range spanning over inserted elements.\n */\nexport function _insert(position, nodes) {\n    const normalizedNodes = _normalizeNodes(nodes);\n    // We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n    const offset = normalizedNodes.reduce((sum, node) => sum + node.offsetSize, 0);\n    const parent = position.parent;\n    // Insertion might be in a text node, we should split it if that's the case.\n    _splitNodeAtPosition(position);\n    const index = position.index;\n    // Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n    // using basic `Element` API.\n    parent._insertChild(index, normalizedNodes);\n    // Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n    _mergeNodesAtIndex(parent, index + normalizedNodes.length);\n    _mergeNodesAtIndex(parent, index);\n    return new Range(position, position.getShiftedBy(offset));\n}\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @internal\n * @param range Range containing nodes to remove.\n */\nexport function _remove(range) {\n    if (!range.isFlat) {\n        /**\n         * Trying to remove a range which starts and ends in different element.\n         *\n         * @error operation-utils-remove-range-not-flat\n         */\n        throw new CKEditorError('operation-utils-remove-range-not-flat', this);\n    }\n    const parent = range.start.parent;\n    // Range may be inside text nodes, we have to split them if that's the case.\n    _splitNodeAtPosition(range.start);\n    _splitNodeAtPosition(range.end);\n    // Remove the text nodes using basic `Element` API.\n    const removed = parent._removeChildren(range.start.index, range.end.index - range.start.index);\n    // Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n    // touching at the position equal to the removed range beginning. We check merging possibility there.\n    _mergeNodesAtIndex(parent, range.start.index);\n    return removed;\n}\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @internal\n * @param sourceRange Range containing nodes to move.\n * @param targetPosition Position to which nodes should be moved.\n * @returns Range containing moved nodes.\n */\nexport function _move(sourceRange, targetPosition) {\n    if (!sourceRange.isFlat) {\n        /**\n         * Trying to move a range which starts and ends in different element.\n         *\n         * @error operation-utils-move-range-not-flat\n         */\n        throw new CKEditorError('operation-utils-move-range-not-flat', this);\n    }\n    const nodes = _remove(sourceRange);\n    // We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n    // that change might have an impact on `targetPosition`.\n    targetPosition = targetPosition._getTransformedByDeletion(sourceRange.start, sourceRange.end.offset - sourceRange.start.offset);\n    return _insert(targetPosition, nodes);\n}\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @internal\n * @param range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param key Key of attribute to set.\n * @param value Attribute value.\n */\nexport function _setAttribute(range, key, value) {\n    // Range might start or end in text nodes, so we have to split them.\n    _splitNodeAtPosition(range.start);\n    _splitNodeAtPosition(range.end);\n    // Iterate over all items in the range.\n    for (const item of range.getItems({ shallow: true })) {\n        // Iterator will return `TextProxy` instances but we know that those text proxies will\n        // always represent full text nodes (this is guaranteed thanks to splitting we did before).\n        // So, we can operate on those text proxies' text nodes.\n        const node = item.is('$textProxy') ? item.textNode : item;\n        if (value !== null) {\n            node._setAttribute(key, value);\n        }\n        else {\n            node._removeAttribute(key);\n        }\n        // After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n        _mergeNodesAtIndex(node.parent, node.index);\n    }\n    // Try to merge last changed node with it's previous sibling (not covered by the loop above).\n    _mergeNodesAtIndex(range.end.parent, range.end.index);\n}\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link ~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @internal\n * @param nodes Objects to normalize.\n * @returns Normalized nodes.\n */\nexport function _normalizeNodes(nodes) {\n    const normalized = [];\n    function convert(nodes) {\n        if (typeof nodes == 'string') {\n            normalized.push(new Text(nodes));\n        }\n        else if (nodes instanceof TextProxy) {\n            normalized.push(new Text(nodes.data, nodes.getAttributes()));\n        }\n        else if (nodes instanceof Node) {\n            normalized.push(nodes);\n        }\n        else if (isIterable(nodes)) {\n            for (const node of nodes) {\n                convert(node);\n            }\n        }\n        // Skip unrecognized type.\n    }\n    convert(nodes);\n    // Merge text nodes.\n    for (let i = 1; i < normalized.length; i++) {\n        const node = normalized[i];\n        const prev = normalized[i - 1];\n        if (node instanceof Text && prev instanceof Text && _haveSameAttributes(node, prev)) {\n            // Doing this instead changing `prev.data` because `data` is readonly.\n            normalized.splice(i - 1, 2, new Text(prev.data + node.data, prev.getAttributes()));\n            i--;\n        }\n    }\n    return normalized;\n}\n/**\n * Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n * merges them into one node if they have same attributes.\n *\n * Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n *\n * @param element Parent element of nodes to merge.\n * @param index Index between nodes to merge.\n */\nfunction _mergeNodesAtIndex(element, index) {\n    const nodeBefore = element.getChild(index - 1);\n    const nodeAfter = element.getChild(index);\n    // Check if both of those nodes are text objects with same attributes.\n    if (nodeBefore && nodeAfter && nodeBefore.is('$text') && nodeAfter.is('$text') && _haveSameAttributes(nodeBefore, nodeAfter)) {\n        // Append text of text node after index to the before one.\n        const mergedNode = new Text(nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes());\n        // Remove separate text nodes.\n        element._removeChildren(index - 1, 2);\n        // Insert merged text node.\n        element._insertChild(index - 1, mergedNode);\n    }\n}\n/**\n * Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n * containing a part of original text node.\n *\n * @param position Position at which node should be split.\n */\nfunction _splitNodeAtPosition(position) {\n    const textNode = position.textNode;\n    const element = position.parent;\n    if (textNode) {\n        const offsetDiff = position.offset - textNode.startOffset;\n        const index = textNode.index;\n        element._removeChildren(index, 1);\n        const firstPart = new Text(textNode.data.substr(0, offsetDiff), textNode.getAttributes());\n        const secondPart = new Text(textNode.data.substr(offsetDiff), textNode.getAttributes());\n        element._insertChild(index, [firstPart, secondPart]);\n    }\n}\n/**\n * Checks whether two given nodes have same attributes.\n *\n * @param nodeA Node to check.\n * @param nodeB Node to check.\n * @returns `true` if nodes have same attributes, `false` otherwise.\n */\nfunction _haveSameAttributes(nodeA, nodeB) {\n    const iteratorA = nodeA.getAttributes();\n    const iteratorB = nodeB.getAttributes();\n    for (const attr of iteratorA) {\n        if (attr[1] !== nodeB.getAttribute(attr[0])) {\n            return false;\n        }\n        iteratorB.next();\n    }\n    return iteratorB.next().done;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/moveoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\nimport { CKEditorError, compareArrays } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n */\nexport default class MoveOperation extends Operation {\n    /**\n     * Creates a move operation.\n     *\n     * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.\n     * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n     * `sourcePosition` with offset shifted by `howMany`.\n     * @param targetPosition Position at which moved nodes will be inserted.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(sourcePosition, howMany, targetPosition, baseVersion) {\n        super(baseVersion);\n        this.sourcePosition = sourcePosition.clone();\n        // `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n        this.sourcePosition.stickiness = 'toNext';\n        this.howMany = howMany;\n        this.targetPosition = targetPosition.clone();\n        this.targetPosition.stickiness = 'toNone';\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.targetPosition.root.rootName == '$graveyard') {\n            return 'remove';\n        }\n        else if (this.sourcePosition.root.rootName == '$graveyard') {\n            return 'reinsert';\n        }\n        return 'move';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return [\n            Range._createFromPositionAndShift(this.sourcePosition, this.howMany),\n            Range._createFromPositionAndShift(this.targetPosition, 0)\n        ];\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MoveOperation(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);\n    }\n    /**\n     * Returns the start position of the moved range after it got moved. This may be different than\n     * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n     * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n     * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n     *\n     * ```\n     *  vv              vv\n     * abcdefg ===> adefbcg\n     *      ^          ^\n     *      targetPos  movedRangeStart\n     *      offset 6   offset 4\n     *```\n     */\n    getMovedRangeStart() {\n        return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const newTargetPosition = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);\n        return new MoveOperation(this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const sourceElement = this.sourcePosition.parent;\n        const targetElement = this.targetPosition.parent;\n        const sourceOffset = this.sourcePosition.offset;\n        const targetOffset = this.targetPosition.offset;\n        // Validate whether move operation has correct parameters.\n        // Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n        // We expect that many errors might be connected with one of scenarios described below.\n        if (sourceOffset + this.howMany > sourceElement.maxOffset) {\n            /**\n             * The nodes which should be moved do not exist.\n             *\n             * @error move-operation-nodes-do-not-exist\n             */\n            throw new CKEditorError('move-operation-nodes-do-not-exist', this);\n        }\n        else if (sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany) {\n            /**\n             * Trying to move a range of nodes into the middle of that range.\n             *\n             * @error move-operation-range-into-itself\n             */\n            throw new CKEditorError('move-operation-range-into-itself', this);\n        }\n        else if (this.sourcePosition.root == this.targetPosition.root) {\n            if (compareArrays(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == 'prefix') {\n                const i = this.sourcePosition.path.length - 1;\n                if (this.targetPosition.path[i] >= sourceOffset && this.targetPosition.path[i] < sourceOffset + this.howMany) {\n                    /**\n                     * Trying to move a range of nodes into one of nodes from that range.\n                     *\n                     * @error move-operation-node-into-itself\n                     */\n                    throw new CKEditorError('move-operation-node-into-itself', this);\n                }\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        _move(Range._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = this.sourcePosition.toJSON();\n        json.targetPosition = this.targetPosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MoveOperation';\n    }\n    /**\n     * Creates `MoveOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n        const targetPosition = Position.fromJSON(json.targetPosition, document);\n        return new this(sourcePosition, json.howMany, targetPosition, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/insertoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to insert one or more nodes at given position in the model.\n */\nexport default class InsertOperation extends Operation {\n    /**\n     * Creates an insert operation.\n     *\n     * @param position Position of insertion.\n     * @param nodes The list of nodes to be inserted.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(position, nodes, baseVersion) {\n        super(baseVersion);\n        this.position = position.clone();\n        this.position.stickiness = 'toNone';\n        this.nodes = new NodeList(_normalizeNodes(nodes));\n        this.shouldReceiveAttributes = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'insert';\n    }\n    /**\n     * Total offset size of inserted nodes.\n     */\n    get howMany() {\n        return this.nodes.maxOffset;\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.position.clone();\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        const nodes = new NodeList([...this.nodes].map(node => node._clone(true)));\n        const insert = new InsertOperation(this.position, nodes, this.baseVersion);\n        insert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n        return insert;\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const graveyard = this.position.root.document.graveyard;\n        const gyPosition = new Position(graveyard, [0]);\n        return new MoveOperation(this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const targetElement = this.position.parent;\n        if (!targetElement || targetElement.maxOffset < this.position.offset) {\n            /**\n             * Insertion position is invalid.\n             *\n             * @error insert-operation-position-invalid\n             */\n            throw new CKEditorError('insert-operation-position-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        // What happens here is that we want original nodes be passed to writer because we want original nodes\n        // to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n        // to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n        // get children. It is important that InsertOperation has the copy of original nodes in intact state.\n        const originalNodes = this.nodes;\n        this.nodes = new NodeList([...originalNodes].map(node => node._clone(true)));\n        _insert(this.position, originalNodes);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.position = this.position.toJSON();\n        json.nodes = this.nodes.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'InsertOperation';\n    }\n    /**\n     * Creates `InsertOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const children = [];\n        for (const child of json.nodes) {\n            if (child.name) {\n                // If child has name property, it is an Element.\n                children.push(Element.fromJSON(child));\n            }\n            else {\n                // Otherwise, it is a Text node.\n                children.push(Text.fromJSON(child));\n            }\n        }\n        const insert = new InsertOperation(Position.fromJSON(json.position, document), children, json.baseVersion);\n        insert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n        return insert;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/splitoperation\n */\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n */\nexport default class SplitOperation extends Operation {\n    /**\n     * Creates a split operation.\n     *\n     * @param splitPosition Position at which an element should be split.\n     * @param howMany Total offset size of elements that are in the split element after `position`.\n     * @param insertionPosition Position at which the clone of split element (or element from graveyard) will be inserted.\n     * @param graveyardPosition Position in the graveyard root before the element which\n     * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(splitPosition, howMany, insertionPosition, graveyardPosition, baseVersion) {\n        super(baseVersion);\n        this.splitPosition = splitPosition.clone();\n        // Keep position sticking to the next node. This way any new content added at the place where the element is split\n        // will be left in the original element.\n        this.splitPosition.stickiness = 'toNext';\n        this.howMany = howMany;\n        this.insertionPosition = insertionPosition;\n        this.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n        if (this.graveyardPosition) {\n            this.graveyardPosition.stickiness = 'toNext';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'split';\n    }\n    /**\n     * Position inside the new clone of a split element.\n     *\n     * This is a position where nodes that are after the split position will be moved to.\n     */\n    get moveTargetPosition() {\n        const path = this.insertionPosition.path.slice();\n        path.push(0);\n        return new Position(this.insertionPosition.root, path);\n    }\n    /**\n     * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n     * The range starts at {@link #splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n     */\n    get movedRange() {\n        const end = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);\n        return new Range(this.splitPosition, end);\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        // These could be positions but `Selectable` type only supports `Iterable<Range>`.\n        const ranges = [\n            Range._createFromPositionAndShift(this.splitPosition, 0),\n            Range._createFromPositionAndShift(this.insertionPosition, 0)\n        ];\n        if (this.graveyardPosition) {\n            ranges.push(Range._createFromPositionAndShift(this.graveyardPosition, 0));\n        }\n        return ranges;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new SplitOperation(this.splitPosition, this.howMany, this.insertionPosition, this.graveyardPosition, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        const graveyard = this.splitPosition.root.document.graveyard;\n        const graveyardPosition = new Position(graveyard, [0]);\n        return new MergeOperation(this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const element = this.splitPosition.parent;\n        const offset = this.splitPosition.offset;\n        // Validate whether split operation has correct parameters.\n        if (!element || element.maxOffset < offset) {\n            /**\n             * Split position is invalid.\n             *\n             * @error split-operation-position-invalid\n             */\n            throw new CKEditorError('split-operation-position-invalid', this);\n        }\n        else if (!element.parent) {\n            /**\n             * Cannot split root element.\n             *\n             * @error split-operation-split-in-root\n             */\n            throw new CKEditorError('split-operation-split-in-root', this);\n        }\n        else if (this.howMany != element.maxOffset - this.splitPosition.offset) {\n            /**\n             * Split operation specifies wrong number of nodes to move.\n             *\n             * @error split-operation-how-many-invalid\n             */\n            throw new CKEditorError('split-operation-how-many-invalid', this);\n        }\n        else if (this.graveyardPosition && !this.graveyardPosition.nodeAfter) {\n            /**\n             * Graveyard position invalid.\n             *\n             * @error split-operation-graveyard-position-invalid\n             */\n            throw new CKEditorError('split-operation-graveyard-position-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const splitElement = this.splitPosition.parent;\n        if (this.graveyardPosition) {\n            _move(Range._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition);\n        }\n        else {\n            const newElement = splitElement._clone();\n            _insert(this.insertionPosition, newElement);\n        }\n        const sourceRange = new Range(Position._createAt(splitElement, this.splitPosition.offset), Position._createAt(splitElement, splitElement.maxOffset));\n        _move(sourceRange, this.moveTargetPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.splitPosition = this.splitPosition.toJSON();\n        json.insertionPosition = this.insertionPosition.toJSON();\n        if (this.graveyardPosition) {\n            json.graveyardPosition = this.graveyardPosition.toJSON();\n        }\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'SplitOperation';\n    }\n    /**\n     * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n     * position is after the split element.\n     */\n    static getInsertionPosition(splitPosition) {\n        const path = splitPosition.path.slice(0, -1);\n        path[path.length - 1]++;\n        return new Position(splitPosition.root, path, 'toPrevious');\n    }\n    /**\n     * Creates `SplitOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const splitPosition = Position.fromJSON(json.splitPosition, document);\n        const insertionPosition = Position.fromJSON(json.insertionPosition, document);\n        const graveyardPosition = json.graveyardPosition ? Position.fromJSON(json.graveyardPosition, document) : null;\n        return new this(splitPosition, json.howMany, insertionPosition, graveyardPosition, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/mergeoperation\n */\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n */\nexport default class MergeOperation extends Operation {\n    /**\n     * Creates a merge operation.\n     *\n     * @param sourcePosition Position inside the merged element. All nodes from that\n     * element after that position will be moved to {@link #targetPosition}.\n     * @param howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n     * @param targetPosition Position which the nodes from the merged elements will be moved to.\n     * @param graveyardPosition Position in graveyard to which the merged element will be moved.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion) {\n        super(baseVersion);\n        this.sourcePosition = sourcePosition.clone();\n        // This is, and should always remain, the first position in its parent.\n        this.sourcePosition.stickiness = 'toPrevious';\n        this.howMany = howMany;\n        this.targetPosition = targetPosition.clone();\n        // Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n        // this is, and should always remain, the last position in its parent.\n        this.targetPosition.stickiness = 'toNext';\n        this.graveyardPosition = graveyardPosition.clone();\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'merge';\n    }\n    /**\n     * Position before the merged element (which will be deleted).\n     */\n    get deletionPosition() {\n        return new Position(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1));\n    }\n    /**\n     * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n     * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n     */\n    get movedRange() {\n        const end = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);\n        return new Range(this.sourcePosition, end);\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        const mergedElement = this.sourcePosition.parent;\n        return [\n            Range._createOn(mergedElement),\n            // These could be positions but `Selectable` type only supports `Iterable<Range>`.\n            Range._createFromPositionAndShift(this.targetPosition, 0),\n            Range._createFromPositionAndShift(this.graveyardPosition, 0)\n        ];\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MergeOperation(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        // Positions in this method are transformed by this merge operation because the split operation bases on\n        // the context after this merge operation happened (because split operation reverses it).\n        // So we need to acknowledge that the merge operation happened and those positions changed a little.\n        const targetPosition = this.targetPosition._getTransformedByMergeOperation(this);\n        const path = this.sourcePosition.path.slice(0, -1);\n        const insertionPosition = new Position(this.sourcePosition.root, path)._getTransformedByMergeOperation(this);\n        return new SplitOperation(targetPosition, this.howMany, insertionPosition, this.graveyardPosition, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const sourceElement = this.sourcePosition.parent;\n        const targetElement = this.targetPosition.parent;\n        // Validate whether merge operation has correct parameters.\n        if (!sourceElement.parent) {\n            /**\n             * Merge source position is invalid. The element to be merged must have a parent node.\n             *\n             * @error merge-operation-source-position-invalid\n             */\n            throw new CKEditorError('merge-operation-source-position-invalid', this);\n        }\n        else if (!targetElement.parent) {\n            /**\n             * Merge target position is invalid. The element to be merged must have a parent node.\n             *\n             * @error merge-operation-target-position-invalid\n             */\n            throw new CKEditorError('merge-operation-target-position-invalid', this);\n        }\n        else if (this.howMany != sourceElement.maxOffset) {\n            /**\n             * Merge operation specifies wrong number of nodes to move.\n             *\n             * @error merge-operation-how-many-invalid\n             */\n            throw new CKEditorError('merge-operation-how-many-invalid', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const mergedElement = this.sourcePosition.parent;\n        const sourceRange = Range._createIn(mergedElement);\n        _move(sourceRange, this.targetPosition);\n        _move(Range._createOn(mergedElement), this.graveyardPosition);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = json.sourcePosition.toJSON();\n        json.targetPosition = json.targetPosition.toJSON();\n        json.graveyardPosition = json.graveyardPosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MergeOperation';\n    }\n    /**\n     * Creates `MergeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n        const targetPosition = Position.fromJSON(json.targetPosition, document);\n        const graveyardPosition = Position.fromJSON(json.graveyardPosition, document);\n        return new this(sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nexport default class MarkerOperation extends Operation {\n    /**\n     * @param name Marker name.\n     * @param oldRange Marker range before the change.\n     * @param newRange Marker range after the change.\n     * @param markers Marker collection on which change should be executed.\n     * @param affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n        super(baseVersion);\n        this.name = name;\n        this.oldRange = oldRange ? oldRange.clone() : null;\n        this.newRange = newRange ? newRange.clone() : null;\n        this.affectsData = affectsData;\n        this._markers = markers;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'marker';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        const ranges = [];\n        if (this.oldRange) {\n            ranges.push(this.oldRange.clone());\n        }\n        if (this.newRange) {\n            if (this.oldRange) {\n                ranges.push(...this.newRange.getDifference(this.oldRange));\n            }\n            else {\n                ranges.push(this.newRange.clone());\n            }\n        }\n        return ranges;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newRange) {\n            this._markers._set(this.name, this.newRange, true, this.affectsData);\n        }\n        else {\n            this._markers._remove(this.name);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    toJSON() {\n        const json = super.toJSON();\n        if (this.oldRange) {\n            json.oldRange = this.oldRange.toJSON();\n        }\n        if (this.newRange) {\n            json.newRange = this.newRange.toJSON();\n        }\n        delete json._markers;\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'MarkerOperation';\n    }\n    /**\n     * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n    }\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation';\nimport { _setAttribute } from './utils';\nimport Range from '../range';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n */\nexport default class AttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes.\n     *\n     * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n     * have an attribute with the same key as the added attribute.\n     *\n     * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n     * must have an attribute with that key added.\n     *\n     * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n     * operation's ranges must already have an attribute with given key and `oldValue` as value\n     *\n     * @param range Range on which the operation should be applied. Must be a flat range.\n     * @param key Key of an attribute to change or remove.\n     * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n     * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(range, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        this.range = range.clone();\n        this.key = key;\n        this.oldValue = oldValue === undefined ? null : oldValue;\n        this.newValue = newValue === undefined ? null : newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeAttribute';\n        }\n        else {\n            return 'changeAttribute';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.range.clone();\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.range = this.range.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (!this.range.isFlat) {\n            /**\n             * The range to change is not flat.\n             *\n             * @error attribute-operation-range-not-flat\n             */\n            throw new CKEditorError('attribute-operation-range-not-flat', this);\n        }\n        for (const item of this.range.getItems({ shallow: true })) {\n            if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n                /**\n                 * Changed node has different attribute value than operation's old attribute value.\n                 *\n                 * @error attribute-operation-wrong-old-value\n                 * @param item\n                 * @param key\n                 * @param value\n                 */\n                throw new CKEditorError('attribute-operation-wrong-old-value', this, { item, key: this.key, value: this.oldValue });\n            }\n            if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n                /**\n                 * The attribute with given key already exists for the given node.\n                 *\n                 * @error attribute-operation-attribute-exists\n                 * @param node\n                 * @param key\n                 */\n                throw new CKEditorError('attribute-operation-attribute-exists', this, { node: item, key: this.key });\n            }\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        // If value to set is same as old value, don't do anything.\n        if (!isEqual(this.oldValue, this.newValue)) {\n            // Execution.\n            _setAttribute(this.range, this.key, this.newValue);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'AttributeOperation';\n    }\n    /**\n     * Creates `AttributeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/nooperation\n */\nimport Operation from './operation';\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n */\nexport default class NoOperation extends Operation {\n    get type() {\n        return 'noop';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return null;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     */\n    clone() {\n        return new NoOperation(this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new NoOperation(this.baseVersion + 1);\n    }\n    /** @internal */\n    _execute() {\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'NoOperation';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport Position from '../position';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n */\nexport default class RenameOperation extends Operation {\n    /**\n     * Creates an operation that changes element's name.\n     *\n     * @param position Position before an element to change.\n     * @param oldName Current name of the element.\n     * @param newName New name for the element.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(position, oldName, newName, baseVersion) {\n        super(baseVersion);\n        this.position = position;\n        // This position sticks to the next node because it is a position before the node that we want to change.\n        this.position.stickiness = 'toNext';\n        this.oldName = oldName;\n        this.newName = newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'rename';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.position.nodeAfter;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        const element = this.position.nodeAfter;\n        if (!(element instanceof Element)) {\n            /**\n             * Given position is invalid or node after it is not instance of Element.\n             *\n             * @error rename-operation-wrong-position\n             */\n            throw new CKEditorError('rename-operation-wrong-position', this);\n        }\n        else if (element.name !== this.oldName) {\n            /**\n             * Element to change has different name than operation's old name.\n             *\n             * @error rename-operation-wrong-name\n             */\n            throw new CKEditorError('rename-operation-wrong-name', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        const element = this.position.nodeAfter;\n        element.name = this.newName;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.position = this.position.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RenameOperation';\n    }\n    /**\n     * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * {@link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n */\nexport default class RootAttributeOperation extends Operation {\n    /**\n     * Creates an operation that changes, removes or adds attributes on root element.\n     *\n     * @see module:engine/model/operation/attributeoperation~AttributeOperation\n     * @param root Root element to change.\n     * @param key Key of an attribute to change or remove.\n     * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n     * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n     * can be applied or `null` if the operation operates on detached (non-document) tree.\n     */\n    constructor(root, key, oldValue, newValue, baseVersion) {\n        super(baseVersion);\n        this.root = root;\n        this.key = key;\n        this.oldValue = oldValue === undefined ? null : oldValue;\n        this.newValue = newValue === undefined ? null : newValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        if (this.oldValue === null) {\n            return 'addRootAttribute';\n        }\n        else if (this.newValue === null) {\n            return 'removeRootAttribute';\n        }\n        else {\n            return 'changeRootAttribute';\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this.root;\n    }\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns Clone of this operation.\n     */\n    clone() {\n        return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     */\n    getReversed() {\n        return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (this.root != this.root.root || this.root.is('documentFragment')) {\n            /**\n             * The element to change is not a root element.\n             *\n             * @error rootattribute-operation-not-a-root\n             * @param root\n             * @param key\n             * @param value\n             */\n            throw new CKEditorError('rootattribute-operation-not-a-root', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n            /**\n             * The attribute which should be removed does not exist for the given node.\n             *\n             * @error rootattribute-operation-wrong-old-value\n             * @param root\n             * @param key\n             * @param value\n             */\n            throw new CKEditorError('rootattribute-operation-wrong-old-value', this, { root: this.root, key: this.key });\n        }\n        if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n            /**\n             * The attribute with given key already exists for the given node.\n             *\n             * @error rootattribute-operation-attribute-exists\n             * @param root\n             * @param key\n             */\n            throw new CKEditorError('rootattribute-operation-attribute-exists', this, { root: this.root, key: this.key });\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        if (this.newValue !== null) {\n            this.root._setAttribute(this.key, this.newValue);\n        }\n        else {\n            this.root._removeAttribute(this.key);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.root = this.root.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RootAttributeOperation';\n    }\n    /**\n     * Creates `RootAttributeOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        if (!document.getRoot(json.root)) {\n            /**\n             * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n             *\n             * @error rootattribute-operation-fromjson-no-root\n             * @param rootName\n             */\n            throw new CKEditorError('rootattribute-operation-fromjson-no-root', this, { rootName: json.root });\n        }\n        return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/rootoperation\n */\nimport Operation from './operation';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Operation that creates (or attaches) or detaches a root element.\n */\nexport default class RootOperation extends Operation {\n    /**\n     * Creates an operation that creates or removes a root element.\n     *\n     * @param rootName Root name to create or detach.\n     * @param elementName Root element name.\n     * @param isAdd Specifies whether the operation adds (`true`) or detaches the root (`false`).\n     * @param document Document which owns the root.\n     * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation can be applied.\n     */\n    constructor(rootName, elementName, isAdd, document, baseVersion) {\n        super(baseVersion);\n        this.rootName = rootName;\n        this.elementName = elementName;\n        this.isAdd = isAdd;\n        this._document = document;\n        // Make sure that the root exists ASAP, this is important for RTC.\n        // If the root was dynamically added, there will be more operations that operate on/in this root.\n        // These operations will require root element instance (in operation property or in position instance).\n        // If the root is not created ahead of time, instantiating such operations may fail.\n        if (!this._document.getRoot(this.rootName)) {\n            const root = this._document.createRoot(this.elementName, this.rootName);\n            root._isAttached = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return this.isAdd ? 'addRoot' : 'detachRoot';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return this._document.getRoot(this.rootName);\n    }\n    /**\n     * @inheritDoc\n     */\n    clone() {\n        return new RootOperation(this.rootName, this.elementName, this.isAdd, this._document, this.baseVersion);\n    }\n    /**\n     * @inheritDoc\n     */\n    getReversed() {\n        return new RootOperation(this.rootName, this.elementName, !this.isAdd, this._document, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n    _validate() {\n        // Keep in mind that at this point the root will always exist as it was created in the `constructor()`, even for detach operation.\n        const root = this._document.getRoot(this.rootName);\n        if (root.isAttached() && this.isAdd) {\n            /**\n             * Trying to attach a root that is already attached.\n             *\n             * @error root-operation-root-attached\n             */\n            throw new CKEditorError('root-operation-root-attached', this);\n        }\n        else if (!root.isAttached() && !this.isAdd) {\n            /**\n             * Trying to detach a root that is already detached.\n             *\n             * @error root-operation-root-detached\n             */\n            throw new CKEditorError('root-operation-root-detached', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    _execute() {\n        this._document.getRoot(this.rootName)._isAttached = this.isAdd;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        delete json._document;\n        return json;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'RootOperation';\n    }\n    /**\n     * Creates `RootOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return new RootOperation(json.rootName, json.elementName, json.isAdd, document, json.baseVersion);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/operationfactory\n */\nimport AttributeOperation from './attributeoperation';\nimport InsertOperation from './insertoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport NoOperation from './nooperation';\nimport Operation from './operation';\nimport RenameOperation from './renameoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport RootOperation from './rootoperation';\nimport SplitOperation from './splitoperation';\nimport MergeOperation from './mergeoperation';\nconst operations = {};\noperations[AttributeOperation.className] = AttributeOperation;\noperations[InsertOperation.className] = InsertOperation;\noperations[MarkerOperation.className] = MarkerOperation;\noperations[MoveOperation.className] = MoveOperation;\noperations[NoOperation.className] = NoOperation;\noperations[Operation.className] = Operation;\noperations[RenameOperation.className] = RenameOperation;\noperations[RootAttributeOperation.className] = RootAttributeOperation;\noperations[RootOperation.className] = RootOperation;\noperations[SplitOperation.className] = SplitOperation;\noperations[MergeOperation.className] = MergeOperation;\n/**\n * A factory class for creating operations.\n */\nexport default class OperationFactory {\n    /**\n     * Creates an operation instance from a JSON object (parsed JSON string).\n     *\n     * @param json Deserialized JSON object.\n     * @param document Document on which this operation will be applied.\n     */\n    static fromJSON(json, document) {\n        return operations[json.__className].fromJSON(json, document);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport RootOperation from './rootoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\nimport { compareArrays } from '@ckeditor/ckeditor5-utils';\nconst transformations = new Map();\n/**\n * @module engine/model/operation/transform\n */\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @param transformationFunction Function to use for transforming.\n */\nfunction setTransformation(OperationA, OperationB, transformationFunction) {\n    let aGroup = transformations.get(OperationA);\n    if (!aGroup) {\n        aGroup = new Map();\n        transformations.set(OperationA, aGroup);\n    }\n    aGroup.set(OperationB, transformationFunction);\n}\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @returns Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation(OperationA, OperationB) {\n    const aGroup = transformations.get(OperationA);\n    if (aGroup && aGroup.has(OperationB)) {\n        return aGroup.get(OperationB);\n    }\n    return noUpdateTransformation;\n}\n/**\n * A transformation function that only clones operation to transform, without changing it.\n */\nfunction noUpdateTransformation(a) {\n    return [a];\n}\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param a Operation to be transformed.\n * @param b Operation to transform by.\n * @param context Transformation context for this transformation.\n * @returns Transformation result.\n */\nexport function transform(a, b, context = {}) {\n    const transformationFunction = getTransformation(a.constructor, b.constructor);\n    /* eslint-disable no-useless-catch */\n    try {\n        a = a.clone();\n        return transformationFunction(a, b, context);\n    }\n    catch (e) {\n        // @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n        // @if CK_DEBUG // console.warn( 'Transformed operation', a );\n        // @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n        // @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n        // @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n        // @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n        // @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n        // @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n        throw e;\n    }\n    /* eslint-enable no-useless-catch */\n}\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param operationsA\n * @param operationsB\n * @param options Additional transformation options.\n * @param options.document Document which the operations change.\n * @param options.useRelations Whether during transformation relations should be used (used during undo for better conflict resolution).\n * @param options.padWithNoOps Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @param options.forceWeakRemove If set to `false`, remove operation will be always stronger than move operation,\n * so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n * @returns Transformation result.\n */\nexport function transformSets(operationsA, operationsB, options) {\n    // Create new arrays so the originally passed arguments are not changed.\n    // No need to clone operations, they are cloned as they are transformed.\n    operationsA = operationsA.slice();\n    operationsB = operationsB.slice();\n    const contextFactory = new ContextFactory(options.document, options.useRelations, options.forceWeakRemove);\n    contextFactory.setOriginalOperations(operationsA);\n    contextFactory.setOriginalOperations(operationsB);\n    const originalOperations = contextFactory.originalOperations;\n    // If one of sets is empty there is simply nothing to transform, so return sets as they are.\n    if (operationsA.length == 0 || operationsB.length == 0) {\n        return { operationsA, operationsB, originalOperations };\n    }\n    //\n    // Following is a description of transformation process:\n    //\n    // There are `operationsA` and `operationsB` to be transformed, both by both.\n    //\n    // So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n    //\n    // Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n    // the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n    // is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n    //\n    // However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n    // we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n    // All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n    //\n    // The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n    //\n    //          [the initial state]\n    //         [common for a1 and b1]\n    //\n    //                   *\n    //                  / \\\n    //                 /   \\\n    //               b1     a1\n    //               /       \\\n    //              /         \\\n    //             *           *\n    //            / \\         / \\\n    //           /   \\       /   \\\n    //         b2    a1'   b1'    a2\n    //         /       \\   /       \\\n    //        /         \\ /         \\\n    //       *           *           *\n    //        \\         / \\         /\n    //         \\       /   \\       /\n    //        a1''   b2'   a2'   b1''\n    //           \\   /       \\   /\n    //            \\ /         \\ /\n    //             *           *\n    //              \\         /\n    //               \\       /\n    //              a2''   b2''\n    //                 \\   /\n    //                  \\ /\n    //                   *\n    //\n    //           [the final state]\n    //\n    // The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n    // applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n    // transformed.\n    //\n    // Another thing to consider is that an operation during transformation can be broken into multiple operations.\n    // Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n    //\n    // In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n    // (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n    // by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n    // from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n    // by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n    // following `operationsA` (in our case it is just `a2`).\n    //\n    // Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n    // the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n    // be transformed by both of them.\n    //\n    //                       *\n    //                      / \\\n    //                     /   \\\n    //                    /     \\\n    //                  b1       a1\n    //                  /         \\\n    //                 /           \\\n    //                /             \\\n    //               *               *\n    //              / \\             / \\\n    //             /  a11'         /   \\\n    //            /     \\         /     \\\n    //          b2       *      b1'      a2\n    //          /       / \\     /         \\\n    //         /       /  a12' /           \\\n    //        /       /     \\ /             \\\n    //       *       b2'     *               *\n    //        \\     /       / \\             /\n    //       a11'' /     b21'' \\           /\n    //          \\ /       /     \\         /\n    //           *       *      a2'     b1''\n    //            \\     / \\       \\     /\n    //          a12'' b22''\\       \\   /\n    //              \\ /     \\       \\ /\n    //               *      a2''     *\n    //                \\       \\     /\n    //                 \\       \\  b21'''\n    //                  \\       \\ /\n    //                a2'''      *\n    //                    \\     /\n    //                     \\  b22'''\n    //                      \\ /\n    //                       *\n    //\n    // Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n    //\n    // Having all that on mind, here is an outline for the transformation process algorithm:\n    //\n    // 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n    //\n    // 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n    // All original `operationsA` are set to be transformed starting from the first operation `b`.\n    //\n    // 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n    // by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n    // with the transformation results.\n    //\n    // 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n    // original operation.\n    //\n    // 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n    // be transformed by.\n    //\n    // 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n    // unless the last operation `a` was transformed.\n    //\n    // The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n    // The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n    // to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n    // index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n    // operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n    // current `a` operation index to the next one.\n    //\n    // For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n    const nextTransformIndex = new WeakMap();\n    // For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n    for (const op of operationsA) {\n        nextTransformIndex.set(op, 0);\n    }\n    // Additional data that is used for some postprocessing after the main transformation process is done.\n    const data = {\n        nextBaseVersionA: operationsA[operationsA.length - 1].baseVersion + 1,\n        nextBaseVersionB: operationsB[operationsB.length - 1].baseVersion + 1,\n        originalOperationsACount: operationsA.length,\n        originalOperationsBCount: operationsB.length\n    };\n    // Index of currently transformed operation `a`.\n    let i = 0;\n    // While not all `operationsA` are transformed...\n    while (i < operationsA.length) {\n        // Get \"current\" operation `a`.\n        const opA = operationsA[i];\n        // For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n        const indexB = nextTransformIndex.get(opA);\n        // If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n        if (indexB == operationsB.length) {\n            i++;\n            continue;\n        }\n        const opB = operationsB[indexB];\n        // Transform `a` by `b` and `b` by `a`.\n        const newOpsA = transform(opA, opB, contextFactory.getContext(opA, opB, true));\n        const newOpsB = transform(opB, opA, contextFactory.getContext(opB, opA, false));\n        // As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n        // Update contextual information about operations.\n        contextFactory.updateRelation(opA, opB);\n        contextFactory.setOriginalOperations(newOpsA, opA);\n        contextFactory.setOriginalOperations(newOpsB, opB);\n        // For new `a` operations, update their index of the next operation `b` to transform them by.\n        //\n        // This is needed even if there was only one result (`a` was not broken) because that information is used\n        // at the beginning of this loop every time.\n        for (const newOpA of newOpsA) {\n            // Acknowledge, that operation `b` also might be broken into multiple operations.\n            //\n            // This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n            // spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n            // be transformed by the same operation (part of it) again.\n            nextTransformIndex.set(newOpA, indexB + newOpsB.length);\n        }\n        // Update `operationsA` and `operationsB` with the transformed versions.\n        operationsA.splice(i, 1, ...newOpsA);\n        operationsB.splice(indexB, 1, ...newOpsB);\n    }\n    if (options.padWithNoOps) {\n        // If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n        const brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n        const brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n        // Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n        // that the base versions are equalled.\n        //\n        // Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n        padWithNoOps(operationsA, brokenOperationsBCount - brokenOperationsACount);\n        padWithNoOps(operationsB, brokenOperationsACount - brokenOperationsBCount);\n    }\n    // Finally, update base versions of transformed operations.\n    updateBaseVersions(operationsA, data.nextBaseVersionB);\n    updateBaseVersions(operationsB, data.nextBaseVersionA);\n    return { operationsA, operationsB, originalOperations };\n}\n/**\n * Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n * about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\n */\nclass ContextFactory {\n    /**\n     * Creates `ContextFactory` instance.\n     *\n     * @param document Document which the operations change.\n     * @param useRelations Whether during transformation relations should be used (used during undo for\n     * better conflict resolution).\n     * @param forceWeakRemove If set to `false`, remove operation will be always stronger than move operation,\n     * so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n     */\n    constructor(document, useRelations, forceWeakRemove = false) {\n        // For each operation that is created during transformation process, we keep a reference to the original operation\n        // which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n        // gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n        // This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n        // gathered data through original operation reference.\n        this.originalOperations = new Map();\n        // `model.History` instance which information about undone operations will be taken from.\n        this._history = document.history;\n        // Whether additional context should be used.\n        this._useRelations = useRelations;\n        this._forceWeakRemove = !!forceWeakRemove;\n        // Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n        // to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n        // we keep relations between them.\n        this._relations = new Map();\n    }\n    /**\n     * Sets \"original operation\" for given operations.\n     *\n     * During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n     * or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n     * so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n     *\n     * The original operation object will be used as such an universal linking id. Throughout the transformation process\n     * all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n     *\n     * If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n     * This should be used as an initialization step.\n     *\n     * If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n     * for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n     * `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n     */\n    setOriginalOperations(operations, takeFrom = null) {\n        const originalOperation = takeFrom ? this.originalOperations.get(takeFrom) : null;\n        for (const operation of operations) {\n            this.originalOperations.set(operation, originalOperation || operation);\n        }\n    }\n    /**\n     * Saves a relation between operations `opA` and `opB`.\n     *\n     * Relations are then later used to help solve conflicts when operations are transformed.\n     */\n    updateRelation(opA, opB) {\n        // The use of relations is described in a bigger detail in transformation functions.\n        //\n        // In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n        // Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n        // position is before the other operation source position. This kind of information gives contextual information when\n        // transformation is used during undo. Similar checks are done for other pairs of operations.\n        //\n        if (opA instanceof MoveOperation) {\n            if (opB instanceof MergeOperation) {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opB.movedRange.containsPosition(opA.targetPosition)) {\n                    this._setRelation(opA, opB, 'insertAtSource');\n                }\n                else if (opA.targetPosition.isEqual(opB.deletionPosition)) {\n                    this._setRelation(opA, opB, 'insertBetween');\n                }\n                else if (opA.targetPosition.isAfter(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'moveTargetAfter');\n                }\n            }\n            else if (opB instanceof MoveOperation) {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opA.targetPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'insertBefore');\n                }\n                else {\n                    this._setRelation(opA, opB, 'insertAfter');\n                }\n            }\n        }\n        else if (opA instanceof SplitOperation) {\n            if (opB instanceof MergeOperation) {\n                if (opA.splitPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'splitBefore');\n                }\n            }\n            else if (opB instanceof MoveOperation) {\n                if (opA.splitPosition.isEqual(opB.sourcePosition) || opA.splitPosition.isBefore(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'splitBefore');\n                }\n                else {\n                    const range = Range._createFromPositionAndShift(opB.sourcePosition, opB.howMany);\n                    if (opA.splitPosition.hasSameParentAs(opB.sourcePosition) && range.containsPosition(opA.splitPosition)) {\n                        const howMany = range.end.offset - opA.splitPosition.offset;\n                        const offset = opA.splitPosition.offset - range.start.offset;\n                        this._setRelation(opA, opB, { howMany, offset });\n                    }\n                }\n            }\n        }\n        else if (opA instanceof MergeOperation) {\n            if (opB instanceof MergeOperation) {\n                if (!opA.targetPosition.isEqual(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'mergeTargetNotMoved');\n                }\n                if (opA.sourcePosition.isEqual(opB.targetPosition)) {\n                    this._setRelation(opA, opB, 'mergeSourceNotMoved');\n                }\n                if (opA.sourcePosition.isEqual(opB.sourcePosition)) {\n                    this._setRelation(opA, opB, 'mergeSameElement');\n                }\n            }\n            else if (opB instanceof SplitOperation) {\n                if (opA.sourcePosition.isEqual(opB.splitPosition)) {\n                    this._setRelation(opA, opB, 'splitAtSource');\n                }\n            }\n        }\n        else if (opA instanceof MarkerOperation) {\n            const markerRange = opA.newRange;\n            if (!markerRange) {\n                return;\n            }\n            if (opB instanceof MoveOperation) {\n                const movedRange = Range._createFromPositionAndShift(opB.sourcePosition, opB.howMany);\n                const affectedLeft = movedRange.containsPosition(markerRange.start) ||\n                    movedRange.start.isEqual(markerRange.start);\n                const affectedRight = movedRange.containsPosition(markerRange.end) ||\n                    movedRange.end.isEqual(markerRange.end);\n                if ((affectedLeft || affectedRight) && !movedRange.containsRange(markerRange)) {\n                    this._setRelation(opA, opB, {\n                        side: affectedLeft ? 'left' : 'right',\n                        path: affectedLeft ? markerRange.start.path.slice() : markerRange.end.path.slice()\n                    });\n                }\n            }\n            else if (opB instanceof MergeOperation) {\n                const wasInLeftElement = markerRange.start.isEqual(opB.targetPosition);\n                const wasStartBeforeMergedElement = markerRange.start.isEqual(opB.deletionPosition);\n                const wasEndBeforeMergedElement = markerRange.end.isEqual(opB.deletionPosition);\n                const wasInRightElement = markerRange.end.isEqual(opB.sourcePosition);\n                if (wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement) {\n                    this._setRelation(opA, opB, {\n                        wasInLeftElement,\n                        wasStartBeforeMergedElement,\n                        wasEndBeforeMergedElement,\n                        wasInRightElement\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n     */\n    getContext(opA, opB, aIsStrong) {\n        return {\n            aIsStrong,\n            aWasUndone: this._wasUndone(opA),\n            bWasUndone: this._wasUndone(opB),\n            abRelation: this._useRelations ? this._getRelation(opA, opB) : null,\n            baRelation: this._useRelations ? this._getRelation(opB, opA) : null,\n            forceWeakRemove: this._forceWeakRemove\n        };\n    }\n    /**\n     * Returns whether given operation `op` has already been undone.\n     *\n     * Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n     */\n    _wasUndone(op) {\n        // For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n        // operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n        // from which was undone. So get that original operation.\n        const originalOp = this.originalOperations.get(op);\n        // And check with the document if the original operation was undone.\n        return originalOp.wasUndone || this._history.isUndoneOperation(originalOp);\n    }\n    /**\n     * Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n     * was set earlier or `null` if there was no relation between those operations.\n     *\n     * This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n     *\n     * When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n     * undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n     * we look forward in the future and ask if in that future `opB` was undone.\n     *\n     * Relations is a backward process to `wasUndone()`.\n     *\n     * Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n     * operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n     * a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n     * between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n     * a better decision when resolving a conflict between two operations, because we know more about the context of\n     * those two operations.\n     *\n     * This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n     * back to search for a meaningful contextual information.\n     */\n    _getRelation(opA, opB) {\n        // Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n        const origB = this.originalOperations.get(opB);\n        const undoneB = this._history.getUndoneOperation(origB);\n        // If `opB` is not undoing any operation, there is no relation.\n        if (!undoneB) {\n            return null;\n        }\n        const origA = this.originalOperations.get(opA);\n        const relationsA = this._relations.get(origA);\n        // Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n        if (relationsA) {\n            return relationsA.get(undoneB) || null;\n        }\n        return null;\n    }\n    /**\n     * Helper function for `ContextFactory#updateRelations`.\n     */\n    _setRelation(opA, opB, relation) {\n        // As always, setting is for original operations, not the clones/transformed operations.\n        const origA = this.originalOperations.get(opA);\n        const origB = this.originalOperations.get(opB);\n        let relationsA = this._relations.get(origA);\n        if (!relationsA) {\n            relationsA = new Map();\n            this._relations.set(origA, relationsA);\n        }\n        relationsA.set(origB, relation);\n    }\n}\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @param operations Operations to update.\n * @param baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions(operations, baseVersion) {\n    for (const operation of operations) {\n        operation.baseVersion = baseVersion++;\n    }\n}\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n */\nfunction padWithNoOps(operations, howMany) {\n    for (let i = 0; i < howMany; i++) {\n        operations.push(new NoOperation(0));\n    }\n}\n// -----------------------\nsetTransformation(AttributeOperation, AttributeOperation, (a, b, context) => {\n    // If operations in conflict, check if their ranges intersect and manage them properly.\n    //\n    // Operations can be in conflict only if:\n    //\n    // * their key is the same (they change the same attribute), and\n    // * they are in the same parent (operations for ranges [ 1 ] - [ 3 ] and [ 2, 0 ] - [ 2, 5 ] change different\n    // elements and can't be in conflict).\n    if (a.key === b.key && a.range.start.hasSameParentAs(b.range.start)) {\n        // First, we want to apply change to the part of a range that has not been changed by the other operation.\n        const operations = a.range.getDifference(b.range).map(range => {\n            return new AttributeOperation(range, a.key, a.oldValue, a.newValue, 0);\n        });\n        // Then we take care of the common part of ranges.\n        const common = a.range.getIntersection(b.range);\n        if (common) {\n            // If this operation is more important, we also want to apply change to the part of the\n            // original range that has already been changed by the other operation. Since that range\n            // got changed we also have to update `oldValue`.\n            if (context.aIsStrong) {\n                operations.push(new AttributeOperation(common, b.key, b.newValue, a.newValue, 0));\n            }\n        }\n        if (operations.length == 0) {\n            return [new NoOperation(0)];\n        }\n        return operations;\n    }\n    else {\n        // If operations don't conflict, simply return an array containing just a clone of this operation.\n        return [a];\n    }\n});\nsetTransformation(AttributeOperation, InsertOperation, (a, b) => {\n    // Case 1:\n    //\n    // The attribute operation range includes the position where nodes were inserted.\n    // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n    // the inserted nodes were elements and they should not receive attributes.\n    //\n    if (a.range.start.hasSameParentAs(b.position) && a.range.containsPosition(b.position)) {\n        // If new nodes should not receive attributes, two separated ranges will be returned.\n        // Otherwise, one expanded range will be returned.\n        const range = a.range._getTransformedByInsertion(b.position, b.howMany, !b.shouldReceiveAttributes);\n        const result = range.map(r => {\n            return new AttributeOperation(r, a.key, a.oldValue, a.newValue, a.baseVersion);\n        });\n        if (b.shouldReceiveAttributes) {\n            // `AttributeOperation#range` includes some newly inserted text.\n            // The operation should also change the attribute of that text. An example:\n            //\n            // Bold should be applied on the following range:\n            // <p>Fo[zb]ar</p>\n            //\n            // In meantime, new text is typed:\n            // <p>Fozxxbar</p>\n            //\n            // Bold should be applied also on the new text:\n            // <p>Fo[zxxb]ar</p>\n            // <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n            //\n            // There is a special case to consider here to consider.\n            //\n            // Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n            // have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n            //\n            // Attribute `highlight=\"yellow\"` should be applied on the following range:\n            // <p>Fo[zb]ar<p>\n            //\n            // In meantime, character `x` with `highlight=\"red\"` is typed:\n            // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n            //\n            // In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n            // because that would lead to an exception (`oldValue` is incorrect for `x`).\n            //\n            // We also cannot break the original range as this would mess up a scenario when there are multiple following\n            // insert operations, because then only the first inserted character is included in those ranges:\n            // <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n            //\n            // So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n            //\n            // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n            //\n            // But before that operation would be applied, we will add an additional attribute operation that will change\n            // attributes on the inserted nodes in a way which would make the original operation correct:\n            //\n            // <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n            // <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n            //\n            // Generate complementary attribute operation. Be sure to add it before the original operation.\n            const op = _getComplementaryAttributeOperations(b, a.key, a.oldValue);\n            if (op) {\n                result.unshift(op);\n            }\n        }\n        // If nodes should not receive new attribute, we are done here.\n        return result;\n    }\n    // If insert operation is not expanding the attribute operation range, simply transform the range.\n    a.range = a.range._getTransformedByInsertion(b.position, b.howMany, false)[0];\n    return [a];\n});\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n */\nfunction _getComplementaryAttributeOperations(insertOperation, key, newValue) {\n    const nodes = insertOperation.nodes;\n    // At the beginning we store the attribute value from the first node.\n    const insertValue = nodes.getNode(0).getAttribute(key);\n    if (insertValue == newValue) {\n        return null;\n    }\n    const range = new Range(insertOperation.position, insertOperation.position.getShiftedBy(insertOperation.howMany));\n    return new AttributeOperation(range, key, insertValue, newValue, 0);\n}\nsetTransformation(AttributeOperation, MergeOperation, (a, b) => {\n    const ranges = [];\n    // Case 1:\n    //\n    // Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n    // An additional attribute operation that will change the (re)moved element needs to be generated.\n    //\n    if (a.range.start.hasSameParentAs(b.deletionPosition)) {\n        if (a.range.containsPosition(b.deletionPosition) || a.range.start.isEqual(b.deletionPosition)) {\n            ranges.push(Range._createFromPositionAndShift(b.graveyardPosition, 1));\n        }\n    }\n    const range = a.range._getTransformedByMergeOperation(b);\n    // Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n    if (!range.isCollapsed) {\n        ranges.push(range);\n    }\n    // Create `AttributeOperation`s out of the ranges.\n    return ranges.map(range => {\n        return new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion);\n    });\n});\nsetTransformation(AttributeOperation, MoveOperation, (a, b) => {\n    const ranges = _breakRangeByMoveOperation(a.range, b);\n    // Create `AttributeOperation`s out of the ranges.\n    return ranges.map(range => new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion));\n});\n/**\n * Helper function for `AttributeOperation` x `MoveOperation` transformation.\n *\n * Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n * are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n * be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n * top-level nodes of the original `range`.\n *\n * This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n * track only how those nodes have been affected by `MoveOperation`.\n */\nfunction _breakRangeByMoveOperation(range, moveOp) {\n    const moveRange = Range._createFromPositionAndShift(moveOp.sourcePosition, moveOp.howMany);\n    // We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n    // transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n    let common = null;\n    let difference = [];\n    // Let's compare the ranges.\n    if (moveRange.containsRange(range, true)) {\n        // If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n        common = range;\n    }\n    else if (range.start.hasSameParentAs(moveRange.start)) {\n        // If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n        // that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n        difference = range.getDifference(moveRange);\n        common = range.getIntersection(moveRange);\n    }\n    else {\n        // In any other situation we assume that original range is different than move range, that is that move operation\n        // moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n        //\n        // Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n        // than `.getDifference` (we would get two ranges).\n        difference = [range];\n    }\n    const result = [];\n    // The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n    // we do it by hand.\n    for (let diff of difference) {\n        // First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n        // as the range is different than the moved range.\n        diff = diff._getTransformedByDeletion(moveOp.sourcePosition, moveOp.howMany);\n        // Transform also `targetPosition`.\n        const targetPosition = moveOp.getMovedRangeStart();\n        // Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n        const spread = diff.start.hasSameParentAs(targetPosition);\n        // Transform by insertion of moved nodes.\n        const diffs = diff._getTransformedByInsertion(targetPosition, moveOp.howMany, spread);\n        result.push(...diffs);\n    }\n    // Common part can be simply transformed by the move operation. This is because move operation will not target to\n    // that common part (the operation would have to target inside its own moved range).\n    if (common) {\n        result.push(common._getTransformedByMove(moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false)[0]);\n    }\n    return result;\n}\nsetTransformation(AttributeOperation, SplitOperation, (a, b) => {\n    // Case 1:\n    //\n    // Split node is the last node in `AttributeOperation#range`.\n    // `AttributeOperation#range` needs to be expanded to include the new (split) node.\n    //\n    // Attribute `type` to be changed to `numbered` but the `listItem` is split.\n    // <listItem type=\"bulleted\">foobar</listItem>\n    //\n    // After split:\n    // <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n    //\n    // After attribute change:\n    // <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n    //\n    if (a.range.end.isEqual(b.insertionPosition)) {\n        if (!b.graveyardPosition) {\n            a.range.end.offset++;\n        }\n        return [a];\n    }\n    // Case 2:\n    //\n    // Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n    // not going to make a flat range.\n    //\n    // Content with range-to-change and split position:\n    // <p>Fo[zb^a]r</p>\n    //\n    // After split:\n    // <p>Fozb</p><p>ar</p>\n    //\n    // Make two separate ranges containing all nodes to change:\n    // <p>Fo[zb]</p><p>[a]r</p>\n    //\n    if (a.range.start.hasSameParentAs(b.splitPosition) && a.range.containsPosition(b.splitPosition)) {\n        const secondPart = a.clone();\n        secondPart.range = new Range(b.moveTargetPosition.clone(), a.range.end._getCombined(b.splitPosition, b.moveTargetPosition));\n        a.range.end = b.splitPosition.clone();\n        a.range.end.stickiness = 'toPrevious';\n        return [a, secondPart];\n    }\n    // The default case.\n    //\n    a.range = a.range._getTransformedBySplitOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, AttributeOperation, (a, b) => {\n    const result = [a];\n    // Case 1:\n    //\n    // The attribute operation range includes the position where nodes were inserted.\n    // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n    // the inserted nodes were elements and they should not receive attributes.\n    //\n    // This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n    // although this case is a little less complicated. In this case we simply need to change attributes of the\n    // inserted nodes and that's it.\n    //\n    if (a.shouldReceiveAttributes && a.position.hasSameParentAs(b.range.start) && b.range.containsPosition(a.position)) {\n        const op = _getComplementaryAttributeOperations(a, b.key, b.newValue);\n        if (op) {\n            result.push(op);\n        }\n    }\n    // The default case is: do nothing.\n    // `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n    //\n    return result;\n});\nsetTransformation(InsertOperation, InsertOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n    // what will be the order of inserted nodes. However, there is no additional information to help in that\n    // decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n    //\n    // To achieve that, we will check if the operation is strong.\n    // If it is, it won't get transformed. If it is not, it will be moved.\n    //\n    if (a.position.isEqual(b.position) && context.aIsStrong) {\n        return [a];\n    }\n    // The default case.\n    //\n    a.position = a.position._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, MoveOperation, (a, b) => {\n    // The default case.\n    //\n    a.position = a.position._getTransformedByMoveOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, SplitOperation, (a, b) => {\n    // The default case.\n    //\n    a.position = a.position._getTransformedBySplitOperation(b);\n    return [a];\n});\nsetTransformation(InsertOperation, MergeOperation, (a, b) => {\n    a.position = a.position._getTransformedByMergeOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(MarkerOperation, InsertOperation, (a, b) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedByInsertOperation(b)[0];\n    }\n    if (a.newRange) {\n        a.newRange = a.newRange._getTransformedByInsertOperation(b)[0];\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MarkerOperation, (a, b, context) => {\n    if (a.name == b.name) {\n        if (context.aIsStrong) {\n            a.oldRange = b.newRange ? b.newRange.clone() : null;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MergeOperation, (a, b) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedByMergeOperation(b);\n    }\n    if (a.newRange) {\n        a.newRange = a.newRange._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, MoveOperation, (a, b, context) => {\n    if (a.oldRange) {\n        a.oldRange = Range._createFromRanges(a.oldRange._getTransformedByMoveOperation(b));\n    }\n    if (a.newRange) {\n        if (context.abRelation) {\n            const aNewRange = Range._createFromRanges(a.newRange._getTransformedByMoveOperation(b));\n            if (context.abRelation.side == 'left' && b.targetPosition.isEqual(a.newRange.start)) {\n                a.newRange.end = aNewRange.end;\n                a.newRange.start.path = context.abRelation.path;\n                return [a];\n            }\n            else if (context.abRelation.side == 'right' && b.targetPosition.isEqual(a.newRange.end)) {\n                a.newRange.start = aNewRange.start;\n                a.newRange.end.path = context.abRelation.path;\n                return [a];\n            }\n        }\n        a.newRange = Range._createFromRanges(a.newRange._getTransformedByMoveOperation(b));\n    }\n    return [a];\n});\nsetTransformation(MarkerOperation, SplitOperation, (a, b, context) => {\n    if (a.oldRange) {\n        a.oldRange = a.oldRange._getTransformedBySplitOperation(b);\n    }\n    if (a.newRange) {\n        if (context.abRelation) {\n            const aNewRange = a.newRange._getTransformedBySplitOperation(b);\n            if (a.newRange.start.isEqual(b.splitPosition) && context.abRelation.wasStartBeforeMergedElement) {\n                a.newRange.start = Position._createAt(b.insertionPosition);\n            }\n            else if (a.newRange.start.isEqual(b.splitPosition) && !context.abRelation.wasInLeftElement) {\n                a.newRange.start = Position._createAt(b.moveTargetPosition);\n            }\n            if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasInRightElement) {\n                a.newRange.end = Position._createAt(b.moveTargetPosition);\n            }\n            else if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasEndBeforeMergedElement) {\n                a.newRange.end = Position._createAt(b.insertionPosition);\n            }\n            else {\n                a.newRange.end = aNewRange.end;\n            }\n            return [a];\n        }\n        a.newRange = a.newRange._getTransformedBySplitOperation(b);\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(MergeOperation, InsertOperation, (a, b) => {\n    if (a.sourcePosition.hasSameParentAs(b.position)) {\n        a.howMany += b.howMany;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByInsertOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(MergeOperation, MergeOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Same merge operations.\n    //\n    // Both operations have same source and target positions. So the element already got merged and there is\n    // theoretically nothing to do.\n    //\n    if (a.sourcePosition.isEqual(b.sourcePosition) && a.targetPosition.isEqual(b.targetPosition)) {\n        // There are two ways that we can provide a do-nothing operation.\n        //\n        // First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n        //\n        // Second is a merge operation that has the source operation in the merged element - in the graveyard -\n        // same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n        // which is almost the same as NoOperation.\n        //\n        // This way the merge operation can be later transformed by split operation\n        // to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n        //\n        if (!context.bWasUndone) {\n            return [new NoOperation(0)];\n        }\n        else {\n            const path = b.graveyardPosition.path.slice();\n            path.push(0);\n            a.sourcePosition = new Position(b.graveyardPosition.root, path);\n            a.howMany = 0;\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Same merge source position but different target position.\n    //\n    // This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n    // and the other person removed that paragraph and merged the same paragraph to something before:\n    //\n    // Client A:\n    // <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n    // <p>Foo</p><p>BarXyz</p>\n    //\n    // Client B:\n    // <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n    // <p>Foo</p><p>[]Xyz</p>\n    // <p>FooXyz</p>\n    //\n    // In this case we need to decide where finally \"Xyz\" will land:\n    //\n    // <p>FooXyz</p>               graveyard: <p>Bar</p>\n    // <p>Foo</p>                  graveyard: <p>BarXyz</p>\n    //\n    // Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n    // nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n    // end up in the graveyard (see above).\n    //\n    // If neither or both operations point to graveyard, then let `aIsStrong` decide.\n    //\n    if (a.sourcePosition.isEqual(b.sourcePosition) && !a.targetPosition.isEqual(b.targetPosition) &&\n        !context.bWasUndone && context.abRelation != 'splitAtSource') {\n        const aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n        const bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n        // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n        const aIsWeak = aToGraveyard && !bToGraveyard;\n        // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n        const bIsWeak = bToGraveyard && !aToGraveyard;\n        // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n        const forceMove = bIsWeak || (!aIsWeak && context.aIsStrong);\n        if (forceMove) {\n            const sourcePosition = b.targetPosition._getTransformedByMergeOperation(b);\n            const targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n            return [new MoveOperation(sourcePosition, a.howMany, targetPosition, 0)];\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    // The default case.\n    //\n    if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n        a.howMany += b.howMany;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByMergeOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n    // Handle positions in graveyard.\n    // If graveyard positions are same and `a` operation is strong - do not transform.\n    if (!a.graveyardPosition.isEqual(b.graveyardPosition) || !context.aIsStrong) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MergeOperation, MoveOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // The element to merge got removed.\n    //\n    // Merge operation does support merging elements which are not siblings. So it would not be a problem\n    // from technical point of view. However, if the element was removed, the intention of the user deleting it\n    // was to have it all deleted, together with its children. From user experience point of view, moving back the\n    // removed nodes might be unexpected. This means that in this scenario we will block the merging.\n    //\n    // The exception of this rule would be if the remove operation was later undone.\n    //\n    const removedRange = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    if (b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove) {\n        if (a.deletionPosition.hasSameParentAs(b.sourcePosition) && removedRange.containsPosition(a.sourcePosition)) {\n            return [new NoOperation(0)];\n        }\n    }\n    // The default case.\n    //\n    if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n        a.howMany += b.howMany;\n    }\n    if (a.sourcePosition.hasSameParentAs(b.sourcePosition)) {\n        a.howMany -= b.howMany;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedByMoveOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedByMoveOperation(b);\n    // `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n    // be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n    // Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n    // This means that we won't transform graveyard position if it is equal to move operation target position.\n    if (!a.graveyardPosition.isEqual(b.targetPosition)) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MergeOperation, SplitOperation, (a, b, context) => {\n    if (b.graveyardPosition) {\n        // If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n        // transform `a.graveyardPosition` accordingly.\n        a.graveyardPosition = a.graveyardPosition._getTransformedByDeletion(b.graveyardPosition, 1);\n        // This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n        //\n        // So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n        // source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n        // means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n        //\n        // If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n        // `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n        // properties.\n        //\n        if (a.deletionPosition.isEqual(b.graveyardPosition)) {\n            a.howMany = b.howMany;\n        }\n    }\n    // Case 1:\n    //\n    // Merge operation moves nodes to the place where split happens.\n    // This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n    // paragraph and there is a merge (delete) at the beginning of the second paragraph:\n    //\n    // <p>Foo{}</p><p>[]Bar</p>.\n    //\n    // Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n    //\n    // State after split:\n    // <p>Foo</p><p></p><p>Bar</p>\n    //\n    // Now, `Bar` should be merged to the new paragraph:\n    // <p>Foo</p><p>Bar</p>\n    //\n    // Instead of merging it to the original paragraph:\n    // <p>FooBar</p><p></p>\n    //\n    // This means that `targetPosition` needs to be transformed. This is the default case though.\n    // For example, if the split would be after `F`, `targetPosition` should also be transformed.\n    //\n    // There are three exceptions, though, when we want to keep `targetPosition` as it was.\n    //\n    // First exception is when the merge target position is inside an element (not at the end, as usual). This\n    // happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n    // targets inside the element we want to keep the original target position (and not transform it) because\n    // we have additional context telling us that we want to merge to the original element. We can check if the\n    // merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n    // is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n    //\n    // Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n    // if target position would be transformed, the merge operation would target at the source position:\n    //\n    // root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n    //\n    // SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n    // MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n    //\n    // Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n    // We would like to merge from the empty <p> to the \"Foo\" <p>:\n    //\n    // root: <p>Foo</p><p></p>\t\t\tgraveyard:\n    //\n    // MergeOperation#sourcePosition = root [ 1, 0 ]\n    //\n    // If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n    //\n    // Third exception is connected with relations. If this happens during undo and we have explicit information\n    // that target position has not been affected by the operation which is undone by this split then this split should\n    // not move the target position either.\n    //\n    if (a.targetPosition.isEqual(b.splitPosition)) {\n        const mergeInside = b.howMany != 0;\n        const mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual(b.graveyardPosition);\n        if (mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved') {\n            a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n    // The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n    // split element) or should be move to the beginning of the new element.\n    //\n    if (a.sourcePosition.isEqual(b.splitPosition)) {\n        // Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n        // This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n        // In that case `a` operation source position should stay where it is.\n        if (context.abRelation == 'mergeSourceNotMoved') {\n            a.howMany = 0;\n            a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n        // This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n        // See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n        // the special case is not applied.\n        //\n        // Now, the merge operation is transformed by the split which has undone that previous merge operation.\n        // So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n        //\n        if (context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0) {\n            a.sourcePosition = b.moveTargetPosition.clone();\n            a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // The default case.\n    //\n    if (a.sourcePosition.hasSameParentAs(b.splitPosition)) {\n        a.howMany = b.splitPosition.offset;\n    }\n    a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n    a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(MoveOperation, InsertOperation, (a, b) => {\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const transformed = moveRange._getTransformedByInsertOperation(b, false)[0];\n    a.sourcePosition = transformed.start;\n    a.howMany = transformed.end.offset - transformed.start.offset;\n    // See `InsertOperation` x `MoveOperation` transformation for details on this case.\n    //\n    // In summary, both operations point to the same place, so the order of nodes needs to be decided.\n    // `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n    // between operations.\n    //\n    if (!a.targetPosition.isEqual(b.position)) {\n        a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n    }\n    return [a];\n});\nsetTransformation(MoveOperation, MoveOperation, (a, b, context) => {\n    //\n    // Setting and evaluating some variables that will be used in special cases and default algorithm.\n    //\n    // Create ranges from `MoveOperations` properties.\n    const rangeA = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const rangeB = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    // Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n    // this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n    let aIsStrong = context.aIsStrong;\n    // This will be used to decide the order of nodes if both operations target at the same position.\n    // By default, use strong/weak operation mechanism.\n    let insertBefore = !context.aIsStrong;\n    // If the relation is set, then use it to decide nodes order.\n    if (context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter') {\n        insertBefore = true;\n    }\n    else if (context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore') {\n        insertBefore = false;\n    }\n    // `a.targetPosition` could be affected by the `b` operation. We will transform it.\n    let newTargetPosition;\n    if (a.targetPosition.isEqual(b.targetPosition) && insertBefore) {\n        newTargetPosition = a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n    }\n    else {\n        newTargetPosition = a.targetPosition._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    }\n    //\n    // Special case #1 + mirror.\n    //\n    // Special case when both move operations' target positions are inside nodes that are\n    // being moved by the other move operation. So in other words, we move ranges into inside of each other.\n    // This case can't be solved reasonably (on the other hand, it should not happen often).\n    if (_moveTargetIntoMovedRange(a, b) && _moveTargetIntoMovedRange(b, a)) {\n        // Instead of transforming operation, we return a reverse of the operation that we transform by.\n        // So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n        return [b.getReversed()];\n    }\n    //\n    // End of special case #1.\n    //\n    //\n    // Special case #2.\n    //\n    // Check if `b` operation targets inside `rangeA`.\n    const bTargetsToA = rangeA.containsPosition(b.targetPosition);\n    // If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n    // You might say that operation `b` is captured inside operation `a`.\n    if (bTargetsToA && rangeA.containsRange(rangeB, true)) {\n        // There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n        // we need to transform `a` operation anyway.\n        rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // Special case #2 mirror.\n    //\n    const aTargetsToB = rangeB.containsPosition(a.targetPosition);\n    if (aTargetsToB && rangeB.containsRange(rangeA, true)) {\n        // `a` operation is \"moved together\" with `b` operation.\n        // Here, just move `rangeA` \"inside\" `rangeB`.\n        rangeA.start = rangeA.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        rangeA.end = rangeA.end._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // End of special case #2.\n    //\n    //\n    // Special case #3 + mirror.\n    //\n    // `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n    // but not on the same tree level. In such case ranges have common part but we have to treat it\n    // differently, because in such case those ranges are not really conflicting and should be treated like\n    // two separate ranges. Also we have to discard two difference parts.\n    const aCompB = compareArrays(a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath());\n    if (aCompB == 'prefix' || aCompB == 'extension') {\n        // Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n        // Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n        // like a one difference part.\n        rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n        return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n    }\n    //\n    // End of special case #3.\n    //\n    //\n    // Default case - ranges are on the same level or are not connected with each other.\n    //\n    // Modifier for default case.\n    // Modifies `aIsStrong` flag in certain conditions.\n    //\n    // If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n    // to provide more expected results.\n    if (a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove) {\n        aIsStrong = true;\n    }\n    else if (a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove) {\n        aIsStrong = false;\n    }\n    // Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n    // This will aggregate transformed ranges.\n    const ranges = [];\n    // Get the \"difference part\" of `a` operation source range.\n    // This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n    const difference = rangeA.getDifference(rangeB);\n    for (const range of difference) {\n        // Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n        range.start = range.start._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        range.end = range.end._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        // If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n        const shouldSpread = compareArrays(range.start.getParentPath(), b.getMovedRangeStart().getParentPath()) == 'same';\n        const newRanges = range._getTransformedByInsertion(b.getMovedRangeStart(), b.howMany, shouldSpread);\n        ranges.push(...newRanges);\n    }\n    // Then, we have to manage the \"common part\" of both move ranges.\n    const common = rangeA.getIntersection(rangeB);\n    if (common !== null && aIsStrong) {\n        // Calculate the new position of that part of original range.\n        common.start = common.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        common.end = common.end._getCombined(b.sourcePosition, b.getMovedRangeStart());\n        // Take care of proper range order.\n        //\n        // Put `common` at appropriate place. Keep in mind that we are interested in original order.\n        // Basically there are only three cases: there is zero, one or two difference ranges.\n        //\n        // If there is zero difference ranges, just push `common` in the array.\n        if (ranges.length === 0) {\n            ranges.push(common);\n        }\n        // If there is one difference range, we need to check whether common part was before it or after it.\n        else if (ranges.length == 1) {\n            if (rangeB.start.isBefore(rangeA.start) || rangeB.start.isEqual(rangeA.start)) {\n                ranges.unshift(common);\n            }\n            else {\n                ranges.push(common);\n            }\n        }\n        // If there are more ranges (which means two), put common part between them. This is the only scenario\n        // where there could be two difference ranges so we don't have to make any comparisons.\n        else {\n            ranges.splice(1, 0, common);\n        }\n    }\n    if (ranges.length === 0) {\n        // If there are no \"source ranges\", nothing should be changed.\n        // Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n        return [new NoOperation(a.baseVersion)];\n    }\n    return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, SplitOperation, (a, b, context) => {\n    let newTargetPosition = a.targetPosition.clone();\n    // Do not transform if target position is same as split insertion position and this split comes from undo.\n    // This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n    // We need to make a decision how we will resolve such conflict and this is less harmful way.\n    if (!a.targetPosition.isEqual(b.insertionPosition) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter') {\n        newTargetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n    }\n    // Case 1:\n    //\n    // Last element in the moved range got split.\n    //\n    // In this case the default range transformation will not work correctly as the element created by\n    // split operation would be outside the range. The range to move needs to be fixed manually.\n    //\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    if (moveRange.end.isEqual(b.insertionPosition)) {\n        // Do it only if this is a \"natural\" split, not a one that comes from undo.\n        // If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n        if (!b.graveyardPosition) {\n            a.howMany++;\n        }\n        a.targetPosition = newTargetPosition;\n        return [a];\n    }\n    // Case 2:\n    //\n    // Split happened between the moved nodes. In this case two ranges to move need to be generated.\n    //\n    // Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n    // <p>F[oz|ba]r</p><p>Xyz</p>\n    //\n    // After split:\n    // <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n    //\n    // Correct ranges:\n    // <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n    //\n    // After move:\n    // <p>F</p><p>r</p><p>Xyzozba</p>\n    //\n    if (moveRange.start.hasSameParentAs(b.splitPosition) && moveRange.containsPosition(b.splitPosition)) {\n        let rightRange = new Range(b.splitPosition, moveRange.end);\n        rightRange = rightRange._getTransformedBySplitOperation(b);\n        const ranges = [\n            new Range(moveRange.start, b.splitPosition),\n            rightRange\n        ];\n        return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n    }\n    // Case 3:\n    //\n    // Move operation targets at the split position. We need to decide if the nodes should be inserted\n    // at the end of the split element or at the beginning of the new element.\n    //\n    if (a.targetPosition.isEqual(b.splitPosition) && context.abRelation == 'insertAtSource') {\n        newTargetPosition = b.moveTargetPosition;\n    }\n    // Case 4:\n    //\n    // Move operation targets just after the split element. We need to decide if the nodes should be inserted\n    // between two parts of split element, or after the new element.\n    //\n    // Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n    // <p>Foo|bar</p>^<p>baz</p>\n    // <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n    //\n    // If there is no contextual information between operations (for example, they come from collaborative\n    // editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n    // However, if the split is from undo, in the past, the moved content might be targeting between the\n    // split parts, meaning that was exactly user's intention:\n    //\n    // <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n    // <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n    // <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n    //\n    // In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n    // so we need to transform accordingly. We can detect this scenario thanks to relations.\n    //\n    if (a.targetPosition.isEqual(b.insertionPosition) && context.abRelation == 'insertBetween') {\n        newTargetPosition = a.targetPosition;\n    }\n    // The default case.\n    //\n    const transformed = moveRange._getTransformedBySplitOperation(b);\n    const ranges = [transformed];\n    // Case 5:\n    //\n    // Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n    //\n    if (b.graveyardPosition) {\n        const movesGraveyardElement = moveRange.start.isEqual(b.graveyardPosition) || moveRange.containsPosition(b.graveyardPosition);\n        if (a.howMany > 1 && movesGraveyardElement && !context.aWasUndone) {\n            ranges.push(Range._createFromPositionAndShift(b.insertionPosition, 1));\n        }\n    }\n    return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, MergeOperation, (a, b, context) => {\n    const movedRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    if (b.deletionPosition.hasSameParentAs(a.sourcePosition) && movedRange.containsPosition(b.sourcePosition)) {\n        if (a.type == 'remove' && !context.forceWeakRemove) {\n            // Case 1:\n            //\n            // The element to remove got merged.\n            //\n            // Merge operation does support merging elements which are not siblings. So it would not be a problem\n            // from technical point of view. However, if the element was removed, the intention of the user\n            // deleting it was to have it all deleted. From user experience point of view, moving back the\n            // removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n            //\n            if (!context.aWasUndone) {\n                const results = [];\n                let gyMoveSource = b.graveyardPosition.clone();\n                let splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation(b);\n                if (a.howMany > 1) {\n                    results.push(new MoveOperation(a.sourcePosition, a.howMany - 1, a.targetPosition, 0));\n                    gyMoveSource = gyMoveSource._getTransformedByMove(a.sourcePosition, a.targetPosition, a.howMany - 1);\n                    splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(a.sourcePosition, a.targetPosition, a.howMany - 1);\n                }\n                const gyMoveTarget = b.deletionPosition._getCombined(a.sourcePosition, a.targetPosition);\n                const gyMove = new MoveOperation(gyMoveSource, 1, gyMoveTarget, 0);\n                const splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n                splitNodesMoveTargetPath.push(0);\n                const splitNodesMoveTarget = new Position(gyMove.targetPosition.root, splitNodesMoveTargetPath);\n                splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(gyMoveSource, gyMoveTarget, 1);\n                const splitNodesMove = new MoveOperation(splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0);\n                results.push(gyMove);\n                results.push(splitNodesMove);\n                return results;\n            }\n        }\n        else {\n            // Case 2:\n            //\n            // The element to move got merged and it was the only element to move.\n            // In this case just don't do anything, leave the node in the graveyard. Without special case\n            // it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n            //\n            if (a.howMany == 1) {\n                if (!context.bWasUndone) {\n                    return [new NoOperation(0)];\n                }\n                else {\n                    a.sourcePosition = b.graveyardPosition.clone();\n                    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n                    return [a];\n                }\n            }\n        }\n    }\n    // The default case.\n    //\n    const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n    const transformed = moveRange._getTransformedByMergeOperation(b);\n    a.sourcePosition = transformed.start;\n    a.howMany = transformed.end.offset - transformed.start.offset;\n    a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(RenameOperation, InsertOperation, (a, b) => {\n    a.position = a.position._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, MergeOperation, (a, b) => {\n    // Case 1:\n    //\n    // Element to rename got merged, so it was moved to `b.graveyardPosition`.\n    //\n    if (a.position.isEqual(b.deletionPosition)) {\n        a.position = b.graveyardPosition.clone();\n        a.position.stickiness = 'toNext';\n        return [a];\n    }\n    a.position = a.position._getTransformedByMergeOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, MoveOperation, (a, b) => {\n    a.position = a.position._getTransformedByMoveOperation(b);\n    return [a];\n});\nsetTransformation(RenameOperation, RenameOperation, (a, b, context) => {\n    if (a.position.isEqual(b.position)) {\n        if (context.aIsStrong) {\n            a.oldName = b.newName;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    return [a];\n});\nsetTransformation(RenameOperation, SplitOperation, (a, b) => {\n    // Case 1:\n    //\n    // The element to rename has been split. In this case, the new element should be also renamed.\n    //\n    // User decides to change the paragraph to a list item:\n    // <paragraph>Foobar</paragraph>\n    //\n    // However, in meantime, split happens:\n    // <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n    //\n    // As a result, rename both elements:\n    // <listItem>Foo</listItem><listItem>bar</listItem>\n    //\n    const renamePath = a.position.path;\n    const splitPath = b.splitPosition.getParentPath();\n    if (compareArrays(renamePath, splitPath) == 'same' && !b.graveyardPosition) {\n        const extraRename = new RenameOperation(a.position.getShiftedBy(1), a.oldName, a.newName, 0);\n        return [a, extraRename];\n    }\n    // The default case.\n    //\n    a.position = a.position._getTransformedBySplitOperation(b);\n    return [a];\n});\n// -----------------------\nsetTransformation(RootAttributeOperation, RootAttributeOperation, (a, b, context) => {\n    if (a.root === b.root && a.key === b.key) {\n        if (!context.aIsStrong || a.newValue === b.newValue) {\n            return [new NoOperation(0)];\n        }\n        else {\n            a.oldValue = b.newValue;\n        }\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(RootOperation, RootOperation, (a, b, context) => {\n    if (a.rootName === b.rootName && a.isAdd === b.isAdd && !context.bWasUndone) {\n        return [new NoOperation(0)];\n    }\n    return [a];\n});\n// -----------------------\nsetTransformation(SplitOperation, InsertOperation, (a, b) => {\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.position) && a.splitPosition.offset < b.position.offset) {\n        a.howMany += b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedByInsertOperation(b);\n    a.insertionPosition = a.insertionPosition._getTransformedByInsertOperation(b);\n    return [a];\n});\nsetTransformation(SplitOperation, MergeOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Split element got merged. If two different elements were merged, clients will have different content.\n    //\n    // Example. Merge at `{}`, split at `[]`:\n    // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n    //\n    // On merge side it will look like this:\n    // <heading>FooB[]ar</heading>\n    // <heading>FooB</heading><heading>ar</heading>\n    //\n    // On split side it will look like this:\n    // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n    // <heading>FooB</heading><paragraph>ar</paragraph>\n    //\n    // Clearly, the second element is different for both clients.\n    //\n    // We could use the removed merge element from graveyard as a split element but then clients would have a different\n    // model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n    //\n    // To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n    // in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n    // used for splitting. Example below.\n    //\n    // Original state:\n    // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n    //\n    // Merge side client:\n    //\n    // After merge:\n    // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n    //\n    // Extra split:\n    // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n    //\n    // Use the \"cloned\" element from graveyard:\n    // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n    //\n    // Split side client:\n    //\n    // After split:\n    // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n    //\n    // After merge:\n    // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n    //\n    // This special case scenario only applies if the original split operation clones the split element.\n    // If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n    // knows exactly which element it should use. So there would be no original problem with different contents.\n    //\n    // Additionally, the special case applies only if the merge wasn't already undone.\n    //\n    if (!a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs(b.sourcePosition)) {\n        const splitPath = b.graveyardPosition.path.slice();\n        splitPath.push(0);\n        const splitPosition = new Position(b.graveyardPosition.root, splitPath);\n        const insertionPosition = SplitOperation.getInsertionPosition(new Position(b.graveyardPosition.root, splitPath));\n        const additionalSplit = new SplitOperation(splitPosition, 0, insertionPosition, null, 0);\n        a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        a.graveyardPosition = additionalSplit.insertionPosition.clone();\n        a.graveyardPosition.stickiness = 'toNext';\n        return [additionalSplit, a];\n    }\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.deletionPosition) && !a.splitPosition.isAfter(b.deletionPosition)) {\n        a.howMany--;\n    }\n    if (a.splitPosition.hasSameParentAs(b.targetPosition)) {\n        a.howMany += b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    if (a.graveyardPosition) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n    }\n    return [a];\n});\nsetTransformation(SplitOperation, MoveOperation, (a, b, context) => {\n    const rangeToMove = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n    if (a.graveyardPosition) {\n        // Case 1:\n        //\n        // Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n        // is already moved to the correct position, we need to only move the nodes after the split position.\n        // This will be done by `MoveOperation` instead of `SplitOperation`.\n        //\n        const gyElementMoved = rangeToMove.start.isEqual(a.graveyardPosition) || rangeToMove.containsPosition(a.graveyardPosition);\n        if (!context.bWasUndone && gyElementMoved) {\n            const sourcePosition = a.splitPosition._getTransformedByMoveOperation(b);\n            const newParentPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n            const newTargetPath = newParentPosition.path.slice();\n            newTargetPath.push(0);\n            const newTargetPosition = new Position(newParentPosition.root, newTargetPath);\n            const moveOp = new MoveOperation(sourcePosition, a.howMany, newTargetPosition, 0);\n            return [moveOp];\n        }\n        a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n    }\n    // Case 2:\n    //\n    // Split is at a position where nodes were moved.\n    //\n    // This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n    // \"split operation point of view\".\n    //\n    const splitAtTarget = a.splitPosition.isEqual(b.targetPosition);\n    if (splitAtTarget && (context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore')) {\n        a.howMany += b.howMany;\n        a.splitPosition = a.splitPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        return [a];\n    }\n    if (splitAtTarget && context.abRelation && context.abRelation.howMany) {\n        const { howMany, offset } = context.abRelation;\n        a.howMany += howMany;\n        a.splitPosition = a.splitPosition.getShiftedBy(offset);\n        return [a];\n    }\n    // Case 3:\n    //\n    // If the split position is inside the moved range, we need to shift the split position to a proper place.\n    // The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n    //\n    // Characters `bc` should be moved to the second paragraph while split position is between them:\n    // <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n    //\n    // After move, new split position is incorrect:\n    // <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n    //\n    // Correct split position:\n    // <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n    //\n    // After split:\n    // <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n    //\n    if (a.splitPosition.hasSameParentAs(b.sourcePosition) && rangeToMove.containsPosition(a.splitPosition)) {\n        const howManyRemoved = b.howMany - (a.splitPosition.offset - b.sourcePosition.offset);\n        a.howMany -= howManyRemoved;\n        if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n            a.howMany += b.howMany;\n        }\n        a.splitPosition = b.sourcePosition.clone();\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n        return [a];\n    }\n    // The default case.\n    // Don't change `howMany` if move operation does not really move anything.\n    //\n    if (!b.sourcePosition.isEqual(b.targetPosition)) {\n        if (a.splitPosition.hasSameParentAs(b.sourcePosition) && a.splitPosition.offset <= b.sourcePosition.offset) {\n            a.howMany -= b.howMany;\n        }\n        if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n            a.howMany += b.howMany;\n        }\n    }\n    // Change position stickiness to force a correct transformation.\n    a.splitPosition.stickiness = 'toNone';\n    a.splitPosition = a.splitPosition._getTransformedByMoveOperation(b);\n    a.splitPosition.stickiness = 'toNext';\n    if (a.graveyardPosition) {\n        a.insertionPosition = a.insertionPosition._getTransformedByMoveOperation(b);\n    }\n    else {\n        a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    }\n    return [a];\n});\nsetTransformation(SplitOperation, SplitOperation, (a, b, context) => {\n    // Case 1:\n    //\n    // Split at the same position.\n    //\n    // If there already was a split at the same position as in `a` operation, it means that the intention\n    // conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n    //\n    // However, there is a difference if these are new splits or splits created by undo. These have different\n    // intentions. Also splits moving back different elements from graveyard have different intentions. They\n    // are just different operations.\n    //\n    // So we cancel split operation only if it was really identical.\n    //\n    // Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n    // default transformation is incorrect too.\n    //\n    if (a.splitPosition.isEqual(b.splitPosition)) {\n        if (!a.graveyardPosition && !b.graveyardPosition) {\n            return [new NoOperation(0)];\n        }\n        if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n            return [new NoOperation(0)];\n        }\n        // Use context to know that the `a.splitPosition` should stay where it is.\n        // This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n        if (context.abRelation == 'splitBefore') {\n            // Since split is at the same position, there are no nodes left to split.\n            a.howMany = 0;\n            // Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n            // That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n            // It could happen if `context` is enabled in collaboration.\n            a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n            return [a];\n        }\n    }\n    // Case 2:\n    //\n    // Same node is using to split different elements. This happens in undo when previously same element was merged to\n    // two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n    //\n    // In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n    // split operations. This might not always be true but in the real cases that were experienced it was. After all,\n    // if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n    // should be same for both of those splits.\n    //\n    // Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n    //\n    if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n        const aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n        const bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n        // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n        const aIsWeak = aInGraveyard && !bInGraveyard;\n        // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n        const bIsWeak = bInGraveyard && !aInGraveyard;\n        // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n        const forceMove = bIsWeak || (!aIsWeak && context.aIsStrong);\n        if (forceMove) {\n            const result = [];\n            // First we need to move any nodes split by `b` back to where they were.\n            // Do it only if `b` actually moved something.\n            if (b.howMany) {\n                result.push(new MoveOperation(b.moveTargetPosition, b.howMany, b.splitPosition, 0));\n            }\n            // Then we need to move nodes from `a` split position to their new element.\n            // Do it only if `a` actually should move something.\n            if (a.howMany) {\n                result.push(new MoveOperation(a.splitPosition, a.howMany, a.moveTargetPosition, 0));\n            }\n            return result;\n        }\n        else {\n            return [new NoOperation(0)];\n        }\n    }\n    if (a.graveyardPosition) {\n        a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n    }\n    // Case 3:\n    //\n    // Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n    // As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n    //\n    if (a.splitPosition.isEqual(b.insertionPosition) && context.abRelation == 'splitBefore') {\n        a.howMany++;\n        return [a];\n    }\n    // Case 4:\n    //\n    // This is a mirror to the case 2. above.\n    //\n    if (b.splitPosition.isEqual(a.insertionPosition) && context.baRelation == 'splitBefore') {\n        const newPositionPath = b.insertionPosition.path.slice();\n        newPositionPath.push(0);\n        const newPosition = new Position(b.insertionPosition.root, newPositionPath);\n        const moveOp = new MoveOperation(a.insertionPosition, 1, newPosition, 0);\n        return [a, moveOp];\n    }\n    // The default case.\n    //\n    if (a.splitPosition.hasSameParentAs(b.splitPosition) && a.splitPosition.offset < b.splitPosition.offset) {\n        a.howMany -= b.howMany;\n    }\n    a.splitPosition = a.splitPosition._getTransformedBySplitOperation(b);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    return [a];\n});\n/**\n * Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n */\nfunction _moveTargetIntoMovedRange(a, b) {\n    return a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany) === null;\n}\n/**\n * Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n * move operations and returns them.\n *\n * Ranges and target position will be transformed on-the-fly when generating operations.\n *\n * Given `ranges` should be in the order of how they were in the original transformed operation.\n *\n * Given `targetPosition` is the target position of the first range from `ranges`.\n */\nfunction _makeMoveOperationsFromRanges(ranges, targetPosition) {\n    // At this moment we have some ranges and a target position, to which those ranges should be moved.\n    // Order in `ranges` array is the go-to order of after transformation.\n    //\n    // We are almost done. We have `ranges` and `targetPosition` to make operations from.\n    // Unfortunately, those operations may affect each other. Precisely, first operation after move\n    // may affect source range and target position of second and third operation. Same with second\n    // operation affecting third.\n    //\n    // We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n    const operations = [];\n    // Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n    for (let i = 0; i < ranges.length; i++) {\n        // Create new operation out of a range and target position.\n        const range = ranges[i];\n        const op = new MoveOperation(range.start, range.end.offset - range.start.offset, targetPosition, 0);\n        operations.push(op);\n        // Transform other ranges by the generated operation.\n        for (let j = i + 1; j < ranges.length; j++) {\n            // All ranges in `ranges` array should be:\n            //\n            // * non-intersecting (these are part of original operation source range), and\n            // * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n            //\n            // This means that the transformation will be \"clean\" and always return one result.\n            ranges[j] = ranges[j]._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany)[0];\n        }\n        targetPosition = targetPosition._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany);\n    }\n    return operations;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n */\nexport default class LivePosition extends EmitterMixin(Position) {\n    /**\n     * Creates a live position.\n     *\n     * @see module:engine/model/position~Position\n     */\n    constructor(root, path, stickiness = 'toNone') {\n        super(root, path, stickiness);\n        if (!this.root.is('rootElement')) {\n            /**\n             * LivePosition's root has to be an instance of RootElement.\n             *\n             * @error model-liveposition-root-not-rootelement\n             */\n            throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n        }\n        bindWithDocument.call(this);\n    }\n    /**\n     * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n     * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n     * referring to it).\n     */\n    detach() {\n        this.stopListening();\n    }\n    /**\n     * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n     */\n    toPosition() {\n        return new Position(this.root, this.path.slice(), this.stickiness);\n    }\n    /**\n     * Creates a `LivePosition` instance that is equal to position.\n     */\n    static fromPosition(position, stickiness) {\n        return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nLivePosition.prototype.is = function (type) {\n    return type === 'livePosition' || type === 'model:livePosition' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type == 'position' || type === 'model:position';\n};\n/**\n * Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n * this position's {@link module:engine/model/position~Position#root root}.\n */\nfunction bindWithDocument() {\n    this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n        const operation = args[0];\n        if (!operation.isDocumentOperation) {\n            return;\n        }\n        transform.call(this, operation);\n    }, { priority: 'low' });\n}\n/**\n * Updates this position accordingly to the updates applied to the model. Bases on change events.\n */\nfunction transform(operation) {\n    const result = this.getTransformedByOperation(operation);\n    if (!this.isEqual(result)) {\n        const oldPosition = this.toPosition();\n        this.path = result.path;\n        this.root = result.root;\n        this.fire('change', oldPosition);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/batch\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils';\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n * ```ts\n * model.enqueueChange( batch, writer => {\n * \twriter.insertText( 'foo', paragraph, 'end' );\n * } );\n * ```\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n    /**\n     * Creates a batch instance.\n     *\n     * @see module:engine/model/model~Model#enqueueChange\n     * @see module:engine/model/model~Model#change\n     * @param type A set of flags that specify the type of the batch. Batch type can alter how some of the features work\n     * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).\n     */\n    constructor(type = {}) {\n        if (typeof type === 'string') {\n            type = type === 'transparent' ? { isUndoable: false } : {};\n            /**\n             * The string value for a `type` property of the `Batch` constructor has been deprecated and will be removed in the near future.\n             * Please refer to the {@link module:engine/model/batch~Batch#constructor `Batch` constructor API documentation} for more\n             * information.\n             *\n             * @error batch-constructor-deprecated-string-type\n             */\n            logWarning('batch-constructor-deprecated-string-type');\n        }\n        const { isUndoable = true, isLocal = true, isUndo = false, isTyping = false } = type;\n        this.operations = [];\n        this.isUndoable = isUndoable;\n        this.isLocal = isLocal;\n        this.isUndo = isUndo;\n        this.isTyping = isTyping;\n    }\n    /**\n     * The type of the batch.\n     *\n     * **This property has been deprecated and is always set to the `'default'` value.**\n     *\n     * It can be one of the following values:\n     * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n     * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n     * changes.\n     *\n     * @deprecated\n     */\n    get type() {\n        /**\n         * The {@link module:engine/model/batch~Batch#type `Batch#type` } property has been deprecated and will be removed in the near\n         * future. Use `Batch#isLocal`, `Batch#isUndoable`, `Batch#isUndo` and `Batch#isTyping` instead.\n         *\n         * @error batch-type-deprecated\n         */\n        logWarning('batch-type-deprecated');\n        return 'default';\n    }\n    /**\n     * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n     * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n     */\n    get baseVersion() {\n        for (const op of this.operations) {\n            if (op.baseVersion !== null) {\n                return op.baseVersion;\n            }\n        }\n        return null;\n    }\n    /**\n     * Adds an operation to the batch instance.\n     *\n     * @param operation An operation to add.\n     * @returns The added operation.\n     */\n    addOperation(operation) {\n        operation.batch = this;\n        this.operations.push(operation);\n        return operation;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/differ\n */\nimport Position from './position';\nimport Range from './range';\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n    /**\n     * Creates a `Differ` instance.\n     *\n     * @param markerCollection Model's marker collection.\n     */\n    constructor(markerCollection) {\n        /**\n         * A map that stores changes that happened in a given element.\n         *\n         * The keys of the map are references to the model elements.\n         * The values of the map are arrays with changes that were done on this element.\n         */\n        this._changesInElement = new Map();\n        /**\n         * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n         * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n         * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n         */\n        this._elementSnapshots = new Map();\n        /**\n         * A map that stores all changed markers.\n         *\n         * The keys of the map are marker names.\n         * The values of the map are objects with the following properties:\n         * - `oldMarkerData`,\n         * - `newMarkerData`.\n         */\n        this._changedMarkers = new Map();\n        /**\n         * A map that stores all roots that have been changed.\n         *\n         * The keys are the names of the roots while value represents the changes.\n         */\n        this._changedRoots = new Map();\n        /**\n         * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n         * when changes are sorted.\n         */\n        this._changeCount = 0;\n        /**\n         * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n         * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n         * return the cached value instead of calculating it again.\n         *\n         * This property stores those changes that did not take place in graveyard root.\n         */\n        this._cachedChanges = null;\n        /**\n         * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n         * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n         * return the cached value instead of calculating it again.\n         *\n         * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n         */\n        this._cachedChangesWithGraveyard = null;\n        /**\n         * Set of model items that were marked to get refreshed in {@link #_refreshItem}.\n         */\n        this._refreshedItems = new Set();\n        this._markerCollection = markerCollection;\n    }\n    /**\n     * Informs whether there are any changes buffered in `Differ`.\n     */\n    get isEmpty() {\n        return this._changesInElement.size == 0 && this._changedMarkers.size == 0 && this._changedRoots.size == 0;\n    }\n    /**\n     * Buffers the given operation. An operation has to be buffered before it is executed.\n     *\n     * @param operationToBuffer An operation to buffer.\n     */\n    bufferOperation(operationToBuffer) {\n        // Below we take an operation, check its type, then use its parameters in marking (private) methods.\n        // The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n        // Marking changes in them would cause a \"double\" changing then.\n        //\n        const operation = operationToBuffer;\n        switch (operation.type) {\n            case 'insert': {\n                if (this._isInInsertedElement(operation.position.parent)) {\n                    return;\n                }\n                this._markInsert(operation.position.parent, operation.position.offset, operation.nodes.maxOffset);\n                break;\n            }\n            case 'addAttribute':\n            case 'removeAttribute':\n            case 'changeAttribute': {\n                for (const item of operation.range.getItems({ shallow: true })) {\n                    if (this._isInInsertedElement(item.parent)) {\n                        continue;\n                    }\n                    this._markAttribute(item);\n                }\n                break;\n            }\n            case 'remove':\n            case 'move':\n            case 'reinsert': {\n                // When range is moved to the same position then not mark it as a change.\n                // See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n                if (operation.sourcePosition.isEqual(operation.targetPosition) ||\n                    operation.sourcePosition.getShiftedBy(operation.howMany).isEqual(operation.targetPosition)) {\n                    return;\n                }\n                const sourceParentInserted = this._isInInsertedElement(operation.sourcePosition.parent);\n                const targetParentInserted = this._isInInsertedElement(operation.targetPosition.parent);\n                if (!sourceParentInserted) {\n                    this._markRemove(operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany);\n                }\n                if (!targetParentInserted) {\n                    this._markInsert(operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany);\n                }\n                break;\n            }\n            case 'rename': {\n                if (this._isInInsertedElement(operation.position.parent)) {\n                    return;\n                }\n                this._markRemove(operation.position.parent, operation.position.offset, 1);\n                this._markInsert(operation.position.parent, operation.position.offset, 1);\n                const range = Range._createFromPositionAndShift(operation.position, 1);\n                for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n                    const markerData = marker.getData();\n                    this.bufferMarkerChange(marker.name, markerData, markerData);\n                }\n                break;\n            }\n            case 'split': {\n                const splitElement = operation.splitPosition.parent;\n                // Mark that children of the split element were removed.\n                if (!this._isInInsertedElement(splitElement)) {\n                    this._markRemove(splitElement, operation.splitPosition.offset, operation.howMany);\n                }\n                // Mark that the new element (split copy) was inserted.\n                if (!this._isInInsertedElement(operation.insertionPosition.parent)) {\n                    this._markInsert(operation.insertionPosition.parent, operation.insertionPosition.offset, 1);\n                }\n                // If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n                if (operation.graveyardPosition) {\n                    this._markRemove(operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1);\n                }\n                break;\n            }\n            case 'merge': {\n                // Mark that the merged element was removed.\n                const mergedElement = operation.sourcePosition.parent;\n                if (!this._isInInsertedElement(mergedElement.parent)) {\n                    this._markRemove(mergedElement.parent, mergedElement.startOffset, 1);\n                }\n                // Mark that the merged element was inserted into graveyard.\n                const graveyardParent = operation.graveyardPosition.parent;\n                this._markInsert(graveyardParent, operation.graveyardPosition.offset, 1);\n                // Mark that children of merged element were inserted at new parent.\n                const mergedIntoElement = operation.targetPosition.parent;\n                if (!this._isInInsertedElement(mergedIntoElement)) {\n                    this._markInsert(mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset);\n                }\n                break;\n            }\n            case 'detachRoot':\n            case 'addRoot': {\n                this._bufferRootStateChange(operation.rootName, operation.isAdd);\n                break;\n            }\n            case 'addRootAttribute':\n            case 'removeRootAttribute':\n            case 'changeRootAttribute': {\n                const rootName = operation.root.rootName;\n                this._bufferRootAttributeChange(rootName, operation.key, operation.oldValue, operation.newValue);\n                break;\n            }\n        }\n        // Clear cache after each buffered operation as it is no longer valid.\n        this._cachedChanges = null;\n    }\n    /**\n     * Buffers a marker change.\n     *\n     * @param markerName The name of the marker that changed.\n     * @param oldMarkerData Marker data before the change.\n     * @param newMarkerData Marker data after the change.\n     */\n    bufferMarkerChange(markerName, oldMarkerData, newMarkerData) {\n        const buffered = this._changedMarkers.get(markerName);\n        if (!buffered) {\n            this._changedMarkers.set(markerName, {\n                newMarkerData,\n                oldMarkerData\n            });\n        }\n        else {\n            buffered.newMarkerData = newMarkerData;\n            if (buffered.oldMarkerData.range == null && newMarkerData.range == null) {\n                // The marker is going to be removed (`newMarkerData.range == null`) but it did not exist before the first buffered change\n                // (`buffered.oldMarkerData.range == null`). In this case, do not keep the marker in buffer at all.\n                this._changedMarkers.delete(markerName);\n            }\n        }\n    }\n    /**\n     * Returns all markers that should be removed as a result of buffered changes.\n     *\n     * @returns Markers to remove. Each array item is an object containing the `name` and `range` properties.\n     */\n    getMarkersToRemove() {\n        const result = [];\n        for (const [name, change] of this._changedMarkers) {\n            if (change.oldMarkerData.range != null) {\n                result.push({ name, range: change.oldMarkerData.range });\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all markers which should be added as a result of buffered changes.\n     *\n     * @returns Markers to add. Each array item is an object containing the `name` and `range` properties.\n     */\n    getMarkersToAdd() {\n        const result = [];\n        for (const [name, change] of this._changedMarkers) {\n            if (change.newMarkerData.range != null) {\n                result.push({ name, range: change.newMarkerData.range });\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all markers which changed.\n     */\n    getChangedMarkers() {\n        return Array.from(this._changedMarkers).map(([name, change]) => ({\n            name,\n            data: {\n                oldRange: change.oldMarkerData.range,\n                newRange: change.newMarkerData.range\n            }\n        }));\n    }\n    /**\n     * Checks whether some of the buffered changes affect the editor data.\n     *\n     * Types of changes which affect the editor data:\n     *\n     * * model structure changes,\n     * * attribute changes,\n     * * a root is added or detached,\n     * * changes of markers which were defined as `affectsData`,\n     * * changes of markers' `affectsData` property.\n     */\n    hasDataChanges() {\n        if (this._changesInElement.size > 0) {\n            return true;\n        }\n        if (this._changedRoots.size > 0) {\n            return true;\n        }\n        for (const { newMarkerData, oldMarkerData } of this._changedMarkers.values()) {\n            if (newMarkerData.affectsData !== oldMarkerData.affectsData) {\n                return true;\n            }\n            if (newMarkerData.affectsData) {\n                const markerAdded = newMarkerData.range && !oldMarkerData.range;\n                const markerRemoved = !newMarkerData.range && oldMarkerData.range;\n                const markerChanged = newMarkerData.range && oldMarkerData.range && !newMarkerData.range.isEqual(oldMarkerData.range);\n                if (markerAdded || markerRemoved || markerChanged) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n     * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n     *\n     * The diff set is returned as an array of {@link module:engine/model/differ~DiffItem diff items}, each describing a change done\n     * on the model. The items are sorted by the position on which the change happened. If a position\n     * {@link module:engine/model/position~Position#isBefore is before} another one, it will be on an earlier index in the diff set.\n     *\n     * **Note**: Elements inside inserted element will not have a separate diff item, only the top most element change will be reported.\n     *\n     * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n     * previous {@link #getChanges} call, the next call will return the cached value.\n     *\n     * @param options Additional options.\n     * @param options.includeChangesInGraveyard If set to `true`, also changes that happened\n     * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n     * @returns Diff between the old and the new model tree state.\n     */\n    getChanges(options = {}) {\n        // If there are cached changes, just return them instead of calculating changes again.\n        if (this._cachedChanges) {\n            if (options.includeChangesInGraveyard) {\n                return this._cachedChangesWithGraveyard.slice();\n            }\n            else {\n                return this._cachedChanges.slice();\n            }\n        }\n        // Will contain returned results.\n        let diffSet = [];\n        // Check all changed elements.\n        for (const element of this._changesInElement.keys()) {\n            // Get changes for this element and sort them.\n            const changes = this._changesInElement.get(element).sort((a, b) => {\n                if (a.offset === b.offset) {\n                    if (a.type != b.type) {\n                        // If there are multiple changes at the same position, \"remove\" change should be first.\n                        // If the order is different, for example, we would first add some nodes and then removed them\n                        // (instead of the nodes that we should remove).\n                        return a.type == 'remove' ? -1 : 1;\n                    }\n                    return 0;\n                }\n                return a.offset < b.offset ? -1 : 1;\n            });\n            // Get children of this element before any change was applied on it.\n            const snapshotChildren = this._elementSnapshots.get(element);\n            // Get snapshot of current element's children.\n            const elementChildren = _getChildrenSnapshot(element.getChildren());\n            // Generate actions basing on changes done on element.\n            const actions = _generateActionsFromChanges(snapshotChildren.length, changes);\n            let i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n            let j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n            // Process every action.\n            for (const action of actions) {\n                if (action === 'i') {\n                    // Generate diff item for this element and insert it into the diff set.\n                    diffSet.push(this._getInsertDiff(element, i, elementChildren[i]));\n                    i++;\n                }\n                else if (action === 'r') {\n                    // Generate diff item for this element and insert it into the diff set.\n                    diffSet.push(this._getRemoveDiff(element, i, snapshotChildren[j]));\n                    j++;\n                }\n                else if (action === 'a') {\n                    // Take attributes from saved and current children.\n                    const elementAttributes = elementChildren[i].attributes;\n                    const snapshotAttributes = snapshotChildren[j].attributes;\n                    let range;\n                    if (elementChildren[i].name == '$text') {\n                        range = new Range(Position._createAt(element, i), Position._createAt(element, i + 1));\n                    }\n                    else {\n                        const index = element.offsetToIndex(i);\n                        range = new Range(Position._createAt(element, i), Position._createAt(element.getChild(index), 0));\n                    }\n                    // Generate diff items for this change (there might be multiple attributes changed and\n                    // there is a single diff for each of them) and insert them into the diff set.\n                    diffSet.push(...this._getAttributesDiff(range, snapshotAttributes, elementAttributes));\n                    i++;\n                    j++;\n                }\n                else {\n                    // `action` is 'equal'. Child not changed.\n                    i++;\n                    j++;\n                }\n            }\n        }\n        // Then, sort the changes by the position (change at position before other changes is first).\n        diffSet.sort((a, b) => {\n            // If the change is in different root, we don't care much, but we'd like to have all changes in given\n            // root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n            // will be processed first.\n            if (a.position.root != b.position.root) {\n                return a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n            }\n            // If change happens at the same position...\n            if (a.position.isEqual(b.position)) {\n                // Keep chronological order of operations.\n                return a.changeCount - b.changeCount;\n            }\n            // If positions differ, position \"on the left\" should be earlier in the result.\n            return a.position.isBefore(b.position) ? -1 : 1;\n        });\n        // Glue together multiple changes (mostly on text nodes).\n        for (let i = 1, prevIndex = 0; i < diffSet.length; i++) {\n            const prevDiff = diffSet[prevIndex];\n            const thisDiff = diffSet[i];\n            // Glue remove changes if they happen on text on same position.\n            const isConsecutiveTextRemove = prevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n                prevDiff.name == '$text' && thisDiff.name == '$text' &&\n                prevDiff.position.isEqual(thisDiff.position);\n            // Glue insert changes if they happen on text on consecutive fragments.\n            const isConsecutiveTextAdd = prevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n                prevDiff.name == '$text' && thisDiff.name == '$text' &&\n                prevDiff.position.parent == thisDiff.position.parent &&\n                prevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n            // Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n            const isConsecutiveAttributeChange = prevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n                prevDiff.position.parent == thisDiff.position.parent &&\n                prevDiff.range.isFlat && thisDiff.range.isFlat &&\n                (prevDiff.position.offset + prevDiff.length) == thisDiff.position.offset &&\n                prevDiff.attributeKey == thisDiff.attributeKey &&\n                prevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n                prevDiff.attributeNewValue == thisDiff.attributeNewValue;\n            if (isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange) {\n                prevDiff.length++;\n                if (isConsecutiveAttributeChange) {\n                    prevDiff.range.end = prevDiff.range.end.getShiftedBy(1);\n                }\n                diffSet[i] = null;\n            }\n            else {\n                prevIndex = i;\n            }\n        }\n        diffSet = diffSet.filter(v => v);\n        // Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n        for (const item of diffSet) {\n            delete item.changeCount;\n            if (item.type == 'attribute') {\n                delete item.position;\n                delete item.length;\n            }\n        }\n        this._changeCount = 0;\n        // Cache changes.\n        this._cachedChangesWithGraveyard = diffSet;\n        this._cachedChanges = diffSet.filter(_changesInGraveyardFilter);\n        if (options.includeChangesInGraveyard) {\n            return this._cachedChangesWithGraveyard.slice();\n        }\n        else {\n            return this._cachedChanges.slice();\n        }\n    }\n    /**\n     * Returns all roots that have changed (either were attached, or detached, or their attributes changed).\n     *\n     * @returns Diff between the old and the new roots state.\n     */\n    getChangedRoots() {\n        return Array.from(this._changedRoots.values()).map(diffItem => {\n            const entry = { ...diffItem };\n            if (entry.state !== undefined) {\n                // The root was attached or detached -- do not return its attributes changes.\n                // If the root was attached, it should be handled as a whole, together with its attributes, the same way as model nodes.\n                // If the root was detached, its attributes should be discarded anyway.\n                //\n                // Keep in mind that filtering must happen on this stage (when retrieving changes). If filtering happens on-the-fly as\n                // the attributes change, it may lead to incorrect situation, e.g.: detach root, change attribute, re-attach root.\n                // In this case, attribute change cannot be filtered. After the root is re-attached, the attribute change must be kept.\n                delete entry.attributes;\n            }\n            return entry;\n        });\n    }\n    /**\n     * Returns a set of model items that were marked to get refreshed.\n     */\n    getRefreshedItems() {\n        return new Set(this._refreshedItems);\n    }\n    /**\n     * Resets `Differ`. Removes all buffered changes.\n     */\n    reset() {\n        this._changesInElement.clear();\n        this._elementSnapshots.clear();\n        this._changedMarkers.clear();\n        this._changedRoots.clear();\n        this._refreshedItems = new Set();\n        this._cachedChanges = null;\n    }\n    /**\n     * Buffers the root state change after the root was attached or detached\n     */\n    _bufferRootStateChange(rootName, isAttached) {\n        if (!this._changedRoots.has(rootName)) {\n            this._changedRoots.set(rootName, { name: rootName, state: isAttached ? 'attached' : 'detached' });\n            return;\n        }\n        const diffItem = this._changedRoots.get(rootName);\n        if (diffItem.state !== undefined) {\n            // Root `state` can only toggle between of the values ('attached' or 'detached') and no value. It cannot be any other way,\n            // because if the root was originally attached it can only become detached. Then, if it is re-attached in the same batch of\n            // changes, it gets back to \"no change\" (which means no value). Same if the root was originally detached.\n            delete diffItem.state;\n            if (diffItem.attributes === undefined) {\n                // If there is no `state` change and no `attributes` change, remove the entry.\n                this._changedRoots.delete(rootName);\n            }\n        }\n        else {\n            diffItem.state = isAttached ? 'attached' : 'detached';\n        }\n    }\n    /**\n     * Buffers a root attribute change.\n     */\n    _bufferRootAttributeChange(rootName, key, oldValue, newValue) {\n        const diffItem = this._changedRoots.get(rootName) || { name: rootName };\n        const attrs = diffItem.attributes || {};\n        if (attrs[key]) {\n            // If this attribute or metadata was already changed earlier and is changed again, check to what value it is changed.\n            const attrEntry = attrs[key];\n            if (newValue === attrEntry.oldValue) {\n                // If it was changed back to the old value, remove the entry.\n                delete attrs[key];\n            }\n            else {\n                // If it was changed to a different value, update the entry.\n                attrEntry.newValue = newValue;\n            }\n        }\n        else {\n            // If this attribute or metadata was not set earlier, add an entry.\n            attrs[key] = { oldValue, newValue };\n        }\n        if (Object.entries(attrs).length === 0) {\n            // If attributes or metadata changes set became empty, remove it from the diff item.\n            delete diffItem.attributes;\n            if (diffItem.state === undefined) {\n                // If there is no `state` change and no `attributes` change, remove the entry.\n                this._changedRoots.delete(rootName);\n            }\n        }\n        else {\n            // Make sure that, if a new object in the structure was created, it gets set.\n            diffItem.attributes = attrs;\n            this._changedRoots.set(rootName, diffItem);\n        }\n    }\n    /**\n     * Marks the given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted\n     * in the differ changes set, so it will be effectively re-converted when the differ changes are handled by a dispatcher.\n     *\n     * @internal\n     * @param item Item to refresh.\n     */\n    _refreshItem(item) {\n        if (this._isInInsertedElement(item.parent)) {\n            return;\n        }\n        this._markRemove(item.parent, item.startOffset, item.offsetSize);\n        this._markInsert(item.parent, item.startOffset, item.offsetSize);\n        this._refreshedItems.add(item);\n        const range = Range._createOn(item);\n        for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n            const markerData = marker.getData();\n            this.bufferMarkerChange(marker.name, markerData, markerData);\n        }\n        // Clear cache after each buffered operation as it is no longer valid.\n        this._cachedChanges = null;\n    }\n    /**\n     * Saves and handles an insert change.\n     */\n    _markInsert(parent, offset, howMany) {\n        const changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n        this._markChange(parent, changeItem);\n    }\n    /**\n     * Saves and handles a remove change.\n     */\n    _markRemove(parent, offset, howMany) {\n        const changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n        this._markChange(parent, changeItem);\n        this._removeAllNestedChanges(parent, offset, howMany);\n    }\n    /**\n     * Saves and handles an attribute change.\n     */\n    _markAttribute(item) {\n        const changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n        this._markChange(item.parent, changeItem);\n    }\n    /**\n     * Saves and handles a model change.\n     */\n    _markChange(parent, changeItem) {\n        // First, make a snapshot of this parent's children (it will be made only if it was not made before).\n        this._makeSnapshot(parent);\n        // Then, get all changes that already were done on the element (empty array if this is the first change).\n        const changes = this._getChangesForElement(parent);\n        // Then, look through all the changes, and transform them or the new change.\n        this._handleChange(changeItem, changes);\n        // Add the new change.\n        changes.push(changeItem);\n        // Remove incorrect changes. During transformation some change might be, for example, included in another.\n        // In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n        for (let i = 0; i < changes.length; i++) {\n            if (changes[i].howMany < 1) {\n                changes.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    /**\n     * Gets an array of changes that have already been saved for a given element.\n     */\n    _getChangesForElement(element) {\n        let changes;\n        if (this._changesInElement.has(element)) {\n            changes = this._changesInElement.get(element);\n        }\n        else {\n            changes = [];\n            this._changesInElement.set(element, changes);\n        }\n        return changes;\n    }\n    /**\n     * Saves a children snapshot for a given element.\n     */\n    _makeSnapshot(element) {\n        if (!this._elementSnapshots.has(element)) {\n            this._elementSnapshots.set(element, _getChildrenSnapshot(element.getChildren()));\n        }\n    }\n    /**\n     * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n     * change and/or the old change.\n     *\n     * @param inc Incoming (new) change.\n     * @param changes An array containing all the changes done on that element.\n     */\n    _handleChange(inc, changes) {\n        // We need a helper variable that will store how many nodes are to be still handled for this change item.\n        // `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n        // needs to be differentiated.\n        //\n        // This comes up when there are multiple changes that are affected by `inc` change item.\n        //\n        // For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n        // Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n        //\n        // Then, we:\n        // - \"forget\" about first insert change (it is \"eaten\" by remove),\n        // - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n        // - but still we have to change offset of the second insert change from `5` to `3`!\n        //\n        // So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n        // while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n        inc.nodesToHandle = inc.howMany;\n        for (const old of changes) {\n            const incEnd = inc.offset + inc.howMany;\n            const oldEnd = old.offset + old.howMany;\n            if (inc.type == 'insert') {\n                if (old.type == 'insert') {\n                    if (inc.offset <= old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        old.howMany += inc.nodesToHandle;\n                        inc.nodesToHandle = 0;\n                    }\n                }\n                if (old.type == 'remove') {\n                    if (inc.offset < old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    if (inc.offset <= old.offset) {\n                        old.offset += inc.howMany;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        // This case is more complicated, because attribute change has to be split into two.\n                        // Example (assume that uppercase and lowercase letters mean different attributes):\n                        //\n                        // initial state:\t\tabcxyz\n                        // attribute change:\taBCXYz\n                        // incoming insert:\t\taBCfooXYz\n                        //\n                        // Change ranges cannot intersect because each item has to be described exactly (it was either\n                        // not changed, inserted, removed, or its attribute was changed). That's why old attribute\n                        // change has to be split and both parts has to be handled separately from now on.\n                        const howMany = old.howMany;\n                        old.howMany = inc.offset - old.offset;\n                        // Add the second part of attribute change to the beginning of processed array so it won't\n                        // be processed again in this loop.\n                        changes.unshift({\n                            type: 'attribute',\n                            offset: incEnd,\n                            howMany: howMany - old.howMany,\n                            count: this._changeCount++\n                        });\n                    }\n                }\n            }\n            if (inc.type == 'remove') {\n                if (old.type == 'insert') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (incEnd <= oldEnd) {\n                        if (inc.offset < old.offset) {\n                            const intersectionLength = incEnd - old.offset;\n                            old.offset = inc.offset;\n                            old.howMany -= intersectionLength;\n                            inc.nodesToHandle -= intersectionLength;\n                        }\n                        else {\n                            old.howMany -= inc.nodesToHandle;\n                            inc.nodesToHandle = 0;\n                        }\n                    }\n                    else {\n                        if (inc.offset <= old.offset) {\n                            inc.nodesToHandle -= old.howMany;\n                            old.howMany = 0;\n                        }\n                        else if (inc.offset < oldEnd) {\n                            const intersectionLength = oldEnd - inc.offset;\n                            old.howMany -= intersectionLength;\n                            inc.nodesToHandle -= intersectionLength;\n                        }\n                    }\n                }\n                if (old.type == 'remove') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (inc.offset < old.offset) {\n                        inc.nodesToHandle += old.howMany;\n                        old.howMany = 0;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    if (incEnd <= old.offset) {\n                        old.offset -= inc.howMany;\n                    }\n                    else if (inc.offset < old.offset) {\n                        const intersectionLength = incEnd - old.offset;\n                        old.offset = inc.offset;\n                        old.howMany -= intersectionLength;\n                    }\n                    else if (inc.offset < oldEnd) {\n                        if (incEnd <= oldEnd) {\n                            // On first sight in this case we don't need to split attribute operation into two.\n                            // However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n                            // For that reason, no two changes may intersect.\n                            // So we cannot have an attribute change that \"contains\" remove change.\n                            // Attribute change needs to be split.\n                            const howMany = old.howMany;\n                            old.howMany = inc.offset - old.offset;\n                            const howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n                            // Add the second part of attribute change to the beginning of processed array so it won't\n                            // be processed again in this loop.\n                            changes.unshift({\n                                type: 'attribute',\n                                offset: inc.offset,\n                                howMany: howManyAfter,\n                                count: this._changeCount++\n                            });\n                        }\n                        else {\n                            old.howMany -= oldEnd - inc.offset;\n                        }\n                    }\n                }\n            }\n            if (inc.type == 'attribute') {\n                // In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n                if (old.type == 'insert') {\n                    if (inc.offset < old.offset && incEnd > old.offset) {\n                        if (incEnd > oldEnd) {\n                            // This case is similar to a case described when incoming change was insert and old change was attribute.\n                            // See comment above.\n                            //\n                            // This time incoming change is attribute. We need to split incoming change in this case too.\n                            // However this time, the second part of the attribute change needs to be processed further\n                            // because there might be other changes that it collides with.\n                            const attributePart = {\n                                type: 'attribute',\n                                offset: oldEnd,\n                                howMany: incEnd - oldEnd,\n                                count: this._changeCount++\n                            };\n                            this._handleChange(attributePart, changes);\n                            changes.push(attributePart);\n                        }\n                        inc.nodesToHandle = old.offset - inc.offset;\n                        inc.howMany = inc.nodesToHandle;\n                    }\n                    else if (inc.offset >= old.offset && inc.offset < oldEnd) {\n                        if (incEnd > oldEnd) {\n                            inc.nodesToHandle = incEnd - oldEnd;\n                            inc.offset = oldEnd;\n                        }\n                        else {\n                            inc.nodesToHandle = 0;\n                        }\n                    }\n                }\n                if (old.type == 'remove') {\n                    // This is a case when attribute change \"contains\" remove change.\n                    // The attribute change needs to be split into two because changes cannot intersect.\n                    if (inc.offset < old.offset && incEnd > old.offset) {\n                        const attributePart = {\n                            type: 'attribute',\n                            offset: old.offset,\n                            howMany: incEnd - old.offset,\n                            count: this._changeCount++\n                        };\n                        this._handleChange(attributePart, changes);\n                        changes.push(attributePart);\n                        inc.nodesToHandle = old.offset - inc.offset;\n                        inc.howMany = inc.nodesToHandle;\n                    }\n                }\n                if (old.type == 'attribute') {\n                    // There are only two conflicting scenarios possible here:\n                    if (inc.offset >= old.offset && incEnd <= oldEnd) {\n                        // `old` change includes `inc` change, or they are the same.\n                        inc.nodesToHandle = 0;\n                        inc.howMany = 0;\n                        inc.offset = 0;\n                    }\n                    else if (inc.offset <= old.offset && incEnd >= oldEnd) {\n                        // `inc` change includes `old` change.\n                        old.howMany = 0;\n                    }\n                }\n            }\n        }\n        inc.howMany = inc.nodesToHandle;\n        delete inc.nodesToHandle;\n    }\n    /**\n     * Returns an object with a single insert change description.\n     *\n     * @param parent The element in which the change happened.\n     * @param offset The offset at which change happened.\n     * @param elementSnapshot The snapshot of the removed element a character.\n     * @returns The diff item.\n     */\n    _getInsertDiff(parent, offset, elementSnapshot) {\n        return {\n            type: 'insert',\n            position: Position._createAt(parent, offset),\n            name: elementSnapshot.name,\n            attributes: new Map(elementSnapshot.attributes),\n            length: 1,\n            changeCount: this._changeCount++\n        };\n    }\n    /**\n     * Returns an object with a single remove change description.\n     *\n     * @param parent The element in which change happened.\n     * @param offset The offset at which change happened.\n     * @param elementSnapshot The snapshot of the removed element a character.\n     * @returns The diff item.\n     */\n    _getRemoveDiff(parent, offset, elementSnapshot) {\n        return {\n            type: 'remove',\n            position: Position._createAt(parent, offset),\n            name: elementSnapshot.name,\n            attributes: new Map(elementSnapshot.attributes),\n            length: 1,\n            changeCount: this._changeCount++\n        };\n    }\n    /**\n     * Returns an array of objects where each one is a single attribute change description.\n     *\n     * @param range The range where the change happened.\n     * @param oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n     * @param newAttributes A map, map iterator or compatible object that contains attributes after the change.\n     * @returns An array containing one or more diff items.\n     */\n    _getAttributesDiff(range, oldAttributes, newAttributes) {\n        // Results holder.\n        const diffs = [];\n        // Clone new attributes as we will be performing changes on this object.\n        newAttributes = new Map(newAttributes);\n        // Look through old attributes.\n        for (const [key, oldValue] of oldAttributes) {\n            // Check what is the new value of the attribute (or if it was removed).\n            const newValue = newAttributes.has(key) ? newAttributes.get(key) : null;\n            // If values are different (or attribute was removed)...\n            if (newValue !== oldValue) {\n                // Add diff item.\n                diffs.push({\n                    type: 'attribute',\n                    position: range.start,\n                    range: range.clone(),\n                    length: 1,\n                    attributeKey: key,\n                    attributeOldValue: oldValue,\n                    attributeNewValue: newValue,\n                    changeCount: this._changeCount++\n                });\n            }\n            // Prevent returning two diff items for the same change.\n            newAttributes.delete(key);\n        }\n        // Look through new attributes that weren't handled above.\n        for (const [key, newValue] of newAttributes) {\n            // Each of them is a new attribute. Add diff item.\n            diffs.push({\n                type: 'attribute',\n                position: range.start,\n                range: range.clone(),\n                length: 1,\n                attributeKey: key,\n                attributeOldValue: null,\n                attributeNewValue: newValue,\n                changeCount: this._changeCount++\n            });\n        }\n        return diffs;\n    }\n    /**\n     * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n     */\n    _isInInsertedElement(element) {\n        const parent = element.parent;\n        if (!parent) {\n            return false;\n        }\n        const changes = this._changesInElement.get(parent);\n        const offset = element.startOffset;\n        if (changes) {\n            for (const change of changes) {\n                if (change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany) {\n                    return true;\n                }\n            }\n        }\n        return this._isInInsertedElement(parent);\n    }\n    /**\n     * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n     * and `howMany`.\n     */\n    _removeAllNestedChanges(parent, offset, howMany) {\n        const range = new Range(Position._createAt(parent, offset), Position._createAt(parent, offset + howMany));\n        for (const item of range.getItems({ shallow: true })) {\n            if (item.is('element')) {\n                this._elementSnapshots.delete(item);\n                this._changesInElement.delete(item);\n                this._removeAllNestedChanges(item, 0, item.maxOffset);\n            }\n        }\n    }\n}\n/**\n * Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n * objects, each representing one character and attributes set on that character.\n */\nfunction _getChildrenSnapshot(children) {\n    const snapshot = [];\n    for (const child of children) {\n        if (child.is('$text')) {\n            for (let i = 0; i < child.data.length; i++) {\n                snapshot.push({\n                    name: '$text',\n                    attributes: new Map(child.getAttributes())\n                });\n            }\n        }\n        else {\n            snapshot.push({\n                name: child.name,\n                attributes: new Map(child.getAttributes())\n            });\n        }\n    }\n    return snapshot;\n}\n/**\n * Generates array of actions for given changes set.\n * It simulates what `diff` function does.\n * Generated actions are:\n * - 'e' for 'equal' - when item at that position did not change,\n * - 'i' for 'insert' - when item at that position was inserted,\n * - 'r' for 'remove' - when item at that position was removed,\n * - 'a' for 'attribute' - when item at that position has it attributes changed.\n *\n * Example (assume that uppercase letters have bold attribute, compare with function code):\n *\n * children before:\tfooBAR\n * children after:\tfoxybAR\n *\n * changes: type: remove, offset: 1, howMany: 1\n *\t\t\ttype: insert, offset: 2, howMany: 2\n *\t\t\ttype: attribute, offset: 4, howMany: 1\n *\n * expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n *\n * steps taken by th script:\n *\n * 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n *    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n *    1.2 this change removes one node, add one remove action\n *    1.3 change last visited `offset` to 1\n *    1.4 since an old child has been removed, one more old child has been handled\n *    1.5 actions at this point are: equal, remove\n *\n * 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n *    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n *    2.2 this change inserts two nodes, add two insert actions\n *    2.3 change last visited offset to the end of the inserted range, that is 4\n *    2.4 actions at this point are: equal, remove, equal, insert, insert\n *\n * 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n *    3.1 between this change and previous change are no not-changed nodes\n *    3.2 this change changes one node, add one attribute action\n *    3.3 change last visited `offset` to the end of change range, that is 5\n *    3.4 since an old child has been changed, one more old child has been handled\n *    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n *\n * 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n *    4.1 fill up with two equal actions\n *\n * The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\n */\nfunction _generateActionsFromChanges(oldChildrenLength, changes) {\n    const actions = [];\n    let offset = 0;\n    let oldChildrenHandled = 0;\n    // Go through all buffered changes.\n    for (const change of changes) {\n        // First, fill \"holes\" between changes with \"equal\" actions.\n        if (change.offset > offset) {\n            for (let i = 0; i < change.offset - offset; i++) {\n                actions.push('e');\n            }\n            oldChildrenHandled += change.offset - offset;\n        }\n        // Then, fill up actions accordingly to change type.\n        if (change.type == 'insert') {\n            for (let i = 0; i < change.howMany; i++) {\n                actions.push('i');\n            }\n            // The last handled offset is after inserted range.\n            offset = change.offset + change.howMany;\n        }\n        else if (change.type == 'remove') {\n            for (let i = 0; i < change.howMany; i++) {\n                actions.push('r');\n            }\n            // The last handled offset is at the position where the nodes were removed.\n            offset = change.offset;\n            // We removed `howMany` old nodes, update `oldChildrenHandled`.\n            oldChildrenHandled += change.howMany;\n        }\n        else {\n            actions.push(...'a'.repeat(change.howMany).split(''));\n            // The last handled offset is at the position after the changed range.\n            offset = change.offset + change.howMany;\n            // We changed `howMany` old nodes, update `oldChildrenHandled`.\n            oldChildrenHandled += change.howMany;\n        }\n    }\n    // Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n    // has not been changed / removed at the end of their parent.\n    if (oldChildrenHandled < oldChildrenLength) {\n        for (let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++) {\n            actions.push('e');\n        }\n    }\n    return actions;\n}\n/**\n * Filter callback for Array.filter that filters out change entries that are in graveyard.\n */\nfunction _changesInGraveyardFilter(entry) {\n    const posInGy = 'position' in entry && entry.position.root.rootName == '$graveyard';\n    const rangeInGy = 'range' in entry && entry.range.root.rootName == '$graveyard';\n    return !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * @module engine/model/history\n */\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n    constructor() {\n        /**\n         * Operations added to the history.\n         */\n        this._operations = [];\n        /**\n         * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n         * {@link module:engine/model/operation/operation~Operation operation}.\n         *\n         * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n         * value is an operation that has been undone by the \"undoing operation\".\n         */\n        this._undoPairs = new Map();\n        /**\n         * Holds all undone operations.\n         */\n        this._undoneOperations = new Set();\n        /**\n         * A map that allows retrieving the operations fast based on the given base version.\n         */\n        this._baseVersionToOperationIndex = new Map();\n        /**\n         * The history version.\n         */\n        this._version = 0;\n        /**\n         * The gap pairs kept in the <from,to> format.\n         *\n         * Anytime the `history.version` is set to a version larger than `history.version + 1`,\n         * a new <lastHistoryVersion, newHistoryVersion> entry is added to the map.\n         */\n        this._gaps = new Map();\n    }\n    /**\n     * The version of the last operation in the history.\n     *\n     * The history version is incremented automatically when a new operation is added to the history.\n     * Setting the version manually should be done only in rare circumstances when a gap is planned\n     * between history versions. When doing so, a gap will be created and the history will accept adding\n     * an operation with base version equal to the new history version.\n     */\n    get version() {\n        return this._version;\n    }\n    set version(version) {\n        // Store a gap if there are some operations already in the history and the\n        // new version does not increment the latest one.\n        if (this._operations.length && version > this._version + 1) {\n            this._gaps.set(this._version, version);\n        }\n        this._version = version;\n    }\n    /**\n     * The last history operation.\n     */\n    get lastOperation() {\n        return this._operations[this._operations.length - 1];\n    }\n    /**\n     * Adds an operation to the history and increments the history version.\n     *\n     * The operation's base version should be equal to the history version. Otherwise an error is thrown.\n     */\n    addOperation(operation) {\n        if (operation.baseVersion !== this.version) {\n            /**\n             * Only operations with matching versions can be added to the history.\n             *\n             * @error model-document-history-addoperation-incorrect-version\n             * @param errorData The operation and the current document history version.\n             */\n            throw new CKEditorError('model-document-history-addoperation-incorrect-version', this, {\n                operation,\n                historyVersion: this.version\n            });\n        }\n        this._operations.push(operation);\n        this._version++;\n        this._baseVersionToOperationIndex.set(operation.baseVersion, this._operations.length - 1);\n    }\n    /**\n     * Returns operations from the given range of operation base versions that were added to the history.\n     *\n     * Note that there may be gaps in operations base versions.\n     *\n     * @param fromBaseVersion Base version from which operations should be returned (inclusive).\n     * @param toBaseVersion Base version up to which operations should be returned (exclusive).\n     * @returns History operations for the given range, in chronological order.\n     */\n    getOperations(fromBaseVersion, toBaseVersion = this.version) {\n        // When there is no operation in the history, return an empty array.\n        // After that we can be sure that `firstOperation`, `lastOperation` are not nullish.\n        if (!this._operations.length) {\n            return [];\n        }\n        const firstOperation = this._operations[0];\n        if (fromBaseVersion === undefined) {\n            fromBaseVersion = firstOperation.baseVersion;\n        }\n        // Change exclusive `toBaseVersion` to inclusive, so it will refer to the actual index.\n        // Thanks to that mapping from base versions to operation indexes are possible.\n        let inclusiveTo = toBaseVersion - 1;\n        // Check if \"from\" or \"to\" point to a gap between versions.\n        // If yes, then change the incorrect position to the proper side of the gap.\n        // Thanks to it, it will be possible to get index of the operation.\n        for (const [gapFrom, gapTo] of this._gaps) {\n            if (fromBaseVersion > gapFrom && fromBaseVersion < gapTo) {\n                fromBaseVersion = gapTo;\n            }\n            if (inclusiveTo > gapFrom && inclusiveTo < gapTo) {\n                inclusiveTo = gapFrom - 1;\n            }\n        }\n        // If the whole range is outside of the operation versions, then return an empty array.\n        if (inclusiveTo < firstOperation.baseVersion || fromBaseVersion > this.lastOperation.baseVersion) {\n            return [];\n        }\n        let fromIndex = this._baseVersionToOperationIndex.get(fromBaseVersion);\n        // If the range starts before the first operation, then use the first operation as the range's start.\n        if (fromIndex === undefined) {\n            fromIndex = 0;\n        }\n        let toIndex = this._baseVersionToOperationIndex.get(inclusiveTo);\n        // If the range ends after the last operation, then use the last operation as the range's end.\n        if (toIndex === undefined) {\n            toIndex = this._operations.length - 1;\n        }\n        // Return the part of the history operations based on the calculated start index and end index.\n        return this._operations.slice(fromIndex, \n        // The `toIndex` should be included in the returned operations, so add `1`.\n        toIndex + 1);\n    }\n    /**\n     * Returns operation from the history that bases on given `baseVersion`.\n     *\n     * @param baseVersion Base version of the operation to get.\n     * @returns Operation with given base version or `undefined` if there is no such operation in history.\n     */\n    getOperation(baseVersion) {\n        const operationIndex = this._baseVersionToOperationIndex.get(baseVersion);\n        if (operationIndex === undefined) {\n            return;\n        }\n        return this._operations[operationIndex];\n    }\n    /**\n     * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n     * history is keeping more context information about operations, which helps in operational transformation.\n     *\n     * @param undoneOperation Operation which is undone by `undoingOperation`.\n     * @param undoingOperation Operation which undoes `undoneOperation`.\n     */\n    setOperationAsUndone(undoneOperation, undoingOperation) {\n        this._undoPairs.set(undoingOperation, undoneOperation);\n        this._undoneOperations.add(undoneOperation);\n    }\n    /**\n     * Checks whether given `operation` is undoing any other operation.\n     *\n     * @param operation Operation to check.\n     * @returns `true` if given `operation` is undoing any other operation, `false` otherwise.\n     */\n    isUndoingOperation(operation) {\n        return this._undoPairs.has(operation);\n    }\n    /**\n     * Checks whether given `operation` has been undone by any other operation.\n     *\n     * @param operation Operation to check.\n     * @returns `true` if given `operation` has been undone any other operation, `false` otherwise.\n     */\n    isUndoneOperation(operation) {\n        return this._undoneOperations.has(operation);\n    }\n    /**\n     * For given `undoingOperation`, returns the operation which has been undone by it.\n     *\n     * @returns Operation that has been undone by given `undoingOperation` or `undefined`\n     * if given `undoingOperation` is not undoing any other operation.\n     */\n    getUndoneOperation(undoingOperation) {\n        return this._undoPairs.get(undoingOperation);\n    }\n    /**\n     * Resets the history of operations.\n     */\n    reset() {\n        this._version = 0;\n        this._undoPairs = new Map();\n        this._operations = [];\n        this._undoneOperations = new Set();\n        this._gaps = new Map();\n        this._baseVersionToOperationIndex = new Map();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n */\nexport default class RootElement extends Element {\n    /**\n     * Creates root element.\n     *\n     * @param document Document that is an owner of this root.\n     * @param name Node name.\n     * @param rootName Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     */\n    constructor(document, name, rootName = 'main') {\n        super(name);\n        /**\n         * @internal\n         */\n        this._isAttached = true;\n        this._document = document;\n        this.rootName = rootName;\n    }\n    /**\n     * {@link module:engine/model/document~Document Document} that owns this root element.\n     */\n    get document() {\n        return this._document;\n    }\n    /**\n     * Informs if the root element is currently attached to the document, or not.\n     *\n     * A detached root is equivalent to being removed and cannot contain any children or markers.\n     *\n     * By default, a newly added root is attached. It can be detached using\n     * {@link module:engine/model/writer~Writer#detachRoot `Writer#detachRoot`}. A detached root can be re-attached again using\n     * {@link module:engine/model/writer~Writer#addRoot `Writer#addRoot`}.\n     */\n    isAttached() {\n        return this._isAttached;\n    }\n    /**\n     * Converts `RootElement` instance to `string` containing its name.\n     *\n     * @returns `RootElement` instance converted to `string`.\n     */\n    toJSON() {\n        return this.rootName;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nRootElement.prototype.is = function (type, name) {\n    if (!name) {\n        return type === 'rootElement' || type === 'model:rootElement' ||\n            // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n            type === 'element' || type === 'model:element' ||\n            type === 'node' || type === 'model:node';\n    }\n    return name === this.name && (type === 'rootElement' || type === 'model:rootElement' ||\n        // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'model:element');\n};\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/document\n */\nimport Differ from './differ';\nimport DocumentSelection from './documentselection';\nimport History from './history';\nimport RootElement from './rootelement';\nimport { CKEditorError, Collection, EmitterMixin, isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils';\nimport { clone } from 'lodash-es';\n// @if CK_DEBUG_ENGINE // const { logDocument } = require( '../dev-utils/utils' );\nconst graveyardName = '$graveyard';\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n * ```ts\n * model.document.getRoot(); // -> returns the main root\n * ```\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n */\nexport default class Document extends EmitterMixin() {\n    /**\n     * Creates an empty document instance with no {@link #roots} (other than\n     * the {@link #graveyard graveyard root}).\n     */\n    constructor(model) {\n        super();\n        this.model = model;\n        this.history = new History();\n        this.selection = new DocumentSelection(this);\n        this.roots = new Collection({ idProperty: 'rootName' });\n        this.differ = new Differ(model.markers);\n        this.isReadOnly = false;\n        this._postFixers = new Set();\n        this._hasSelectionChangedFromTheLastChangeBlock = false;\n        // Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n        this.createRoot('$root', graveyardName);\n        // Then, still before an operation is applied on model, buffer the change in differ.\n        this.listenTo(model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (operation.isDocumentOperation) {\n                this.differ.bufferOperation(operation);\n            }\n        }, { priority: 'high' });\n        // After the operation is applied, bump document's version and add the operation to the history.\n        this.listenTo(model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            if (operation.isDocumentOperation) {\n                this.history.addOperation(operation);\n            }\n        }, { priority: 'low' });\n        // Listen to selection changes. If selection changed, mark it.\n        this.listenTo(this.selection, 'change', () => {\n            this._hasSelectionChangedFromTheLastChangeBlock = true;\n        });\n        // Buffer marker changes.\n        // This is not covered in buffering operations because markers may change outside of them (when they\n        // are modified using `model.markers` collection, not through `MarkerOperation`).\n        this.listenTo(model.markers, 'update', (evt, marker, oldRange, newRange, oldMarkerData) => {\n            // Copy the `newRange` to the new marker data as during the marker removal the range is not updated.\n            const newMarkerData = { ...marker.getData(), range: newRange };\n            // Whenever marker is updated, buffer that change.\n            this.differ.bufferMarkerChange(marker.name, oldMarkerData, newMarkerData);\n            if (oldRange === null) {\n                // If this is a new marker, add a listener that will buffer change whenever marker changes.\n                marker.on('change', (evt, oldRange) => {\n                    const markerData = marker.getData();\n                    this.differ.bufferMarkerChange(marker.name, { ...markerData, range: oldRange }, markerData);\n                });\n            }\n        });\n        // This is a solution for a problem that may occur during real-time editing. If one client detached a root and another added\n        // something there at the same moment, the OT does not solve this problem currently. In such situation, the added elements would\n        // stay in the detached root.\n        //\n        // This is incorrect, a detached root should be empty and all elements from it should be removed. To solve this, the post-fixer will\n        // remove any element that is left in a detached root.\n        //\n        // Similarly, markers that are created at the beginning or at the end of the detached root will not be removed as well.\n        //\n        // The drawback of this solution over the OT solution is that the elements removed by the post-fixer will never be brought back.\n        // If the root detachment gets undone (and the root is brought back), the removed elements will not be there.\n        this.registerPostFixer(writer => {\n            let result = false;\n            for (const root of this.roots) {\n                if (!root.isAttached() && !root.isEmpty) {\n                    writer.remove(writer.createRangeIn(root));\n                    result = true;\n                }\n            }\n            for (const marker of this.model.markers) {\n                if (!marker.getRange().root.isAttached()) {\n                    writer.removeMarker(marker);\n                    result = true;\n                }\n            }\n            return result;\n        });\n    }\n    /**\n     * The document version. Every applied operation increases the version number. It is used to\n     * ensure that operations are applied on a proper document version.\n     *\n     * This property is equal to {@link module:engine/model/history~History#version `model.Document#history#version`}.\n     *\n     * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n     * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyoperation-wrong-version} error is thrown.\n     */\n    get version() {\n        return this.history.version;\n    }\n    set version(version) {\n        this.history.version = version;\n    }\n    /**\n     * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n     */\n    get graveyard() {\n        return this.getRoot(graveyardName);\n    }\n    /**\n     * Creates a new root.\n     *\n     * **Note:** do not use this method after the editor has been initialized! If you want to dynamically add a root, use\n     * {@link module:engine/model/writer~Writer#addRoot `model.Writer#addRoot`} instead.\n     *\n     * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined\n     * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n     * @param rootName A unique root name.\n     * @returns The created root.\n     */\n    createRoot(elementName = '$root', rootName = 'main') {\n        if (this.roots.get(rootName)) {\n            /**\n             * A root with the specified name already exists.\n             *\n             * @error model-document-createroot-name-exists\n             */\n            throw new CKEditorError('model-document-createroot-name-exists', this, { name: rootName });\n        }\n        const root = new RootElement(this, elementName, rootName);\n        this.roots.add(root);\n        return root;\n    }\n    /**\n     * Removes all event listeners set by the document instance.\n     */\n    destroy() {\n        this.selection.destroy();\n        this.stopListening();\n    }\n    /**\n     * Returns a root by its name.\n     *\n     * Detached roots are returned by this method. This is to be able to operate on the detached root (for example, to be able to create\n     * a position inside such a root for undo feature purposes).\n     *\n     * @param name The root name of the root to return.\n     * @returns The root registered under a given name or `null` when there is no root with the given name.\n     */\n    getRoot(name = 'main') {\n        return this.roots.get(name);\n    }\n    /**\n     * Returns an array with names of all roots added to the document (except the {@link #graveyard graveyard root}).\n     *\n     * Detached roots **are not** returned by this method by default. This is to make sure that all features or algorithms that operate\n     * on the document data know which roots are still a part of the document and should be processed.\n     *\n     * @param includeDetached Specified whether detached roots should be returned as well.\n     * @returns Roots names.\n     */\n    getRootNames(includeDetached = false) {\n        return Array.from(this.roots)\n            .filter(root => root.rootName != graveyardName && (includeDetached || root.isAttached()))\n            .map(root => root.rootName);\n    }\n    /**\n     * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n     * will operate on a correct model state.\n     *\n     * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n     * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n     * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n     * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n     * not be fixed in the new document tree state.\n     *\n     * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n     * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n     * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n     * for the user.\n     *\n     * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n     * callback should add an empty paragraph so that the editor is never empty:\n     *\n     * ```ts\n     * document.registerPostFixer( writer => {\n     * \tconst changes = document.differ.getChanges();\n     *\n     * \t// Check if the changes lead to an empty root in the editor.\n     * \tfor ( const entry of changes ) {\n     * \t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n     * \t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n     *\n     * \t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n     * \t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n     * \t\t\treturn true;\n     * \t\t}\n     * \t}\n     *\n     * \treturn false;\n     * } );\n     * ```\n     */\n    registerPostFixer(postFixer) {\n        this._postFixers.add(postFixer);\n    }\n    /**\n     * A custom `toJSON()` method to solve child-parent circular dependencies.\n     *\n     * @returns A clone of this object with the document property changed to a string.\n     */\n    toJSON() {\n        const json = clone(this);\n        // Due to circular references we need to remove parent reference.\n        json.selection = '[engine.model.DocumentSelection]';\n        json.model = '[engine.model.Model]';\n        return json;\n    }\n    /**\n     * Check if there were any changes done on document, and if so, call post-fixers,\n     * fire `change` event for features and conversion and then reset the differ.\n     * Fire `change:data` event when at least one operation or buffered marker changes the data.\n     *\n     * @internal\n     * @fires change\n     * @fires change:data\n     * @param writer The writer on which post-fixers will be called.\n     */\n    _handleChangeBlock(writer) {\n        if (this._hasDocumentChangedFromTheLastChangeBlock()) {\n            this._callPostFixers(writer);\n            // Refresh selection attributes according to the final position in the model after the change.\n            this.selection.refresh();\n            if (this.differ.hasDataChanges()) {\n                this.fire('change:data', writer.batch);\n            }\n            else {\n                this.fire('change', writer.batch);\n            }\n            // Theoretically, it is not necessary to refresh selection after change event because\n            // post-fixers are the last who should change the model, but just in case...\n            this.selection.refresh();\n            this.differ.reset();\n        }\n        this._hasSelectionChangedFromTheLastChangeBlock = false;\n    }\n    /**\n     * Returns whether there is a buffered change or if the selection has changed from the last\n     * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n     * or {@link module:engine/model/model~Model#change `change()` block}.\n     *\n     * @returns Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n     */\n    _hasDocumentChangedFromTheLastChangeBlock() {\n        return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n    }\n    /**\n     * Returns the default root for this document which is either the first root that was added to the document using\n     * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n     *\n     * @returns The default root for this document.\n     */\n    _getDefaultRoot() {\n        for (const root of this.roots) {\n            if (root !== this.graveyard) {\n                return root;\n            }\n        }\n        return this.graveyard;\n    }\n    /**\n     * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n     * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n     *\n     * @internal\n     */\n    _getDefaultRange() {\n        const defaultRoot = this._getDefaultRoot();\n        const model = this.model;\n        const schema = model.schema;\n        // Find the first position where the selection can be put.\n        const position = model.createPositionFromPath(defaultRoot, [0]);\n        const nearestRange = schema.getNearestSelectionRange(position);\n        // If valid selection range is not found - return range collapsed at the beginning of the root.\n        return nearestRange || model.createRange(position);\n    }\n    /**\n     * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n     * the {@link #selection document's selection}.\n     *\n     * @internal\n     * @param range A range to check.\n     * @returns `true` if `range` is valid, `false` otherwise.\n     */\n    _validateSelectionRange(range) {\n        return validateTextNodePosition(range.start) && validateTextNodePosition(range.end);\n    }\n    /**\n     * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n     *\n     * @param writer The writer on which post-fixer callbacks will be called.\n     */\n    _callPostFixers(writer) {\n        let wasFixed = false;\n        do {\n            for (const callback of this._postFixers) {\n                // Ensure selection attributes are up to date before each post-fixer.\n                // https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n                //\n                // It might be good to refresh the selection after each operation but at the moment it leads\n                // to losing attributes for composition or and spell checking\n                // https://github.com/ckeditor/ckeditor5-typing/issues/188\n                this.selection.refresh();\n                wasFixed = callback(writer);\n                if (wasFixed) {\n                    break;\n                }\n            }\n        } while (wasFixed);\n    }\n}\n/**\n * Checks whether given range boundary position is valid for document selection, meaning that is not between\n * unicode surrogate pairs or base character and combining marks.\n */\nfunction validateTextNodePosition(rangeBoundary) {\n    const textNode = rangeBoundary.textNode;\n    if (textNode) {\n        const data = textNode.data;\n        const offset = rangeBoundary.offset - textNode.startOffset;\n        return !isInsideSurrogatePair(data, offset) && !isInsideCombinedSymbol(data, offset);\n    }\n    return true;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/markercollection\n */\nimport TypeCheckable from './typecheckable';\nimport LiveRange from './liverange';\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection extends EmitterMixin() {\n    constructor() {\n        super(...arguments);\n        /**\n         * Stores {@link ~Marker markers} added to the collection.\n         */\n        this._markers = new Map();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Iterates over all {@link ~Marker markers} added to the collection.\n     */\n    [Symbol.iterator]() {\n        return this._markers.values();\n    }\n    /**\n     * Checks if given {@link ~Marker marker} or marker name is in the collection.\n     *\n     * @param markerOrName Name of marker or marker instance to check.\n     * @returns `true` if marker is in the collection, `false` otherwise.\n     */\n    has(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        return this._markers.has(markerName);\n    }\n    /**\n     * Returns {@link ~Marker marker} with given `markerName`.\n     *\n     * @param markerName Name of marker to get.\n     * @returns Marker with given name or `null` if such marker was\n     * not added to the collection.\n     */\n    get(markerName) {\n        return this._markers.get(markerName) || null;\n    }\n    /**\n     * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n     * {@link module:engine/model/range~Range range}.\n     *\n     * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n     * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n     * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n     * flag has changed.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Name of marker to set or marker instance to update.\n     * @param range Marker range.\n     * @param managedUsingOperations Specifies whether the marker is managed using operations.\n     * @param affectsData Specifies whether the marker affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     * @returns `Marker` instance which was added or updated.\n     */\n    _set(markerOrName, range, managedUsingOperations = false, affectsData = false) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        if (markerName.includes(',')) {\n            /**\n             * Marker name cannot contain the \",\" character.\n             *\n             * @error markercollection-incorrect-marker-name\n             */\n            throw new CKEditorError('markercollection-incorrect-marker-name', this);\n        }\n        const oldMarker = this._markers.get(markerName);\n        if (oldMarker) {\n            const oldMarkerData = oldMarker.getData();\n            const oldRange = oldMarker.getRange();\n            let hasChanged = false;\n            if (!oldRange.isEqual(range)) {\n                oldMarker._attachLiveRange(LiveRange.fromRange(range));\n                hasChanged = true;\n            }\n            if (managedUsingOperations != oldMarker.managedUsingOperations) {\n                oldMarker._managedUsingOperations = managedUsingOperations;\n                hasChanged = true;\n            }\n            if (typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData) {\n                oldMarker._affectsData = affectsData;\n                hasChanged = true;\n            }\n            if (hasChanged) {\n                this.fire(`update:${markerName}`, oldMarker, oldRange, range, oldMarkerData);\n            }\n            return oldMarker;\n        }\n        const liveRange = LiveRange.fromRange(range);\n        const marker = new Marker(markerName, liveRange, managedUsingOperations, affectsData);\n        this._markers.set(markerName, marker);\n        this.fire(`update:${markerName}`, marker, null, range, { ...marker.getData(), range: null });\n        return marker;\n    }\n    /**\n     * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Marker or name of a marker to remove.\n     * @returns `true` if marker was found and removed, `false` otherwise.\n     */\n    _remove(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        const oldMarker = this._markers.get(markerName);\n        if (oldMarker) {\n            this._markers.delete(markerName);\n            this.fire(`update:${markerName}`, oldMarker, oldMarker.getRange(), null, oldMarker.getData());\n            this._destroyMarker(oldMarker);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n     * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n     * conversion} for the marker.\n     *\n     * @internal\n     * @fires update\n     * @param markerOrName Marker or name of a marker to refresh.\n     */\n    _refresh(markerOrName) {\n        const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n        const marker = this._markers.get(markerName);\n        if (!marker) {\n            /**\n             * Marker with provided name does not exists.\n             *\n             * @error markercollection-refresh-marker-not-exists\n             */\n            throw new CKEditorError('markercollection-refresh-marker-not-exists', this);\n        }\n        const range = marker.getRange();\n        this.fire(`update:${markerName}`, marker, range, range, marker.getData());\n    }\n    /**\n     * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n     */\n    *getMarkersAtPosition(position) {\n        for (const marker of this) {\n            if (marker.getRange().containsPosition(position)) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n     */\n    *getMarkersIntersectingRange(range) {\n        for (const marker of this) {\n            if (marker.getRange().getIntersection(range) !== null) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Destroys marker collection and all markers inside it.\n     */\n    destroy() {\n        for (const marker of this._markers.values()) {\n            this._destroyMarker(marker);\n        }\n        this._markers = null;\n        this.stopListening();\n    }\n    /**\n     * Iterates over all markers that starts with given `prefix`.\n     *\n     * ```ts\n     * const markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n     * const markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n     * const markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n     * const markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n     * Array.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n     * Array.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n     * ```\n     */\n    *getMarkersGroup(prefix) {\n        for (const marker of this._markers.values()) {\n            if (marker.name.startsWith(prefix + ':')) {\n                yield marker;\n            }\n        }\n    }\n    /**\n     * Destroys the marker.\n     */\n    _destroyMarker(marker) {\n        marker.stopListening();\n        marker._detachLiveRange();\n    }\n}\n/**\n * `Marker` is a continuous part of the model (like a range), is named and represents some kind of information about the\n * marked part of the model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * the model document tree, markers are not stored directly in the document tree but in the\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'update:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n * ```ts\n * model.change( ( writer ) => {\n * \tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t// ...\n *\n * \twriter.removeMarker( marker );\n * } );\n * ```\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker extends EmitterMixin(TypeCheckable) {\n    /**\n     * Creates a marker instance.\n     *\n     * @param name Marker name.\n     * @param liveRange Range marked by the marker.\n     * @param managedUsingOperations Specifies whether the marker is managed using operations.\n     * @param affectsData Specifies whether the marker affects the data produced by the data pipeline (is persisted in the editor's data).\n     */\n    constructor(name, liveRange, managedUsingOperations, affectsData) {\n        super();\n        this.name = name;\n        this._liveRange = this._attachLiveRange(liveRange);\n        this._managedUsingOperations = managedUsingOperations;\n        this._affectsData = affectsData;\n    }\n    /**\n     * A value indicating if the marker is managed using operations.\n     * See {@link ~Marker marker class description} to learn more about marker types.\n     * See {@link module:engine/model/writer~Writer#addMarker}.\n     */\n    get managedUsingOperations() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._managedUsingOperations;\n    }\n    /**\n     * A value indicating if the marker changes the data.\n     */\n    get affectsData() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._affectsData;\n    }\n    /**\n     * Returns the marker data (properties defining the marker).\n     */\n    getData() {\n        return {\n            range: this.getRange(),\n            affectsData: this.affectsData,\n            managedUsingOperations: this.managedUsingOperations\n        };\n    }\n    /**\n     * Returns current marker start position.\n     */\n    getStart() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.start.clone();\n    }\n    /**\n     * Returns current marker end position.\n     */\n    getEnd() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.end.clone();\n    }\n    /**\n     * Returns a range that represents the current state of the marker.\n     *\n     * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n     * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n     * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n     * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n     * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n     * that it's data is up-to-date.\n     */\n    getRange() {\n        if (!this._liveRange) {\n            throw new CKEditorError('marker-destroyed', this);\n        }\n        return this._liveRange.toRange();\n    }\n    /**\n     * Binds new live range to the marker and detach the old one if is attached.\n     *\n     * @internal\n     * @param liveRange Live range to attach\n     * @returns Attached live range.\n     */\n    _attachLiveRange(liveRange) {\n        if (this._liveRange) {\n            this._detachLiveRange();\n        }\n        // Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n        liveRange.delegate('change:range').to(this);\n        liveRange.delegate('change:content').to(this);\n        this._liveRange = liveRange;\n        return liveRange;\n    }\n    /**\n     * Unbinds and destroys currently attached live range.\n     *\n     * @internal\n     */\n    _detachLiveRange() {\n        this._liveRange.stopDelegating('change:range', this);\n        this._liveRange.stopDelegating('change:content', this);\n        this._liveRange.detach();\n        this._liveRange = null;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nMarker.prototype.is = function (type) {\n    return type === 'marker' || type === 'model:marker';\n};\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/operation/detachoperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n */\nexport default class DetachOperation extends Operation {\n    /**\n     * Creates an insert operation.\n     *\n     * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.\n     * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n     * `sourcePosition` with offset shifted by `howMany`.\n     */\n    constructor(sourcePosition, howMany) {\n        super(null);\n        this.sourcePosition = sourcePosition.clone();\n        this.howMany = howMany;\n    }\n    /**\n     * @inheritDoc\n     */\n    get type() {\n        return 'detach';\n    }\n    /**\n     * @inheritDoc\n     */\n    get affectedSelectable() {\n        return null;\n    }\n    /**\n     * @inheritDoc\n     */\n    toJSON() {\n        const json = super.toJSON();\n        json.sourcePosition = this.sourcePosition.toJSON();\n        return json;\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _validate() {\n        if (this.sourcePosition.root.document) {\n            /**\n             * Cannot detach document node.\n             *\n             * @error detach-operation-on-document-node\n             */\n            throw new CKEditorError('detach-operation-on-document-node', this);\n        }\n    }\n    /**\n     * @inheritDoc\n     * @internal\n     */\n    _execute() {\n        _remove(Range._createFromPositionAndShift(this.sourcePosition, this.howMany));\n    }\n    /**\n     * @inheritDoc\n     */\n    static get className() {\n        return 'DetachOperation';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/documentfragment\n */\nimport TypeCheckable from './typecheckable';\nimport Element from './element';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport { isIterable } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { stringifyMap } = require( '../dev-utils/utils' );\n/**\n * DocumentFragment represents a part of model which does not have a common root but its top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment extends TypeCheckable {\n    /**\n     * Creates an empty `DocumentFragment`.\n     *\n     * **Note:** Constructor of this class shouldn't be used directly in the code.\n     * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n     *\n     * @internal\n     * @param children Nodes to be contained inside the `DocumentFragment`.\n     */\n    constructor(children) {\n        super();\n        /**\n         * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n         * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n         * when DocumentFragment will be inserted to the document.\n         */\n        this.markers = new Map();\n        /**\n         * List of nodes contained inside the document fragment.\n         */\n        this._children = new NodeList();\n        if (children) {\n            this._insertChild(0, children);\n        }\n    }\n    /**\n     * Returns an iterator that iterates over all nodes contained inside this document fragment.\n     */\n    [Symbol.iterator]() {\n        return this.getChildren();\n    }\n    /**\n     * Number of this document fragment's children.\n     */\n    get childCount() {\n        return this._children.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n     */\n    get maxOffset() {\n        return this._children.maxOffset;\n    }\n    /**\n     * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n     */\n    get isEmpty() {\n        return this.childCount === 0;\n    }\n    /**\n     * Artificial next sibling. Returns `null`. Added for compatibility reasons.\n     */\n    get nextSibling() {\n        return null;\n    }\n    /**\n     * Artificial previous sibling. Returns `null`. Added for compatibility reasons.\n     */\n    get previousSibling() {\n        return null;\n    }\n    /**\n     * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n     */\n    get root() {\n        return this;\n    }\n    /**\n     * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get parent() {\n        return null;\n    }\n    /**\n     * Artificial owner of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n     */\n    get document() {\n        return null;\n    }\n    /**\n     * Returns `false` as `DocumentFragment` by definition is not attached to a document. Added for compatibility reasons.\n     */\n    isAttached() {\n        return false;\n    }\n    /**\n     * Returns empty array. Added for compatibility reasons.\n     */\n    getAncestors() {\n        return [];\n    }\n    /**\n     * Gets the child at the given index. Returns `null` if incorrect index was passed.\n     *\n     * @param index Index of child.\n     * @returns Child node.\n     */\n    getChild(index) {\n        return this._children.getNode(index);\n    }\n    /**\n     * Returns an iterator that iterates over all of this document fragment's children.\n     */\n    getChildren() {\n        return this._children[Symbol.iterator]();\n    }\n    /**\n     * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's index.\n     */\n    getChildIndex(node) {\n        return this._children.getNodeIndex(node);\n    }\n    /**\n     * Returns the starting offset of given child. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n     * given node is not a child of this document fragment.\n     *\n     * @param node Child node to look for.\n     * @returns Child node's starting offset.\n     */\n    getChildStartOffset(node) {\n        return this._children.getNodeStartOffset(node);\n    }\n    /**\n     * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n     */\n    getPath() {\n        return [];\n    }\n    /**\n     * Returns a descendant node by its path relative to this element.\n     *\n     * ```ts\n     * // <this>a<b>c</b></this>\n     * this.getNodeByPath( [ 0 ] );     // -> \"a\"\n     * this.getNodeByPath( [ 1 ] );     // -> <b>\n     * this.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n     * ```\n     *\n     * @param relativePath Path of the node to find, relative to this element.\n     */\n    getNodeByPath(relativePath) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let node = this;\n        for (const index of relativePath) {\n            node = node.getChild(node.offsetToIndex(index));\n        }\n        return node;\n    }\n    /**\n     * Converts offset \"position\" to index \"position\".\n     *\n     * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n     * too high, returns index after last child.\n     *\n     * ```ts\n     * const textNode = new Text( 'foo' );\n     * const pElement = new Element( 'p' );\n     * const docFrag = new DocumentFragment( [ textNode, pElement ] );\n     * docFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n     * docFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n     * docFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n     * docFrag.offsetToIndex( 2 ); // Returns 0.\n     * docFrag.offsetToIndex( 3 ); // Returns 1.\n     * docFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n     * ```\n     *\n     * @param offset Offset to look for.\n     * @returns Index of a node that occupies given offset.\n     */\n    offsetToIndex(offset) {\n        return this._children.offsetToIndex(offset);\n    }\n    /**\n     * Converts `DocumentFragment` instance to plain object and returns it.\n     * Takes care of converting all of this document fragment's children.\n     *\n     * @returns `DocumentFragment` instance converted to plain object.\n     */\n    toJSON() {\n        const json = [];\n        for (const node of this._children) {\n            json.push(node.toJSON());\n        }\n        return json;\n    }\n    /**\n     * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n     * Converts `DocumentFragment` children to proper nodes.\n     *\n     * @param json Plain object to be converted to `DocumentFragment`.\n     * @returns `DocumentFragment` instance created using given plain object.\n     */\n    static fromJSON(json) {\n        const children = [];\n        for (const child of json) {\n            if (child.name) {\n                // If child has name property, it is an Element.\n                children.push(Element.fromJSON(child));\n            }\n            else {\n                // Otherwise, it is a Text node.\n                children.push(Text.fromJSON(child));\n            }\n        }\n        return new DocumentFragment(children);\n    }\n    /**\n     * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n     *\n     * @internal\n     * @param items Items to be inserted.\n     */\n    _appendChild(items) {\n        this._insertChild(this.childCount, items);\n    }\n    /**\n     * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n     * to this document fragment.\n     *\n     * @internal\n     * @param index Index at which nodes should be inserted.\n     * @param items Items to be inserted.\n     */\n    _insertChild(index, items) {\n        const nodes = normalize(items);\n        for (const node of nodes) {\n            // If node that is being added to this element is already inside another element, first remove it from the old parent.\n            if (node.parent !== null) {\n                node._remove();\n            }\n            node.parent = this;\n        }\n        this._children._insertNodes(index, nodes);\n    }\n    /**\n     * Removes one or more nodes starting at the given index\n     * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n     *\n     * @internal\n     * @param index Index of the first node to remove.\n     * @param howMany Number of nodes to remove.\n     * @returns Array containing removed nodes.\n     */\n    _removeChildren(index, howMany = 1) {\n        const nodes = this._children._removeNodes(index, howMany);\n        for (const node of nodes) {\n            node.parent = null;\n        }\n        return nodes;\n    }\n}\n// The magic of type inference using `is` method is centralized in `TypeCheckable` class.\n// Proper overload would interfere with that.\nDocumentFragment.prototype.is = function (type) {\n    return type === 'documentFragment' || type === 'model:documentFragment';\n};\n/**\n * Converts strings to Text and non-iterables to arrays.\n */\nfunction normalize(nodes) {\n    // Separate condition because string is iterable.\n    if (typeof nodes == 'string') {\n        return [new Text(nodes)];\n    }\n    if (!isIterable(nodes)) {\n        nodes = [nodes];\n    }\n    // Array.from to enable .map() on non-arrays.\n    return Array.from(nodes)\n        .map(node => {\n        if (typeof node == 'string') {\n            return new Text(node);\n        }\n        if (node instanceof TextProxy) {\n            return new Text(node.data, node.getAttributes());\n        }\n        return node;\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/writer\n */\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MergeOperation from './operation/mergeoperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport RootOperation from './operation/rootoperation';\nimport SplitOperation from './operation/splitoperation';\nimport DocumentFragment from './documentfragment';\nimport DocumentSelection from './documentselection';\nimport Element from './element';\nimport Position from './position';\nimport Range from './range';\nimport RootElement from './rootelement';\nimport Text from './text';\nimport { CKEditorError, logWarning, toMap } from '@ckeditor/ckeditor5-utils';\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n * ```ts\n * model.change( writer => {\n * \twriter.insertText( 'foo', paragraph, 'end' );\n * } );\n * ```\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n    /**\n     * Creates a writer instance.\n     *\n     * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n     * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n     *\n     * @internal\n     */\n    constructor(model, batch) {\n        this.model = model;\n        this.batch = batch;\n    }\n    /**\n     * Creates a new {@link module:engine/model/text~Text text node}.\n     *\n     * ```ts\n     * writer.createText( 'foo' );\n     * writer.createText( 'foo', { bold: true } );\n     * ```\n     *\n     * @param data Text data.\n     * @param attributes Text attributes.\n     * @returns {module:engine/model/text~Text} Created text node.\n     */\n    createText(data, attributes) {\n        return new Text(data, attributes);\n    }\n    /**\n     * Creates a new {@link module:engine/model/element~Element element}.\n     *\n     * ```ts\n     * writer.createElement( 'paragraph' );\n     * writer.createElement( 'paragraph', { alignment: 'center' } );\n     * ```\n     *\n     * @param name Name of the element.\n     * @param attributes Elements attributes.\n     * @returns Created element.\n     */\n    createElement(name, attributes) {\n        return new Element(name, attributes);\n    }\n    /**\n     * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n     *\n     * @returns Created document fragment.\n     */\n    createDocumentFragment() {\n        return new DocumentFragment();\n    }\n    /**\n     * Creates a copy of the element and returns it. Created element has the same name and attributes as the original element.\n     * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.\n     *\n     * @param element The element to clone.\n     * @param deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any child.\n     */\n    cloneElement(element, deep = true) {\n        return element._clone(deep);\n    }\n    /**\n     * Inserts item on given position.\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.insert( paragraph, position );\n     * ```\n     *\n     * Instead of using position you can use parent and offset:\n     *\n     * ```ts\n     * const text = writer.createText( 'foo' );\n     * writer.insert( text, paragraph, 5 );\n     * ```\n     *\n     * You can also use `end` instead of the offset to insert at the end:\n     *\n     * ```ts\n     * const text = writer.createText( 'foo' );\n     * writer.insert( text, paragraph, 'end' );\n     * ```\n     *\n     * Or insert before or after another element:\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.insert( paragraph, anotherParagraph, 'after' );\n     * ```\n     *\n     * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n     *\n     * Note that if the item already has parent it will be removed from the previous parent.\n     *\n     * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n     * `model-writer-insert-forbidden-move` is thrown.\n     *\n     * If you want to move {@link module:engine/model/range~Range range} instead of an\n     * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n     *\n     * **Note:** For a paste-like content insertion mechanism see\n     * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n     *\n     * @param item Item or document fragment to insert.\n     * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    insert(item, itemOrPosition, offset = 0) {\n        this._assertWriterUsedCorrectly();\n        if (item instanceof Text && item.data == '') {\n            return;\n        }\n        const position = Position._createAt(itemOrPosition, offset);\n        // If item has a parent already.\n        if (item.parent) {\n            // We need to check if item is going to be inserted within the same document.\n            if (isSameTree(item.root, position.root)) {\n                // If it's we just need to move it.\n                this.move(Range._createOn(item), position);\n                return;\n            }\n            // If it isn't the same root.\n            else {\n                if (item.root.document) {\n                    /**\n                     * Cannot move a node from a document to a different tree.\n                     * It is forbidden to move a node that was already in a document outside of it.\n                     *\n                     * @error model-writer-insert-forbidden-move\n                     */\n                    throw new CKEditorError('model-writer-insert-forbidden-move', this);\n                }\n                else {\n                    // Move between two different document fragments or from document fragment to a document is possible.\n                    // In that case, remove the item from it's original parent.\n                    this.remove(item);\n                }\n            }\n        }\n        const version = position.root.document ? position.root.document.version : null;\n        const insert = new InsertOperation(position, item, version);\n        if (item instanceof Text) {\n            insert.shouldReceiveAttributes = true;\n        }\n        this.batch.addOperation(insert);\n        this.model.applyOperation(insert);\n        // When element is a DocumentFragment we need to move its markers to Document#markers.\n        if (item instanceof DocumentFragment) {\n            for (const [markerName, markerRange] of item.markers) {\n                // We need to migrate marker range from DocumentFragment to Document.\n                const rangeRootPosition = Position._createAt(markerRange.root, 0);\n                const range = new Range(markerRange.start._getCombined(rangeRootPosition, position), markerRange.end._getCombined(rangeRootPosition, position));\n                const options = { range, usingOperation: true, affectsData: true };\n                if (this.model.markers.has(markerName)) {\n                    this.updateMarker(markerName, options);\n                }\n                else {\n                    this.addMarker(markerName, options);\n                }\n            }\n        }\n    }\n    insertText(text, attributes, // Too complicated when not using `any`.\n    itemOrPosition, // Too complicated when not using `any`.\n    offset // Too complicated when not using `any`.\n    ) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n            this.insert(this.createText(text), attributes, itemOrPosition);\n        }\n        else {\n            this.insert(this.createText(text, attributes), itemOrPosition, offset);\n        }\n    }\n    insertElement(name, attributes, // Too complicated when not using `any`.\n    itemOrPositionOrOffset, // Too complicated when not using `any`.\n    offset // Too complicated when not using `any`.\n    ) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n            this.insert(this.createElement(name), attributes, itemOrPositionOrOffset);\n        }\n        else {\n            this.insert(this.createElement(name, attributes), itemOrPositionOrOffset, offset);\n        }\n    }\n    /**\n     * Inserts item at the end of the given parent.\n     *\n     * ```ts\n     * const paragraph = writer.createElement( 'paragraph' );\n     * writer.append( paragraph, root );\n     * ```\n     *\n     * Note that if the item already has parent it will be removed from the previous parent.\n     *\n     * If you want to move {@link module:engine/model/range~Range range} instead of an\n     * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n     *\n     * @param item Item or document fragment to insert.\n     */\n    append(item, parent) {\n        this.insert(item, parent, 'end');\n    }\n    appendText(text, attributes, parent) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n            this.insert(this.createText(text), attributes, 'end');\n        }\n        else {\n            this.insert(this.createText(text, attributes), parent, 'end');\n        }\n    }\n    appendElement(name, attributes, parent) {\n        if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n            this.insert(this.createElement(name), attributes, 'end');\n        }\n        else {\n            this.insert(this.createElement(name, attributes), parent, 'end');\n        }\n    }\n    /**\n     * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n     * or on a {@link module:engine/model/range~Range range}.\n     *\n     * @param key Attribute key.\n     * @param value Attribute new value.\n     * @param itemOrRange Model item or range on which the attribute will be set.\n     */\n    setAttribute(key, value, itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        if (itemOrRange instanceof Range) {\n            const ranges = itemOrRange.getMinimalFlatRanges();\n            for (const range of ranges) {\n                setAttributeOnRange(this, key, value, range);\n            }\n        }\n        else {\n            setAttributeOnItem(this, key, value, itemOrRange);\n        }\n    }\n    /**\n     * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n     * or on a {@link module:engine/model/range~Range range}.\n     *\n     * ```ts\n     * writer.setAttributes( {\n     * \tbold: true,\n     * \titalic: true\n     * }, range );\n     * ```\n     *\n     * @param attributes Attributes keys and values.\n     * @param itemOrRange Model item or range on which the attributes will be set.\n     */\n    setAttributes(attributes, itemOrRange) {\n        for (const [key, val] of toMap(attributes)) {\n            this.setAttribute(key, val, itemOrRange);\n        }\n    }\n    /**\n     * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n     * or from a {@link module:engine/model/range~Range range}.\n     *\n     * @param key Attribute key.\n     * @param itemOrRange Model item or range from which the attribute will be removed.\n     */\n    removeAttribute(key, itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        if (itemOrRange instanceof Range) {\n            const ranges = itemOrRange.getMinimalFlatRanges();\n            for (const range of ranges) {\n                setAttributeOnRange(this, key, null, range);\n            }\n        }\n        else {\n            setAttributeOnItem(this, key, null, itemOrRange);\n        }\n    }\n    /**\n     * Removes all attributes from all elements in the range or from the given item.\n     *\n     * @param itemOrRange Model item or range from which all attributes will be removed.\n     */\n    clearAttributes(itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        const removeAttributesFromItem = (item) => {\n            for (const attribute of item.getAttributeKeys()) {\n                this.removeAttribute(attribute, item);\n            }\n        };\n        if (!(itemOrRange instanceof Range)) {\n            removeAttributesFromItem(itemOrRange);\n        }\n        else {\n            for (const item of itemOrRange.getItems()) {\n                removeAttributesFromItem(item);\n            }\n        }\n    }\n    /**\n     * Moves all items in the source range to the target position.\n     *\n     * ```ts\n     * writer.move( sourceRange, targetPosition );\n     * ```\n     *\n     * Instead of the target position you can use parent and offset or define that range should be moved to the end\n     * or before or after chosen item:\n     *\n     * ```ts\n     * // Moves all items in the range to the paragraph at offset 5:\n     * writer.move( sourceRange, paragraph, 5 );\n     * // Moves all items in the range to the end of a blockquote:\n     * writer.move( sourceRange, blockquote, 'end' );\n     * // Moves all items in the range to a position after an image:\n     * writer.move( sourceRange, image, 'after' );\n     * ```\n     *\n     * These parameters work the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n     *\n     * Note that items can be moved only within the same tree. It means that you can move items within the same root\n     * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n     * but you can not move items from document fragment to the document or from one detached element to another. Use\n     * {@link module:engine/model/writer~Writer#insert} in such cases.\n     *\n     * @param range Source range.\n     * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    move(range, itemOrPosition, offset) {\n        this._assertWriterUsedCorrectly();\n        if (!(range instanceof Range)) {\n            /**\n             * Invalid range to move.\n             *\n             * @error writer-move-invalid-range\n             */\n            throw new CKEditorError('writer-move-invalid-range', this);\n        }\n        if (!range.isFlat) {\n            /**\n             * Range to move is not flat.\n             *\n             * @error writer-move-range-not-flat\n             */\n            throw new CKEditorError('writer-move-range-not-flat', this);\n        }\n        const position = Position._createAt(itemOrPosition, offset);\n        // Do not move anything if the move target is same as moved range start.\n        if (position.isEqual(range.start)) {\n            return;\n        }\n        // If part of the marker is removed, create additional marker operation for undo purposes.\n        this._addOperationForAffectedMarkers('move', range);\n        if (!isSameTree(range.root, position.root)) {\n            /**\n             * Range is going to be moved within not the same document. Please use\n             * {@link module:engine/model/writer~Writer#insert insert} instead.\n             *\n             * @error writer-move-different-document\n             */\n            throw new CKEditorError('writer-move-different-document', this);\n        }\n        const version = range.root.document ? range.root.document.version : null;\n        const operation = new MoveOperation(range.start, range.end.offset - range.start.offset, position, version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n    }\n    /**\n     * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n     *\n     * @param itemOrRange Model item or range to remove.\n     */\n    remove(itemOrRange) {\n        this._assertWriterUsedCorrectly();\n        const rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn(itemOrRange);\n        const ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n        for (const flat of ranges) {\n            // If part of the marker is removed, create additional marker operation for undo purposes.\n            this._addOperationForAffectedMarkers('move', flat);\n            applyRemoveOperation(flat.start, flat.end.offset - flat.start.offset, this.batch, this.model);\n        }\n    }\n    /**\n     * Merges two siblings at the given position.\n     *\n     * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n     * `writer-merge-no-element-after` error will be thrown.\n     *\n     * @param position Position between merged elements.\n     */\n    merge(position) {\n        this._assertWriterUsedCorrectly();\n        const nodeBefore = position.nodeBefore;\n        const nodeAfter = position.nodeAfter;\n        // If part of the marker is removed, create additional marker operation for undo purposes.\n        this._addOperationForAffectedMarkers('merge', position);\n        if (!(nodeBefore instanceof Element)) {\n            /**\n             * Node before merge position must be an element.\n             *\n             * @error writer-merge-no-element-before\n             */\n            throw new CKEditorError('writer-merge-no-element-before', this);\n        }\n        if (!(nodeAfter instanceof Element)) {\n            /**\n             * Node after merge position must be an element.\n             *\n             * @error writer-merge-no-element-after\n             */\n            throw new CKEditorError('writer-merge-no-element-after', this);\n        }\n        if (!position.root.document) {\n            this._mergeDetached(position);\n        }\n        else {\n            this._merge(position);\n        }\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    createPositionFromPath(root, path, stickiness) {\n        return this.model.createPositionFromPath(root, path, stickiness);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n     *\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return this.model.createPositionAt(itemOrPosition, offset);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionAfter(item) {\n        return this.model.createPositionAfter(item);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionBefore(item) {\n        return this.model.createPositionBefore(item);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n     *\n     * @param start Start position.\n     * @param end End position. If not set, range will be collapsed at `start` position.\n     */\n    createRange(start, end) {\n        return this.model.createRange(start, end);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return this.model.createRangeIn(element);\n    }\n    /**\n     * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeOn(element) {\n        return this.model.createRangeOn(element);\n    }\n    createSelection(...args) {\n        return this.model.createSelection(...args);\n    }\n    /**\n     * Performs merge action in a detached tree.\n     *\n     * @param position Position between merged elements.\n     */\n    _mergeDetached(position) {\n        const nodeBefore = position.nodeBefore;\n        const nodeAfter = position.nodeAfter;\n        this.move(Range._createIn(nodeAfter), Position._createAt(nodeBefore, 'end'));\n        this.remove(nodeAfter);\n    }\n    /**\n     * Performs merge action in a non-detached tree.\n     *\n     * @param position Position between merged elements.\n     */\n    _merge(position) {\n        const targetPosition = Position._createAt(position.nodeBefore, 'end');\n        const sourcePosition = Position._createAt(position.nodeAfter, 0);\n        const graveyard = position.root.document.graveyard;\n        const graveyardPosition = new Position(graveyard, [0]);\n        const version = position.root.document.version;\n        const merge = new MergeOperation(sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version);\n        this.batch.addOperation(merge);\n        this.model.applyOperation(merge);\n    }\n    /**\n     * Renames the given element.\n     *\n     * @param element The element to rename.\n     * @param newName New element name.\n     */\n    rename(element, newName) {\n        this._assertWriterUsedCorrectly();\n        if (!(element instanceof Element)) {\n            /**\n             * Trying to rename an object which is not an instance of Element.\n             *\n             * @error writer-rename-not-element-instance\n             */\n            throw new CKEditorError('writer-rename-not-element-instance', this);\n        }\n        const version = element.root.document ? element.root.document.version : null;\n        const renameOperation = new RenameOperation(Position._createBefore(element), element.name, newName, version);\n        this.batch.addOperation(renameOperation);\n        this.model.applyOperation(renameOperation);\n    }\n    /**\n     * Splits elements starting from the given position and going to the top of the model tree as long as given\n     * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n     *\n     * The element needs to have a parent. It cannot be a root element nor a document fragment.\n     * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n     *\n     * @param position Position of split.\n     * @param limitElement Stop splitting when this element will be reached.\n     * @returns Split result with properties:\n     * * `position` - Position between split elements.\n     * * `range` - Range that stars from the end of the first split element and ends at the beginning of the first copy element.\n     */\n    split(position, limitElement) {\n        this._assertWriterUsedCorrectly();\n        let splitElement = position.parent;\n        if (!splitElement.parent) {\n            /**\n             * Element with no parent can not be split.\n             *\n             * @error writer-split-element-no-parent\n             */\n            throw new CKEditorError('writer-split-element-no-parent', this);\n        }\n        // When limit element is not defined lets set splitElement parent as limit.\n        if (!limitElement) {\n            limitElement = splitElement.parent;\n        }\n        if (!position.parent.getAncestors({ includeSelf: true }).includes(limitElement)) {\n            /**\n             * Limit element is not a position ancestor.\n             *\n             * @error writer-split-invalid-limit-element\n             */\n            throw new CKEditorError('writer-split-invalid-limit-element', this);\n        }\n        // We need to cache elements that will be created as a result of the first split because\n        // we need to create a range from the end of the first split element to the beginning of the\n        // first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n        let firstSplitElement;\n        let firstCopyElement;\n        do {\n            const version = splitElement.root.document ? splitElement.root.document.version : null;\n            const howMany = splitElement.maxOffset - position.offset;\n            const insertionPosition = SplitOperation.getInsertionPosition(position);\n            const split = new SplitOperation(position, howMany, insertionPosition, null, version);\n            this.batch.addOperation(split);\n            this.model.applyOperation(split);\n            // Cache result of the first split.\n            if (!firstSplitElement && !firstCopyElement) {\n                firstSplitElement = splitElement;\n                firstCopyElement = position.parent.nextSibling;\n            }\n            position = this.createPositionAfter(position.parent);\n            splitElement = position.parent;\n        } while (splitElement !== limitElement);\n        return {\n            position,\n            range: new Range(Position._createAt(firstSplitElement, 'end'), Position._createAt(firstCopyElement, 0))\n        };\n    }\n    /**\n     * Wraps the given range with the given element or with a new element (if a string was passed).\n     *\n     * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n     * If not, an error will be thrown.\n     *\n     * @param range Range to wrap.\n     * @param elementOrString Element or name of element to wrap the range with.\n     */\n    wrap(range, elementOrString) {\n        this._assertWriterUsedCorrectly();\n        if (!range.isFlat) {\n            /**\n             * Range to wrap is not flat.\n             *\n             * @error writer-wrap-range-not-flat\n             */\n            throw new CKEditorError('writer-wrap-range-not-flat', this);\n        }\n        const element = elementOrString instanceof Element ? elementOrString : new Element(elementOrString);\n        if (element.childCount > 0) {\n            /**\n             * Element to wrap with is not empty.\n             *\n             * @error writer-wrap-element-not-empty\n             */\n            throw new CKEditorError('writer-wrap-element-not-empty', this);\n        }\n        if (element.parent !== null) {\n            /**\n             * Element to wrap with is already attached to a tree model.\n             *\n             * @error writer-wrap-element-attached\n             */\n            throw new CKEditorError('writer-wrap-element-attached', this);\n        }\n        this.insert(element, range.start);\n        // Shift the range-to-wrap because we just inserted an element before that range.\n        const shiftedRange = new Range(range.start.getShiftedBy(1), range.end.getShiftedBy(1));\n        this.move(shiftedRange, Position._createAt(element, 0));\n    }\n    /**\n     * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n     * Throws error if you try to unwrap an element which does not have a parent.\n     *\n     * @param element Element to unwrap.\n     */\n    unwrap(element) {\n        this._assertWriterUsedCorrectly();\n        if (element.parent === null) {\n            /**\n             * Trying to unwrap an element which has no parent.\n             *\n             * @error writer-unwrap-element-no-parent\n             */\n            throw new CKEditorError('writer-unwrap-element-no-parent', this);\n        }\n        this.move(Range._createIn(element), this.createPositionAfter(element));\n        this.remove(element);\n    }\n    /**\n     * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n     * changes in the document and updates its range automatically, when model tree changes.\n     *\n     * As the first parameter you can set marker name.\n     *\n     * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n     * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n     * markers managed by operations and not-managed by operations.\n     *\n     * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n     * `true` when the marker change changes the data returned by the\n     * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n     * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n     * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n     *\n     * Create marker directly base on marker's name:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: false } );\n     * ```\n     *\n     * Create marker using operation:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: true } );\n     * ```\n     *\n     * Create marker that affects the editor data:\n     *\n     * ```ts\n     * addMarker( markerName, { range, usingOperation: false, affectsData: true } );\n     * ```\n     *\n     * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n     *\n     * @see module:engine/model/markercollection~Marker\n     * @param name Name of a marker to create - must be unique.\n     * @param options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n     * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n     * @param options.range Marker range.\n     * @param options.affectsData Flag indicating that the marker changes the editor data.\n     * @returns Marker that was set.\n     */\n    addMarker(name, options) {\n        this._assertWriterUsedCorrectly();\n        if (!options || typeof options.usingOperation != 'boolean') {\n            /**\n             * The `options.usingOperation` parameter is required when adding a new marker.\n             *\n             * @error writer-addmarker-no-usingoperation\n             */\n            throw new CKEditorError('writer-addmarker-no-usingoperation', this);\n        }\n        const usingOperation = options.usingOperation;\n        const range = options.range;\n        const affectsData = options.affectsData === undefined ? false : options.affectsData;\n        if (this.model.markers.has(name)) {\n            /**\n             * Marker with provided name already exists.\n             *\n             * @error writer-addmarker-marker-exists\n             */\n            throw new CKEditorError('writer-addmarker-marker-exists', this);\n        }\n        if (!range) {\n            /**\n             * Range parameter is required when adding a new marker.\n             *\n             * @error writer-addmarker-no-range\n             */\n            throw new CKEditorError('writer-addmarker-no-range', this);\n        }\n        if (!usingOperation) {\n            return this.model.markers._set(name, range, usingOperation, affectsData);\n        }\n        applyMarkerOperation(this, name, null, range, affectsData);\n        return this.model.markers.get(name);\n    }\n    /**\n     * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n     * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n     * marker's range directly using this method.\n     *\n     * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n     * name is created and returned.\n     *\n     * **Note**: If you want to change the {@link module:engine/view/element~Element view element} of the marker while its data in the model\n     * remains the same, use the dedicated {@link module:engine/controller/editingcontroller~EditingController#reconvertMarker} method.\n     *\n     * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n     * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n     * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n     *\n     * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n     * `true` when the marker change changes the data returned by\n     * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n     * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n     * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n     *\n     * Update marker directly base on marker's name:\n     *\n     * ```ts\n     * updateMarker( markerName, { range } );\n     * ```\n     *\n     * Update marker using operation:\n     *\n     * ```ts\n     * updateMarker( marker, { range, usingOperation: true } );\n     * updateMarker( markerName, { range, usingOperation: true } );\n     * ```\n     *\n     * Change marker's option (start using operations to manage it):\n     *\n     * ```ts\n     * updateMarker( marker, { usingOperation: true } );\n     * ```\n     *\n     * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n     *\n     * ```ts\n     * updateMarker( markerName, { affectsData: false } );\n     * ```\n     *\n     * @see module:engine/model/markercollection~Marker\n     * @param markerOrName Name of a marker to update, or a marker instance.\n     * @param options If options object is not defined then marker will be refreshed by triggering\n     * downcast conversion for this marker with the same data.\n     * @param options.range Marker range to update.\n     * @param options.usingOperation Flag indicated whether the marker should be added by MarkerOperation.\n     * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n     * @param options.affectsData Flag indicating that the marker changes the editor data.\n     */\n    updateMarker(markerOrName, options) {\n        this._assertWriterUsedCorrectly();\n        const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        const currentMarker = this.model.markers.get(markerName);\n        if (!currentMarker) {\n            /**\n             * Marker with provided name does not exist and will not be updated.\n             *\n             * @error writer-updatemarker-marker-not-exists\n             */\n            throw new CKEditorError('writer-updatemarker-marker-not-exists', this);\n        }\n        if (!options) {\n            /**\n             * The usage of `writer.updateMarker()` only to reconvert (refresh) a\n             * {@link module:engine/model/markercollection~Marker model marker} was deprecated and may not work in the future.\n             * Please update your code to use\n             * {@link module:engine/controller/editingcontroller~EditingController#reconvertMarker `editor.editing.reconvertMarker()`}\n             * instead.\n             *\n             * @error writer-updatemarker-reconvert-using-editingcontroller\n             * @param markerName The name of the updated marker.\n             */\n            logWarning('writer-updatemarker-reconvert-using-editingcontroller', { markerName });\n            this.model.markers._refresh(currentMarker);\n            return;\n        }\n        const hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n        const affectsDataDefined = typeof options.affectsData == 'boolean';\n        // Use previously defined marker's affectsData if the property is not provided.\n        const affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n        if (!hasUsingOperationDefined && !options.range && !affectsDataDefined) {\n            /**\n             * One of the options is required - provide range, usingOperations or affectsData.\n             *\n             * @error writer-updatemarker-wrong-options\n             */\n            throw new CKEditorError('writer-updatemarker-wrong-options', this);\n        }\n        const currentRange = currentMarker.getRange();\n        const updatedRange = options.range ? options.range : currentRange;\n        if (hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations) {\n            // The marker type is changed so it's necessary to create proper operations.\n            if (options.usingOperation) {\n                // If marker changes to a managed one treat this as synchronizing existing marker.\n                // Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n                applyMarkerOperation(this, markerName, null, updatedRange, affectsData);\n            }\n            else {\n                // If marker changes to a marker that do not use operations then we need to create additional operation\n                // that removes that marker first.\n                applyMarkerOperation(this, markerName, currentRange, null, affectsData);\n                // Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n                this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n            }\n            return;\n        }\n        // Marker's type doesn't change so update it accordingly.\n        if (currentMarker.managedUsingOperations) {\n            applyMarkerOperation(this, markerName, currentRange, updatedRange, affectsData);\n        }\n        else {\n            this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n        }\n    }\n    /**\n     * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n     * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n     * it will be destroyed using operation.\n     *\n     * @param markerOrName Marker or marker name to remove.\n     */\n    removeMarker(markerOrName) {\n        this._assertWriterUsedCorrectly();\n        const name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n        if (!this.model.markers.has(name)) {\n            /**\n             * Trying to remove marker which does not exist.\n             *\n             * @error writer-removemarker-no-marker\n             */\n            throw new CKEditorError('writer-removemarker-no-marker', this);\n        }\n        const marker = this.model.markers.get(name);\n        if (!marker.managedUsingOperations) {\n            this.model.markers._remove(name);\n            return;\n        }\n        const oldRange = marker.getRange();\n        applyMarkerOperation(this, name, oldRange, null, marker.affectsData);\n    }\n    /**\n     * Adds a new root to the document (or re-attaches a {@link #detachRoot detached root}).\n     *\n     * Throws an error, if trying to add a root that is already added and attached.\n     *\n     * @param rootName Name of the added root.\n     * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined\n     * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n     * @returns The added root element.\n     */\n    addRoot(rootName, elementName = '$root') {\n        this._assertWriterUsedCorrectly();\n        const root = this.model.document.getRoot(rootName);\n        if (root && root.isAttached()) {\n            /**\n             * Root with provided name already exists and is attached.\n             *\n             * @error writer-addroot-root-exists\n             */\n            throw new CKEditorError('writer-addroot-root-exists', this);\n        }\n        const document = this.model.document;\n        const operation = new RootOperation(rootName, elementName, true, document, document.version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n        return this.model.document.getRoot(rootName);\n    }\n    /**\n     * Detaches the root from the document.\n     *\n     * All content and markers are removed from the root upon detaching. New content and new markers cannot be added to the root, as long\n     * as it is detached.\n     *\n     * A root cannot be fully removed from the document, it can be only detached. A root is permanently removed only after you\n     * re-initialize the editor and do not specify the root in the initial data.\n     *\n     * A detached root can be re-attached using {@link #addRoot}.\n     *\n     * Throws an error if the root does not exist or the root is already detached.\n     *\n     * @param rootOrName Name of the detached root.\n     */\n    detachRoot(rootOrName) {\n        this._assertWriterUsedCorrectly();\n        const root = typeof rootOrName == 'string' ? this.model.document.getRoot(rootOrName) : rootOrName;\n        if (!root || !root.isAttached()) {\n            /**\n             * Root with provided name does not exist or is already detached.\n             *\n             * @error writer-detachroot-no-root\n             */\n            throw new CKEditorError('writer-detachroot-no-root', this);\n        }\n        // First, remove all markers from the root. It is better to do it before removing stuff for undo purposes.\n        // However, looking through all the markers may not be the best performance wise. But there's no better solution for now.\n        for (const marker of this.model.markers) {\n            if (marker.getRange().root === root) {\n                this.removeMarker(marker);\n            }\n        }\n        // Remove all attributes from the root.\n        for (const key of root.getAttributeKeys()) {\n            this.removeAttribute(key, root);\n        }\n        // Remove all contents of the root.\n        this.remove(this.createRangeIn(root));\n        // Finally, detach the root.\n        const document = this.model.document;\n        const operation = new RootOperation(root.rootName, root.name, false, document, document.version);\n        this.batch.addOperation(operation);\n        this.model.applyOperation(operation);\n    }\n    setSelection(...args) {\n        this._assertWriterUsedCorrectly();\n        this.model.document.selection._setTo(...args);\n    }\n    /**\n     * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n     *\n     * The location can be specified in the same form as\n     * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n     *\n     * @param itemOrPosition\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    setSelectionFocus(itemOrPosition, offset) {\n        this._assertWriterUsedCorrectly();\n        this.model.document.selection._setFocus(itemOrPosition, offset);\n    }\n    setSelectionAttribute(keyOrObjectOrIterable, value) {\n        this._assertWriterUsedCorrectly();\n        if (typeof keyOrObjectOrIterable === 'string') {\n            this._setSelectionAttribute(keyOrObjectOrIterable, value);\n        }\n        else {\n            for (const [key, value] of toMap(keyOrObjectOrIterable)) {\n                this._setSelectionAttribute(key, value);\n            }\n        }\n    }\n    /**\n     * Removes attribute(s) with given key(s) from the selection.\n     *\n     * Remove one attribute:\n     *\n     * ```ts\n     * writer.removeSelectionAttribute( 'italic' );\n     * ```\n     *\n     * Remove multiple attributes:\n     *\n     * ```ts\n     * writer.removeSelectionAttribute( [ 'italic', 'bold' ] );\n     * ```\n     *\n     * @param keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n     */\n    removeSelectionAttribute(keyOrIterableOfKeys) {\n        this._assertWriterUsedCorrectly();\n        if (typeof keyOrIterableOfKeys === 'string') {\n            this._removeSelectionAttribute(keyOrIterableOfKeys);\n        }\n        else {\n            for (const key of keyOrIterableOfKeys) {\n                this._removeSelectionAttribute(key);\n            }\n        }\n    }\n    /**\n     * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n     * of the selection from left to right.\n     *\n     * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n     * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n     * This method allows to temporarily override this behavior by forcing the gravity to the right.\n     *\n     * For the following model fragment:\n     *\n     * ```xml\n     * <$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n     * ```\n     *\n     * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n     * * Overridden gravity: selection will have `bold` attribute.\n     *\n     * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n     * of the process.\n     *\n     * @returns The unique id which allows restoring the gravity.\n     */\n    overrideSelectionGravity() {\n        return this.model.document.selection._overrideGravity();\n    }\n    /**\n     * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n     *\n     * Restoring the gravity is only possible using the unique identifier returned by\n     * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n     * the same number of times it was overridden.\n     *\n     * @param uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n     */\n    restoreSelectionGravity(uid) {\n        this.model.document.selection._restoreGravity(uid);\n    }\n    /**\n     * @param key Key of the attribute to remove.\n     * @param value Attribute value.\n     */\n    _setSelectionAttribute(key, value) {\n        const selection = this.model.document.selection;\n        // Store attribute in parent element if the selection is collapsed in an empty node.\n        if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n            const storeKey = DocumentSelection._getStoreAttributeKey(key);\n            this.setAttribute(storeKey, value, selection.anchor.parent);\n        }\n        selection._setAttribute(key, value);\n    }\n    /**\n     * @param key Key of the attribute to remove.\n     */\n    _removeSelectionAttribute(key) {\n        const selection = this.model.document.selection;\n        // Remove stored attribute from parent element if the selection is collapsed in an empty node.\n        if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n            const storeKey = DocumentSelection._getStoreAttributeKey(key);\n            this.removeAttribute(storeKey, selection.anchor.parent);\n        }\n        selection._removeAttribute(key);\n    }\n    /**\n     * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n     */\n    _assertWriterUsedCorrectly() {\n        /**\n         * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()`} or\n         * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n         *\n         * The writer can only be used inside these blocks which ensures that the model\n         * can only be changed during such \"sessions\".\n         *\n         * @error writer-incorrect-use\n         */\n        if (this.model._currentWriter !== this) {\n            throw new CKEditorError('writer-incorrect-use', this);\n        }\n    }\n    /**\n     * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n     * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n     * can be later correctly processed during undo.\n     *\n     * @param type Writer action type.\n     * @param positionOrRange Position or range where the writer action happens.\n     */\n    _addOperationForAffectedMarkers(type, positionOrRange) {\n        for (const marker of this.model.markers) {\n            if (!marker.managedUsingOperations) {\n                continue;\n            }\n            const markerRange = marker.getRange();\n            let isAffected = false;\n            if (type === 'move') {\n                const range = positionOrRange;\n                isAffected =\n                    range.containsPosition(markerRange.start) ||\n                        range.start.isEqual(markerRange.start) ||\n                        range.containsPosition(markerRange.end) ||\n                        range.end.isEqual(markerRange.end);\n            }\n            else {\n                // if type === 'merge'.\n                const position = positionOrRange;\n                const elementBefore = position.nodeBefore;\n                const elementAfter = position.nodeAfter;\n                //               Start:  <p>Foo[</p><p>Bar]</p>\n                //         After merge:  <p>Foo[Bar]</p>\n                // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n                //               Start:  <p>[Foo</p><p>]Bar</p>\n                //         After merge:  <p>[Foo]Bar</p>\n                // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n                //               Start:  <p>[Foo</p>]<p>Bar</p>\n                //         After merge:  <p>[Foo]Bar</p>\n                // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n                //               Start:  <p>Foo</p>[<p>Bar]</p>\n                //         After merge:  <p>Foo[Bar]</p>\n                // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n                //\n                const affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n                isAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n            }\n            if (isAffected) {\n                this.updateMarker(marker.name, { range: markerRange });\n            }\n        }\n    }\n}\n/**\n * Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n *\n * Because attribute operation needs to have the same attribute value on the whole range, this function splits\n * the range into smaller parts.\n *\n * Given `range` must be flat.\n */\nfunction setAttributeOnRange(writer, key, value, range) {\n    const model = writer.model;\n    const doc = model.document;\n    // Position of the last split, the beginning of the new range.\n    let lastSplitPosition = range.start;\n    // Currently position in the scanning range. Because we need value after the position, it is not a current\n    // position of the iterator but the previous one (we need to iterate one more time to get the value after).\n    let position;\n    // Value before the currently position.\n    let valueBefore;\n    // Value after the currently position.\n    let valueAfter;\n    for (const val of range.getWalker({ shallow: true })) {\n        valueAfter = val.item.getAttribute(key);\n        // At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n        // because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n        if (position && valueBefore != valueAfter) {\n            // if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n            if (valueBefore != value) {\n                addOperation();\n            }\n            lastSplitPosition = position;\n        }\n        position = val.nextPosition;\n        valueBefore = valueAfter;\n    }\n    // Because position in the loop is not the iterator position (see let position comment), the last position in\n    // the while loop will be last but one position in the range. We need to check the last position manually.\n    if (position instanceof Position && position != lastSplitPosition && valueBefore != value) {\n        addOperation();\n    }\n    function addOperation() {\n        const range = new Range(lastSplitPosition, position);\n        const version = range.root.document ? doc.version : null;\n        const operation = new AttributeOperation(range, key, valueBefore, value, version);\n        writer.batch.addOperation(operation);\n        model.applyOperation(operation);\n    }\n}\n/**\n * Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n */\nfunction setAttributeOnItem(writer, key, value, item) {\n    const model = writer.model;\n    const doc = model.document;\n    const previousValue = item.getAttribute(key);\n    let range, operation;\n    if (previousValue != value) {\n        const isRootChanged = item.root === item;\n        if (isRootChanged) {\n            // If we change attributes of root element, we have to use `RootAttributeOperation`.\n            const version = item.document ? doc.version : null;\n            operation = new RootAttributeOperation(item, key, previousValue, value, version);\n        }\n        else {\n            range = new Range(Position._createBefore(item), writer.createPositionAfter(item));\n            const version = range.root.document ? doc.version : null;\n            operation = new AttributeOperation(range, key, previousValue, value, version);\n        }\n        writer.batch.addOperation(operation);\n        model.applyOperation(operation);\n    }\n}\n/**\n * Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n */\nfunction applyMarkerOperation(writer, name, oldRange, newRange, affectsData) {\n    const model = writer.model;\n    const doc = model.document;\n    const operation = new MarkerOperation(name, oldRange, newRange, model.markers, !!affectsData, doc.version);\n    writer.batch.addOperation(operation);\n    model.applyOperation(operation);\n}\n/**\n * Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n * The operation will be applied on given model instance and added to given operation instance.\n *\n * @param position Position from which nodes are removed.\n * @param howMany Number of nodes to remove.\n * @param batch Batch to which the operation will be added.\n * @param model Model instance on which operation will be applied.\n */\nfunction applyRemoveOperation(position, howMany, batch, model) {\n    let operation;\n    if (position.root.document) {\n        const doc = model.document;\n        const graveyardPosition = new Position(doc.graveyard, [0]);\n        operation = new MoveOperation(position, howMany, graveyardPosition, doc.version);\n    }\n    else {\n        operation = new DetachOperation(position, howMany);\n    }\n    batch.addOperation(operation);\n    model.applyOperation(operation);\n}\n/**\n * Returns `true` if both root elements are the same element or both are documents root elements.\n *\n * Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n * within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n * to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n * collaboration may track changes on the document but ignore changes on detached fragments and should not get\n * unexpected `move` operation.\n */\nfunction isSameTree(rootA, rootB) {\n    // If it is the same root this is the same tree.\n    if (rootA === rootB) {\n        return true;\n    }\n    // If both roots are documents root it is operation within the document what we still treat as the same tree.\n    if (rootA instanceof RootElement && rootB instanceof RootElement) {\n        return true;\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/deletecontent\n */\nimport DocumentSelection from '../documentselection';\nimport LivePosition from '../liveposition';\nimport Range from '../range';\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param selection Selection of which the content should be deleted.\n * @param options.leaveUnmerged Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param options.doNotResetEntireContent Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param options.doNotAutoparagraph Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<imageBlock src=\"foo.jpg\"></imageBlock>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x</paragraph>[]` with the option enabled (`doNotAutoparagraph == true`).\n *\n * If you use this option you need to make sure to handle invalid selections yourself or leave\n * them to the selection post-fixer (may not always work).\n *\n * **Note:** If there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<imageBlock src=\"foo.jpg\"></imageBlock>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent(model, selection, options = {}) {\n    if (selection.isCollapsed) {\n        return;\n    }\n    const selRange = selection.getFirstRange();\n    // If the selection is already removed, don't do anything.\n    if (selRange.root.rootName == '$graveyard') {\n        return;\n    }\n    const schema = model.schema;\n    model.change(writer => {\n        // 1. Replace the entire content with paragraph.\n        // See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n        if (!options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph(schema, selection)) {\n            replaceEntireContentWithParagraph(writer, selection);\n            return;\n        }\n        // Collect attributes to copy in case of autoparagraphing.\n        const attributesForAutoparagraph = {};\n        if (!options.doNotAutoparagraph) {\n            const selectedElement = selection.getSelectedElement();\n            if (selectedElement) {\n                Object.assign(attributesForAutoparagraph, schema.getAttributesWithProperty(selectedElement, 'copyOnReplace', true));\n            }\n        }\n        // Get the live positions for the range adjusted to span only blocks selected from the user perspective.\n        const [startPosition, endPosition] = getLivePositionsForSelectedBlocks(selRange);\n        // 2. Remove the content if there is any.\n        if (!startPosition.isTouching(endPosition)) {\n            writer.remove(writer.createRange(startPosition, endPosition));\n        }\n        // 3. Merge elements in the right branch to the elements in the left branch.\n        // The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n        //\n        // <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n        //\n        // However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n        // as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n        // want to override that behavior anyway.\n        if (!options.leaveUnmerged) {\n            mergeBranches(writer, startPosition, endPosition);\n            // TMP this will be replaced with a postfixer.\n            // We need to check and strip disallowed attributes in all nested nodes because after merge\n            // some attributes could end up in a path where are disallowed.\n            //\n            // e.g. bold is disallowed for <H1>\n            // <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n            schema.removeDisallowedAttributes(startPosition.parent.getChildren(), writer);\n        }\n        collapseSelectionAt(writer, selection, startPosition);\n        // 4. Add a paragraph to set selection in it.\n        // Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n        // If autoparagraphing is off, we assume that you know what you do so we leave the selection wherever it was.\n        if (!options.doNotAutoparagraph && shouldAutoparagraph(schema, startPosition)) {\n            insertParagraph(writer, startPosition, selection, attributesForAutoparagraph);\n        }\n        startPosition.detach();\n        endPosition.detach();\n    });\n}\n/**\n * Returns the live positions for the range adjusted to span only blocks selected from the user perspective. Example:\n *\n * ```\n * <heading1>[foo</heading1>\n * <paragraph>bar</paragraph>\n * <heading1>]abc</heading1>  <-- this block is not considered as selected\n * ```\n *\n * This is the same behavior as in Selection#getSelectedBlocks() \"special case\".\n */\nfunction getLivePositionsForSelectedBlocks(range) {\n    const model = range.root.document.model;\n    const startPosition = range.start;\n    let endPosition = range.end;\n    // If the end of selection is at the start position of last block in the selection, then\n    // shrink it to not include that trailing block. Note that this should happen only for not empty selection.\n    if (model.hasContent(range, { ignoreMarkers: true })) {\n        const endBlock = getParentBlock(endPosition);\n        if (endBlock && endPosition.isTouching(model.createPositionAt(endBlock, 0))) {\n            // Create forward selection as a probe to find a valid position after excluding last block from the range.\n            const selection = model.createSelection(range);\n            // Modify the forward selection in backward direction to shrink it and remove first position of following block from it.\n            // This is how modifySelection works and here we are making use of it.\n            model.modifySelection(selection, { direction: 'backward' });\n            const newEndPosition = selection.getLastPosition();\n            // For such a model and selection:\n            //     <paragraph>A[</paragraph><imageBlock></imageBlock><paragraph>]B</paragraph>\n            //\n            // After modifySelection(), we would end up with this:\n            //     <paragraph>A[</paragraph>]<imageBlock></imageBlock><paragraph>B</paragraph>\n            //\n            // So we need to check if there is no content in the skipped range (because we want to include the <imageBlock>).\n            const skippedRange = model.createRange(newEndPosition, endPosition);\n            if (!model.hasContent(skippedRange, { ignoreMarkers: true })) {\n                endPosition = newEndPosition;\n            }\n        }\n    }\n    return [\n        LivePosition.fromPosition(startPosition, 'toPrevious'),\n        LivePosition.fromPosition(endPosition, 'toNext')\n    ];\n}\n/**\n * Finds the lowest element in position's ancestors which is a block.\n * Returns null if a limit element is encountered before reaching a block element.\n */\nfunction getParentBlock(position) {\n    const element = position.parent;\n    const schema = element.root.document.model.schema;\n    const ancestors = element.getAncestors({ parentFirst: true, includeSelf: true });\n    for (const element of ancestors) {\n        if (schema.isLimit(element)) {\n            return null;\n        }\n        if (schema.isBlock(element)) {\n            return element;\n        }\n    }\n}\n/**\n * This function is a result of reaching the Ballmer's peak for just the right amount of time.\n * Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\n */\nfunction mergeBranches(writer, startPosition, endPosition) {\n    const model = writer.model;\n    // Verify if there is a need and possibility to merge.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // If the start element on the common ancestor level is empty, and the end element on the same level is not empty\n    // then merge those to the right element so that it's properties are preserved (name, attributes).\n    // Because of OT merging is used instead of removing elements.\n    //\n    // Merge left:\n    //     <heading1>foo[</heading1>    ->  <heading1>foo[]bar</heading1>\n    //     <paragraph>]bar</paragraph>  ->               --^\n    //\n    // Merge right:\n    //     <heading1>[</heading1>       ->\n    //     <paragraph>]bar</paragraph>  ->  <paragraph>[]bar</paragraph>\n    //\n    // Merge left:\n    //     <blockQuote>                     ->  <blockQuote>\n    //         <heading1>foo[</heading1>    ->      <heading1>foo[]bar</heading1>\n    //         <paragraph>]bar</paragraph>  ->                   --^\n    //     </blockQuote>                    ->  </blockQuote>\n    //\n    // Merge right:\n    //     <blockQuote>                     ->  <blockQuote>\n    //         <heading1>[</heading1>       ->\n    //         <paragraph>]bar</paragraph>  ->      <paragraph>[]bar</paragraph>\n    //     </blockQuote>                    ->  </blockQuote>\n    // Merging should not go deeper than common ancestor.\n    const [startAncestor, endAncestor] = getAncestorsJustBelowCommonAncestor(startPosition, endPosition);\n    // Branches can't be merged if one of the positions is directly inside a common ancestor.\n    //\n    // Example:\n    //     <blockQuote>\n    //         <paragraph>[foo</paragraph>]\n    //         <table> ... </table>\n    //     <blockQuote>\n    //\n    if (!startAncestor || !endAncestor) {\n        return;\n    }\n    if (!model.hasContent(startAncestor, { ignoreMarkers: true }) && model.hasContent(endAncestor, { ignoreMarkers: true })) {\n        mergeBranchesRight(writer, startPosition, endPosition, startAncestor.parent);\n    }\n    else {\n        mergeBranchesLeft(writer, startPosition, endPosition, startAncestor.parent);\n    }\n}\n/**\n * Merging blocks to the left (properties of the left block are preserved).\n * Simple example:\n *\n * ```\n * <heading1>foo[</heading1>    ->  <heading1>foo[bar</heading1>]\n * <paragraph>]bar</paragraph>  ->              --^\n * ```\n *\n * Nested example:\n *\n * ```\n * <blockQuote>                     ->  <blockQuote>\n *     <heading1>foo[</heading1>    ->      <heading1>foo[bar</heading1>\n * </blockQuote>                    ->  </blockQuote>]    ^\n * <blockBlock>                     ->                    |\n *     <paragraph>]bar</paragraph>  ->                 ---\n * </blockBlock>                    ->\n * ```\n */\nfunction mergeBranchesLeft(writer, startPosition, endPosition, commonAncestor) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // Merging reached the common ancestor element, stop here.\n    if (startElement == commonAncestor || endElement == commonAncestor) {\n        return;\n    }\n    // Remember next positions to merge in next recursive step (also used as modification points pointers).\n    startPosition = writer.createPositionAfter(startElement);\n    endPosition = writer.createPositionBefore(endElement);\n    // Move endElement just after startElement if they aren't siblings.\n    if (!endPosition.isEqual(startPosition)) {\n        //\n        //     <blockQuote>                     ->  <blockQuote>\n        //         <heading1>foo[</heading1>    ->      <heading1>foo</heading1>[<paragraph>bar</paragraph>\n        //     </blockQuote>                    ->  </blockQuote>                ^\n        //     <blockBlock>                     ->  <blockBlock>                 |\n        //         <paragraph>]bar</paragraph>  ->      ]                     ---\n        //     </blockBlock>                    ->  </blockBlock>\n        //\n        writer.insert(endElement, startPosition);\n    }\n    // Merge two siblings (nodes on sides of startPosition):\n    //\n    //     <blockQuote>                                             ->  <blockQuote>\n    //         <heading1>foo</heading1>[<paragraph>bar</paragraph>  ->      <heading1>foo[bar</heading1>\n    //     </blockQuote>                                            ->  </blockQuote>\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         ]                                                    ->      ]\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    // Or in simple case (without moving elements in above if):\n    //     <heading1>foo</heading1>[<paragraph>bar</paragraph>]  ->  <heading1>foo[bar</heading1>]\n    //\n    writer.merge(startPosition);\n    // Remove empty end ancestors:\n    //\n    //     <blockQuote>                      ->  <blockQuote>\n    //         <heading1>foo[bar</heading1>  ->      <heading1>foo[bar</heading1>\n    //     </blockQuote>                     ->  </blockQuote>\n    //     <blockBlock>                      ->\n    //         ]                             ->  ]\n    //     </blockBlock>                     ->\n    //\n    while (endPosition.parent.isEmpty) {\n        const parentToRemove = endPosition.parent;\n        endPosition = writer.createPositionBefore(parentToRemove);\n        writer.remove(parentToRemove);\n    }\n    // Verify if there is a need and possibility to merge next level.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n    mergeBranchesLeft(writer, startPosition, endPosition, commonAncestor);\n}\n/**\n * Merging blocks to the right (properties of the right block are preserved).\n * Simple example:\n *\n * ```\n * <heading1>foo[</heading1>    ->            --v\n * <paragraph>]bar</paragraph>  ->  [<paragraph>foo]bar</paragraph>\n * ```\n *\n * Nested example:\n *\n * ```\n * <blockQuote>                     ->\n *     <heading1>foo[</heading1>    ->              ---\n * </blockQuote>                    ->                 |\n * <blockBlock>                     ->  [<blockBlock>  v\n *     <paragraph>]bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n * </blockBlock>                    ->  </blockBlock>\n * ```\n */\nfunction mergeBranchesRight(writer, startPosition, endPosition, commonAncestor) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // Merging reached the common ancestor element, stop here.\n    if (startElement == commonAncestor || endElement == commonAncestor) {\n        return;\n    }\n    // Remember next positions to merge in next recursive step (also used as modification points pointers).\n    startPosition = writer.createPositionAfter(startElement);\n    endPosition = writer.createPositionBefore(endElement);\n    // Move startElement just before endElement if they aren't siblings.\n    if (!endPosition.isEqual(startPosition)) {\n        //\n        //     <blockQuote>                     ->  <blockQuote>\n        //         <heading1>foo[</heading1>    ->      [                   ---\n        //     </blockQuote>                    ->  </blockQuote>              |\n        //     <blockBlock>                     ->  <blockBlock>               v\n        //         <paragraph>]bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n        //     </blockBlock>                    ->  </blockBlock>\n        //\n        writer.insert(startElement, endPosition);\n    }\n    // Remove empty end ancestors:\n    //\n    //     <blockQuote>                                             ->\n    //         [                                                    ->  [\n    //     </blockQuote>                                            ->\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <heading1>foo</heading1>]<paragraph>bar</paragraph>\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    while (startPosition.parent.isEmpty) {\n        const parentToRemove = startPosition.parent;\n        startPosition = writer.createPositionBefore(parentToRemove);\n        writer.remove(parentToRemove);\n    }\n    // Update endPosition after inserting and removing elements.\n    endPosition = writer.createPositionBefore(endElement);\n    // Merge right two siblings (nodes on sides of endPosition):\n    //                                                              ->\n    //     [                                                        ->  [\n    //                                                              ->\n    //     <blockBlock>                                             ->  <blockBlock>\n    //         <heading1>foo</heading1>]<paragraph>bar</paragraph>  ->      <paragraph>foo]bar</paragraph>\n    //     </blockBlock>                                            ->  </blockBlock>\n    //\n    // Or in simple case (without moving elements in above if):\n    //     [<heading1>foo</heading1>]<paragraph>bar</paragraph>  ->  [<heading1>foo]bar</heading1>\n    //\n    mergeRight(writer, endPosition);\n    // Verify if there is a need and possibility to merge next level.\n    if (!checkShouldMerge(writer.model.schema, startPosition, endPosition)) {\n        return;\n    }\n    // Continue merging next level (blockQuote with blockBlock in the examples above if it would not be empty and got removed).\n    mergeBranchesRight(writer, startPosition, endPosition, commonAncestor);\n}\n/**\n * There is no right merge operation so we need to simulate it.\n */\nfunction mergeRight(writer, position) {\n    const startElement = position.nodeBefore;\n    const endElement = position.nodeAfter;\n    if (startElement.name != endElement.name) {\n        writer.rename(startElement, endElement.name);\n    }\n    writer.clearAttributes(startElement);\n    writer.setAttributes(Object.fromEntries(endElement.getAttributes()), startElement);\n    writer.merge(position);\n}\n/**\n * Verifies if merging is needed and possible. It's not needed if both positions are in the same element\n * and it's not possible if some element is a limit or the range crosses a limit element.\n */\nfunction checkShouldMerge(schema, startPosition, endPosition) {\n    const startElement = startPosition.parent;\n    const endElement = endPosition.parent;\n    // If both positions ended up in the same parent, then there's nothing more to merge:\n    // <$root><p>x[</p><p>]y</p></$root> => <$root><p>xy</p>[]</$root>\n    if (startElement == endElement) {\n        return false;\n    }\n    // If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n    if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n        return false;\n    }\n    // Check if operations we'll need to do won't need to cross object or limit boundaries.\n    // E.g., we can't merge endElement into startElement in this case:\n    // <limit><startElement>x[</startElement></limit><endElement>]</endElement>\n    return isCrossingLimitElement(startPosition, endPosition, schema);\n}\n/**\n * Returns the elements that are the ancestors of the provided positions that are direct children of the common ancestor.\n */\nfunction getAncestorsJustBelowCommonAncestor(positionA, positionB) {\n    const ancestorsA = positionA.getAncestors();\n    const ancestorsB = positionB.getAncestors();\n    let i = 0;\n    while (ancestorsA[i] && ancestorsA[i] == ancestorsB[i]) {\n        i++;\n    }\n    return [ancestorsA[i], ancestorsB[i]];\n}\nfunction shouldAutoparagraph(schema, position) {\n    const isTextAllowed = schema.checkChild(position, '$text');\n    const isParagraphAllowed = schema.checkChild(position, 'paragraph');\n    return !isTextAllowed && isParagraphAllowed;\n}\n/**\n * Check if parents of two positions can be merged by checking if there are no limit/object\n * boundaries between those two positions.\n *\n * E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n * we'll check <p>, <bQ>, <widget> and <caption>.\n * Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\n */\nfunction isCrossingLimitElement(leftPos, rightPos, schema) {\n    const rangeToCheck = new Range(leftPos, rightPos);\n    for (const value of rangeToCheck.getWalker()) {\n        if (schema.isLimit(value.item)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction insertParagraph(writer, position, selection, attributes = {}) {\n    const paragraph = writer.createElement('paragraph');\n    writer.model.schema.setAllowedAttributes(paragraph, attributes, writer);\n    writer.insert(paragraph, position);\n    collapseSelectionAt(writer, selection, writer.createPositionAt(paragraph, 0));\n}\nfunction replaceEntireContentWithParagraph(writer, selection) {\n    const limitElement = writer.model.schema.getLimitElement(selection);\n    writer.remove(writer.createRangeIn(limitElement));\n    insertParagraph(writer, writer.createPositionAt(limitElement, 0), selection);\n}\n/**\n * We want to replace the entire content with a paragraph when:\n * * the entire content is selected,\n * * selection contains at least two elements,\n * * whether the paragraph is allowed in schema in the common ancestor.\n */\nfunction shouldEntireContentBeReplacedWithParagraph(schema, selection) {\n    const limitElement = schema.getLimitElement(selection);\n    if (!selection.containsEntireContent(limitElement)) {\n        return false;\n    }\n    const range = selection.getFirstRange();\n    if (range.start.parent == range.end.parent) {\n        return false;\n    }\n    return schema.checkChild(limitElement, 'paragraph');\n}\n/**\n * Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n * uses a different method to set it.\n */\nfunction collapseSelectionAt(writer, selection, positionOrRange) {\n    if (selection instanceof DocumentSelection) {\n        writer.setSelection(positionOrRange);\n    }\n    else {\n        selection.setTo(positionOrRange);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/getselectedcontent\n */\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param model The model in context of which the selection modification should be performed.\n * @param selection The selection of which content will be returned.\n */\nexport default function getSelectedContent(model, selection) {\n    return model.change(writer => {\n        const frag = writer.createDocumentFragment();\n        const range = selection.getFirstRange();\n        if (!range || range.isCollapsed) {\n            return frag;\n        }\n        const root = range.start.root;\n        const commonPath = range.start.getCommonPath(range.end);\n        const commonParent = root.getNodeByPath(commonPath);\n        // ## 1st step\n        //\n        // First, we'll clone a fragment represented by a minimal flat range\n        // containing the original range to be cloned.\n        // E.g. let's consider such a range:\n        //\n        // <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n        //\n        // A minimal flat range containing this one is:\n        //\n        // <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n        //\n        // We can easily clone this structure, preserving e.g. the <quote> element.\n        let flatSubtreeRange;\n        if (range.start.parent == range.end.parent) {\n            // The original range is flat, so take it.\n            flatSubtreeRange = range;\n        }\n        else {\n            flatSubtreeRange = writer.createRange(writer.createPositionAt(commonParent, range.start.path[commonPath.length]), writer.createPositionAt(commonParent, range.end.path[commonPath.length] + 1));\n        }\n        const howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n        // Clone the whole contents.\n        for (const item of flatSubtreeRange.getItems({ shallow: true })) {\n            if (item.is('$textProxy')) {\n                writer.appendText(item.data, item.getAttributes(), frag);\n            }\n            else {\n                writer.append(writer.cloneElement(item, true), frag);\n            }\n        }\n        // ## 2nd step\n        //\n        // If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n        //\n        // For example, for the range shown in the 1st step comment, we need to remove these pieces:\n        //\n        // <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n        //\n        // So this will be the final copied content:\n        //\n        // <quote><h>st</h></quote><p>se</p>\n        //\n        // In order to do that, we remove content from these two ranges:\n        //\n        // [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n        if (flatSubtreeRange != range) {\n            // Find the position of the original range in the cloned fragment.\n            const newRange = range._getTransformedByMove(flatSubtreeRange.start, writer.createPositionAt(frag, 0), howMany)[0];\n            const leftExcessRange = writer.createRange(writer.createPositionAt(frag, 0), newRange.start);\n            const rightExcessRange = writer.createRange(newRange.end, writer.createPositionAt(frag, 'end'));\n            removeRangeContent(rightExcessRange, writer);\n            removeRangeContent(leftExcessRange, writer);\n        }\n        return frag;\n    });\n}\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent(range, writer) {\n    const parentsToCheck = [];\n    Array.from(range.getItems({ direction: 'backward' }))\n        // We should better store ranges because text proxies will lose integrity\n        // with the text nodes when we'll start removing content.\n        .map(item => writer.createRangeOn(item))\n        // Filter only these items which are fully contained in the passed range.\n        //\n        // E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n        // the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n        .filter(itemRange => {\n        // We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n        const contained = (itemRange.start.isAfter(range.start) || itemRange.start.isEqual(range.start)) &&\n            (itemRange.end.isBefore(range.end) || itemRange.end.isEqual(range.end));\n        return contained;\n    })\n        .forEach(itemRange => {\n        parentsToCheck.push(itemRange.start.parent);\n        writer.remove(itemRange);\n    });\n    // Remove ancestors of the removed items if they turned to be empty now\n    // (their whole content was contained in the range).\n    parentsToCheck.forEach(parentToCheck => {\n        let parent = parentToCheck;\n        while (parent.parent && parent.isEmpty) {\n            const removeRange = writer.createRangeOn(parent);\n            parent = parent.parent;\n            writer.remove(removeRange);\n        }\n    });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/insertcontent\n */\nimport DocumentSelection from '../documentselection';\nimport Element from '../element';\nimport LivePosition from '../liveposition';\nimport LiveRange from '../liverange';\nimport Position from '../position';\nimport Range from '../range';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste functionality to work.\n *\n * It takes care of removing the selected content, splitting elements (if needed), inserting elements and merging elements appropriately.\n *\n * Some examples:\n *\n * ```html\n * <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n * <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n * <p>x^y</p> + <img /> => <p>x</p>^<p>y</p> + <img /> => <p>x</p><img /><p>y</p>\n * <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p> (no merging)\n * <p>x</p>[<img />]<p>z</p> + <p>y</p> => <p>x</p>^<p>z</p> + <p>y</p> => <p>x</p><p>y[]</p><p>z</p>\n * ```\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param content The content to insert.\n * @param selectable Selection into which the content should be inserted.\n * @param placeOrOffset Sets place or offset of the selection.\n * @returns Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent(model, content, selectable) {\n    return model.change(writer => {\n        const selection = selectable ? selectable : model.document.selection;\n        if (!selection.isCollapsed) {\n            model.deleteContent(selection, { doNotAutoparagraph: true });\n        }\n        const insertion = new Insertion(model, writer, selection.anchor);\n        const fakeMarkerElements = [];\n        let nodesToInsert;\n        if (content.is('documentFragment')) {\n            // If document fragment has any markers, these markers should be inserted into the model as well.\n            if (content.markers.size) {\n                const markersPosition = [];\n                for (const [name, range] of content.markers) {\n                    const { start, end } = range;\n                    const isCollapsed = start.isEqual(end);\n                    markersPosition.push({ position: start, name, isCollapsed }, { position: end, name, isCollapsed });\n                }\n                // Markers position is sorted backwards to ensure that the insertion of fake markers will not change\n                // the position of the next markers.\n                markersPosition.sort(({ position: posA }, { position: posB }) => posA.isBefore(posB) ? 1 : -1);\n                for (const { position, name, isCollapsed } of markersPosition) {\n                    let fakeElement = null;\n                    let collapsed = null;\n                    const isAtBeginning = position.parent === content && position.isAtStart;\n                    const isAtEnd = position.parent === content && position.isAtEnd;\n                    // We have two ways of handling markers. In general, we want to add temporary <$marker> model elements to\n                    // represent marker boundaries. These elements will be inserted into content together with the rest\n                    // of the document fragment. After insertion is done, positions for these elements will be read\n                    // and proper, actual markers will be created in the model and fake elements will be removed.\n                    //\n                    // However, if the <$marker> element is at the beginning or at the end of the document fragment,\n                    // it may affect how the inserted content is merged with current model, impacting the insertion\n                    // result. To avoid that, we don't add <$marker> elements at these positions. Instead, we will use\n                    // `Insertion#getAffectedRange()` to figure out new positions for these marker boundaries.\n                    if (!isAtBeginning && !isAtEnd) {\n                        fakeElement = writer.createElement('$marker');\n                        writer.insert(fakeElement, position);\n                    }\n                    else if (isCollapsed) {\n                        // Save whether the collapsed marker was at the beginning or at the end of document fragment\n                        // to know where to create it after the insertion is done.\n                        collapsed = isAtBeginning ? 'start' : 'end';\n                    }\n                    fakeMarkerElements.push({\n                        name,\n                        element: fakeElement,\n                        collapsed\n                    });\n                }\n            }\n            nodesToInsert = content.getChildren();\n        }\n        else {\n            nodesToInsert = [content];\n        }\n        insertion.handleNodes(nodesToInsert);\n        let newRange = insertion.getSelectionRange();\n        if (content.is('documentFragment') && fakeMarkerElements.length) {\n            // After insertion was done, the selection was set but the model contains fake <$marker> elements.\n            // These <$marker> elements will be now removed. Because of that, we will need to fix the selection.\n            // We will create a live range that will automatically be update as <$marker> elements are removed.\n            const selectionLiveRange = newRange ? LiveRange.fromRange(newRange) : null;\n            // Marker name -> [ start position, end position ].\n            const markersData = {};\n            // Note: `fakeMarkerElements` are sorted backwards. However, now, we want to handle the markers\n            // from the beginning, so that existing <$marker> elements do not affect markers positions.\n            // This is why we iterate from the end to the start.\n            for (let i = fakeMarkerElements.length - 1; i >= 0; i--) {\n                const { name, element, collapsed } = fakeMarkerElements[i];\n                const isStartBoundary = !markersData[name];\n                if (isStartBoundary) {\n                    markersData[name] = [];\n                }\n                if (element) {\n                    // Read fake marker element position to learn where the marker should be created.\n                    const elementPosition = writer.createPositionAt(element, 'before');\n                    markersData[name].push(elementPosition);\n                    writer.remove(element);\n                }\n                else {\n                    // If the fake marker element does not exist, it means that the marker boundary was at the beginning or at the end.\n                    const rangeOnInsertion = insertion.getAffectedRange();\n                    if (!rangeOnInsertion) {\n                        // If affected range is `null` it means that nothing was in the document fragment or all content was filtered out.\n                        // Some markers that were in the filtered content may be removed (partially or totally).\n                        // Let's handle only those markers that were at the beginning or at the end of the document fragment.\n                        if (collapsed) {\n                            markersData[name].push(insertion.position);\n                        }\n                        continue;\n                    }\n                    if (collapsed) {\n                        // If the marker was collapsed at the beginning or at the end of the document fragment,\n                        // put both boundaries at the beginning or at the end of inserted range (to keep the marker collapsed).\n                        markersData[name].push(rangeOnInsertion[collapsed]);\n                    }\n                    else {\n                        markersData[name].push(isStartBoundary ? rangeOnInsertion.start : rangeOnInsertion.end);\n                    }\n                }\n            }\n            for (const [name, [start, end]] of Object.entries(markersData)) {\n                // For now, we ignore markers if they are included in the filtered-out content.\n                // In the future implementation we will improve that case to create markers that are not filtered out completely.\n                if (start && end && start.root === end.root) {\n                    writer.addMarker(name, {\n                        usingOperation: true,\n                        affectsData: true,\n                        range: new Range(start, end)\n                    });\n                }\n            }\n            if (selectionLiveRange) {\n                newRange = selectionLiveRange.toRange();\n                selectionLiveRange.detach();\n            }\n        }\n        /* istanbul ignore else -- @preserve */\n        if (newRange) {\n            if (selection instanceof DocumentSelection) {\n                writer.setSelection(newRange);\n            }\n            else {\n                selection.setTo(newRange);\n            }\n        }\n        else {\n            // We are not testing else because it's a safe check for unpredictable edge cases:\n            // an insertion without proper range to select.\n            //\n            // @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n        }\n        const affectedRange = insertion.getAffectedRange() || model.createRange(selection.anchor);\n        insertion.destroy();\n        return affectedRange;\n    });\n}\n/**\n * Utility class for performing content insertion.\n */\nclass Insertion {\n    constructor(model, writer, position) {\n        /**\n         * The reference to the first inserted node.\n         */\n        this._firstNode = null;\n        /**\n         * The reference to the last inserted node.\n         */\n        this._lastNode = null;\n        /**\n         * The reference to the last auto paragraph node.\n         */\n        this._lastAutoParagraph = null;\n        /**\n         * The array of nodes that should be cleaned of not allowed attributes.\n         */\n        this._filterAttributesOf = [];\n        /**\n         * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n         */\n        this._affectedStart = null;\n        /**\n         * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n         */\n        this._affectedEnd = null;\n        this._nodeToSelect = null;\n        this.model = model;\n        this.writer = writer;\n        this.position = position;\n        this.canMergeWith = new Set([this.position.parent]);\n        this.schema = model.schema;\n        this._documentFragment = writer.createDocumentFragment();\n        this._documentFragmentPosition = writer.createPositionAt(this._documentFragment, 0);\n    }\n    /**\n     * Handles insertion of a set of nodes.\n     *\n     * @param nodes Nodes to insert.\n     */\n    handleNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            this._handleNode(node);\n        }\n        // Insert nodes collected in temporary DocumentFragment.\n        this._insertPartialFragment();\n        // If there was an auto paragraph then we might need to adjust the end of insertion.\n        if (this._lastAutoParagraph) {\n            this._updateLastNodeFromAutoParagraph(this._lastAutoParagraph);\n        }\n        // After the content was inserted we may try to merge it with its next sibling if the selection was in it initially.\n        // Merging with the previous sibling was performed just after inserting the first node to the document.\n        this._mergeOnRight();\n        // TMP this will become a post-fixer.\n        this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer);\n        this._filterAttributesOf = [];\n    }\n    /**\n     * Updates the last node after the auto paragraphing.\n     *\n     * @param node The last auto paragraphing node.\n     */\n    _updateLastNodeFromAutoParagraph(node) {\n        const positionAfterLastNode = this.writer.createPositionAfter(this._lastNode);\n        const positionAfterNode = this.writer.createPositionAfter(node);\n        // If the real end was after the last auto paragraph then update relevant properties.\n        if (positionAfterNode.isAfter(positionAfterLastNode)) {\n            this._lastNode = node;\n            /* istanbul ignore if -- @preserve */\n            if (this.position.parent != node || !this.position.isAtEnd) {\n                // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n                // At this point the insertion position should be at the end of the last auto paragraph.\n                // Note: This error is documented in other place in this file.\n                throw new CKEditorError('insertcontent-invalid-insertion-position', this);\n            }\n            this.position = positionAfterNode;\n            this._setAffectedBoundaries(this.position);\n        }\n    }\n    /**\n     * Returns range to be selected after insertion.\n     * Returns `null` if there is no valid range to select after insertion.\n     */\n    getSelectionRange() {\n        if (this._nodeToSelect) {\n            return Range._createOn(this._nodeToSelect);\n        }\n        return this.model.schema.getNearestSelectionRange(this.position);\n    }\n    /**\n     * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n     * before the insertion. Returns `null` if no changes were done.\n     */\n    getAffectedRange() {\n        if (!this._affectedStart) {\n            return null;\n        }\n        return new Range(this._affectedStart, this._affectedEnd);\n    }\n    /**\n     * Destroys `Insertion` instance.\n     */\n    destroy() {\n        if (this._affectedStart) {\n            this._affectedStart.detach();\n        }\n        if (this._affectedEnd) {\n            this._affectedEnd.detach();\n        }\n    }\n    /**\n     * Handles insertion of a single node.\n     */\n    _handleNode(node) {\n        // Let's handle object in a special way.\n        // * They should never be merged with other elements.\n        // * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n        if (this.schema.isObject(node)) {\n            this._handleObject(node);\n            return;\n        }\n        // Try to find a place for the given node.\n        // Check if a node can be inserted in the given position or it would be accepted if a paragraph would be inserted.\n        // Inserts the auto paragraph if it would allow for insertion.\n        let isAllowed = this._checkAndAutoParagraphToAllowedPosition(node);\n        if (!isAllowed) {\n            // Split the position.parent's branch up to a point where the node can be inserted.\n            // If it isn't allowed in the whole branch, then of course don't split anything.\n            isAllowed = this._checkAndSplitToAllowedPosition(node);\n            if (!isAllowed) {\n                this._handleDisallowedNode(node);\n                return;\n            }\n        }\n        // Add node to the current temporary DocumentFragment.\n        this._appendToFragment(node);\n        // Store the first and last nodes for easy access for merging with sibling nodes.\n        if (!this._firstNode) {\n            this._firstNode = node;\n        }\n        this._lastNode = node;\n    }\n    /**\n     * Inserts the temporary DocumentFragment into the model.\n     */\n    _insertPartialFragment() {\n        if (this._documentFragment.isEmpty) {\n            return;\n        }\n        const livePosition = LivePosition.fromPosition(this.position, 'toNext');\n        this._setAffectedBoundaries(this.position);\n        // If the very first node of the whole insertion process is inserted, insert it separately for OT reasons (undo).\n        // Note: there can be multiple calls to `_insertPartialFragment()` during one insertion process.\n        // Note: only the very first node can be merged so we have to do separate operation only for it.\n        if (this._documentFragment.getChild(0) == this._firstNode) {\n            this.writer.insert(this._firstNode, this.position);\n            // We must merge the first node just after inserting it to avoid problems with OT.\n            // (See: https://github.com/ckeditor/ckeditor5/pull/8773#issuecomment-760945652).\n            this._mergeOnLeft();\n            this.position = livePosition.toPosition();\n        }\n        // Insert the remaining nodes from document fragment.\n        if (!this._documentFragment.isEmpty) {\n            this.writer.insert(this._documentFragment, this.position);\n        }\n        this._documentFragmentPosition = this.writer.createPositionAt(this._documentFragment, 0);\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n    }\n    /**\n     * @param node The object element.\n     */\n    _handleObject(node) {\n        // Try finding it a place in the tree.\n        if (this._checkAndSplitToAllowedPosition(node)) {\n            this._appendToFragment(node);\n        }\n        // Try autoparagraphing.\n        else {\n            this._tryAutoparagraphing(node);\n        }\n    }\n    /**\n     * @param node The disallowed node which needs to be handled.\n     */\n    _handleDisallowedNode(node) {\n        // If the node is an element, try inserting its children (strip the parent).\n        if (node.is('element')) {\n            this.handleNodes(node.getChildren());\n        }\n        // If text is not allowed, try autoparagraphing it.\n        else {\n            this._tryAutoparagraphing(node);\n        }\n    }\n    /**\n     * Append a node to the temporary DocumentFragment.\n     *\n     * @param node The node to insert.\n     */\n    _appendToFragment(node) {\n        /* istanbul ignore if -- @preserve */\n        if (!this.schema.checkChild(this.position, node)) {\n            // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n            // Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n            /**\n             * Given node cannot be inserted on the given position.\n             *\n             * @error insertcontent-wrong-position\n             * @param node Node to insert.\n             * @param position Position to insert the node at.\n             */\n            throw new CKEditorError('insertcontent-wrong-position', this, { node, position: this.position });\n        }\n        this.writer.insert(node, this._documentFragmentPosition);\n        this._documentFragmentPosition = this._documentFragmentPosition.getShiftedBy(node.offsetSize);\n        // The last inserted object should be selected because we can't put a collapsed selection after it.\n        if (this.schema.isObject(node) && !this.schema.checkChild(this.position, '$text')) {\n            this._nodeToSelect = node;\n        }\n        else {\n            this._nodeToSelect = null;\n        }\n        this._filterAttributesOf.push(node);\n    }\n    /**\n     * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n     * mark the affected range.\n     *\n     * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n     * during merging, but the logic there is more complicated so it is left out of this function.\n     */\n    _setAffectedBoundaries(position) {\n        // Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n        // <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n        // This is why it cannot be a range but two separate positions.\n        if (!this._affectedStart) {\n            this._affectedStart = LivePosition.fromPosition(position, 'toPrevious');\n        }\n        // If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n        // inserted into the parent but the next node is moved-out of that parent:\n        // (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n        // (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n        if (!this._affectedEnd || this._affectedEnd.isBefore(position)) {\n            if (this._affectedEnd) {\n                this._affectedEnd.detach();\n            }\n            this._affectedEnd = LivePosition.fromPosition(position, 'toNext');\n        }\n    }\n    /**\n     * Merges the previous sibling of the first node if it should be merged.\n     *\n     * After the content was inserted we may try to merge it with its siblings.\n     * This should happen only if the selection was in those elements initially.\n     */\n    _mergeOnLeft() {\n        const node = this._firstNode;\n        if (!(node instanceof Element)) {\n            return;\n        }\n        if (!this._canMergeLeft(node)) {\n            return;\n        }\n        const mergePosLeft = LivePosition._createBefore(node);\n        mergePosLeft.stickiness = 'toNext';\n        const livePosition = LivePosition.fromPosition(this.position, 'toNext');\n        // If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n        // removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n        // by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n        // shown as `][`).\n        //\n        // Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n        //\n        // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n        //\n        // Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n        if (this._affectedStart.isEqual(mergePosLeft)) {\n            this._affectedStart.detach();\n            this._affectedStart = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toPrevious');\n        }\n        // We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n        // because the reference would point to the removed node.\n        //\n        // <p>A^A</p> + <p>X</p>\n        //\n        // <p>A</p>^<p>A</p>\n        // <p>A</p><p>X</p><p>A</p>\n        // <p>AX</p><p>A</p>\n        // <p>AXA</p>\n        if (this._firstNode === this._lastNode) {\n            this._firstNode = mergePosLeft.nodeBefore;\n            this._lastNode = mergePosLeft.nodeBefore;\n        }\n        this.writer.merge(mergePosLeft);\n        // If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n        //\n        // Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n        //\n        // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n        // <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n        if (mergePosLeft.isEqual(this._affectedEnd) && this._firstNode === this._lastNode) {\n            this._affectedEnd.detach();\n            this._affectedEnd = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toNext');\n        }\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n        // After merge elements that were marked by _insert() to be filtered might be gone so\n        // we need to mark the new container.\n        this._filterAttributesOf.push(this.position.parent);\n        mergePosLeft.detach();\n    }\n    /**\n     * Merges the next sibling of the last node if it should be merged.\n     *\n     * After the content was inserted we may try to merge it with its siblings.\n     * This should happen only if the selection was in those elements initially.\n     */\n    _mergeOnRight() {\n        const node = this._lastNode;\n        if (!(node instanceof Element)) {\n            return;\n        }\n        if (!this._canMergeRight(node)) {\n            return;\n        }\n        const mergePosRight = LivePosition._createAfter(node);\n        mergePosRight.stickiness = 'toNext';\n        /* istanbul ignore if -- @preserve */\n        if (!this.position.isEqual(mergePosRight)) {\n            // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n            // At this point the insertion position should be after the node we'll merge. If it isn't,\n            // it should need to be secured as in the left merge case.\n            /**\n             * An internal error occurred when merging inserted content with its siblings.\n             * The insertion position should equal the merge position.\n             *\n             * If you encountered this error, report it back to the CKEditor 5 team\n             * with as many details as possible regarding the content being inserted and the insertion position.\n             *\n             * @error insertcontent-invalid-insertion-position\n             */\n            throw new CKEditorError('insertcontent-invalid-insertion-position', this);\n        }\n        // Move the position to the previous node, so it isn't moved to the graveyard on merge.\n        // <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n        this.position = Position._createAt(mergePosRight.nodeBefore, 'end');\n        // Explanation of setting position stickiness to `'toPrevious'`:\n        // OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n        // NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n        const livePosition = LivePosition.fromPosition(this.position, 'toPrevious');\n        // See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n        if (this._affectedEnd.isEqual(mergePosRight)) {\n            this._affectedEnd.detach();\n            this._affectedEnd = LivePosition._createAt(mergePosRight.nodeBefore, 'end', 'toNext');\n        }\n        // We need to update the references to the first and last nodes if they will be merged into the previous sibling node\n        // because the reference would point to the removed node.\n        //\n        // <p>A^A</p> + <p>X</p>\n        //\n        // <p>A</p>^<p>A</p>\n        // <p>A</p><p>X</p><p>A</p>\n        // <p>AX</p><p>A</p>\n        // <p>AXA</p>\n        if (this._firstNode === this._lastNode) {\n            this._firstNode = mergePosRight.nodeBefore;\n            this._lastNode = mergePosRight.nodeBefore;\n        }\n        this.writer.merge(mergePosRight);\n        // See comment in `_mergeOnLeft()` on moving `_affectedStart`.\n        if (mergePosRight.getShiftedBy(-1).isEqual(this._affectedStart) && this._firstNode === this._lastNode) {\n            this._affectedStart.detach();\n            this._affectedStart = LivePosition._createAt(mergePosRight.nodeBefore, 0, 'toPrevious');\n        }\n        this.position = livePosition.toPosition();\n        livePosition.detach();\n        // After merge elements that were marked by _insert() to be filtered might be gone so\n        // we need to mark the new container.\n        this._filterAttributesOf.push(this.position.parent);\n        mergePosRight.detach();\n    }\n    /**\n     * Checks whether specified node can be merged with previous sibling element.\n     *\n     * @param node The node which could potentially be merged.\n     */\n    _canMergeLeft(node) {\n        const previousSibling = node.previousSibling;\n        return (previousSibling instanceof Element) &&\n            this.canMergeWith.has(previousSibling) &&\n            this.model.schema.checkMerge(previousSibling, node);\n    }\n    /**\n     * Checks whether specified node can be merged with next sibling element.\n     *\n     * @param node The node which could potentially be merged.\n     */\n    _canMergeRight(node) {\n        const nextSibling = node.nextSibling;\n        return (nextSibling instanceof Element) &&\n            this.canMergeWith.has(nextSibling) &&\n            this.model.schema.checkMerge(node, nextSibling);\n    }\n    /**\n     * Tries wrapping the node in a new paragraph and inserting it this way.\n     *\n     * @param node The node which needs to be autoparagraphed.\n     */\n    _tryAutoparagraphing(node) {\n        const paragraph = this.writer.createElement('paragraph');\n        // Do not autoparagraph if the paragraph won't be allowed there,\n        // cause that would lead to an infinite loop. The paragraph would be rejected in\n        // the next _handleNode() call and we'd be here again.\n        if (this._getAllowedIn(this.position.parent, paragraph) && this.schema.checkChild(paragraph, node)) {\n            paragraph._appendChild(node);\n            this._handleNode(paragraph);\n        }\n    }\n    /**\n     * Checks if a node can be inserted in the given position or it would be accepted if a paragraph would be inserted.\n     * It also handles inserting the paragraph.\n     *\n     * @returns Whether an allowed position was found.\n     * `false` is returned if the node isn't allowed at the current position or in auto paragraph, `true` if was.\n     */\n    _checkAndAutoParagraphToAllowedPosition(node) {\n        if (this.schema.checkChild(this.position.parent, node)) {\n            return true;\n        }\n        // Do not auto paragraph if the paragraph won't be allowed there,\n        // cause that would lead to an infinite loop. The paragraph would be rejected in\n        // the next _handleNode() call and we'd be here again.\n        if (!this.schema.checkChild(this.position.parent, 'paragraph') || !this.schema.checkChild('paragraph', node)) {\n            return false;\n        }\n        // Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n        this._insertPartialFragment();\n        // Insert a paragraph and move insertion position to it.\n        const paragraph = this.writer.createElement('paragraph');\n        this.writer.insert(paragraph, this.position);\n        this._setAffectedBoundaries(this.position);\n        this._lastAutoParagraph = paragraph;\n        this.position = this.writer.createPositionAt(paragraph, 0);\n        return true;\n    }\n    /**\n     * @returns Whether an allowed position was found.\n     * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n     */\n    _checkAndSplitToAllowedPosition(node) {\n        const allowedIn = this._getAllowedIn(this.position.parent, node);\n        if (!allowedIn) {\n            return false;\n        }\n        // Insert nodes collected in temporary DocumentFragment if the position parent needs change to process further nodes.\n        if (allowedIn != this.position.parent) {\n            this._insertPartialFragment();\n        }\n        while (allowedIn != this.position.parent) {\n            if (this.position.isAtStart) {\n                // If insertion position is at the beginning of the parent, move it out instead of splitting.\n                // <p>^Foo</p> -> ^<p>Foo</p>\n                const parent = this.position.parent;\n                this.position = this.writer.createPositionBefore(parent);\n                // Special case – parent is empty (<p>^</p>).\n                //\n                // 1. parent.isEmpty\n                // We can remove the element after moving insertion position out of it.\n                //\n                // 2. parent.parent === allowedIn\n                // However parent should remain in place when allowed element is above limit element in document tree.\n                // For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n                // content allowed in $root.\n                if (parent.isEmpty && parent.parent === allowedIn) {\n                    this.writer.remove(parent);\n                }\n            }\n            else if (this.position.isAtEnd) {\n                // If insertion position is at the end of the parent, move it out instead of splitting.\n                // <p>Foo^</p> -> <p>Foo</p>^\n                this.position = this.writer.createPositionAfter(this.position.parent);\n            }\n            else {\n                const tempPos = this.writer.createPositionAfter(this.position.parent);\n                this._setAffectedBoundaries(this.position);\n                this.writer.split(this.position);\n                this.position = tempPos;\n                this.canMergeWith.add(this.position.nodeAfter);\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n     *\n     * @param contextElement The element in which context the node should be checked.\n     * @param childNode The node to check.\n     */\n    _getAllowedIn(contextElement, childNode) {\n        if (this.schema.checkChild(contextElement, childNode)) {\n            return contextElement;\n        }\n        // If the child wasn't allowed in the context element and the element is a limit there's no point in\n        // checking any further towards the root. This is it: the limit is unsplittable and there's nothing\n        // we can do about it. Without this check, the algorithm will analyze parent of the limit and may create\n        // an illusion of the child being allowed. There's no way to insert it down there, though. It results in\n        // infinite loops.\n        if (this.schema.isLimit(contextElement)) {\n            return null;\n        }\n        return this._getAllowedIn(contextElement.parent, childNode);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/modifyselection\n */\nimport DocumentSelection from '../documentselection';\nimport Position from '../position';\nimport Range from '../range';\nimport TreeWalker from '../treewalker';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol, isInsideEmojiSequence } from '@ckeditor/ckeditor5-utils';\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param model The model in context of which the selection modification should be performed.\n * @param selection The selection to modify.\n * @param options.direction The direction in which the selection should be modified. Default 'forward'.\n * @param options.unit The unit by which selection should be modified. Default 'character'.\n * @param options.treatEmojiAsSingleUnit Whether multi-characer emoji sequences should be handled as single unit.\n */\nexport default function modifySelection(model, selection, options = {}) {\n    const schema = model.schema;\n    const isForward = options.direction != 'backward';\n    const unit = options.unit ? options.unit : 'character';\n    const treatEmojiAsSingleUnit = !!options.treatEmojiAsSingleUnit;\n    const focus = selection.focus;\n    const walker = new TreeWalker({\n        boundaries: getSearchRange(focus, isForward),\n        singleCharacters: true,\n        direction: isForward ? 'forward' : 'backward'\n    });\n    const data = { walker, schema, isForward, unit, treatEmojiAsSingleUnit };\n    let next;\n    while ((next = walker.next())) {\n        if (next.done) {\n            return;\n        }\n        const position = tryExtendingTo(data, next.value);\n        if (position) {\n            if (selection instanceof DocumentSelection) {\n                model.change(writer => {\n                    writer.setSelectionFocus(position);\n                });\n            }\n            else {\n                selection.setFocus(position);\n            }\n            return;\n        }\n    }\n}\n/**\n * Checks whether the selection can be extended to the the walker's next value (next position).\n */\nfunction tryExtendingTo(data, value) {\n    const { isForward, walker, unit, schema, treatEmojiAsSingleUnit } = data;\n    const { type, item, nextPosition } = value;\n    // If found text, we can certainly put the focus in it. Let's just find a correct position\n    // based on the unit.\n    if (type == 'text') {\n        if (data.unit === 'word') {\n            return getCorrectWordBreakPosition(walker, isForward);\n        }\n        return getCorrectPosition(walker, unit, treatEmojiAsSingleUnit);\n    }\n    // Entering an element.\n    if (type == (isForward ? 'elementStart' : 'elementEnd')) {\n        // If it's a selectable, we can select it now.\n        if (schema.isSelectable(item)) {\n            return Position._createAt(item, isForward ? 'after' : 'before');\n        }\n        // If text allowed on this position, extend to this place.\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    // Leaving an element.\n    else {\n        // If leaving a limit element, stop.\n        if (schema.isLimit(item)) {\n            // NOTE: Fast-forward the walker until the end.\n            walker.skip(() => true);\n            return;\n        }\n        // If text allowed on this position, extend to this place.\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n}\n/**\n * Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n * or should be extended further.\n */\nfunction getCorrectPosition(walker, unit, treatEmojiAsSingleUnit) {\n    const textNode = walker.position.textNode;\n    if (textNode) {\n        const data = textNode.data;\n        let offset = walker.position.offset - textNode.startOffset;\n        while (isInsideSurrogatePair(data, offset) ||\n            (unit == 'character' && isInsideCombinedSymbol(data, offset)) ||\n            (treatEmojiAsSingleUnit && isInsideEmojiSequence(data, offset))) {\n            walker.next();\n            offset = walker.position.offset - textNode.startOffset;\n        }\n    }\n    return walker.position;\n}\n/**\n * Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n * or should be extended further.\n */\nfunction getCorrectWordBreakPosition(walker, isForward) {\n    let textNode = walker.position.textNode;\n    if (!textNode) {\n        textNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n    }\n    while (textNode && textNode.is('$text')) {\n        const offset = walker.position.offset - textNode.startOffset;\n        // Check of adjacent text nodes with different attributes (like BOLD).\n        // Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n        // should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n        if (isAtNodeBoundary(textNode, offset, isForward)) {\n            textNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n        }\n        // Check if this is a word boundary.\n        else if (isAtWordBoundary(textNode.data, offset, isForward)) {\n            break;\n        }\n        // Maybe one more character.\n        else {\n            walker.next();\n        }\n    }\n    return walker.position;\n}\nfunction getSearchRange(start, isForward) {\n    const root = start.root;\n    const searchEnd = Position._createAt(root, isForward ? 'end' : 0);\n    if (isForward) {\n        return new Range(start, searchEnd);\n    }\n    else {\n        return new Range(searchEnd, start);\n    }\n}\n/**\n * Checks if selection is on word boundary.\n */\nfunction isAtWordBoundary(data, offset, isForward) {\n    // The offset to check depends on direction.\n    const offsetToCheck = offset + (isForward ? 0 : -1);\n    return wordBoundaryCharacters.includes(data.charAt(offsetToCheck));\n}\n/**\n * Checks if selection is on node boundary.\n */\nfunction isAtNodeBoundary(textNode, offset, isForward) {\n    return offset === (isForward ? textNode.offsetSize : 0);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/model\n */\nimport Batch from './batch';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ModelPosition from './position';\nimport ModelRange from './range';\nimport ModelSelection from './selection';\nimport OperationFactory from './operation/operationfactory';\nimport DocumentSelection from './documentselection';\nimport Schema from './schema';\nimport Writer from './writer';\nimport Node from './node';\nimport { autoParagraphEmptyRoots } from './utils/autoparagraphing';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\nimport deleteContent from './utils/deletecontent';\nimport getSelectedContent from './utils/getselectedcontent';\nimport insertContent from './utils/insertcontent';\nimport insertObject from './utils/insertobject';\nimport modifySelection from './utils/modifyselection';\nimport { CKEditorError, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n// @if CK_DEBUG_ENGINE // const { OperationReplayer } = require( '../dev-utils/operationreplayer' ).default;\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/architecture/editing-engine engine architecture} guide.\n */\nexport default class Model extends ObservableMixin() {\n    // @if CK_DEBUG_ENGINE // private _operationLogs: Array<string>;\n    // @if CK_DEBUG_ENGINE // private _appliedOperations: Array<Operation>;\n    constructor() {\n        super();\n        this.markers = new MarkerCollection();\n        this.document = new Document(this);\n        this.schema = new Schema();\n        this._pendingChanges = [];\n        this._currentWriter = null;\n        ['deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation']\n            .forEach(methodName => this.decorate(methodName));\n        // Adding operation validation with `highest` priority, so it is called before any other feature would like\n        // to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n        this.on('applyOperation', (evt, args) => {\n            const operation = args[0];\n            operation._validate();\n        }, { priority: 'highest' });\n        // Register some default abstract entities.\n        this.schema.register('$root', {\n            isLimit: true\n        });\n        this.schema.register('$container', {\n            allowIn: ['$root', '$container']\n        });\n        this.schema.register('$block', {\n            allowIn: ['$root', '$container'],\n            isBlock: true\n        });\n        this.schema.register('$blockObject', {\n            allowWhere: '$block',\n            isBlock: true,\n            isObject: true\n        });\n        this.schema.register('$inlineObject', {\n            allowWhere: '$text',\n            allowAttributesOf: '$text',\n            isInline: true,\n            isObject: true\n        });\n        this.schema.register('$text', {\n            allowIn: '$block',\n            isInline: true,\n            isContent: true\n        });\n        this.schema.register('$clipboardHolder', {\n            allowContentOf: '$root',\n            allowChildren: '$text',\n            isLimit: true\n        });\n        this.schema.register('$documentFragment', {\n            allowContentOf: '$root',\n            allowChildren: '$text',\n            isLimit: true\n        });\n        // An element needed by the `upcastElementToMarker` converter.\n        // This element temporarily represents a marker boundary during the conversion process and is removed\n        // at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n        // better place for this registration but both know nothing about `Schema`.\n        this.schema.register('$marker');\n        this.schema.addChildCheck((context, childDefinition) => {\n            if (childDefinition.name === '$marker') {\n                return true;\n            }\n        });\n        injectSelectionPostFixer(this);\n        // Post-fixer which takes care of adding empty paragraph elements to the empty roots.\n        this.document.registerPostFixer(autoParagraphEmptyRoots);\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('insertContent', (evt, [content, selectable]) => {\n            evt.return = insertContent(this, content, selectable);\n        });\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('insertObject', (evt, [element, selection, options]) => {\n            evt.return = insertObject(this, element, selection, options);\n        });\n        // The base implementation for \"decorated\" method with remapped arguments.\n        this.on('canEditAt', evt => {\n            const canEditAt = !this.document.isReadOnly;\n            evt.return = canEditAt;\n            if (!canEditAt) {\n                // Prevent further processing if the selection is at non-editable place.\n                evt.stop();\n            }\n        });\n        // @if CK_DEBUG_ENGINE // initDocumentDumping( this.document );\n        // @if CK_DEBUG_ENGINE // this.on( 'applyOperation', () => {\n        // @if CK_DEBUG_ENGINE // \tdumpTrees( this.document, this.document.version );\n        // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n        // @if CK_DEBUG_ENGINE // this._operationLogs = [];\n        // @if CK_DEBUG_ENGINE // this._appliedOperations = [];\n    }\n    /**\n     * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n     * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n     * the {@link module:engine/model/document~Document#selection document's selection}, and\n     * {@link module:engine/model/model~Model#markers model markers}.\n     *\n     * ```ts\n     * model.change( writer => {\n     * \twriter.insertText( 'foo', paragraph, 'end' );\n     * } );\n     * ```\n     *\n     * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n     * into a single undo step.\n     *\n     * ```ts\n     * model.change( writer => {\n     * \twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n     *\n     * \tmodel.change( writer => {\n     * \t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n     * \t} );\n     *\n     * \twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n     * } );\n     * ```\n     *\n     * The callback of the `change()` block is executed synchronously.\n     *\n     * You can also return a value from the change block.\n     *\n     * ```ts\n     * const img = model.change( writer => {\n     * \treturn writer.createElement( 'img' );\n     * } );\n     * ```\n     *\n     * @see #enqueueChange\n     * @typeParam TReturn The return type of the provided callback.\n     * @param callback Callback function which may modify the model.\n     */\n    change(callback) {\n        try {\n            if (this._pendingChanges.length === 0) {\n                // If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n                this._pendingChanges.push({ batch: new Batch(), callback });\n                return this._runPendingChanges()[0];\n            }\n            else {\n                // If this is not the outermost block, just execute the callback.\n                return callback(this._currentWriter);\n            }\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    enqueueChange(batchOrType, callback) {\n        try {\n            if (!batchOrType) {\n                batchOrType = new Batch();\n            }\n            else if (typeof batchOrType === 'function') {\n                callback = batchOrType;\n                batchOrType = new Batch();\n            }\n            else if (!(batchOrType instanceof Batch)) {\n                batchOrType = new Batch(batchOrType);\n            }\n            this._pendingChanges.push({ batch: batchOrType, callback });\n            if (this._pendingChanges.length == 1) {\n                this._runPendingChanges();\n            }\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * {@link module:utils/observablemixin~Observable#decorate Decorated} function for applying\n     * {@link module:engine/model/operation/operation~Operation operations} to the model.\n     *\n     * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n     * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n     * See also {@glink framework/architecture/editing-engine#changing-the-model Changing the model} section\n     * of the {@glink framework/architecture/editing-engine Editing architecture} guide.\n     *\n     * @param operation The operation to apply.\n     */\n    applyOperation(operation) {\n        // @if CK_DEBUG_ENGINE // console.log( 'Applying ' + operation );\n        // @if CK_DEBUG_ENGINE // this._operationLogs.push( JSON.stringify( operation ) );\n        // @if CK_DEBUG_ENGINE // this._appliedOperations.push( operation );\n        operation._execute();\n    }\n    // @if CK_DEBUG_ENGINE // public getAppliedOperation(): string {\n    // @if CK_DEBUG_ENGINE // \tif ( !this._appliedOperations ) {\n    // @if CK_DEBUG_ENGINE // \t\treturn '';\n    // @if CK_DEBUG_ENGINE // \t}\n    // @if CK_DEBUG_ENGINE // \treturn this._appliedOperations.map( operation => JSON.stringify( operation ) ).join( '-------' );\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // public createReplayer( stringifiedOperations: string ): typeof OperationReplayer {\n    // @if CK_DEBUG_ENGINE // \treturn new OperationReplayer( this, '-------', stringifiedOperations );\n    // @if CK_DEBUG_ENGINE // }\n    /**\n     * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n     * functionality to work.\n     *\n     * **Note**: If you want to insert an {@glink framework/deep-dive/schema#object-elements object element}\n     * (e.g. a {@link module:widget/utils~toWidget widget}), see {@link #insertObject} instead.\n     *\n     * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n     * the content, clears the given selection's content before inserting nodes and moves the selection\n     * to its target position at the end of the process.\n     * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n     * pasting feature should do.\n     *\n     * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n     *\n     * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n     * inside a {@link #change `change()` block}.\n     *\n     * # Conversion and schema\n     *\n     * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n     * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n     * is only adding nodes to the model. Additionally, you need to define\n     * {@glink framework/architecture/editing-engine#conversion converters} between the model and view\n     * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.\n     *\n     * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n     * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n     * unless converters are defined for all elements and attributes in that HTML.\n     *\n     * # Examples\n     *\n     * Using `insertContent()` with a manually created model structure:\n     *\n     * ```ts\n     * // Let's create a document fragment containing such content as:\n     * //\n     * // <paragraph>foo</paragraph>\n     * // <blockQuote>\n     * //    <paragraph>bar</paragraph>\n     * // </blockQuote>\n     * const docFrag = editor.model.change( writer => {\n     * \tconst p1 = writer.createElement( 'paragraph' );\n     * \tconst p2 = writer.createElement( 'paragraph' );\n     * \tconst blockQuote = writer.createElement( 'blockQuote' );\n     * \tconst docFrag = writer.createDocumentFragment();\n     *\n     * \twriter.append( p1, docFrag );\n     * \twriter.append( blockQuote, docFrag );\n     * \twriter.append( p2, blockQuote );\n     * \twriter.insertText( 'foo', p1 );\n     * \twriter.insertText( 'bar', p2 );\n     *\n     * \treturn docFrag;\n     * } );\n     *\n     * // insertContent() does not have to be used in a change() block. It can, though,\n     * // so this code could be moved to the callback defined above.\n     * editor.model.insertContent( docFrag );\n     * ```\n     *\n     * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n     *\n     * ```ts\n     * // You can create your own HtmlDataProcessor instance or use editor.data.processor\n     * // if you have not overridden the default one (which is the HtmlDataProcessor instance).\n     * const htmlDP = new HtmlDataProcessor( viewDocument );\n     *\n     * // Convert an HTML string to a view document fragment:\n     * const viewFragment = htmlDP.toView( htmlString );\n     *\n     * // Convert the view document fragment to a model document fragment\n     * // in the context of $root. This conversion takes the schema into\n     * // account so if, for example, the view document fragment contained a bare text node,\n     * // this text node cannot be a child of $root, so it will be automatically\n     * // wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n     * // and e.g. convert the content like it would happen in a <paragraph>.\n     * // Note: The clipboard feature uses a custom context called $clipboardHolder\n     * // which has a loosened schema.\n     * const modelFragment = editor.data.toModel( viewFragment );\n     *\n     * editor.model.insertContent( modelFragment );\n     * ```\n     *\n     * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n     *\n     * ```ts\n     * // Insert text at the current document selection position.\n     * editor.model.change( writer => {\n     * \teditor.model.insertContent( writer.createText( 'x' ) );\n     * } );\n     *\n     * // Insert text at a given position - the document selection will not be modified.\n     * editor.model.change( writer => {\n     * \teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n     *\n     * \t// Which is a shorthand for:\n     * \teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n     * } );\n     * ```\n     *\n     * If you want the document selection to be moved to the inserted content, use the\n     * {@link module:engine/model/writer~Writer#setSelection `setSelection()`} method of the writer after inserting\n     * the content:\n     *\n     * ```ts\n     * editor.model.change( writer => {\n     * \tconst paragraph = writer.createElement( 'paragraph' );\n     *\n     * \t// Insert an empty paragraph at the beginning of the root.\n     * \teditor.model.insertContent( paragraph, writer.createPositionAt( editor.model.document.getRoot(), 0 ) );\n     *\n     * \t// Move the document selection to the inserted paragraph.\n     * \twriter.setSelection( paragraph, 'in' );\n     * } );\n     * ```\n     *\n     * If an instance of the {@link module:engine/model/selection~Selection model selection} is passed as `selectable`,\n     * the new content will be inserted at the passed selection (instead of document selection):\n     *\n     * ```ts\n     * editor.model.change( writer => {\n     * \t// Create a selection in a paragraph that will be used as a place of insertion.\n     * \tconst selection = writer.createSelection( paragraph, 'in' );\n     *\n     * \t// Insert the new text at the created selection.\n     * \teditor.model.insertContent( writer.createText( 'x' ), selection );\n     *\n     * \t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n     * \t// Note: This is not necessary when you passed the document selection to insertContent().\n     * \twriter.setSelection( selection );\n     * } );\n     * ```\n     *\n     * @fires insertContent\n     * @param content The content to insert.\n     * @param selectable The selection into which the content should be inserted.\n     * If not provided the current model document selection will be used.\n     * @param placeOrOffset To be used when a model item was passed as `selectable`.\n     * This param defines a position in relation to that item.\n     * at the insertion position.\n     */\n    insertContent(content, selectable, placeOrOffset, ...rest) {\n        const selection = normalizeSelectable(selectable, placeOrOffset);\n        // Passing all call arguments so it acts like decorated method.\n        return this.fire('insertContent', [content, selection, placeOrOffset, ...rest]);\n    }\n    /**\n     * Inserts an {@glink framework/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n     *\n     * This is a high-level API:\n     * * It takes the {@link #schema schema} into consideration,\n     * * It clears the content of passed `selectable` before inserting,\n     * * It can move the selection at the end of the process,\n     * * It will copy the selected block's attributes to preserve them upon insertion,\n     * * It can split elements or wrap inline objects with paragraphs if they are not allowed in target position,\n     * * etc.\n     *\n     * # Notes\n     *\n     * * If you want to insert a non-object content, see {@link #insertContent} instead.\n     * * For lower-level API, see {@link module:engine/model/writer~Writer `Writer`}.\n     * * Unlike {@link module:engine/model/writer~Writer `Writer`}, this method does not have to be used inside\n     * a {@link #change `change()` block}.\n     * * Inserting object into the model is not enough to make CKEditor 5 render that content to the user.\n     * CKEditor 5 implements a model-view-controller architecture and what `model.insertObject()` does\n     * is only adding nodes to the model. Additionally, you need to define\n     * {@glink framework/architecture/editing-engine#conversion converters} between the model and view\n     * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.\n     *\n     * # Examples\n     *\n     * Use the following code to insert an object at the current selection and keep the selection on the inserted element:\n     *\n     * ```ts\n     * const rawHtmlEmbedElement = writer.createElement( 'rawHtml' );\n     *\n     * model.insertObject( rawHtmlEmbedElement, null, null, {\n     * \tsetSelection: 'on'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the current selection and nudge the selection after the inserted object:\n     *\n     * ```ts\n     * const pageBreakElement = writer.createElement( 'pageBreak' );\n     *\n     * model.insertObject( pageBreakElement, null, null, {\n     * \tsetSelection: 'after'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the current selection and avoid splitting the content (non-destructive insertion):\n     *\n     * ```ts\n     * const tableElement = writer.createElement( 'table' );\n     *\n     * model.insertObject( tableElement, null, null, {\n     * \tfindOptimalPosition: 'auto'\n     * } );\n     * ```\n     *\n     * Use the following code to insert an object at the specific range (also: replace the content of the range):\n     *\n     * ```ts\n     * const tableElement = writer.createElement( 'table' );\n     * const range = model.createRangeOn( model.document.getRoot().getChild( 1 ) );\n     *\n     * model.insertObject( tableElement, range );\n     * ```\n     *\n     * @param element An object to be inserted into the model document.\n     * @param selectable A selectable where the content should be inserted. If not specified, the current\n     * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n     * @param placeOrOffset Specifies the exact place or offset for the insertion to take place, relative to `selectable`.\n     * @param options Additional options.\n     * @param options.findOptimalPosition An option that, when set, adjusts the insertion position (relative to\n     * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n     * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n     * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n     * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n     *\n     * Note that this option only works for block objects. Inline objects are inserted into text and do not split blocks.\n     * @param options.setSelection An option that, when set, moves the\n     * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n     * * When `'on'`, the document selection will be set on the inserted object.\n     * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n     * such text node, a paragraph will be created and the document selection will be moved inside it.\n     * at the insertion position.\n     */\n    insertObject(element, selectable, placeOrOffset, options, ...rest) {\n        const selection = normalizeSelectable(selectable, placeOrOffset);\n        // Note that options are fired as 2 arguments for backward compatibility with the decorated method.\n        // Passing all call arguments so it acts like decorated method.\n        return this.fire('insertObject', [element, selection, options, options, ...rest]);\n    }\n    /**\n     * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n     *\n     * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n     * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n     * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n     * then that behavior should be implemented in the view's listener. At the same time, the table feature\n     * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n     * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n     * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n     *\n     * @fires deleteContent\n     * @param selection Selection of which the content should be deleted.\n     * @param options.leaveUnmerged Whether to merge elements after removing the content of the selection.\n     *\n     * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n     *\n     * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n     * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n     *\n     * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n     * elements will not be merged.\n     *\n     * @param options.doNotResetEntireContent Whether to skip replacing the entire content with a\n     * paragraph when the entire content was selected.\n     *\n     * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n     *\n     * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n     * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n     *\n     * @param options.doNotAutoparagraph Whether to create a paragraph if after content deletion selection is moved\n     * to a place where text cannot be inserted.\n     *\n     * For example `<paragraph>x</paragraph>[<imageBlock src=\"foo.jpg\"></imageBlock>]` will become:\n     *\n     * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n     * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n     *\n     * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n     *\n     * `[<imageBlock src=\"foo.jpg\"></imageBlock>]` -> `<paragraph>[]</paragraph>`.\n     *\n     * @param options.direction The direction in which the content is being consumed.\n     * Deleting backward corresponds to using the <kbd>Backspace</kbd> key, while deleting content forward corresponds to\n     * the <kbd>Shift</kbd>+<kbd>Backspace</kbd> keystroke.\n     */\n    deleteContent(selection, options) {\n        deleteContent(this, selection, options);\n    }\n    /**\n     * Modifies the selection. Currently, the supported modifications are:\n     *\n     * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n     * Possible values for `unit` are:\n     *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n     *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n     *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n     *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n     *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n     *  why `'character'` value is most natural and common method of modifying selection.\n     *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n     *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n     *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n     *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n     *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n     *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n     *  extension will include whole \"surrogate pair\".\n     *  * `'word'` - moves selection by a whole word.\n     *\n     * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n     *\n     * @fires modifySelection\n     * @param selection The selection to modify.\n     * @param options.direction The direction in which the selection should be modified.\n     * @param options.unit The unit by which selection should be modified.\n     * @param options.treatEmojiAsSingleUnit Whether multi-characer emoji sequences should be handled as single unit.\n     */\n    modifySelection(selection, options) {\n        modifySelection(this, selection, options);\n    }\n    /**\n     * Gets a clone of the selected content.\n     *\n     * For example, for the following selection:\n     *\n     * ```html\n     * <paragraph>x</paragraph>\n     * <blockQuote>\n     * \t<paragraph>y</paragraph>\n     * \t<heading1>fir[st</heading1>\n     * </blockQuote>\n     * <paragraph>se]cond</paragraph>\n     * <paragraph>z</paragraph>\n     * ```\n     *\n     * It will return a document fragment with such a content:\n     *\n     * ```html\n     * <blockQuote>\n     * \t<heading1>st</heading1>\n     * </blockQuote>\n     * <paragraph>se</paragraph>\n     * ```\n     *\n     * @fires getSelectedContent\n     * @param selection The selection of which content will be returned.\n     */\n    getSelectedContent(selection) {\n        return getSelectedContent(this, selection);\n    }\n    /**\n     * Checks whether the given {@link module:engine/model/range~Range range} or\n     * {@link module:engine/model/element~Element element} has any meaningful content.\n     *\n     * Meaningful content is:\n     *\n     * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n     * any non-whitespace characters),\n     * * or any {@link module:engine/model/schema~Schema#isContent content element},\n     * * or any {@link module:engine/model/markercollection~Marker marker} which\n     * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n     *\n     * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n     * However, a range containing an `<imageBlock></imageBlock>` (which would normally be marked in the schema as an object element)\n     * is considered non-empty.\n     *\n     * @param rangeOrElement Range or element to check.\n     * @param options.ignoreWhitespaces Whether text node with whitespaces only should be considered empty.\n     * @param options.ignoreMarkers Whether markers should be ignored.\n     */\n    hasContent(rangeOrElement, options = {}) {\n        const range = rangeOrElement instanceof ModelRange ? rangeOrElement : ModelRange._createIn(rangeOrElement);\n        if (range.isCollapsed) {\n            return false;\n        }\n        const { ignoreWhitespaces = false, ignoreMarkers = false } = options;\n        // Check if there are any markers which affects data in this given range.\n        if (!ignoreMarkers) {\n            for (const intersectingMarker of this.markers.getMarkersIntersectingRange(range)) {\n                if (intersectingMarker.affectsData) {\n                    return true;\n                }\n            }\n        }\n        for (const item of range.getItems()) {\n            if (this.schema.isContent(item)) {\n                if (item.is('$textProxy')) {\n                    if (!ignoreWhitespaces) {\n                        return true;\n                    }\n                    else if (item.data.search(/\\S/) !== -1) {\n                        return true;\n                    }\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Check whether given selectable is at a place in the model where it can be edited (returns `true`) or not (returns `false`).\n     *\n     * Should be used instead of {@link module:core/editor/editor~Editor#isReadOnly} to check whether a user action can happen at\n     * given selectable. It may be decorated and used differently in different environment (e.g. multi-root editor can disable\n     * a particular root).\n     *\n     * This method is decorated. Although this method accepts any parameter of `Selectable` type, the\n     * {@link ~Model#event:canEditAt `canEditAt` event} is fired with `selectable` normalized to an instance of\n     * {@link module:engine/model/selection~Selection} or {@link module:engine/model/documentselection~DocumentSelection}\n     *\n     * @fires canEditAt\n     */\n    canEditAt(selectable) {\n        const selection = normalizeSelectable(selectable);\n        return this.fire('canEditAt', [selection]);\n    }\n    /**\n     * Creates a position from the given root and path in that root.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n     *\n     * @param root Root of the position.\n     * @param path Position path. See {@link module:engine/model/position~Position#path}.\n     * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     */\n    createPositionFromPath(root, path, stickiness) {\n        return new ModelPosition(root, path, stickiness);\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/model/position~Position position},\n     * * a parent element and offset in that element,\n     * * a parent element and `'end'` (the position will be set at the end of that element),\n     * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n     * (the position will be set before or after the given model item).\n     *\n     * This method is a shortcut to other factory methods such as:\n     *\n     * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n     * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n     *\n     * @param itemOrPosition\n     * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n    createPositionAt(itemOrPosition, offset) {\n        return ModelPosition._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n     *\n     * @param item Item after which the position should be placed.\n     */\n    createPositionAfter(item) {\n        return ModelPosition._createAfter(item);\n    }\n    /**\n     * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n     *\n     * @param item Item before which the position should be placed.\n     */\n    createPositionBefore(item) {\n        return ModelPosition._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from the `start` position to the `end` position.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRange( start, end );\n     * } );\n     * ```\n     *\n     * @param start Start position.\n     * @param end End position. If not set, the range will be collapsed to the `start` position.\n     */\n    createRange(start, end) {\n        return new ModelRange(start, end);\n    }\n    /**\n     * Creates a range inside the given element which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * Note: This method is also available as\n     * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRangeIn( paragraph );\n     * } );\n     * ```\n     *\n     * @param element Element which is a parent for the range.\n     */\n    createRangeIn(element) {\n        return ModelRange._createIn(element);\n    }\n    /**\n     * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n     *\n     * Note: This method is also available on `writer` instance as\n     * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n     *\n     * ```ts\n     * model.change( writer => {\n     * \tconst range = writer.createRangeOn( paragraph );\n     * } );\n     * ```\n     *\n     * @param item\n     */\n    createRangeOn(item) {\n        return ModelRange._createOn(item);\n    }\n    createSelection(...args) {\n        return new ModelSelection(...args);\n    }\n    /**\n     * Creates a {@link module:engine/model/batch~Batch} instance.\n     *\n     * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n     *\n     * * {@link #change `change()`},\n     * * {@link #enqueueChange `enqueueChange()`}.\n     *\n     * @param type {@link module:engine/model/batch~Batch#constructor The type} of the batch.\n     */\n    createBatch(type) {\n        return new Batch(type);\n    }\n    /**\n     * Creates an operation instance from a JSON object (parsed JSON string).\n     *\n     * This is an alias for {@link module:engine/model/operation/operationfactory~OperationFactory.fromJSON `OperationFactory.fromJSON()`}.\n     *\n     * @param json Deserialized JSON object.\n     */\n    createOperationFromJSON(json) {\n        return OperationFactory.fromJSON(json, this.document);\n    }\n    /**\n     * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n     */\n    destroy() {\n        this.document.destroy();\n        this.stopListening();\n    }\n    /**\n     * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n     * which calls callbacks and returns array of values returned by these callbacks.\n     *\n     */\n    _runPendingChanges() {\n        const ret = [];\n        this.fire('_beforeChanges');\n        try {\n            while (this._pendingChanges.length) {\n                // Create a new writer using batch instance created for this chain of changes.\n                const currentBatch = this._pendingChanges[0].batch;\n                this._currentWriter = new Writer(this, currentBatch);\n                // Execute changes callback and gather the returned value.\n                const callbackReturnValue = this._pendingChanges[0].callback(this._currentWriter);\n                ret.push(callbackReturnValue);\n                this.document._handleChangeBlock(this._currentWriter);\n                this._pendingChanges.shift();\n                this._currentWriter = null;\n            }\n        }\n        finally {\n            this._pendingChanges.length = 0;\n            this._currentWriter = null;\n            this.fire('_afterChanges');\n        }\n        return ret;\n    }\n}\n/**\n * Normalizes a selectable to a Selection or DocumentSelection.\n */\nfunction normalizeSelectable(selectable, placeOrOffset) {\n    if (!selectable) {\n        return;\n    }\n    if (selectable instanceof ModelSelection || selectable instanceof DocumentSelection) {\n        return selectable;\n    }\n    if (selectable instanceof Node) {\n        if (placeOrOffset || placeOrOffset === 0) {\n            return new ModelSelection(selectable, placeOrOffset);\n        }\n        else if (selectable.is('rootElement')) {\n            return new ModelSelection(selectable, 'in');\n        }\n        else {\n            return new ModelSelection(selectable, 'on');\n        }\n    }\n    return new ModelSelection(selectable);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/insertobject\n */\nimport { findOptimalInsertionRange } from './findoptimalinsertionrange';\nimport { CKEditorError, first } from '@ckeditor/ckeditor5-utils';\n/**\n * Inserts an {@glink framework/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertObject} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertObject}\n * method's behavior.\n *\n * **Note**: For more documentation and examples, see {@link module:engine/model/model~Model#insertObject}.\n *\n * @param model The model in context of which the insertion should be performed.\n * @param object An object to be inserted into the model document.\n * @param selectable A selectable where the content should be inserted. If not specified, the current\n * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n * @param placeOrOffset Specifies the exact place or offset for the insertion to take place, relative to `selectable`.\n * @param options Additional options.\n * @param options.findOptimalPosition An option that, when set, adjusts the insertion position (relative to\n * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n *\n * Note that this option works only for block objects. Inline objects are inserted into text and do not split blocks.\n * @param options.setSelection An option that, when set, moves the\n * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n * * When `'on'`, the document selection will be set on the inserted object.\n * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n * such text node, a paragraph will be created and the document selection will be moved inside it.\n * @returns A range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertObject()`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertObject(model, object, selectable, options = {}) {\n    if (!model.schema.isObject(object)) {\n        /**\n         * Tried to insert an element with {@link module:engine/model/utils/insertobject insertObject()} function\n         * that is not defined as an object in schema.\n         * See {@link module:engine/model/schema~SchemaItemDefinition#isObject `SchemaItemDefinition`}.\n         * If you want to insert content that is not an object you might want to use\n         * {@link module:engine/model/utils/insertcontent insertContent()} function.\n         * @error insertobject-element-not-an-object\n         */\n        throw new CKEditorError('insertobject-element-not-an-object', model, { object });\n    }\n    // Normalize selectable to a selection instance.\n    const originalSelection = selectable ? selectable : model.document.selection;\n    // Adjust the insertion selection.\n    let insertionSelection = originalSelection;\n    if (options.findOptimalPosition && model.schema.isBlock(object)) {\n        insertionSelection = model.createSelection(findOptimalInsertionRange(originalSelection, model, options.findOptimalPosition));\n    }\n    // Collect attributes to be copied on the inserted object.\n    const firstSelectedBlock = first(originalSelection.getSelectedBlocks());\n    const attributesToCopy = {};\n    if (firstSelectedBlock) {\n        Object.assign(attributesToCopy, model.schema.getAttributesWithProperty(firstSelectedBlock, 'copyOnReplace', true));\n    }\n    return model.change(writer => {\n        // Remove the selected content to find out what the parent of the inserted object would be.\n        // It would be removed inside model.insertContent() anyway.\n        if (!insertionSelection.isCollapsed) {\n            model.deleteContent(insertionSelection, { doNotAutoparagraph: true });\n        }\n        let elementToInsert = object;\n        const insertionPositionParent = insertionSelection.anchor.parent;\n        // Autoparagraphing of an inline objects.\n        if (!model.schema.checkChild(insertionPositionParent, object) &&\n            model.schema.checkChild(insertionPositionParent, 'paragraph') &&\n            model.schema.checkChild('paragraph', object)) {\n            elementToInsert = writer.createElement('paragraph');\n            writer.insert(object, elementToInsert);\n        }\n        // Apply attributes that are allowed on the inserted object (or paragraph if autoparagraphed).\n        model.schema.setAllowedAttributes(elementToInsert, attributesToCopy, writer);\n        // Insert the prepared content at the optionally adjusted selection.\n        const affectedRange = model.insertContent(elementToInsert, insertionSelection);\n        // Nothing got inserted.\n        if (affectedRange.isCollapsed) {\n            return affectedRange;\n        }\n        if (options.setSelection) {\n            updateSelection(writer, object, options.setSelection, attributesToCopy);\n        }\n        return affectedRange;\n    });\n}\n/**\n * Updates document selection based on given `place` parameter in relation to `contextElement` element.\n *\n * @param writer An instance of the model writer.\n * @param contextElement An element to set the attributes on.\n * @param place The place where selection should be set in relation to the `contextElement` element.\n * Value `on` will set selection on the passed `contextElement`. Value `after` will set selection after `contextElement`.\n * @param attributes Attributes keys and values to set on a paragraph that this function can create when\n * `place` parameter is equal to `after` but there is no element with `$text` node to set selection in.\n */\nfunction updateSelection(writer, contextElement, place, paragraphAttributes) {\n    const model = writer.model;\n    if (place == 'on') {\n        writer.setSelection(contextElement, 'on');\n        return;\n    }\n    if (place != 'after') {\n        /**\n         * The unsupported `options.setSelection` parameter was passed\n         * to the {@link module:engine/model/utils/insertobject insertObject()} function.\n         * Check the {@link module:engine/model/utils/insertobject insertObject()} API documentation for allowed\n         * `options.setSelection` parameter values.\n         *\n         * @error insertobject-invalid-place-parameter-value\n         */\n        throw new CKEditorError('insertobject-invalid-place-parameter-value', model);\n    }\n    let nextElement = contextElement.nextSibling;\n    if (model.schema.isInline(contextElement)) {\n        writer.setSelection(contextElement, 'after');\n        return;\n    }\n    // Check whether an element next to the inserted element is defined and can contain a text.\n    const canSetSelection = nextElement && model.schema.checkChild(nextElement, '$text');\n    // If the element is missing, but a paragraph could be inserted next to the element, let's add it.\n    if (!canSetSelection && model.schema.checkChild(contextElement.parent, 'paragraph')) {\n        nextElement = writer.createElement('paragraph');\n        model.schema.setAllowedAttributes(nextElement, paragraphAttributes, writer);\n        model.insertContent(nextElement, writer.createPositionAfter(contextElement));\n    }\n    // Put the selection inside the element, at the beginning.\n    if (nextElement) {\n        writer.setSelection(nextElement, 0);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/model/utils/findoptimalinsertionrange\n */\nimport { first } from '@ckeditor/ckeditor5-utils';\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * **Note:** Use {@link module:widget/utils#findOptimalInsertionRange} instead of this function outside engine.\n * This function is only exposed to be used by {@link module:widget/utils#findOptimalInsertionRange findOptimalInsertionRange()}\n * in the `widget` package and inside the `engine` package.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @param place The place where to look for optimal insertion range.\n * The default `auto` value will determine itself the best position for insertion.\n * The `before` value will try to find a position before selection.\n * The `after` value will try to find a position after selection.\n * @returns The optimal range.\n */\nexport function findOptimalInsertionRange(selection, model, place = 'auto') {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement && model.schema.isObject(selectedElement) && !model.schema.isInline(selectedElement)) {\n        if (place == 'before' || place == 'after') {\n            return model.createRange(model.createPositionAt(selectedElement, place));\n        }\n        return model.createRangeOn(selectedElement);\n    }\n    const firstBlock = first(selection.getSelectedBlocks());\n    // There are no block elements within ancestors (in the current limit element).\n    if (!firstBlock) {\n        return model.createRange(selection.focus);\n    }\n    // If inserting into an empty block – return position in that block. It will get\n    // replaced with the image by insertContent(). #42.\n    if (firstBlock.isEmpty) {\n        return model.createRange(model.createPositionAt(firstBlock, 0));\n    }\n    const positionAfter = model.createPositionAfter(firstBlock);\n    // If selection is at the end of the block - return position after the block.\n    if (selection.focus.isTouching(positionAfter)) {\n        return model.createRange(positionAfter);\n    }\n    // Otherwise, return position before the block.\n    return model.createRange(model.createPositionBefore(firstBlock));\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module engine/view/observer/mouseobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n */\nexport default class MouseObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.domEventType = ['mousedown', 'mouseup', 'mouseover', 'mouseout'];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nconst HEX_COLOR_REGEXP = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;\nconst RGB_COLOR_REGEXP = /^rgb\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\\)$/i;\nconst RGBA_COLOR_REGEXP = /^rgba\\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nconst HSL_COLOR_REGEXP = /^hsl\\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\\.?[0-9]+)?\\)$/i;\nconst HSLA_COLOR_REGEXP = /^hsla\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\n// Note: This regexp hardcodes a single level of nested () for values such as `calc( var( ...) + ...)`.\n// If this gets more complex, a proper parser should be used instead.\nconst CSS_SHORTHAND_VALUE_REGEXP = /\\w+\\((?:[^()]|\\([^()]*\\))*\\)|\\S+/gi;\nconst COLOR_NAMES = new Set([\n    // CSS Level 1\n    'black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia',\n    'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua',\n    // CSS Level 2 (Revision 1)\n    'orange',\n    // CSS Color Module Level 3\n    'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown',\n    'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan',\n    'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta',\n    'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue',\n    'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey',\n    'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod',\n    'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush',\n    'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray',\n    'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray',\n    'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine',\n    'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',\n    'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite',\n    'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred',\n    'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon',\n    'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow',\n    'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen',\n    // CSS Color Module Level 3 (System Colors)\n    'activeborder', 'activecaption', 'appworkspace', 'background', 'buttonface', 'buttonhighlight', 'buttonshadow',\n    'buttontext', 'captiontext', 'graytext', 'highlight', 'highlighttext', 'inactiveborder', 'inactivecaption',\n    'inactivecaptiontext', 'infobackground', 'infotext', 'menu', 'menutext', 'scrollbar', 'threeddarkshadow',\n    'threedface', 'threedhighlight', 'threedlightshadow', 'threedshadow', 'window', 'windowframe', 'windowtext',\n    // CSS Color Module Level 4\n    'rebeccapurple',\n    // Keywords\n    'currentcolor', 'transparent'\n]);\n/**\n * Checks if string contains [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS value.\n *\n * ```ts\n * isColor( '#f00' );\t\t\t\t\t\t// true\n * isColor( '#AA00BB33' );\t\t\t\t\t// true\n * isColor( 'rgb(0, 0, 250)' );\t\t\t\t// true\n * isColor( 'hsla(240, 100%, 50%, .7)' );\t// true\n * isColor( 'deepskyblue' );\t\t\t\t// true\n * ```\n *\n * **Note**: It does not support CSS Level 4 whitespace syntax, system colors and radius values for HSL colors.\n */\nexport function isColor(string) {\n    // As far as I was able to test checking some pre-conditions is faster than joining each test with ||.\n    if (string.startsWith('#')) {\n        return HEX_COLOR_REGEXP.test(string);\n    }\n    if (string.startsWith('rgb')) {\n        return RGB_COLOR_REGEXP.test(string) || RGBA_COLOR_REGEXP.test(string);\n    }\n    if (string.startsWith('hsl')) {\n        return HSL_COLOR_REGEXP.test(string) || HSLA_COLOR_REGEXP.test(string);\n    }\n    // Array check > RegExp test.\n    return COLOR_NAMES.has(string.toLowerCase());\n}\nconst lineStyleValues = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n/**\n * Checks if string contains [line style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) CSS value.\n */\nexport function isLineStyle(string) {\n    return lineStyleValues.includes(string);\n}\nconst lengthRegExp = /^([+-]?[0-9]*([.][0-9]+)?(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;\n/**\n * Checks if string contains [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) CSS value.\n */\nexport function isLength(string) {\n    return lengthRegExp.test(string);\n}\nconst PERCENTAGE_VALUE_REGEXP = /^[+-]?[0-9]*([.][0-9]+)?%$/;\n/**\n * Checks if string contains [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) CSS value.\n */\nexport function isPercentage(string) {\n    return PERCENTAGE_VALUE_REGEXP.test(string);\n}\nconst repeatValues = ['repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat'];\n/**\n * Checks if string contains [background repeat](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) CSS value.\n */\nexport function isRepeat(string) {\n    return repeatValues.includes(string);\n}\nconst positionValues = ['center', 'top', 'bottom', 'left', 'right'];\n/**\n * Checks if string contains [background position](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) CSS value.\n */\nexport function isPosition(string) {\n    return positionValues.includes(string);\n}\nconst attachmentValues = ['fixed', 'scroll', 'local'];\n/**\n * Checks if string contains [background attachment](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) CSS value.\n */\nexport function isAttachment(string) {\n    return attachmentValues.includes(string);\n}\nconst urlRegExp = /^url\\(/;\n/**\n * Checks if string contains [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS value.\n */\nexport function isURL(string) {\n    return urlRegExp.test(string);\n}\n/**\n * Parses box sides as individual values.\n */\nexport function getBoxSidesValues(value = '') {\n    if (value === '') {\n        return { top: undefined, right: undefined, bottom: undefined, left: undefined };\n    }\n    const values = getShorthandValues(value);\n    const top = values[0];\n    const bottom = values[2] || top;\n    const right = values[1] || top;\n    const left = values[3] || right;\n    return { top, bottom, right, left };\n}\n/**\n * Default reducer for CSS properties that concerns edges of a box\n * [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notations:\n *\n * ```ts\n * stylesProcessor.setReducer( 'padding', getBoxSidesValueReducer( 'padding' ) );\n * ```\n */\nexport function getBoxSidesValueReducer(styleShorthand) {\n    return (value) => {\n        const { top, right, bottom, left } = value;\n        const reduced = [];\n        if (![top, right, left, bottom].every(value => !!value)) {\n            if (top) {\n                reduced.push([styleShorthand + '-top', top]);\n            }\n            if (right) {\n                reduced.push([styleShorthand + '-right', right]);\n            }\n            if (bottom) {\n                reduced.push([styleShorthand + '-bottom', bottom]);\n            }\n            if (left) {\n                reduced.push([styleShorthand + '-left', left]);\n            }\n        }\n        else {\n            reduced.push([styleShorthand, getBoxSidesShorthandValue(value)]);\n        }\n        return reduced;\n    };\n}\n/**\n * Returns a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notation\n * of a CSS property value.\n *\n * ```ts\n * getBoxSidesShorthandValue( { top: '1px', right: '1px', bottom: '2px', left: '1px' } );\n * // will return '1px 1px 2px'\n * ```\n */\nexport function getBoxSidesShorthandValue({ top, right, bottom, left }) {\n    const out = [];\n    if (left !== right) {\n        out.push(top, right, bottom, left);\n    }\n    else if (bottom !== top) {\n        out.push(top, right, bottom);\n    }\n    else if (right !== top) {\n        out.push(top, right);\n    }\n    else {\n        out.push(top);\n    }\n    return out.join(' ');\n}\n/**\n * Creates a normalizer for a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) 1-to-4 value.\n *\n * ```ts\n * stylesProcessor.setNormalizer( 'margin', getPositionShorthandNormalizer( 'margin' ) );\n * ```\n */\nexport function getPositionShorthandNormalizer(shorthand) {\n    return (value) => {\n        return {\n            path: shorthand,\n            value: getBoxSidesValues(value)\n        };\n    };\n}\n/**\n * Parses parts of a 1-to-4 value notation - handles some CSS values with spaces (like RGB()).\n *\n * ```ts\n * getShorthandValues( 'red blue RGB(0, 0, 0)');\n * // will return [ 'red', 'blue', 'RGB(0, 0, 0)' ]\n * ```\n */\nexport function getShorthandValues(string) {\n    const matches = string.matchAll(CSS_SHORTHAND_VALUE_REGEXP);\n    return Array.from(matches).map(i => i[0]);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/commandcollection\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n    /**\n     * Creates collection instance.\n     */\n    constructor() {\n        this._commands = new Map();\n    }\n    /**\n     * Registers a new command.\n     *\n     * @param commandName The name of the command.\n     */\n    add(commandName, command) {\n        this._commands.set(commandName, command);\n    }\n    /**\n     * Retrieves a command from the collection.\n     *\n     * @param commandName The name of the command.\n     */\n    get(commandName) {\n        return this._commands.get(commandName);\n    }\n    /**\n     * Executes a command.\n     *\n     * @param commandName The name of the command.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        const command = this.get(commandName);\n        if (!command) {\n            /**\n             * Command does not exist.\n             *\n             * @error commandcollection-command-not-found\n             * @param commandName Name of the command.\n             */\n            throw new CKEditorError('commandcollection-command-not-found', this, { commandName });\n        }\n        return command.execute(...commandParams);\n    }\n    /**\n     * Returns iterator of command names.\n     */\n    *names() {\n        yield* this._commands.keys();\n    }\n    /**\n     * Returns iterator of command instances.\n     */\n    *commands() {\n        yield* this._commands.values();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ commandName, commandInstance ]` pairs.\n     */\n    [Symbol.iterator]() {\n        return this._commands[Symbol.iterator]();\n    }\n    /**\n     * Destroys all collection commands.\n     */\n    destroy() {\n        for (const command of this.commands()) {\n            command.destroy();\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editingkeystrokehandler\n */\nimport { KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n * ```ts\n * editor.keystrokes.set( 'Ctrl+Z', 'undo' );\n * editor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n * editor.keystrokes.set( 'Ctrl+Y', 'redo' );\n * ```\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n    /**\n     * Creates an instance of the keystroke handler.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n    }\n    /**\n     * Registers a handler for the specified keystroke.\n     *\n     * The handler can be specified as a command name or a callback.\n     *\n     * @param keystroke Keystroke defined in a format accepted by\n     * the {@link module:utils/keyboard~parseKeystroke} function.\n     * @param callback If a string is passed, then the keystroke will\n     * {@link module:core/editor/editor~Editor#execute execute a command}.\n     * If a function, then it will be called with the\n     * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n     * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n     * @param options Additional options.\n     * @param options.priority The priority of the keystroke callback. The higher the priority value\n     * the sooner the callback will be executed. Keystrokes having the same priority\n     * are called in the order they were added.\n     */\n    set(keystroke, callback, options = {}) {\n        if (typeof callback == 'string') {\n            const commandName = callback;\n            callback = (evtData, cancel) => {\n                this.editor.execute(commandName);\n                cancel();\n            };\n        }\n        super.set(keystroke, callback, options);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/editor\n */\nimport { Config, CKEditorError, ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport { Conversion, DataController, EditingController, Model, StylesProcessor } from '@ckeditor/ckeditor5-engine';\nimport Context from '../context';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n/**\n * The class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if\n * the specific editor implements also the {@link ~Editor#ui} property\n * (as most editor implementations do).\n */\nexport default class Editor extends ObservableMixin() {\n    /**\n     * Creates a new instance of the editor class.\n     *\n     * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n     *\n     * @param config The editor configuration.\n     */\n    constructor(config = {}) {\n        super();\n        const constructor = this.constructor;\n        // Prefer the language passed as the argument to the constructor instead of the constructor's `defaultConfig`, if both are set.\n        const language = config.language || (constructor.defaultConfig && constructor.defaultConfig.language);\n        this._context = config.context || new Context({ language });\n        this._context._addEditor(this, !config.context);\n        // Clone the plugins to make sure that the plugin array will not be shared\n        // between editors and make the watchdog feature work correctly.\n        const availablePlugins = Array.from(constructor.builtinPlugins || []);\n        this.config = new Config(config, constructor.defaultConfig);\n        this.config.define('plugins', availablePlugins);\n        this.config.define(this._context._getEditorConfig());\n        this.plugins = new PluginCollection(this, availablePlugins, this._context.plugins);\n        this.locale = this._context.locale;\n        this.t = this.locale.t;\n        this._readOnlyLocks = new Set();\n        this.commands = new CommandCollection();\n        this.set('state', 'initializing');\n        this.once('ready', () => (this.state = 'ready'), { priority: 'high' });\n        this.once('destroy', () => (this.state = 'destroyed'), { priority: 'high' });\n        this.model = new Model();\n        this.on('change:isReadOnly', () => {\n            this.model.document.isReadOnly = this.isReadOnly;\n        });\n        const stylesProcessor = new StylesProcessor();\n        this.data = new DataController(this.model, stylesProcessor);\n        this.editing = new EditingController(this.model, stylesProcessor);\n        this.editing.view.document.bind('isReadOnly').to(this);\n        this.conversion = new Conversion([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);\n        this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher);\n        this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher);\n        this.keystrokes = new EditingKeystrokeHandler(this);\n        this.keystrokes.listenTo(this.editing.view.document);\n    }\n    /**\n     * Defines whether the editor is in the read-only mode.\n     *\n     * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n     * to modify the document by using them. Also, the editable element(s) become non-editable.\n     *\n     * In order to make the editor read-only, you need to call the {@link #enableReadOnlyMode} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * Later, to turn off the read-only mode, call {@link #disableReadOnlyMode}:\n     *\n     * ```ts\n     * editor.disableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * @readonly\n     * @observable\n     */\n    get isReadOnly() {\n        return this._readOnlyLocks.size > 0;\n    }\n    set isReadOnly(value) {\n        /**\n         * The {@link module:core/editor/editor~Editor#isReadOnly Editor#isReadOnly} property is read-only since version `34.0.0`\n         * and can be set only using {@link module:core/editor/editor~Editor#enableReadOnlyMode `Editor#enableReadOnlyMode( lockId )`} and\n         * {@link module:core/editor/editor~Editor#disableReadOnlyMode `Editor#disableReadOnlyMode( lockId )`}.\n         *\n         * Usage before version `34.0.0`:\n         *\n         * ```ts\n         * editor.isReadOnly = true;\n         * editor.isReadOnly = false;\n         * ```\n         *\n         * Usage since version `34.0.0`:\n         *\n         * ```ts\n         * editor.enableReadOnlyMode( 'my-feature-id' );\n         * editor.disableReadOnlyMode( 'my-feature-id' );\n         * ```\n         *\n         * @error editor-isreadonly-has-no-setter\n         */\n        throw new CKEditorError('editor-isreadonly-has-no-setter');\n    }\n    /**\n     * Turns on the read-only mode in the editor.\n     *\n     * Editor can be switched to or out of the read-only mode by many features, under various circumstances. The editor supports locking\n     * mechanism for the read-only mode. It enables easy control over the read-only mode when many features wants to turn it on or off at\n     * the same time, without conflicting with each other. It guarantees that you will not make the editor editable accidentally (which\n     * could lead to errors).\n     *\n     * Each read-only mode request is identified by a unique id (also called \"lock\"). If multiple plugins requested to turn on the\n     * read-only mode, then, the editor will become editable only after all these plugins turn the read-only mode off (using the same ids).\n     *\n     * Note, that you cannot force the editor to disable the read-only mode if other plugins set it.\n     *\n     * After the first `enableReadOnlyMode()` call, the {@link #isReadOnly `isReadOnly` property} will be set to `true`:\n     *\n     * ```ts\n     * editor.isReadOnly; // `false`.\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * ```\n     *\n     * You can turn off the read-only mode (\"clear the lock\") using the {@link #disableReadOnlyMode `disableReadOnlyMode()`} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * All \"locks\" need to be removed to enable editing:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.enableReadOnlyMode( 'my-other-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * editor.disableReadOnlyMode( 'my-other-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * @param lockId A unique ID for setting the editor to the read-only state.\n     */\n    enableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            /**\n             * The lock ID is missing or it is not a string or symbol.\n             *\n             * @error editor-read-only-lock-id-invalid\n             */\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.add(lockId);\n        if (this._readOnlyLocks.size === 1) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', true, false);\n        }\n    }\n    /**\n     * Removes the read-only lock from the editor with given lock ID.\n     *\n     * When no lock is present on the editor anymore, then the {@link #isReadOnly `isReadOnly` property} will be set to `false`.\n     *\n     * @param lockId The lock ID for setting the editor to the read-only state.\n     */\n    disableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (!this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.delete(lockId);\n        if (this._readOnlyLocks.size === 0) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', false, true);\n        }\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const config = this.config;\n        const plugins = config.get('plugins');\n        const removePlugins = config.get('removePlugins') || [];\n        const extraPlugins = config.get('extraPlugins') || [];\n        const substitutePlugins = config.get('substitutePlugins') || [];\n        return this.plugins.init(plugins.concat(extraPlugins), removePlugins, substitutePlugins);\n    }\n    /**\n     * Destroys the editor instance, releasing all resources used by it.\n     *\n     * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n     * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n     *\n     * @fires destroy\n     * @returns A promise that resolves once the editor instance is fully destroyed.\n     */\n    destroy() {\n        let readyPromise = Promise.resolve();\n        if (this.state == 'initializing') {\n            readyPromise = new Promise(resolve => this.once('ready', resolve));\n        }\n        return readyPromise\n            .then(() => {\n            this.fire('destroy');\n            this.stopListening();\n            this.commands.destroy();\n        })\n            .then(() => this.plugins.destroy())\n            .then(() => {\n            this.model.destroy();\n            this.data.destroy();\n            this.editing.destroy();\n            this.keystrokes.destroy();\n        })\n            // Remove the editor from the context.\n            // When the context was created by this editor, the context will be destroyed.\n            .then(() => this._context._removeEditor(this));\n    }\n    /**\n     * Executes the specified command with given parameters.\n     *\n     * Shorthand for:\n     *\n     * ```ts\n     * editor.commands.get( commandName ).execute( ... );\n     * ```\n     *\n     * @param commandName The name of the command to execute.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/commandcollection~CommandCollection#execute `commands.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        try {\n            return this.commands.execute(commandName, ...commandParams);\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Focuses the editor.\n     *\n     * **Note** To explicitly focus the editing area of the editor, use the\n     * {@link module:engine/view/view~View#focus `editor.editing.view.focus()`} method of the editing view.\n     *\n     * Check out the {@glink framework/deep-dive/ui/focus-tracking#focus-in-the-editor-ui Focus in the editor UI} section\n     * of the {@glink framework/deep-dive/ui/focus-tracking Deep dive into focus tracking} guide to learn more.\n     */\n    focus() {\n        this.editing.view.focus();\n    }\n    /* istanbul ignore next -- @preserve */\n    /**\n     * Creates and initializes a new editor instance.\n     *\n     * This is an abstract method. Every editor type needs to implement its own initialization logic.\n     *\n     * See the `create()` methods of the existing editor types to learn how to use them:\n     *\n     * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n     * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n     * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n     * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n     */\n    static create(...args) {\n        throw new Error('This is an abstract method.');\n    }\n}\n/**\n * This error is thrown when trying to pass a `<textarea>` element to a `create()` function of an editor class.\n *\n * The only editor type which can be initialized on `<textarea>` elements is\n * the {@glink installation/getting-started/predefined-builds#classic-editor classic editor}.\n * This editor hides the passed element and inserts its own UI next to it. Other types of editors reuse the passed element as their root\n * editable element and therefore `<textarea>` is not appropriate for them. Use a `<div>` or another text container instead:\n *\n * ```html\n * <div id=\"editor\">\n * \t<p>Initial content.</p>\n * </div>\n * ```\n *\n * @error editor-wrong-element\n */\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n */\nexport default function DataApiMixin(base) {\n    class Mixin extends base {\n        setData(data) {\n            this.data.set(data);\n        }\n        getData(options) {\n            return this.data.get(options);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\n{\n    const mixin = DataApiMixin(Object);\n    DataApiMixin.setData = mixin.prototype.setData;\n    DataApiMixin.getData = mixin.prototype.getData;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/elementapimixin\n */\nimport { CKEditorError, setDataInElement } from '@ckeditor/ckeditor5-utils';\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n */\nexport default function ElementApiMixin(base) {\n    class Mixin extends base {\n        updateSourceElement(data = this.data.get()) {\n            if (!this.sourceElement) {\n                /**\n                 * Cannot update the source element of a detached editor.\n                 *\n                 * The {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement `updateSourceElement()`}\n                 * method cannot be called if you did not pass an element to `Editor.create()`.\n                 *\n                 * @error editor-missing-sourceelement\n                 */\n                throw new CKEditorError('editor-missing-sourceelement', this);\n            }\n            const shouldUpdateSourceElement = this.config.get('updateSourceElementOnDestroy');\n            const isSourceElementTextArea = this.sourceElement instanceof HTMLTextAreaElement;\n            // The data returned by the editor might be unsafe, so we want to prevent rendering\n            // unsafe content inside the source element different than <textarea>, which is considered\n            // secure. This behaviour could be changed by setting the `updateSourceElementOnDestroy`\n            // configuration option to `true`.\n            if (!shouldUpdateSourceElement && !isSourceElementTextArea) {\n                setDataInElement(this.sourceElement, '');\n                return;\n            }\n            setDataInElement(this.sourceElement, data);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\nElementApiMixin.updateSourceElement = ElementApiMixin(Object).prototype.updateSourceElement;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/setdatainelement\n */\n/* globals HTMLTextAreaElement */\n/**\n * Sets data in a given element.\n *\n * @param el The element in which the data will be set.\n * @param data The data string.\n */\nexport default function setDataInElement(el, data) {\n    if (el instanceof HTMLTextAreaElement) {\n        el.value = data;\n    }\n    el.innerHTML = data;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/pendingactions\n */\nimport ContextPlugin from './contextplugin';\nimport { CKEditorError, Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n * // You can update the message:\n * action.message = 'Upload in progress: 10%.';\n * ```\n *\n * Removing a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Unsaved changes.' );\n *\n * pendingActions.remove( action );\n * ```\n *\n * Getting pending actions:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * const action1 = pendingActions.add( 'Action 1' );\n * const action2 = pendingActions.add( 'Action 2' );\n *\n * pendingActions.first; // Returns action1\n * Array.from( pendingActions ); // Returns [ action1, action2 ]\n * ```\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink installation/getting-started/getting-and-setting-data Saving and getting data} guide.\n */\nexport default class PendingActions extends ContextPlugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'PendingActions';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this.set('hasAny', false);\n        this._actions = new Collection({ idProperty: '_id' });\n        this._actions.delegate('add', 'remove').to(this);\n    }\n    /**\n     * Adds an action to the list of pending actions.\n     *\n     * This method returns an action object with an observable message property.\n     * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n     *\n     * @param message The action message.\n     * @returns An observable object that represents a pending action.\n     */\n    add(message) {\n        if (typeof message !== 'string') {\n            /**\n             * The message must be a string.\n             *\n             * @error pendingactions-add-invalid-message\n             */\n            throw new CKEditorError('pendingactions-add-invalid-message', this);\n        }\n        const action = new (ObservableMixin())();\n        action.set('message', message);\n        this._actions.add(action);\n        this.hasAny = true;\n        return action;\n    }\n    /**\n     * Removes an action from the list of pending actions.\n     *\n     * @param action An action object.\n     */\n    remove(action) {\n        this._actions.remove(action);\n        this.hasAny = !!this._actions.length;\n    }\n    /**\n     * Returns the first action from the list or null if the list is empty\n     *\n     * @returns The pending action object.\n     */\n    get first() {\n        return this._actions.get(0);\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this._actions[Symbol.iterator]();\n    }\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.591 10.177 4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core\n */\nexport { default as Plugin } from './plugin';\nexport { default as Command } from './command';\nexport { default as MultiCommand } from './multicommand';\nexport { default as Context } from './context';\nexport { default as ContextPlugin } from './contextplugin';\nexport { default as Editor } from './editor/editor';\nexport { default as attachToForm } from './editor/utils/attachtoform';\nexport { default as DataApiMixin } from './editor/utils/dataapimixin';\nexport { default as ElementApiMixin } from './editor/utils/elementapimixin';\nexport { default as secureSourceElement } from './editor/utils/securesourceelement';\nexport { default as PendingActions } from './pendingactions';\nimport cancel from './../theme/icons/cancel.svg';\nimport caption from './../theme/icons/caption.svg';\nimport check from './../theme/icons/check.svg';\nimport cog from './../theme/icons/cog.svg';\nimport eraser from './../theme/icons/eraser.svg';\nimport lowVision from './../theme/icons/low-vision.svg';\nimport image from './../theme/icons/image.svg';\nimport alignBottom from './../theme/icons/align-bottom.svg';\nimport alignMiddle from './../theme/icons/align-middle.svg';\nimport alignTop from './../theme/icons/align-top.svg';\nimport alignLeft from './../theme/icons/align-left.svg';\nimport alignCenter from './../theme/icons/align-center.svg';\nimport alignRight from './../theme/icons/align-right.svg';\nimport alignJustify from './../theme/icons/align-justify.svg';\nimport objectBlockLeft from './../theme/icons/object-left.svg';\nimport objectCenter from './../theme/icons/object-center.svg';\nimport objectBlockRight from './../theme/icons/object-right.svg';\nimport objectFullWidth from './../theme/icons/object-full-width.svg';\nimport objectInline from './../theme/icons/object-inline.svg';\nimport objectLeft from './../theme/icons/object-inline-left.svg';\nimport objectRight from './../theme/icons/object-inline-right.svg';\nimport objectSizeFull from './../theme/icons/object-size-full.svg';\nimport objectSizeLarge from './../theme/icons/object-size-large.svg';\nimport objectSizeSmall from './../theme/icons/object-size-small.svg';\nimport objectSizeMedium from './../theme/icons/object-size-medium.svg';\nimport pencil from './../theme/icons/pencil.svg';\nimport pilcrow from './../theme/icons/pilcrow.svg';\nimport quote from './../theme/icons/quote.svg';\nimport threeVerticalDots from './../theme/icons/three-vertical-dots.svg';\nimport bold from './../theme/icons/bold.svg';\nimport paragraph from './../theme/icons/paragraph.svg';\nimport plus from './../theme/icons/plus.svg';\nimport text from './../theme/icons/text.svg';\nimport importExport from './../theme/icons/importexport.svg';\nexport const icons = {\n    bold,\n    cancel,\n    caption,\n    check,\n    cog,\n    eraser,\n    image,\n    lowVision,\n    importExport,\n    paragraph,\n    plus,\n    text,\n    alignBottom,\n    alignMiddle,\n    alignTop,\n    alignLeft,\n    alignCenter,\n    alignRight,\n    alignJustify,\n    objectLeft,\n    objectCenter,\n    objectRight,\n    objectFullWidth,\n    objectInline,\n    objectBlockLeft,\n    objectBlockRight,\n    objectSizeFull,\n    objectSizeLarge,\n    objectSizeSmall,\n    objectSizeMedium,\n    pencil,\n    pilcrow,\n    quote,\n    threeVerticalDots\n};\nimport './augmentation';\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 16h9a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2z\\\"/><path d=\\\"M17 1a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14zm0 1.5H3a.5.5 0 0 0-.492.41L2.5 3v9a.5.5 0 0 0 .41.492L3 12.5h14a.5.5 0 0 0 .492-.41L17.5 12V3a.5.5 0 0 0-.41-.492L17 2.5z\\\" fill-opacity=\\\".6\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.333 2 .19 2.263a5.899 5.899 0 0 1 1.458.604L14.714 3.4 16.6 5.286l-1.467 1.733c.263.452.468.942.605 1.46L18 8.666v2.666l-2.263.19a5.899 5.899 0 0 1-.604 1.458l1.467 1.733-1.886 1.886-1.733-1.467a5.899 5.899 0 0 1-1.46.605L11.334 18H8.667l-.19-2.263a5.899 5.899 0 0 1-1.458-.604L5.286 16.6 3.4 14.714l1.467-1.733a5.899 5.899 0 0 1-.604-1.458L2 11.333V8.667l2.262-.189a5.899 5.899 0 0 1 .605-1.459L3.4 5.286 5.286 3.4l1.733 1.467a5.899 5.899 0 0 1 1.46-.605L8.666 2h2.666zM10 6.267a3.733 3.733 0 1 0 0 7.466 3.733 3.733 0 0 0 0-7.466z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m8.636 9.531-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z\\\"/><path d=\\\"M4 18h5.523v-1H4zm-2 0h1v-1H2z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22 2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19 4.5 14 0H3v12.673l.868-1.041c.185-.222.4-.402.632-.54V1.5h8v5h5v7.626a2.24 2.24 0 0 1 1.5.822V4.5ZM14 5V2l3.3 3H14Zm-3.692 12.5c.062.105.133.206.213.303L11.52 19H8v-.876a2.243 2.243 0 0 0 1.82-.624h.488Zm7.518-.657a.75.75 0 0 0-1.152-.96L15.5 17.29V12H14v5.29l-1.174-1.408a.75.75 0 0 0-1.152.96l2.346 2.816a.95.95 0 0 0 1.46 0l2.346-2.815Zm-15.056-.38a.75.75 0 0 1-.096-1.056l2.346-2.815a.95.95 0 0 1 1.46 0l2.346 2.815a.75.75 0 1 1-1.152.96L6.5 14.96V20H5v-5.04l-1.174 1.408a.75.75 0 0 1-1.056.096Z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.5 5.5H7v5h3.5a2.5 2.5 0 1 0 0-5zM5 3h6.5v.025a5 5 0 0 1 0 9.95V13H7v4a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10 2a1 1 0 0 0-1 1v6H3a1 1 0 1 0 0 2h6v6a1 1 0 1 0 2 0v-6h6a1 1 0 1 0 0-2h-6V3a1 1 0 0 0-1-1Z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.816 11.5 7.038 4.785 4.261 11.5h5.555Zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13Z\\\"/><path d=\\\"m12.09 17-.534-1.292.848-1.971.545 1.319L12.113 17h-.023Zm1.142-5.187.545 1.319L15.5 9.13l1.858 4.316h-3.45l.398.965h3.467L18.887 17H20l-3.873-9h-1.254l-1.641 3.813Z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m9.239 13.938-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m10.261 7.062 2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zm0-3H18v1.5h-4.5zm0-3H18v1.5h-4.5zM2 15h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M15.003 7v5.5a1 1 0 0 1-1 1H5.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H6.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2zm0-9h5v1.5H2zm0 3h5v1.5H2zm0 3h5v1.5H2z\\\"/><path d=\\\"M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M18 7v5.5a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1zm-1.505.5H3.504V12h12.991V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zM2 15h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z\\\"/></svg>\";","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z\\\"/><path d=\\\"M18.095 2H1.905C.853 2 0 2.895 0 4v12c0 1.105.853 2 1.905 2h16.19C19.147 18 20 17.105 20 16V4c0-1.105-.853-2-1.905-2zm0 1.5c.263 0 .476.224.476.5v12c0 .276-.213.5-.476.5H1.905a.489.489 0 0 1-.476-.5V4c0-.276.213-.5.476-.5h16.19z\\\"/></svg>\";","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z\\\"/><path d=\\\"M13 6H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V8a.5.5 0 0 1 .5-.5h11z\\\"/></svg>\";","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z\\\"/><path d=\\\"M7 10H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h5z\\\"/></svg>\";","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z\\\"/><path d=\\\"M10 8H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h8z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m7.3 17.37-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506 13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5 9.375 17H19v1.5H8z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.999 2H15a1 1 0 0 1 0 2h-1.004v13a1 1 0 1 1-2 0V4H8.999v13a1 1 0 1 1-2 0v-7A4 4 0 0 1 3 6a4 4 0 0 1 3.999-4z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"9.5\\\" cy=\\\"4.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"10.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\"/></svg>\";","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./toolbar.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\nimport View from '../view';\nimport FocusCycler from '../focuscycler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport preventDefault from '../bindings/preventdefault';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport { FocusTracker, KeystrokeHandler, Rect, ResizeObserver, global, isVisible, logWarning } from '@ckeditor/ckeditor5-utils';\nimport { icons } from '@ckeditor/ckeditor5-core';\nimport { isObject } from 'lodash-es';\nimport '../../theme/components/toolbar/toolbar.css';\nconst { threeVerticalDots } = icons;\nconst NESTED_TOOLBAR_ICONS = {\n    alignLeft: icons.alignLeft,\n    bold: icons.bold,\n    importExport: icons.importExport,\n    paragraph: icons.paragraph,\n    plus: icons.plus,\n    text: icons.text,\n    threeVerticalDots: icons.threeVerticalDots\n};\n/**\n * The toolbar view class.\n */\nexport default class ToolbarView extends View {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     * @param options Configuration options of the toolbar.\n     */\n    constructor(locale, options) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        this.options = options || {};\n        this.set('ariaLabel', t('Editor toolbar'));\n        this.set('maxWidth', 'auto');\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('class', undefined);\n        this.set('isCompact', false);\n        this.itemsView = new ItemsView(locale);\n        this.children = this.createCollection();\n        this.children.add(this.itemsView);\n        this.focusables = this.createCollection();\n        const isRtl = locale.uiLanguageDirection === 'rtl';\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [isRtl ? 'arrowright' : 'arrowleft', 'arrowup'],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [isRtl ? 'arrowleft' : 'arrowright', 'arrowdown']\n            }\n        });\n        const classes = [\n            'ck',\n            'ck-toolbar',\n            bind.to('class'),\n            bind.if('isCompact', 'ck-toolbar_compact')\n        ];\n        if (this.options.shouldGroupWhenFull && this.options.isFloating) {\n            classes.push('ck-toolbar_floating');\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: classes,\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel'),\n                style: {\n                    maxWidth: bind.to('maxWidth')\n                },\n                tabindex: -1\n            },\n            children: this.children,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n        this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n        // Children added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        this._behavior.render(this);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._behavior.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n        return super.destroy();\n    }\n    /**\n     * Focuses the first focusable in {@link #focusables}.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Focuses the last focusable in {@link #focusables}.\n     */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    fillFromConfig(itemsOrConfig, factory, removeItems) {\n        this.items.addMany(this._buildItemsFromConfig(itemsOrConfig, factory, removeItems));\n    }\n    /**\n     * A utility that expands the plain toolbar configuration into a list of view items using a given component factory.\n     *\n     * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration. When present, applies\n     * to this toolbar and all nested ones as well.\n     */\n    _buildItemsFromConfig(itemsOrConfig, factory, removeItems) {\n        const config = normalizeToolbarConfig(itemsOrConfig);\n        const normalizedRemoveItems = removeItems || config.removeItems;\n        const itemsToAdd = this._cleanItemsConfiguration(config.items, factory, normalizedRemoveItems)\n            .map(item => {\n            if (isObject(item)) {\n                return this._createNestedToolbarDropdown(item, factory, normalizedRemoveItems);\n            }\n            else if (item === '|') {\n                return new ToolbarSeparatorView();\n            }\n            else if (item === '-') {\n                return new ToolbarLineBreakView();\n            }\n            return factory.create(item);\n        })\n            .filter((item) => !!item);\n        return itemsToAdd;\n    }\n    /**\n     * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and\n     * duplicated (obsolete) separators or line breaks.\n     *\n     * @param items The toolbar items configuration.\n     * @param factory A factory producing toolbar items.\n     * @param removeItems An array of items names to be removed from the configuration.\n     * @returns Items after the clean-up.\n     */\n    _cleanItemsConfiguration(items, factory, removeItems) {\n        const filteredItems = items\n            .filter((item, idx, items) => {\n            if (item === '|') {\n                return true;\n            }\n            // Items listed in `config.removeItems` should not be added to the toolbar.\n            if (removeItems.indexOf(item) !== -1) {\n                return false;\n            }\n            if (item === '-') {\n                // The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n                // (https://github.com/ckeditor/ckeditor5/issues/8582)\n                if (this.options.shouldGroupWhenFull) {\n                    /**\n                     * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n                     * is disabled in the toolbar configuration.\n                     * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n                     *\n                     * ```ts\n                     * const config = {\n                     * \ttoolbar: {\n                     * \t\titems: [ ... ],\n                     * \t\tshouldNotGroupWhenFull: true\n                     * \t}\n                     * }\n                     * ```\n                     *\n                     * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n                     *\n                     * @error toolbarview-line-break-ignored-when-grouping-items\n                     */\n                    logWarning('toolbarview-line-break-ignored-when-grouping-items', items);\n                    return false;\n                }\n                return true;\n            }\n            // For the items that cannot be instantiated we are sending warning message. We also filter them out.\n            if (!isObject(item) && !factory.has(item)) {\n                /**\n                 * There was a problem processing the configuration of the toolbar. The item with the given\n                 * name does not exist so it was omitted when rendering the toolbar.\n                 *\n                 * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n                 * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n                 *\n                 * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n                 * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n                 *\n                 * You can use the following snippet to retrieve all available toolbar items:\n                 *\n                 * ```ts\n                 * Array.from( editor.ui.componentFactory.names() );\n                 * ```\n                 *\n                 * @error toolbarview-item-unavailable\n                 * @param item The name of the component or nested toolbar definition.\n                 */\n                logWarning('toolbarview-item-unavailable', { item });\n                return false;\n            }\n            return true;\n        });\n        return this._cleanSeparatorsAndLineBreaks(filteredItems);\n    }\n    /**\n     * Remove leading, trailing, and duplicated separators (`-` and `|`).\n     *\n     * @returns Toolbar items after the separator and line break clean-up.\n     */\n    _cleanSeparatorsAndLineBreaks(items) {\n        const nonSeparatorPredicate = (item) => (item !== '-' && item !== '|');\n        const count = items.length;\n        // Find an index of the first item that is not a separator.\n        const firstCommandItemIndex = items.findIndex(nonSeparatorPredicate);\n        // Items include separators only. There is no point in displaying them.\n        if (firstCommandItemIndex === -1) {\n            return [];\n        }\n        // Search from the end of the list, then convert found index back to the original direction.\n        const lastCommandItemIndex = count - items\n            .slice()\n            .reverse()\n            .findIndex(nonSeparatorPredicate);\n        return items\n            // Return items without the leading and trailing separators.\n            .slice(firstCommandItemIndex, lastCommandItemIndex)\n            // Remove duplicated separators.\n            .filter((name, idx, items) => {\n            // Filter only separators.\n            if (nonSeparatorPredicate(name)) {\n                return true;\n            }\n            const isDuplicated = idx > 0 && items[idx - 1] === name;\n            return !isDuplicated;\n        });\n    }\n    /**\n     * Creates a user-defined dropdown containing a toolbar with items.\n     *\n     * @param definition A definition of the nested toolbar dropdown.\n     * @param definition.label A label of the dropdown.\n     * @param definition.icon An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',\n     * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.\n     * @param definition.withText When set `true`, the label of the dropdown will be visible. See\n     * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.\n     * @param definition.tooltip A tooltip of the dropdown button. See\n     * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more. Defaults to `true`.\n     * @param componentFactory Component factory used to create items\n     * of the nested toolbar.\n     */\n    _createNestedToolbarDropdown(definition, componentFactory, removeItems) {\n        let { label, icon, items, tooltip = true, withText = false } = definition;\n        items = this._cleanItemsConfiguration(items, componentFactory, removeItems);\n        // There is no point in rendering a dropdown without items.\n        if (!items.length) {\n            return null;\n        }\n        const locale = this.locale;\n        const dropdownView = createDropdown(locale);\n        if (!label) {\n            /**\n             * A dropdown definition in the toolbar configuration is missing a text label.\n             *\n             * Without a label, the dropdown becomes inaccessible to users relying on assistive technologies.\n             * Make sure the `label` property is set in your drop-down configuration:\n             *\n             * ```json\n             * {\n             * \tlabel: 'A human-readable label',\n             * \ticon: '...',\n             * \titems: [ ... ]\n             * },\n             * ```\n             *\n             * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n             *\n             * @error toolbarview-nested-toolbar-dropdown-missing-label\n             */\n            logWarning('toolbarview-nested-toolbar-dropdown-missing-label', definition);\n        }\n        dropdownView.class = 'ck-toolbar__nested-toolbar-dropdown';\n        dropdownView.buttonView.set({\n            label,\n            tooltip,\n            withText: !!withText\n        });\n        // Allow disabling icon by passing false.\n        if (icon !== false) {\n            // A pre-defined icon picked by name, SVG string, a fallback (default) icon.\n            dropdownView.buttonView.icon = NESTED_TOOLBAR_ICONS[icon] || icon || threeVerticalDots;\n        }\n        // If the icon is disabled, display the label automatically.\n        else {\n            dropdownView.buttonView.withText = true;\n        }\n        addToolbarToDropdown(dropdownView, () => (dropdownView.toolbarView._buildItemsFromConfig(items, componentFactory, removeItems)));\n        return dropdownView;\n    }\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n */\nclass ItemsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__items'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n */\nclass StaticLayout {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        const bind = view.bindTemplate;\n        // Static toolbar can be vertical when needed.\n        view.set('isVertical', false);\n        // 1:1 pass–through binding, all ToolbarView#items are visible.\n        view.itemsView.children.bindTo(view.items).using(item => item);\n        // 1:1 pass–through binding, all ToolbarView#items are focusable.\n        view.focusables.bindTo(view.items).using(item => item);\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // When vertical, the toolbar has an additional CSS class.\n                    bind.if('isVertical', 'ck-toolbar_vertical')\n                ]\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() { }\n    /**\n     * @inheritDoc\n     */\n    destroy() { }\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n * ```\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow -------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n * ```\n */\nclass DynamicGrouping {\n    /**\n     * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n     * behavior.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    constructor(view) {\n        /**\n         * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n         * and manage items that do not fit into a single row.\n         *\n         * **Note:** Created in {@link #_enableGroupingOnResize}.\n         *\n         * @readonly\n         */\n        this.resizeObserver = null;\n        /**\n         * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n         * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n         * a single toolbar line. This value can be reused between updates because it is unlikely that\n         * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n         *\n         * @readonly\n         */\n        this.cachedPadding = null;\n        /**\n         * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n         * and should be executed immediately the next time the toolbar shows up.\n         *\n         * @readonly\n         */\n        this.shouldUpdateGroupingOnNextResize = false;\n        this.view = view;\n        this.viewChildren = view.children;\n        this.viewFocusables = view.focusables;\n        this.viewItemsView = view.itemsView;\n        this.viewFocusTracker = view.focusTracker;\n        this.viewLocale = view.locale;\n        this.ungroupedItems = view.createCollection();\n        this.groupedItems = view.createCollection();\n        this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n        // Only those items that were not grouped are visible to the user.\n        view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n        // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n        this.ungroupedItems.on('change', this._updateFocusCycleableItems.bind(this));\n        // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n        view.children.on('change', this._updateFocusCycleableItems.bind(this));\n        // ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n        // represented in either grouped or ungrouped items at the right index.\n        // In other words #items == concat( #ungroupedItems, #groupedItems )\n        // (in length and order).\n        view.items.on('change', (evt, changeData) => {\n            const index = changeData.index;\n            const added = Array.from(changeData.added);\n            // Removing.\n            for (const removedItem of changeData.removed) {\n                if (index >= this.ungroupedItems.length) {\n                    this.groupedItems.remove(removedItem);\n                }\n                else {\n                    this.ungroupedItems.remove(removedItem);\n                }\n            }\n            // Adding.\n            for (let currentIndex = index; currentIndex < index + added.length; currentIndex++) {\n                const addedItem = added[currentIndex - index];\n                if (currentIndex > this.ungroupedItems.length) {\n                    this.groupedItems.add(addedItem, currentIndex - this.ungroupedItems.length);\n                }\n                else {\n                    this.ungroupedItems.add(addedItem, currentIndex);\n                }\n            }\n            // When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n            // the toolbar to overflow.\n            // Consequently if removed from grouped or ungrouped items, there is a chance\n            // some new space is available and we could do some ungrouping.\n            this._updateGrouping();\n        });\n        view.extendTemplate({\n            attributes: {\n                class: [\n                    // To group items dynamically, the toolbar needs a dedicated CSS class.\n                    'ck-toolbar_grouping'\n                ]\n            }\n        });\n    }\n    /**\n     * Enables dynamic items grouping based on the dimensions of the toolbar.\n     *\n     * @param view An instance of the toolbar that this behavior is added to.\n     */\n    render(view) {\n        this.viewElement = view.element;\n        this._enableGroupingOnResize();\n        this._enableGroupingOnMaxWidthChange(view);\n    }\n    /**\n     * Cleans up the internals used by this behavior.\n     */\n    destroy() {\n        // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n        // so let's make sure it's actually destroyed along with the toolbar.\n        this.groupedItemsDropdown.destroy();\n        this.resizeObserver.destroy();\n    }\n    /**\n     * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n     * and it will move them to the {@link #groupedItems} when it happens.\n     *\n     * At the same time, it will also check if there is enough space in the toolbar for the first of the\n     * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n     * without the toolbar wrapping.\n     */\n    _updateGrouping() {\n        // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n        // for instance before #render(), or after render but without a parent or a parent detached\n        // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n        // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n        // some logic adds or removes its #items.\n        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n            return;\n        }\n        // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n        // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n        // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n        // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n        // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n        if (!isVisible(this.viewElement)) {\n            this.shouldUpdateGroupingOnNextResize = true;\n            return;\n        }\n        // Remember how many items were initially grouped so at the it is possible to figure out if the number\n        // of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n        const initialGroupedItemsCount = this.groupedItems.length;\n        let wereItemsGrouped;\n        // Group #items as long as some wrap to the next row. This will happen, for instance,\n        // when the toolbar is getting narrow and there is not enough space to display all items in\n        // a single row.\n        while (this._areItemsOverflowing) {\n            this._groupLastItem();\n            wereItemsGrouped = true;\n        }\n        // If none were grouped now but there were some items already grouped before,\n        // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n        // for instance, the toolbar is stretching and there's more space in it than before.\n        if (!wereItemsGrouped && this.groupedItems.length) {\n            // Ungroup items as long as none are overflowing or there are none to ungroup left.\n            while (this.groupedItems.length && !this._areItemsOverflowing) {\n                this._ungroupFirstItem();\n            }\n            // If the ungrouping ended up with some item wrapping to the next row,\n            // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n            // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n            // clean–up is vital for the algorithm.\n            if (this._areItemsOverflowing) {\n                this._groupLastItem();\n            }\n        }\n        if (this.groupedItems.length !== initialGroupedItemsCount) {\n            this.view.fire('groupedItemsUpdate');\n        }\n    }\n    /**\n     * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n     * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n     */\n    get _areItemsOverflowing() {\n        // An empty toolbar cannot overflow.\n        if (!this.ungroupedItems.length) {\n            return false;\n        }\n        const element = this.viewElement;\n        const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n        const lastChildRect = new Rect(element.lastChild);\n        const toolbarRect = new Rect(element);\n        if (!this.cachedPadding) {\n            const computedStyle = global.window.getComputedStyle(element);\n            const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            // parseInt() is essential because of quirky floating point numbers logic and DOM.\n            // If the padding turned out too big because of that, the grouped items dropdown would\n            // always look (from the Rect perspective) like it overflows (while it's not).\n            this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n        }\n        if (uiLanguageDirection === 'ltr') {\n            return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n        }\n        else {\n            return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n        }\n    }\n    /**\n     * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n     * upon resize when there is little space available. Instead, the toolbar items are moved to the\n     * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n     *\n     * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n     * them in the dropdown if necessary. It will also observe the browser window for size changes in\n     * the future and respond to them by grouping more items or reverting already grouped back, depending\n     * on the visual space available.\n     */\n    _enableGroupingOnResize() {\n        let previousWidth;\n        // TODO: Consider debounce.\n        this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n            if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n                this.shouldUpdateGroupingOnNextResize = false;\n                this._updateGrouping();\n                previousWidth = entry.contentRect.width;\n            }\n        });\n        this._updateGrouping();\n    }\n    /**\n     * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n     * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n     */\n    _enableGroupingOnMaxWidthChange(view) {\n        view.on('change:maxWidth', () => {\n            this._updateGrouping();\n        });\n    }\n    /**\n     * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n     * to the {@link #groupedItems} collection.\n     *\n     * The opposite of {@link #_ungroupFirstItem}.\n     */\n    _groupLastItem() {\n        if (!this.groupedItems.length) {\n            this.viewChildren.add(new ToolbarSeparatorView());\n            this.viewChildren.add(this.groupedItemsDropdown);\n            this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n        }\n        this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n    }\n    /**\n     * Moves the very first item belonging to {@link #groupedItems} back\n     * to the {@link #ungroupedItems} collection.\n     *\n     * The opposite of {@link #_groupLastItem}.\n     */\n    _ungroupFirstItem() {\n        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n        if (!this.groupedItems.length) {\n            this.viewChildren.remove(this.groupedItemsDropdown);\n            this.viewChildren.remove(this.viewChildren.last);\n            this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n        }\n    }\n    /**\n     * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n     * collection when there is not enough space in the toolbar to display all items in a single row.\n     */\n    _createGroupedItemsDropdown() {\n        const locale = this.viewLocale;\n        const t = locale.t;\n        const dropdown = createDropdown(locale);\n        dropdown.class = 'ck-toolbar__grouped-dropdown';\n        // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n        // (https://github.com/ckeditor/ckeditor5/issues/5608)\n        dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n        addToolbarToDropdown(dropdown, this.groupedItems);\n        dropdown.buttonView.set({\n            label: t('Show more items'),\n            tooltip: true,\n            tooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n            icon: threeVerticalDots\n        });\n        return dropdown;\n    }\n    /**\n     * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n     * collection so it represents the up–to–date state of the UI from the perspective of the user.\n     *\n     * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n     * it must be subject to focus cycling in the toolbar.\n     *\n     * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n     * to learn more about the purpose of this method.\n     */\n    _updateFocusCycleableItems() {\n        this.viewFocusables.clear();\n        this.ungroupedItems.map(item => {\n            this.viewFocusables.add(item);\n        });\n        if (this.groupedItems.length) {\n            this.viewFocusables.add(this.groupedItemsDropdown);\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n * ```ts\n * // In a class extending View.\n * import preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n * // ...\n *\n * this.setTemplate( {\n * \ttag: 'div',\n *\n * \ton: {\n * \t\t// Prevent the default mousedown action on this view.\n * \t\tmousedown: preventDefault( this )\n * \t}\n * } );\n * ```\n *\n * @param view View instance that defines the template.\n */\nexport default function preventDefault(view) {\n    return view.bindTemplate.to(evt => {\n        if (evt.target === view.element) {\n            evt.preventDefault();\n        }\n    });\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./list.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./splitbutton.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport { KeystrokeHandler, FocusTracker } from '@ckeditor/ckeditor5-utils';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n * ```ts\n * const view = new SplitButtonView();\n *\n * view.set( {\n * \tlabel: 'A button',\n * \tkeystroke: 'Ctrl+B',\n * \ttooltip: true\n * } );\n *\n * view.render();\n *\n * document.body.append( view.element );\n * ```\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n */\nexport default class SplitButtonView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Implement the Button interface.\n        this.set('class', undefined);\n        this.set('labelStyle', undefined);\n        this.set('icon', undefined);\n        this.set('isEnabled', true);\n        this.set('isOn', false);\n        this.set('isToggleable', false);\n        this.set('isVisible', true);\n        this.set('keystroke', undefined);\n        this.set('withKeystroke', false);\n        this.set('label', undefined);\n        this.set('tabindex', -1);\n        this.set('tooltip', false);\n        this.set('tooltipPosition', 's');\n        this.set('type', 'button');\n        this.set('withText', false);\n        this.children = this.createCollection();\n        this.actionView = this._createActionView();\n        this.arrowView = this._createArrowView();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-splitbutton',\n                    bind.to('class'),\n                    bind.if('isVisible', 'ck-hidden', value => !value),\n                    this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.children.add(this.actionView);\n        this.children.add(this.arrowView);\n        this.focusTracker.add(this.actionView.element);\n        this.focusTracker.add(this.arrowView.element);\n        this.keystrokes.listenTo(this.element);\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowright', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.actionView.element) {\n                this.arrowView.focus();\n                cancel();\n            }\n        });\n        // Overrides toolbar focus cycling behavior.\n        this.keystrokes.set('arrowleft', (evt, cancel) => {\n            if (this.focusTracker.focusedElement === this.arrowView.element) {\n                this.actionView.focus();\n                cancel();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the {@link module:ui/button/buttonview~ButtonView#element} of the action part of split button.\n     */\n    focus() {\n        this.actionView.focus();\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n     * attributes.\n     */\n    _createActionView() {\n        const actionView = new ButtonView();\n        actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n        actionView.extendTemplate({\n            attributes: {\n                class: 'ck-splitbutton__action'\n            }\n        });\n        actionView.delegate('execute').to(this);\n        return actionView;\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n     * attributes.\n     */\n    _createArrowView() {\n        const arrowView = new ButtonView();\n        const bind = arrowView.bindTemplate;\n        arrowView.icon = dropdownArrowIcon;\n        arrowView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-splitbutton__arrow'\n                ],\n                'data-cke-tooltip-disabled': bind.to('isOn'),\n                'aria-haspopup': true,\n                'aria-expanded': bind.to('isOn', value => String(value))\n            }\n        });\n        arrowView.bind('isEnabled').to(this);\n        arrowView.bind('label').to(this);\n        arrowView.bind('tooltip').to(this);\n        arrowView.delegate('execute').to(this, 'open');\n        return arrowView;\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./toolbardropdown.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SplitButtonView from './button/splitbuttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport ViewCollection from '../viewcollection';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport { global, priorities, logWarning } from '@ckeditor/ckeditor5-utils';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n * ```ts\n * const dropdown = createDropdown( model );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n * ```ts\n * const dropdown = createDropdown( locale, SplitButtonView );\n *\n * // Configure dropdown's button properties:\n * dropdown.buttonView.set( {\n * \tlabel: 'A dropdown',\n * \twithText: true\n * } );\n *\n * dropdown.buttonView.on( 'execute', () => {\n * \t// Add the behavior of the \"action part\" of the split button.\n * \t// Split button consists of the \"action part\" and \"arrow part\".\n * \t// The arrow opens the dropdown while the action part can have some other behavior.\n * } );\n *\n * dropdown.render();\n *\n * // Will render a dropdown labeled \"A dropdown\" with an empty panel.\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n * ```ts\n * dropdown.panelView.element.textContent = 'Content of the panel';\n * ```\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param locale The locale instance.\n * @param ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClass = DropdownButtonView) {\n    const buttonView = new ButtonClass(locale);\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof SplitButtonView) {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    else {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n * ```ts\n * const buttonsCreator = () => {\n * \tconst buttons = [];\n *\n * \t// Either create a new ButtonView instance or create existing.\n * \tbuttons.push( new ButtonView() );\n * \tbuttons.push( editor.ui.componentFactory.create( 'someButton' ) );\n * };\n *\n * const dropdown = createDropdown( locale );\n *\n * addToolbarToDropdown( dropdown, buttonsCreator, { isVertical: true } );\n *\n * // Will render a vertical button dropdown labeled \"A button dropdown\"\n * // with a button group in the panel containing two buttons.\n * // Buttons inside the dropdown will be created on first dropdown panel open.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * **Note:** To improve the accessibility, you can tell the dropdown to focus the first active button of the toolbar when the dropdown\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}. See the documentation of `options` to learn more.\n *\n * **Note:** Toolbar view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param options.enableActiveItemFocusOnDropdownOpen When set `true`, the focus will automatically move to the first\n * active {@link module:ui/toolbar/toolbarview~ToolbarView#items item} of the toolbar upon\n * {@link module:ui/dropdown/dropdownview~DropdownView#isOpen opening} the dropdown. Active items are those with the `isOn` property set\n * `true` (for instance {@link module:ui/button/buttonview~ButtonView buttons}). If no active items is found, the toolbar will be focused\n * as a whole resulting in the focus moving to its first focusable item (default behavior of\n * {@link module:ui/dropdown/dropdownview~DropdownView}).\n * @param options.ariaLabel Label used by assistive technologies to describe toolbar element.\n * @param options.maxWidth The maximum width of the toolbar element.\n * Details: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n * @param options.class An additional CSS class added to the toolbar element.\n * @param options.isCompact When set true, makes the toolbar look compact with toolbar element.\n * @param options.isVertical Controls the orientation of toolbar items.\n */\nexport function addToolbarToDropdown(dropdownView, buttonsOrCallback, options = {}) {\n    dropdownView.extendTemplate({\n        attributes: {\n            class: ['ck-toolbar-dropdown']\n        }\n    });\n    if (dropdownView.isOpen) {\n        addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options), { priority: 'highest' });\n    }\n    if (options.enableActiveItemFocusOnDropdownOpen) {\n        // Accessibility: Focus the first active button in the toolbar when the dropdown gets open.\n        focusChildOnDropdownOpen(dropdownView, () => dropdownView.toolbarView.items.find((item) => item.isOn));\n    }\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n */\nfunction addToolbarToOpenDropdown(dropdownView, buttonsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    const buttons = typeof buttonsOrCallback == 'function' ? buttonsOrCallback() : buttonsOrCallback;\n    toolbarView.ariaLabel = options.ariaLabel || t('Dropdown toolbar');\n    if (options.maxWidth) {\n        toolbarView.maxWidth = options.maxWidth;\n    }\n    if (options.class) {\n        toolbarView.class = options.class;\n    }\n    if (options.isCompact) {\n        toolbarView.isCompact = options.isCompact;\n    }\n    if (options.isVertical) {\n        toolbarView.isVertical = true;\n    }\n    if (buttons instanceof ViewCollection) {\n        toolbarView.items.bindTo(buttons).using(item => item);\n    }\n    else {\n        toolbarView.items.addMany(buttons);\n    }\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n * ```ts\n * const items = new Collection();\n *\n * items.add( {\n * \ttype: 'button',\n * \tmodel: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'First item',\n * \t\tlabelStyle: 'color: red'\n * \t} )\n * } );\n *\n * items.add( {\n * \t type: 'button',\n * \t model: new Model( {\n * \t\twithText: true,\n * \t\tlabel: 'Second item',\n * \t\tlabelStyle: 'color: green',\n * \t\tclass: 'foo'\n * \t} )\n * } );\n *\n * const dropdown = createDropdown( locale );\n *\n * addListToDropdown( dropdown, items );\n *\n * // Will render a dropdown with a list in the panel containing two items.\n * dropdown.render()\n * document.body.appendChild( dropdown.element );\n * ```\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n * **Note:** To improve the accessibility, when a list is added to the dropdown using this helper the dropdown will automatically attempt\n * to focus the first active item (a host to a {@link module:ui/button/buttonview~ButtonView} with\n * {@link module:ui/button/buttonview~ButtonView#isOn} set `true`) or the very first item when none are active.\n *\n * **Note:** List view will be created on first open of the dropdown.\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param itemsOrCallback A collection of the list item definitions or a callback returning a list item definitions to populate the list.\n * @param options.ariaLabel Label used by assistive technologies to describe list element.\n * @param options.role Will be reflected by the `role` DOM attribute in `ListVIew` and used by assistive technologies.\n */\nexport function addListToDropdown(dropdownView, itemsOrCallback, options = {}) {\n    if (dropdownView.isOpen) {\n        addListToOpenDropdown(dropdownView, itemsOrCallback, options);\n    }\n    else {\n        dropdownView.once('change:isOpen', () => addListToOpenDropdown(dropdownView, itemsOrCallback, options), { priority: 'highest' });\n    }\n    // Accessibility: Focus the first active button in the list when the dropdown gets open.\n    focusChildOnDropdownOpen(dropdownView, () => dropdownView.listView.items.find(item => {\n        if (item instanceof ListItemView) {\n            return item.children.first.isOn;\n        }\n        return false;\n    }));\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n */\nfunction addListToOpenDropdown(dropdownView, itemsOrCallback, options) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    const items = typeof itemsOrCallback == 'function' ? itemsOrCallback() : itemsOrCallback;\n    listView.ariaLabel = options.ariaLabel;\n    listView.role = options.role;\n    listView.items.bindTo(items).using(def => {\n        if (def.type === 'separator') {\n            return new ListSeparatorView(locale);\n        }\n        else if (def.type === 'button' || def.type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (def.type === 'button') {\n                buttonView = new ButtonView(locale);\n            }\n            else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(def.model)).to(def.model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n        return null;\n    });\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n/**\n * A helper to be used on an existing {@link module:ui/dropdown/dropdownview~DropdownView} that focuses\n * a specific child in DOM when the dropdown {@link module:ui/dropdown/dropdownview~DropdownView#isOpen gets open}.\n *\n * @param dropdownView A dropdown instance to which the focus behavior will be added.\n * @param childSelectorCallback A callback executed when the dropdown gets open. It should return a {@link module:ui/view~View}\n * instance (child of {@link module:ui/dropdown/dropdownview~DropdownView#panelView}) that will get focused or a falsy value.\n * If falsy value is returned, a default behavior of the dropdown will engage focusing the first focusable child in\n * the {@link module:ui/dropdown/dropdownview~DropdownView#panelView}.\n */\nexport function focusChildOnDropdownOpen(dropdownView, childSelectorCallback) {\n    dropdownView.on('change:isOpen', () => {\n        if (!dropdownView.isOpen) {\n            return;\n        }\n        const childToFocus = childSelectorCallback();\n        if (!childToFocus) {\n            return;\n        }\n        if (typeof childToFocus.focus === 'function') {\n            childToFocus.focus();\n        }\n        else {\n            /**\n             * The child view of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} is missing the `focus()` method\n             * and could not be focused when the dropdown got {@link module:ui/dropdown/dropdownview~DropdownView#isOpen open}.\n             *\n             * Making the content of a dropdown focusable in this case greatly improves the accessibility. Please make the view instance\n             * implements the {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable focusable interface} for the best user\n             * experience.\n             *\n             * @error ui-dropdown-focus-child-on-open-child-missing-focus\n             * @param {module:ui/view~View} view\n             */\n            logWarning('ui-dropdown-focus-child-on-open-child-missing-focus', { view: childToFocus });\n        }\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Execute after focusDropdownPanelOnOpen(). See focusDropdownPanelOnOpen() to learn more.\n    }, { priority: priorities.low - 10 });\n}\n/**\n * Add a set of default behaviors to dropdown view.\n */\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnClickOutside(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    closeDropdownOnBlur(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n    focusDropdownButtonOnClose(dropdownView);\n    focusDropdownPanelOnOpen(dropdownView);\n}\n/**\n * Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n */\nfunction closeDropdownOnClickOutside(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: [dropdownView.element]\n        });\n    });\n}\n/**\n * Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n */\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n/**\n * Adds a behavior to a dropdown view that closes opened dropdown when it loses focus.\n */\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.focusTracker.on('change:isFocused', (evt, name, isFocused) => {\n        if (dropdownView.isOpen && !isFocused) {\n            dropdownView.isOpen = false;\n        }\n    });\n}\n/**\n * Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n */\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #buttonView when the dropdown was closed but focus was within the #panelView element.\n * This makes sure the focus is never lost.\n */\nfunction focusDropdownButtonOnClose(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (isOpen) {\n            return;\n        }\n        const element = dropdownView.panelView.element;\n        // If the dropdown was closed, move the focus back to the button (#12125).\n        // Don't touch the focus, if it moved somewhere else (e.g. moved to the editing root on #execute) (#12178).\n        // Note: Don't use the state of the DropdownView#focusTracker here. It fires #blur with the timeout.\n        if (element && element.contains(global.document.activeElement)) {\n            dropdownView.buttonView.focus();\n        }\n    });\n}\n/**\n * Adds a behavior that focuses the #panelView when dropdown gets open (accessibility).\n */\nfunction focusDropdownPanelOnOpen(dropdownView) {\n    dropdownView.on('change:isOpen', (evt, name, isOpen) => {\n        if (!isOpen) {\n            return;\n        }\n        // Focus the first item in the dropdown when the dropdown opened.\n        dropdownView.panelView.focus();\n        // * Let the panel show up first (do not focus an invisible element).\n        // * Also, execute before focusChildOnDropdownOpen() to make sure this helper does not break the\n        //   focus of a specific child by kicking in too late and resetting the focus in the panel.\n    }, { priority: 'low' });\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global document */\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param options Configuration options.\n * @param options.emitter The emitter to which this behavior should be added.\n * @param options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param options.contextElements Array of HTML elements or a callback returning an array of HTML elements\n * that determine the scope of the handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler({ emitter, activator, callback, contextElements }) {\n    emitter.listenTo(document, 'mousedown', (evt, domEvt) => {\n        if (!activator()) {\n            return;\n        }\n        // Check if `composedPath` is `undefined` in case the browser does not support native shadow DOM.\n        // Can be removed when all supported browsers support native shadow DOM.\n        const path = typeof domEvt.composedPath == 'function' ? domEvt.composedPath() : [];\n        const contextElementsList = typeof contextElements == 'function' ? contextElements() : contextElements;\n        for (const contextElement of contextElementsList) {\n            if (contextElement.contains(domEvt.target) || path.includes(contextElement)) {\n                return;\n            }\n        }\n        callback();\n    });\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./listdropdown.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number, min = 0, max = 1) => {\n    return number > max ? max : number < min ? min : number;\n};\nexport const round = (number, digits = 0, base = Math.pow(10, digits)) => {\n    return Math.round(base * number) / base;\n};\n//# sourceMappingURL=math.js.map","import { round } from './math.js';\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits = {\n    grad: 360 / 400,\n    turn: 360,\n    rad: 360 / (Math.PI * 2)\n};\nexport const hexToHsva = (hex) => rgbaToHsva(hexToRgba(hex));\nexport const hexToRgba = (hex) => {\n    if (hex[0] === '#')\n        hex = hex.substring(1);\n    if (hex.length < 6) {\n        return {\n            r: parseInt(hex[0] + hex[0], 16),\n            g: parseInt(hex[1] + hex[1], 16),\n            b: parseInt(hex[2] + hex[2], 16),\n            a: hex.length === 4 ? round(parseInt(hex[3] + hex[3], 16) / 255, 2) : 1\n        };\n    }\n    return {\n        r: parseInt(hex.substring(0, 2), 16),\n        g: parseInt(hex.substring(2, 4), 16),\n        b: parseInt(hex.substring(4, 6), 16),\n        a: hex.length === 8 ? round(parseInt(hex.substring(6, 8), 16) / 255, 2) : 1\n    };\n};\nexport const parseHue = (value, unit = 'deg') => {\n    return Number(value) * (angleUnits[unit] || 1);\n};\nexport const hslaStringToHsva = (hslString) => {\n    const matcher = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(hslString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return hslaToHsva({\n        h: parseHue(match[1], match[2]),\n        s: Number(match[3]),\n        l: Number(match[4]),\n        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n    });\n};\nexport const hslStringToHsva = hslaStringToHsva;\nexport const hslaToHsva = ({ h, s, l, a }) => {\n    s *= (l < 50 ? l : 100 - l) / 100;\n    return {\n        h: h,\n        s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n        v: l + s,\n        a\n    };\n};\nexport const hsvaToHex = (hsva) => rgbaToHex(hsvaToRgba(hsva));\nexport const hsvaToHsla = ({ h, s, v, a }) => {\n    const hh = ((200 - s) * v) / 100;\n    return {\n        h: round(h),\n        s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n        l: round(hh / 2),\n        a: round(a, 2)\n    };\n};\nexport const hsvaToHsvString = (hsva) => {\n    const { h, s, v } = roundHsva(hsva);\n    return `hsv(${h}, ${s}%, ${v}%)`;\n};\nexport const hsvaToHsvaString = (hsva) => {\n    const { h, s, v, a } = roundHsva(hsva);\n    return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\nexport const hsvaToHslString = (hsva) => {\n    const { h, s, l } = hsvaToHsla(hsva);\n    return `hsl(${h}, ${s}%, ${l}%)`;\n};\nexport const hsvaToHslaString = (hsva) => {\n    const { h, s, l, a } = hsvaToHsla(hsva);\n    return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\nexport const hsvaToRgba = ({ h, s, v, a }) => {\n    h = (h / 360) * 6;\n    s = s / 100;\n    v = v / 100;\n    const hh = Math.floor(h), b = v * (1 - s), c = v * (1 - (h - hh) * s), d = v * (1 - (1 - h + hh) * s), module = hh % 6;\n    return {\n        r: round([v, c, b, b, d, v][module] * 255),\n        g: round([d, v, v, c, b, b][module] * 255),\n        b: round([b, b, d, v, v, c][module] * 255),\n        a: round(a, 2)\n    };\n};\nexport const hsvaToRgbString = (hsva) => {\n    const { r, g, b } = hsvaToRgba(hsva);\n    return `rgb(${r}, ${g}, ${b})`;\n};\nexport const hsvaToRgbaString = (hsva) => {\n    const { r, g, b, a } = hsvaToRgba(hsva);\n    return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\nexport const hsvaStringToHsva = (hsvString) => {\n    const matcher = /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(hsvString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return roundHsva({\n        h: parseHue(match[1], match[2]),\n        s: Number(match[3]),\n        v: Number(match[4]),\n        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n    });\n};\nexport const hsvStringToHsva = hsvaStringToHsva;\nexport const rgbaStringToHsva = (rgbaString) => {\n    const matcher = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(rgbaString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return rgbaToHsva({\n        r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n        g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n        b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n        a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n    });\n};\nexport const rgbStringToHsva = rgbaStringToHsva;\nconst format = (number) => {\n    const hex = number.toString(16);\n    return hex.length < 2 ? '0' + hex : hex;\n};\nexport const rgbaToHex = ({ r, g, b, a }) => {\n    const alphaHex = a < 1 ? format(round(a * 255)) : '';\n    return '#' + format(r) + format(g) + format(b) + alphaHex;\n};\nexport const rgbaToHsva = ({ r, g, b, a }) => {\n    const max = Math.max(r, g, b);\n    const delta = max - Math.min(r, g, b);\n    // prettier-ignore\n    const hh = delta\n        ? max === r\n            ? (g - b) / delta\n            : max === g\n                ? 2 + (b - r) / delta\n                : 4 + (r - g) / delta\n        : 0;\n    return {\n        h: round(60 * (hh < 0 ? hh + 6 : hh)),\n        s: round(max ? (delta / max) * 100 : 0),\n        v: round((max / 255) * 100),\n        a\n    };\n};\nexport const roundHsva = (hsva) => ({\n    h: round(hsva.h),\n    s: round(hsva.s),\n    v: round(hsva.v),\n    a: round(hsva.a, 2)\n});\nexport const rgbaToRgb = ({ r, g, b }) => ({ r, g, b });\nexport const hslaToHsl = ({ h, s, l }) => ({ h, s, l });\nexport const hsvaToHsv = (hsva) => {\n    const { h, s, v } = roundHsva(hsva);\n    return { h, s, v };\n};\n//# sourceMappingURL=convert.js.map","import { hexToRgba } from './convert.js';\nexport const equalColorObjects = (first, second) => {\n    if (first === second)\n        return true;\n    for (const prop in first) {\n        // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n        // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n        // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n        // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n        // there is or not), and then as a type TS can iterate over.\n        if (first[prop] !==\n            second[prop])\n            return false;\n    }\n    return true;\n};\nexport const equalColorString = (first, second) => {\n    return first.replace(/\\s/g, '') === second.replace(/\\s/g, '');\n};\nexport const equalHex = (first, second) => {\n    if (first.toLowerCase() === second.toLowerCase())\n        return true;\n    // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n    return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n//# sourceMappingURL=compare.js.map","const cache = {};\nexport const tpl = (html) => {\n    let template = cache[html];\n    if (!template) {\n        template = document.createElement('template');\n        template.innerHTML = html;\n        cache[html] = template;\n    }\n    return template;\n};\nexport const fire = (target, type, detail) => {\n    target.dispatchEvent(new CustomEvent(type, {\n        bubbles: true,\n        detail\n    }));\n};\n//# sourceMappingURL=dom.js.map","import { fire, tpl } from '../utils/dom.js';\nimport { clamp } from '../utils/math.js';\nlet hasTouched = false;\n// Check if an event was triggered by touch\nconst isTouch = (e) => 'touches' in e;\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isValid = (event) => {\n    if (hasTouched && !isTouch(event))\n        return false;\n    if (!hasTouched)\n        hasTouched = isTouch(event);\n    return true;\n};\nconst pointerMove = (target, event) => {\n    const pointer = isTouch(event) ? event.touches[0] : event;\n    const rect = target.el.getBoundingClientRect();\n    fire(target.el, 'move', target.getMove({\n        x: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n        y: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height)\n    }));\n};\nconst keyMove = (target, event) => {\n    // We use `keyCode` instead of `key` to reduce the size of the library.\n    const keyCode = event.keyCode;\n    // Ignore all keys except arrow ones, Page Up, Page Down, Home and End.\n    if (keyCode > 40 || (target.xy && keyCode < 37) || keyCode < 33)\n        return;\n    // Do not scroll page by keys when color picker element has focus.\n    event.preventDefault();\n    // Send relative offset to the parent component.\n    fire(target.el, 'move', target.getMove({\n        x: keyCode === 39 // Arrow Right\n            ? 0.01\n            : keyCode === 37 // Arrow Left\n                ? -0.01\n                : keyCode === 34 // Page Down\n                    ? 0.05\n                    : keyCode === 33 // Page Up\n                        ? -0.05\n                        : keyCode === 35 // End\n                            ? 1\n                            : keyCode === 36 // Home\n                                ? -1\n                                : 0,\n        y: keyCode === 40 // Arrow down\n            ? 0.01\n            : keyCode === 38 // Arrow Up\n                ? -0.01\n                : 0\n    }, true));\n};\nexport class Slider {\n    constructor(root, part, aria, xy) {\n        const template = tpl(`<div role=\"slider\" tabindex=\"0\" part=\"${part}\" ${aria}><div part=\"${part}-pointer\"></div></div>`);\n        root.appendChild(template.content.cloneNode(true));\n        const el = root.querySelector(`[part=${part}]`);\n        el.addEventListener('mousedown', this);\n        el.addEventListener('touchstart', this);\n        el.addEventListener('keydown', this);\n        this.el = el;\n        this.xy = xy;\n        this.nodes = [el.firstChild, el];\n    }\n    set dragging(state) {\n        const toggleEvent = state ? document.addEventListener : document.removeEventListener;\n        toggleEvent(hasTouched ? 'touchmove' : 'mousemove', this);\n        toggleEvent(hasTouched ? 'touchend' : 'mouseup', this);\n    }\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n            case 'touchstart':\n                event.preventDefault();\n                // event.button is 0 in mousedown for left button activation\n                if (!isValid(event) || (!hasTouched && event.button != 0))\n                    return;\n                this.el.focus();\n                pointerMove(this, event);\n                this.dragging = true;\n                break;\n            case 'mousemove':\n            case 'touchmove':\n                event.preventDefault();\n                pointerMove(this, event);\n                break;\n            case 'mouseup':\n            case 'touchend':\n                this.dragging = false;\n                break;\n            case 'keydown':\n                keyMove(this, event);\n                break;\n        }\n    }\n    style(styles) {\n        styles.forEach((style, i) => {\n            for (const p in style) {\n                this.nodes[i].style.setProperty(p, style[p]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=slider.js.map","import { Slider } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nexport class Hue extends Slider {\n    constructor(root) {\n        super(root, 'hue', 'aria-label=\"Hue\" aria-valuemin=\"0\" aria-valuemax=\"360\"', false);\n    }\n    update({ h }) {\n        this.h = h;\n        this.style([\n            {\n                left: `${(h / 360) * 100}%`,\n                color: hsvaToHslString({ h, s: 100, v: 100, a: 1 })\n            }\n        ]);\n        this.el.setAttribute('aria-valuenow', `${round(h)}`);\n    }\n    getMove(offset, key) {\n        // Hue measured in degrees of the color circle ranging from 0 to 360\n        return { h: key ? clamp(this.h + offset.x * 360, 0, 360) : 360 * offset.x };\n    }\n}\n//# sourceMappingURL=hue.js.map","import { Slider } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nexport class Saturation extends Slider {\n    constructor(root) {\n        super(root, 'saturation', 'aria-label=\"Color\"', true);\n    }\n    update(hsva) {\n        this.hsva = hsva;\n        this.style([\n            {\n                top: `${100 - hsva.v}%`,\n                left: `${hsva.s}%`,\n                color: hsvaToHslString(hsva)\n            },\n            {\n                'background-color': hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 })\n            }\n        ]);\n        this.el.setAttribute('aria-valuetext', `Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`);\n    }\n    getMove(offset, key) {\n        // Saturation and brightness always fit into [0, 100] range\n        return {\n            s: key ? clamp(this.hsva.s + offset.x * 100, 0, 100) : offset.x * 100,\n            v: key ? clamp(this.hsva.v - offset.y * 100, 0, 100) : Math.round(100 - offset.y * 100)\n        };\n    }\n}\n//# sourceMappingURL=saturation.js.map","export default `:host{display:flex;flex-direction:column;position:relative;width:200px;height:200px;user-select:none;-webkit-user-select:none;cursor:default}:host([hidden]){display:none!important}[role=slider]{position:relative;touch-action:none;user-select:none;-webkit-user-select:none;outline:0}[role=slider]:last-child{border-radius:0 0 8px 8px}[part$=pointer]{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;display:flex;place-content:center center;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}[part$=pointer]::after{content:\"\";width:100%;height:100%;border-radius:inherit;background-color:currentColor}[role=slider]:focus [part$=pointer]{transform:translate(-50%,-50%) scale(1.1)}`;\n//# sourceMappingURL=color-picker.js.map","import { equalColorObjects } from '../utils/compare.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport { Hue } from './hue.js';\nimport { Saturation } from './saturation.js';\nimport css from '../styles/color-picker.js';\nimport hueCss from '../styles/hue.js';\nimport saturationCss from '../styles/saturation.js';\nconst $isSame = Symbol('same');\nconst $color = Symbol('color');\nconst $hsva = Symbol('hsva');\nconst $update = Symbol('update');\nconst $parts = Symbol('parts');\nexport const $css = Symbol('css');\nexport const $sliders = Symbol('sliders');\nexport class ColorPicker extends HTMLElement {\n    static get observedAttributes() {\n        return ['color'];\n    }\n    get [$css]() {\n        return [css, hueCss, saturationCss];\n    }\n    get [$sliders]() {\n        return [Saturation, Hue];\n    }\n    get color() {\n        return this[$color];\n    }\n    set color(newColor) {\n        if (!this[$isSame](newColor)) {\n            const newHsva = this.colorModel.toHsva(newColor);\n            this[$update](newHsva);\n            this[$color] = newColor;\n        }\n    }\n    constructor() {\n        super();\n        const template = tpl(`<style>${this[$css].join('')}</style>`);\n        const root = this.attachShadow({ mode: 'open' });\n        root.appendChild(template.content.cloneNode(true));\n        root.addEventListener('move', this);\n        this[$parts] = this[$sliders].map((slider) => new slider(root));\n    }\n    connectedCallback() {\n        // A user may set a property on an _instance_ of an element,\n        // before its prototype has been connected to this class.\n        // If so, we need to run it through the proper class setter.\n        if (this.hasOwnProperty('color')) {\n            const value = this.color;\n            delete this['color'];\n            this.color = value;\n        }\n        else if (!this.color) {\n            this.color = this.colorModel.defaultColor;\n        }\n    }\n    attributeChangedCallback(_attr, _oldVal, newVal) {\n        const color = this.colorModel.fromAttr(newVal);\n        if (!this[$isSame](color)) {\n            this.color = color;\n        }\n    }\n    handleEvent(event) {\n        // Merge the current HSV color object with updated params.\n        const oldHsva = this[$hsva];\n        const newHsva = { ...oldHsva, ...event.detail };\n        this[$update](newHsva);\n        let newColor;\n        if (!equalColorObjects(newHsva, oldHsva) &&\n            !this[$isSame]((newColor = this.colorModel.fromHsva(newHsva)))) {\n            this[$color] = newColor;\n            fire(this, 'color-changed', { value: newColor });\n        }\n    }\n    [$isSame](color) {\n        return this.color && this.colorModel.equal(color, this.color);\n    }\n    [$update](hsva) {\n        this[$hsva] = hsva;\n        this[$parts].forEach((part) => part.update(hsva));\n    }\n}\n//# sourceMappingURL=color-picker.js.map","export default `[part=hue]{flex:0 0 24px;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}[part=hue-pointer]{top:50%;z-index:2}`;\n//# sourceMappingURL=hue.js.map","export default `[part=saturation]{flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(to top,#000,transparent),linear-gradient(to right,#fff,rgba(255,255,255,0));box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}[part=saturation-pointer]{z-index:3}`;\n//# sourceMappingURL=saturation.js.map","import { ColorPicker } from '../components/color-picker.js';\nimport { hexToHsva, hsvaToHex } from '../utils/convert.js';\nimport { equalHex } from '../utils/compare.js';\nconst colorModel = {\n    defaultColor: '#000',\n    toHsva: hexToHsva,\n    fromHsva: ({ h, s, v }) => hsvaToHex({ h, s, v, a: 1 }),\n    equal: equalHex,\n    fromAttr: (color) => color\n};\nexport class HexBase extends ColorPicker {\n    get colorModel() {\n        return colorModel;\n    }\n}\n//# sourceMappingURL=hex.js.map","import { HexBase } from './lib/entrypoints/hex.js';\n/**\n * A color picker custom element that uses HEX format.\n *\n * @element hex-color-picker\n *\n * @prop {string} color - Selected color in HEX format.\n * @attr {string} color - Selected color in HEX format.\n *\n * @fires color-changed - Event fired when color property changes.\n *\n * @csspart hue - A hue selector container.\n * @csspart saturation - A saturation selector container\n * @csspart hue-pointer - A hue pointer element.\n * @csspart saturation-pointer - A saturation pointer element.\n */\nexport class HexColorPicker extends HexBase {\n}\ncustomElements.define('hex-color-picker', HexColorPicker);\n//# sourceMappingURL=hex-color-picker.js.map","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./colorpicker.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/componentfactory\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that the names are case insensitive.\n *\n * ```ts\n * // The editor provides localization tools for the factory.\n * const factory = new ComponentFactory( editor );\n *\n * factory.add( 'foo', locale => new FooView( locale ) );\n * factory.add( 'bar', locale => new BarView( locale ) );\n *\n * // An instance of FooView.\n * const fooInstance = factory.create( 'foo' );\n *\n * // Names are case insensitive so this is also allowed:\n * const barInstance = factory.create( 'Bar' );\n * ```\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n    /**\n     * Creates an instance of the factory.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        /**\n         * Registered component factories.\n         */\n        this._components = new Map();\n        this.editor = editor;\n    }\n    /**\n     * Returns an iterator of registered component names. Names are returned in lower case.\n     */\n    *names() {\n        for (const value of this._components.values()) {\n            yield value.originalName;\n        }\n    }\n    /**\n     * Registers a component factory function that will be used by the\n     * {@link #create create} method and called with the\n     * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n     * allowing localization of the {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @param callback The callback that returns the component.\n     */\n    add(name, callback) {\n        this._components.set(getNormalized(name), { callback, originalName: name });\n    }\n    /**\n     * Creates an instance of a component registered in the factory under a specific name.\n     *\n     * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n     * the previously {@link #add added} factory function, allowing localization of the\n     * {@link module:ui/view~View view}.\n     *\n     * @param name The name of the component.\n     * @returns The instantiated component view.\n     */\n    create(name) {\n        if (!this.has(name)) {\n            /**\n             * The required component is not registered in the component factory. Please make sure\n             * the provided name is correct and the component has been correctly\n             * {@link module:ui/componentfactory~ComponentFactory#add added} to the factory.\n             *\n             * @error componentfactory-item-missing\n             * @param name The name of the missing component.\n             */\n            throw new CKEditorError('componentfactory-item-missing', this, { name });\n        }\n        return this._components.get(getNormalized(name)).callback(this.editor.locale);\n    }\n    /**\n     * Checks if a component of a given name is registered in the factory.\n     *\n     * @param name The name of the component.\n     */\n    has(name) {\n        return this._components.has(getNormalized(name));\n    }\n}\n/**\n * Ensures that the component name used as the key in the internal map is in lower case.\n */\nfunction getNormalized(name) {\n    return String(name).toLowerCase();\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./balloonpanel.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\nimport View from '../../view';\nimport { getOptimalPosition, global, isRange, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { isElement } from 'lodash-es';\nimport '../../../theme/components/panel/balloonpanel.css';\nconst toPx = toUnit('px');\nconst defaultLimiterElement = global.document.body;\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n * ```ts\n * const panel = new BalloonPanelView( locale );\n * const childView = new ChildView();\n * const positions = BalloonPanelView.defaultPositions;\n *\n * panel.render();\n *\n * // Add a child view to the panel's content collection.\n * panel.content.add( childView );\n *\n * // Start pinning the panel to an element with the \"target\" id DOM.\n * // The balloon will remain pinned until unpin() is called.\n * panel.pin( {\n * \ttarget: document.querySelector( '#target' ),\n * \tpositions: [\n * \t\tpositions.northArrowSouth,\n * \t\tpositions.southArrowNorth\n * \t]\n * } );\n * ```\n */\nexport default class BalloonPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('position', 'arrow_nw');\n        this.set('isVisible', false);\n        this.set('withArrow', true);\n        this.set('class', undefined);\n        this._pinWhenIsVisibleCallback = null;\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-panel',\n                    bind.to('position', value => `ck-balloon-panel_${value}`),\n                    bind.if('isVisible', 'ck-balloon-panel_visible'),\n                    bind.if('withArrow', 'ck-balloon-panel_with-arrow'),\n                    bind.to('class')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx)\n                }\n            },\n            children: this.content\n        });\n    }\n    /**\n     * Shows the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    show() {\n        this.isVisible = true;\n    }\n    /**\n     * Hides the panel.\n     *\n     * See {@link #isVisible}.\n     */\n    hide() {\n        this.isVisible = false;\n    }\n    /**\n     * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n     * smart positioning heuristics that chooses from available positions to make sure the panel\n     * is visible to the user i.e. within the limits of the viewport.\n     *\n     * This method accepts configuration {@link module:utils/dom/position~Options options}\n     * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Attach the panel to an element with the \"target\" id DOM.\n     * panel.attachTo( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * **Note**: Attaching the panel will also automatically {@link #show} it.\n     *\n     * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n     * See the {@link #pin} method for a more permanent positioning strategy.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n    attachTo(options) {\n        this.show();\n        const defaultPositions = BalloonPanelView.defaultPositions;\n        const positionOptions = Object.assign({}, {\n            element: this.element,\n            positions: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthMiddleWest,\n                defaultPositions.southArrowNorthMiddleEast,\n                defaultPositions.southArrowNorthWest,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.northArrowSouth,\n                defaultPositions.northArrowSouthMiddleWest,\n                defaultPositions.northArrowSouthMiddleEast,\n                defaultPositions.northArrowSouthWest,\n                defaultPositions.northArrowSouthEast,\n                defaultPositions.viewportStickyNorth\n            ],\n            limiter: defaultLimiterElement,\n            fitInViewport: true\n        }, options);\n        const optimalPosition = BalloonPanelView._getOptimalPosition(positionOptions);\n        // Usually browsers make some problems with super accurate values like 104.345px\n        // so it is better to use int values.\n        const left = parseInt(optimalPosition.left);\n        const top = parseInt(optimalPosition.top);\n        const position = optimalPosition.name;\n        const config = optimalPosition.config || {};\n        const { withArrow = true } = config;\n        this.top = top;\n        this.left = left;\n        this.position = position;\n        this.withArrow = withArrow;\n    }\n    /**\n     * Works the same way as the {@link #attachTo} method except that the position of the panel is\n     * continuously updated when:\n     *\n     * * any ancestor of the {@link module:utils/dom/position~Options#target}\n     * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n     * * the browser window gets resized or scrolled.\n     *\n     * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n     * and is immune to the changing environment.\n     *\n     * ```ts\n     * const panel = new BalloonPanelView( locale );\n     * const positions = BalloonPanelView.defaultPositions;\n     *\n     * panel.render();\n     *\n     * // Pin the panel to an element with the \"target\" id DOM.\n     * panel.pin( {\n     * \ttarget: document.querySelector( '#target' ),\n     * \tpositions: [\n     * \t\tpositions.northArrowSouth,\n     * \t\tpositions.southArrowNorth\n     * \t]\n     * } );\n     * ```\n     *\n     * To leave the pinned state, use the {@link #unpin} method.\n     *\n     * **Note**: Pinning the panel will also automatically {@link #show} it.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n    pin(options) {\n        this.unpin();\n        this._pinWhenIsVisibleCallback = () => {\n            if (this.isVisible) {\n                this._startPinning(options);\n            }\n            else {\n                this._stopPinning();\n            }\n        };\n        this._startPinning(options);\n        // Control the state of the listeners depending on whether the panel is visible\n        // or not.\n        // TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n        this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n    }\n    /**\n     * Stops pinning the panel, as set up by {@link #pin}.\n     */\n    unpin() {\n        if (this._pinWhenIsVisibleCallback) {\n            // Deactivate listeners attached by pin().\n            this._stopPinning();\n            // Deactivate the panel pin() control logic.\n            // TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n            this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n            this._pinWhenIsVisibleCallback = null;\n            this.hide();\n        }\n    }\n    /**\n     * Starts managing the pinned state of the panel. See {@link #pin}.\n     *\n     * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.\n     */\n    _startPinning(options) {\n        this.attachTo(options);\n        const targetElement = getDomElement(options.target);\n        const limiterElement = options.limiter ? getDomElement(options.limiter) : defaultLimiterElement;\n        // Then we need to listen on scroll event of eny element in the document.\n        this.listenTo(global.document, 'scroll', (evt, domEvt) => {\n            const scrollTarget = domEvt.target;\n            // The position needs to be updated if the positioning target is within the scrolled element.\n            const isWithinScrollTarget = targetElement && scrollTarget.contains(targetElement);\n            // The position needs to be updated if the positioning limiter is within the scrolled element.\n            const isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains(limiterElement);\n            // The positioning target and/or limiter can be a Rect, object etc..\n            // There's no way to optimize the listener then.\n            if (isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement) {\n                this.attachTo(options);\n            }\n        }, { useCapture: true });\n        // We need to listen on window resize event and update position.\n        this.listenTo(global.window, 'resize', () => {\n            this.attachTo(options);\n        });\n    }\n    /**\n     * Stops managing the pinned state of the panel. See {@link #pin}.\n     */\n    _stopPinning() {\n        this.stopListening(global.document, 'scroll');\n        this.stopListening(global.window, 'resize');\n    }\n}\n/**\n * A side offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │\n *\t\t │                       │\n *\t\t └──+    +───────────────┘\n *\t\t |   \\  /\n *\t\t |    \\/\n *\t\t>┼─────┼< ─────────────────────── side offset\n *\n * ```\n *\n * @default 25\n */\nBalloonPanelView.arrowSideOffset = 25;\n/**\n * A height offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n * ```\n *\t\t ┌───────────────────────┐\n *\t\t │                       │\n *\t\t │         Balloon       │\n *\t\t │         Content       │      ╱-- arrow height offset\n *\t\t │                       │      V\n *\t\t └──+    +───────────────┘ --- ─┼───────\n *\t\t     \\  /                       │\n *\t\t      \\/                        │\n *\t\t────────────────────────────────┼───────\n *\t\t                                ^\n *\n *\n *\t\t>┼────┼<  arrow height offset\n *\t\t │    │\n *\t\t │    ┌────────────────────────┐\n *\t\t │    │                        │\n *\t\t │   ╱                         │\n *\t\t │ ╱            Balloon        │\n *\t\t │ ╲            Content        │\n *\t\t │   ╲                         │\n *\t\t │    │                        │\n *\t\t │    └────────────────────────┘\n * ```\n *\n * @default 10\n*/\nBalloonPanelView.arrowHeightOffset = 10;\n/**\n * A vertical offset of the balloon panel from the edge of the viewport if sticky.\n * It helps in accessing toolbar buttons underneath the balloon panel.\n *\n * ```\n *\t\t  ┌───────────────────────────────────────────────────┐\n *\t\t  │                      Target                       │\n *\t\t  │                                                   │\n *\t\t  │                            /── vertical offset    │\n *\t\t┌─────────────────────────────V─────────────────────────┐\n *\t\t│ Toolbar            ┌─────────────┐                    │\n *\t\t├────────────────────│   Balloon   │────────────────────┤\n *\t\t│ │                  └─────────────┘                  │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ │                                                   │ │\n *\t\t│ └───────────────────────────────────────────────────┘ │\n *\t\t│                        Viewport                       │\n *\t\t└───────────────────────────────────────────────────────┘\n * ```\n *\n * @default 20\n */\nBalloonPanelView.stickyVerticalOffset = 20;\n/**\n * Function used to calculate the optimal position for the balloon.\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North west**\n *\n * * `northWestArrowSouthWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t V\n *\t\t [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleWest`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t    V\n *\t\t    [ Target ]\n * ```\n *\n * * `northWestArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t         [ Target ]\n * ```\n *\n * * `northWestArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t             [ Target ]\n * ```\n *\n * * `northWestArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t                 [ Target ]\n * ```\n *\n * **North**\n *\n * * `northArrowSouthWest`\n *\n * ```\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n *\n * * `northArrowSouthMiddleWest`\n *\n * ```\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n * ```\n * * `northArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t    [ Target ]\n * ```\n *\n * * `northArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t        [ Target ]\n * ```\n *\n * * `northArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                V\n *\t\t           [ Target ]\n * ```\n *\n * **North east**\n *\n * * `northEastArrowSouthWest`\n *\n * ```\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleWest`\n *\n * ```\n *\t\t     +-----------------+\n *\t\t     |     Balloon     |\n *\t\t     +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouth`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t[ Target ]\n * ```\n *\n * * `northEastArrowSouthMiddleEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t    [ Target ]\n * ```\n *\n * * `northEastArrowSouthEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t        [ Target ]\n * ```\n *\n * **South**\n *\n * * `southArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t        ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n * ```\n *\n * * `southArrowNorth`\n *\n * ```\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southArrowNorthMiddleEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n * ```\n *\n * * `southArrowNorthEast`\n *\n * ```\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South west**\n *\n * * `southWestArrowNorthWest`\n *\n *\n * ```\n *\t\t [ Target ]\n *\t\t ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleWest`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t     ^\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n * ```\n *\n * * `southWestArrowNorth`\n *\n * ```\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthMiddleEast`\n *\n * ```\n *\t\t              [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southWestArrowNorthEast`\n *\n * ```\n *\t\t                 [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **South east**\n *\n * * `southEastArrowNorthWest`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleWest`\n *\n * ```\n *\t\t   [ Target ]\n *\t\t            ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n * ```\n *\n * * `southEastArrowNorth`\n *\n * ```\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthMiddleEast`\n *\n * ```\n *\t\t     [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * * `southEastArrowNorthEast`\n *\n * ```\n *\t\t        [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n * ```\n *\n * **West**\n *\n * * `westArrowEast`\n *\n * ```\n *\t\t+-----------------+\n *\t\t|     Balloon     |>[ Target ]\n *\t\t+-----------------+\n * ```\n *\n * **East**\n *\n * * `eastArrowWest`\n *\n * ```\n *\t\t           +-----------------+\n *\t\t[ Target ]<|     Balloon     |\n *\t\t           +-----------------+\n * ```\n *\n * **Sticky**\n *\n * * `viewportStickyNorth`\n *\n * ```\n *\t\t    +---------------------------+\n *\t\t    |        [ Target ]         |\n *\t\t    |                           |\n *\t\t+-----------------------------------+\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |    |     Balloon     |    |   |\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   +---------------------------+   |\n *\t\t|             Viewport              |\n *\t\t+-----------------------------------+\n * ```\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * Default positioning functions with customized offsets can be generated using\n * {@link module:ui/panel/balloon/balloonpanelview~generatePositions}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n */\nBalloonPanelView.defaultPositions = generatePositions();\n/**\n * Returns the DOM element for given object or null, if there is none,\n * e.g. when the passed object is a Rect instance or so.\n */\nfunction getDomElement(object) {\n    if (isElement(object)) {\n        return object;\n    }\n    if (isRange(object)) {\n        return object.commonAncestorContainer;\n    }\n    if (typeof object == 'function') {\n        return getDomElement(object());\n    }\n    return null;\n}\n/**\n * Returns available {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * {@link module:utils/dom/position~PositioningFunction positioning functions} adjusted by the specific offsets.\n *\n * @internal\n * @param options Options to generate positions. If not specified, this helper will simply return\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n * @param options.sideOffset A custom side offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowSideOffset the default value}\n * will be used.\n * @param options.heightOffset A custom height offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHeightOffset the default value}\n * will be used.\n * @param options.stickyVerticalOffset A custom offset (in pixels) of the `viewportStickyNorth` positioning function.\n * If not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.stickyVerticalOffset the default value}\n * will be used.\n * @param options.config Additional configuration of the balloon balloon panel view.\n * Currently only {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#withArrow} is supported. Learn more\n * about {@link module:utils/dom/position~PositioningFunction positioning functions}.\n */\nexport function generatePositions(options = {}) {\n    const { sideOffset = BalloonPanelView.arrowSideOffset, heightOffset = BalloonPanelView.arrowHeightOffset, stickyVerticalOffset = BalloonPanelView.stickyVerticalOffset, config } = options;\n    return {\n        // ------- North west\n        northWestArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northWestArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northWestArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northWestArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northWestArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- North\n        northArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- North east\n        northEastArrowSouthWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - sideOffset,\n            name: 'arrow_sw',\n            ...(config && { config })\n        }),\n        northEastArrowSouthMiddleWest: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_smw',\n            ...(config && { config })\n        }),\n        northEastArrowSouth: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - balloonRect.width / 2,\n            name: 'arrow_s',\n            ...(config && { config })\n        }),\n        northEastArrowSouthMiddleEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_sme',\n            ...(config && { config })\n        }),\n        northEastArrowSouthEast: (targetRect, balloonRect) => ({\n            top: getNorthTop(targetRect, balloonRect),\n            left: targetRect.right - balloonRect.width + sideOffset,\n            name: 'arrow_se',\n            ...(config && { config })\n        }),\n        // ------- South west\n        southWestArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southWestArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southWestArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southWestArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southWestArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- South\n        southArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - (balloonRect.width * 0.75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.left + targetRect.width / 2 - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- South east\n        southEastArrowNorthWest: targetRect => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - sideOffset,\n            name: 'arrow_nw',\n            ...(config && { config })\n        }),\n        southEastArrowNorthMiddleWest: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - (balloonRect.width * .25) - sideOffset,\n            name: 'arrow_nmw',\n            ...(config && { config })\n        }),\n        southEastArrowNorth: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - balloonRect.width / 2,\n            name: 'arrow_n',\n            ...(config && { config })\n        }),\n        southEastArrowNorthMiddleEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - (balloonRect.width * .75) + sideOffset,\n            name: 'arrow_nme',\n            ...(config && { config })\n        }),\n        southEastArrowNorthEast: (targetRect, balloonRect) => ({\n            top: getSouthTop(targetRect),\n            left: targetRect.right - balloonRect.width + sideOffset,\n            name: 'arrow_ne',\n            ...(config && { config })\n        }),\n        // ------- West\n        westArrowEast: (targetRect, balloonRect) => ({\n            top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n            left: targetRect.left - balloonRect.width - heightOffset,\n            name: 'arrow_e',\n            ...(config && { config })\n        }),\n        // ------- East\n        eastArrowWest: (targetRect, balloonRect) => ({\n            top: targetRect.top + targetRect.height / 2 - balloonRect.height / 2,\n            left: targetRect.right + heightOffset,\n            name: 'arrow_w',\n            ...(config && { config })\n        }),\n        // ------- Sticky\n        viewportStickyNorth: (targetRect, balloonRect, viewportRect) => {\n            if (!targetRect.getIntersection(viewportRect)) {\n                return null;\n            }\n            return {\n                top: viewportRect.top + stickyVerticalOffset,\n                left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n                name: 'arrowless',\n                config: {\n                    withArrow: false,\n                    ...config\n                }\n            };\n        }\n    };\n    /**\n     * Returns the top coordinate for positions starting with `north*`.\n     *\n     * @param targetRect A rect of the target.\n     * @param balloonRect A rect of the balloon.\n     */\n    function getNorthTop(targetRect, balloonRect) {\n        return targetRect.top - balloonRect.height - heightOffset;\n    }\n    /**\n     * Returns the top coordinate for positions starting with `south*`.\n     *\n     * @param targetRect A rect of the target.\n     */\n    function getSouthTop(targetRect) {\n        return targetRect.bottom + heightOffset;\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./tooltip.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/tooltipmanager\n */\nimport View from './view';\nimport BalloonPanelView, { generatePositions } from './panel/balloon/balloonpanelview';\nimport { DomEmitterMixin, ResizeObserver, first, global, isVisible } from '@ckeditor/ckeditor5-utils';\nimport { isElement, debounce } from 'lodash-es';\nimport '../theme/components/tooltip/tooltip.css';\nconst BALLOON_CLASS = 'ck-tooltip';\n/**\n * A tooltip manager class for the UI of the editor.\n *\n * **Note**: Most likely you do not have to use the `TooltipManager` API listed below in order to display tooltips. Popular\n * {@glink framework/architecture/ui-library UI components} support tooltips out-of-the-box via observable properties\n * (see {@link module:ui/button/buttonview~ButtonView#tooltip} and {@link module:ui/button/buttonview~ButtonView#tooltipPosition}).\n *\n * # Displaying tooltips\n *\n * To display a tooltip, set `data-cke-tooltip-text` attribute on any DOM element:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'My tooltip';\n * ```\n *\n * The tooltip will show up whenever the user moves the mouse over the element or the element gets focus in DOM.\n *\n * # Positioning tooltips\n *\n * To change the position of the tooltip, use the `data-cke-tooltip-position` attribute (`s`, `se`, `sw`, `n`, `e`, or `w`):\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip to the north';\n * domElement.dataset.ckeTooltipPosition = 'n';\n * ```\n *\n * # Disabling tooltips\n *\n * In order to disable the tooltip  temporarily, use the `data-cke-tooltip-disabled` attribute:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Disabled. For now.';\n * domElement.dataset.ckeTooltipDisabled = 'true';\n * ```\n *\n * # Styling tooltips\n *\n * By default, the tooltip has `.ck-tooltip` class and its text inner `.ck-tooltip__text`.\n *\n * If your tooltip requires custom styling, using `data-cke-tooltip-class` attribute will add additional class to the balloon\n * displaying the tooltip:\n *\n * ```ts\n * domElement.dataset.ckeTooltipText = 'Tooltip with a red text';\n * domElement.dataset.ckeTooltipClass = 'my-class';\n * ```\n *\n * ```css\n * .ck.ck-tooltip.my-class { color: red }\n * ```\n *\n * **Note**: This class is a singleton. All editor instances re-use the same instance loaded by\n * {@link module:ui/editorui/editorui~EditorUI} of the first editor.\n */\nexport default class TooltipManager extends DomEmitterMixin() {\n    /**\n     * Creates an instance of the tooltip manager.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Stores the reference to the DOM element the tooltip is attached to. `null` when there's no tooltip\n         * in the UI.\n         */\n        this._currentElementWithTooltip = null;\n        /**\n         * Stores the current tooltip position. `null` when there's no tooltip in the UI.\n         */\n        this._currentTooltipPosition = null;\n        /**\n         * An instance of the resize observer that keeps track on target element visibility,\n         * when it hides the tooltip should also disappear.\n         *\n         * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n         */\n        this._resizeObserver = null;\n        TooltipManager._editors.add(editor);\n        // TooltipManager must be a singleton. Multiple instances would mean multiple tooltips attached\n        // to the same DOM element with data-cke-tooltip-* attributes.\n        if (TooltipManager._instance) {\n            return TooltipManager._instance;\n        }\n        TooltipManager._instance = this;\n        this.tooltipTextView = new View(editor.locale);\n        this.tooltipTextView.set('text', '');\n        this.tooltipTextView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-tooltip__text'\n                ]\n            },\n            children: [\n                {\n                    text: this.tooltipTextView.bindTemplate.to('text')\n                }\n            ]\n        });\n        this.balloonPanelView = new BalloonPanelView(editor.locale);\n        this.balloonPanelView.class = BALLOON_CLASS;\n        this.balloonPanelView.content.add(this.tooltipTextView);\n        this._pinTooltipDebounced = debounce(this._pinTooltip, 600);\n        this.listenTo(global.document, 'mouseenter', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'mouseleave', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'focus', this._onEnterOrFocus.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'blur', this._onLeaveOrBlur.bind(this), { useCapture: true });\n        this.listenTo(global.document, 'scroll', this._onScroll.bind(this), { useCapture: true });\n        // Because this class is a singleton, its only instance is shared across all editors and connects them through the reference.\n        // This causes issues with the ContextWatchdog. When an error is thrown in one editor, the watchdog traverses the references\n        // and (because of shared tooltip manager) figures that the error affects all editors and restarts them all.\n        // This flag, excludes tooltip manager instance from the traversal and brings ContextWatchdog back to normal.\n        // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n        this._watchdogExcluded = true;\n    }\n    /**\n     * Destroys the tooltip manager.\n     *\n     * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.\n     *\n     * @param editor The editor the manager was created for.\n     */\n    destroy(editor) {\n        const editorBodyViewCollection = editor.ui.view && editor.ui.view.body;\n        TooltipManager._editors.delete(editor);\n        this.stopListening(editor.ui);\n        // Prevent the balloon panel from being destroyed in the EditorUI#destroy() cascade. It should be destroyed along\n        // with the last editor only (https://github.com/ckeditor/ckeditor5/issues/12602).\n        if (editorBodyViewCollection && editorBodyViewCollection.has(this.balloonPanelView)) {\n            editorBodyViewCollection.remove(this.balloonPanelView);\n        }\n        if (!TooltipManager._editors.size) {\n            this._unpinTooltip();\n            this.balloonPanelView.destroy();\n            this.stopListening();\n            TooltipManager._instance = null;\n        }\n    }\n    /**\n     * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position\n     * name.\n     *\n     * @param position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).\n     * @returns Positioning functions to be used by the {@link #balloonPanelView}.\n     */\n    static getPositioningFunctions(position) {\n        const defaultPositions = TooltipManager.defaultBalloonPositions;\n        return {\n            // South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.\n            s: [\n                defaultPositions.southArrowNorth,\n                defaultPositions.southArrowNorthEast,\n                defaultPositions.southArrowNorthWest\n            ],\n            n: [defaultPositions.northArrowSouth],\n            e: [defaultPositions.eastArrowWest],\n            w: [defaultPositions.westArrowEast],\n            sw: [defaultPositions.southArrowNorthEast],\n            se: [defaultPositions.southArrowNorthWest]\n        }[position];\n    }\n    /**\n     * Handles displaying tooltips on `mouseenter` and `focus` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onEnterOrFocus(evt, { target }) {\n        const elementWithTooltipAttribute = getDescendantWithTooltip(target);\n        // Abort when there's no descendant needing tooltip.\n        if (!elementWithTooltipAttribute) {\n            return;\n        }\n        // Abort to avoid flashing when, for instance:\n        // * a tooltip is displayed for a focused element, then the same element gets mouseentered,\n        // * a tooltip is displayed for an element via mouseenter, then the focus moves to the same element.\n        if (elementWithTooltipAttribute === this._currentElementWithTooltip) {\n            return;\n        }\n        this._unpinTooltip();\n        this._pinTooltipDebounced(elementWithTooltipAttribute, getTooltipData(elementWithTooltipAttribute));\n    }\n    /**\n     * Handles hiding tooltips on `mouseleave` and `blur` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onLeaveOrBlur(evt, { target, relatedTarget }) {\n        if (evt.name === 'mouseleave') {\n            // Don't act when the event does not concern a DOM element (e.g. a mouseleave out of an entire document),\n            if (!isElement(target)) {\n                return;\n            }\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // For instance, a random mouseleave far away in the page should not unpin the tooltip that was pinned because\n            // of a previous focus. Only leaving the same element should hide the tooltip.\n            if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            const descendantWithTooltip = getDescendantWithTooltip(target);\n            const relatedDescendantWithTooltip = getDescendantWithTooltip(relatedTarget);\n            // Unpin when the mouse was leaving element with a tooltip to a place which does not have or has a different tooltip.\n            // Note that this should happen whether the tooltip is already visible or not, for instance, it could be invisible but queued\n            // (debounced): it should get canceled.\n            if (descendantWithTooltip && descendantWithTooltip !== relatedDescendantWithTooltip) {\n                this._unpinTooltip();\n            }\n        }\n        else {\n            // If a tooltip is currently visible, don't act for a targets other than the one it is attached to.\n            // For instance, a random blur in the web page should not unpin the tooltip that was pinned because of a previous mouseenter.\n            if (this._currentElementWithTooltip && target !== this._currentElementWithTooltip) {\n                return;\n            }\n            // Note that unpinning should happen whether the tooltip is already visible or not, for instance, it could be invisible but\n            // queued (debounced): it should get canceled (e.g. quick focus then quick blur using the keyboard).\n            this._unpinTooltip();\n        }\n    }\n    /**\n     * Handles hiding tooltips on `scroll` in DOM.\n     *\n     * @param evt An object containing information about the fired event.\n     * @param domEvent The DOM event.\n     */\n    _onScroll(evt, { target }) {\n        // No tooltip, no reason to react on scroll.\n        if (!this._currentElementWithTooltip) {\n            return;\n        }\n        // When scrolling a container that has both the balloon and the current element (common ancestor), the balloon can remain\n        // visible (e.g. scrolling ≤body>). Otherwise, to avoid glitches (clipping, lagging) better just hide the tooltip.\n        // Also, don't do anything when scrolling an unrelated DOM element that has nothing to do with the current element and the balloon.\n        if (target.contains(this.balloonPanelView.element) && target.contains(this._currentElementWithTooltip)) {\n            return;\n        }\n        this._unpinTooltip();\n    }\n    /**\n     * Pins the tooltip to a specific DOM element.\n     *\n     * @param options.text Text of the tooltip to display.\n     * @param options.position The position of the tooltip.\n     * @param options.cssClass Additional CSS class of the balloon with the tooltip.\n     */\n    _pinTooltip(targetDomElement, { text, position, cssClass }) {\n        // Use the body collection of the first editor.\n        const bodyViewCollection = first(TooltipManager._editors.values()).ui.view.body;\n        if (!bodyViewCollection.has(this.balloonPanelView)) {\n            bodyViewCollection.add(this.balloonPanelView);\n        }\n        this.tooltipTextView.text = text;\n        this.balloonPanelView.pin({\n            target: targetDomElement,\n            positions: TooltipManager.getPositioningFunctions(position)\n        });\n        this._resizeObserver = new ResizeObserver(targetDomElement, () => {\n            // The ResizeObserver will call its callback when the target element hides and the tooltip\n            // should also disappear (https://github.com/ckeditor/ckeditor5/issues/12492).\n            if (!isVisible(targetDomElement)) {\n                this._unpinTooltip();\n            }\n        });\n        this.balloonPanelView.class = [BALLOON_CLASS, cssClass]\n            .filter(className => className)\n            .join(' ');\n        // Start responding to changes in editor UI or content layout. For instance, when collaborators change content\n        // and a contextual toolbar attached to a content starts to move (and so should move the tooltip).\n        // Note: Using low priority to let other listeners that position contextual toolbars etc. to react first.\n        for (const editor of TooltipManager._editors) {\n            this.listenTo(editor.ui, 'update', this._updateTooltipPosition.bind(this), { priority: 'low' });\n        }\n        this._currentElementWithTooltip = targetDomElement;\n        this._currentTooltipPosition = position;\n    }\n    /**\n     * Unpins the tooltip and cancels all queued pinning.\n     */\n    _unpinTooltip() {\n        this._pinTooltipDebounced.cancel();\n        this.balloonPanelView.unpin();\n        for (const editor of TooltipManager._editors) {\n            this.stopListening(editor.ui, 'update');\n        }\n        this._currentElementWithTooltip = null;\n        this._currentTooltipPosition = null;\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Updates the position of the tooltip so it stays in sync with the element it is pinned to.\n     *\n     * Hides the tooltip when the element is no longer visible in DOM.\n     */\n    _updateTooltipPosition() {\n        // This could happen if the tooltip was attached somewhere in a contextual content toolbar and the toolbar\n        // disappeared (e.g. removed an image).\n        if (!isVisible(this._currentElementWithTooltip)) {\n            this._unpinTooltip();\n            return;\n        }\n        this.balloonPanelView.pin({\n            target: this._currentElementWithTooltip,\n            positions: TooltipManager.getPositioningFunctions(this._currentTooltipPosition)\n        });\n    }\n}\n/**\n * A set of default {@link module:utils/dom/position~PositioningFunction positioning functions} used by the `TooltipManager`\n * to pin tooltips in different positions.\n */\nTooltipManager.defaultBalloonPositions = generatePositions({\n    heightOffset: 5,\n    sideOffset: 13\n});\n/**\n * A set of editors the single tooltip manager instance must listen to.\n * This is mostly to handle `EditorUI#update` listeners from individual editors.\n */\nTooltipManager._editors = new Set();\n/**\n * A reference to the `TooltipManager` instance. The class is a singleton and as such,\n * successive attempts at creating instances should return this instance.\n */\nTooltipManager._instance = null;\nfunction getDescendantWithTooltip(element) {\n    if (!isElement(element)) {\n        return null;\n    }\n    return element.closest('[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])');\n}\nfunction getTooltipData(element) {\n    return {\n        text: element.dataset.ckeTooltipText,\n        position: (element.dataset.ckeTooltipPosition || 's'),\n        cssClass: element.dataset.ckeTooltipClass || ''\n    };\n}\n","import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Rect, DomEmitterMixin, findClosestScrollableAncestor, verifyLicense } from '@ckeditor/ckeditor5-utils';\nimport BalloonPanelView from '../panel/balloon/balloonpanelview';\nimport IconView from '../icon/iconview';\nimport View from '../view';\nimport { throttle } from 'lodash-es';\nimport poweredByIcon from '../../theme/icons/project-logo.svg';\nconst ICON_WIDTH = 53;\nconst ICON_HEIGHT = 10;\n// ⚠ Note, whenever changing the threshold, make sure to update the docs/support/managing-ckeditor-logo.md docs\n// as this information is also mentioned there ⚠.\nconst NARROW_ROOT_HEIGHT_THRESHOLD = 50;\nconst NARROW_ROOT_WIDTH_THRESHOLD = 350;\nconst DEFAULT_LABEL = 'Powered by';\nconst OFF_THE_SCREEN_POSITION = {\n    top: -99999,\n    left: -99999,\n    name: 'invalid',\n    config: {\n        withArrow: false\n    }\n};\n/**\n * A helper that enables the \"powered by\" feature in the editor and renders a link to the project's\n * webpage next to the bottom of the editable element (editor root, source editing area, etc.) when the editor is focused.\n *\n * @private\n */\nexport default class PoweredBy extends DomEmitterMixin() {\n    /**\n     * Creates a \"powered by\" helper for a given editor. The feature is initialized on Editor#ready\n     * event.\n     *\n     * @param editor\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._balloonView = null;\n        this._lastFocusedEditableElement = null;\n        this._showBalloonThrottled = throttle(this._showBalloon.bind(this), 50, { leading: true });\n        editor.on('ready', this._handleEditorReady.bind(this));\n    }\n    /**\n     * Destroys the \"powered by\" helper along with its view.\n     */\n    destroy() {\n        const balloon = this._balloonView;\n        if (balloon) {\n            // Balloon gets destroyed by the body collection.\n            // The powered by view gets destroyed by the balloon.\n            balloon.unpin();\n            this._balloonView = null;\n        }\n        this._showBalloonThrottled.cancel();\n        this.stopListening();\n    }\n    /**\n     * Enables \"powered by\" label once the editor (ui) is ready.\n     */\n    _handleEditorReady() {\n        const editor = this.editor;\n        const forceVisible = !!editor.config.get('ui.poweredBy.forceVisible');\n        /* istanbul ignore next -- @preserve */\n        if (!forceVisible && verifyLicense(editor.config.get('licenseKey')) === 'VALID') {\n            return;\n        }\n        // No view means no body collection to append the powered by balloon to.\n        if (!editor.ui.view) {\n            return;\n        }\n        editor.ui.focusTracker.on('change:isFocused', (evt, data, isFocused) => {\n            this._updateLastFocusedEditableElement();\n            if (isFocused) {\n                this._showBalloon();\n            }\n            else {\n                this._hideBalloon();\n            }\n        });\n        editor.ui.focusTracker.on('change:focusedElement', (evt, data, focusedElement) => {\n            this._updateLastFocusedEditableElement();\n            if (focusedElement) {\n                this._showBalloon();\n            }\n        });\n        editor.ui.on('update', () => {\n            this._showBalloonThrottled();\n        });\n    }\n    /**\n     * Creates an instance of the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView balloon panel}\n     * with the \"powered by\" view inside ready for positioning.\n     */\n    _createBalloonView() {\n        const editor = this.editor;\n        const balloon = this._balloonView = new BalloonPanelView();\n        const poweredByConfig = getNormalizedConfig(editor);\n        const view = new PoweredByView(editor.locale, poweredByConfig.label);\n        balloon.content.add(view);\n        balloon.set({\n            class: 'ck-powered-by-balloon'\n        });\n        editor.ui.view.body.add(balloon);\n        editor.ui.focusTracker.add(balloon.element);\n        this._balloonView = balloon;\n    }\n    /**\n     * Attempts to display the balloon with the \"powered by\" view.\n     */\n    _showBalloon() {\n        if (!this._lastFocusedEditableElement) {\n            return;\n        }\n        const attachOptions = getBalloonAttachOptions(this.editor, this._lastFocusedEditableElement);\n        if (attachOptions) {\n            if (!this._balloonView) {\n                this._createBalloonView();\n            }\n            this._balloonView.pin(attachOptions);\n        }\n    }\n    /**\n     * Hides the \"powered by\" balloon if already visible.\n     */\n    _hideBalloon() {\n        if (this._balloonView) {\n            this._balloonView.unpin();\n        }\n    }\n    /**\n     * Updates the {@link #_lastFocusedEditableElement} based on the state of the global focus tracker.\n     */\n    _updateLastFocusedEditableElement() {\n        const editor = this.editor;\n        const isFocused = editor.ui.focusTracker.isFocused;\n        const focusedElement = editor.ui.focusTracker.focusedElement;\n        if (!isFocused || !focusedElement) {\n            this._lastFocusedEditableElement = null;\n            return;\n        }\n        const editableEditorElements = Array.from(editor.ui.getEditableElementsNames()).map(name => {\n            return editor.ui.getEditableElement(name);\n        });\n        if (editableEditorElements.includes(focusedElement)) {\n            this._lastFocusedEditableElement = focusedElement;\n        }\n        else {\n            // If it's none of the editable element, then the focus is somewhere in the UI. Let's display powered by\n            // over the first element then.\n            this._lastFocusedEditableElement = editableEditorElements[0];\n        }\n    }\n}\n/**\n * A view displaying a \"powered by\" label and project logo wrapped in a link.\n */\nclass PoweredByView extends View {\n    /**\n     * Created an instance of the \"powered by\" view.\n     *\n     * @param locale The localization services instance.\n     * @param label The label text.\n     */\n    constructor(locale, label) {\n        super(locale);\n        const iconView = new IconView();\n        const bind = this.bindTemplate;\n        iconView.set({\n            content: poweredByIcon,\n            isColorInherited: false\n        });\n        iconView.extendTemplate({\n            attributes: {\n                style: {\n                    width: ICON_WIDTH + 'px',\n                    height: ICON_HEIGHT + 'px'\n                }\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck', 'ck-powered-by'],\n                'aria-hidden': true\n            },\n            children: [\n                {\n                    tag: 'a',\n                    attributes: {\n                        href: 'https://ckeditor.com/?utm_source=ckeditor&' +\n                            'utm_medium=referral&utm_campaign=701Dn000000hVgmIAE_powered_by_ckeditor_logo',\n                        target: '_blank',\n                        tabindex: '-1'\n                    },\n                    children: [\n                        ...label ? [\n                            {\n                                tag: 'span',\n                                attributes: {\n                                    class: ['ck', 'ck-powered-by__label']\n                                },\n                                children: [label]\n                            }\n                        ] : [],\n                        iconView\n                    ],\n                    on: {\n                        dragstart: bind.to(evt => evt.preventDefault())\n                    }\n                }\n            ]\n        });\n    }\n}\nfunction getBalloonAttachOptions(editor, focusedEditableElement) {\n    const poweredByConfig = getNormalizedConfig(editor);\n    const positioningFunction = poweredByConfig.side === 'right' ?\n        getLowerRightCornerPosition(focusedEditableElement, poweredByConfig) :\n        getLowerLeftCornerPosition(focusedEditableElement, poweredByConfig);\n    return {\n        target: focusedEditableElement,\n        positions: [positioningFunction]\n    };\n}\nfunction getLowerRightCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, (rootRect, balloonRect) => {\n        return rootRect.left + rootRect.width - balloonRect.width - config.horizontalOffset;\n    });\n}\nfunction getLowerLeftCornerPosition(focusedEditableElement, config) {\n    return getLowerCornerPosition(focusedEditableElement, config, rootRect => rootRect.left + config.horizontalOffset);\n}\nfunction getLowerCornerPosition(focusedEditableElement, config, getBalloonLeft) {\n    return (editableElementRect, balloonRect) => {\n        const visibleEditableElementRect = editableElementRect.getVisible();\n        // Root cropped by ancestors.\n        if (!visibleEditableElementRect) {\n            return OFF_THE_SCREEN_POSITION;\n        }\n        if (editableElementRect.width < NARROW_ROOT_WIDTH_THRESHOLD || editableElementRect.height < NARROW_ROOT_HEIGHT_THRESHOLD) {\n            return OFF_THE_SCREEN_POSITION;\n        }\n        let balloonTop;\n        if (config.position === 'inside') {\n            balloonTop = editableElementRect.bottom - balloonRect.height;\n        }\n        else {\n            balloonTop = editableElementRect.bottom - balloonRect.height / 2;\n        }\n        balloonTop -= config.verticalOffset;\n        const balloonLeft = getBalloonLeft(editableElementRect, balloonRect);\n        if (config.position === 'inside') {\n            const newBalloonRect = balloonRect.clone().moveTo(balloonLeft, balloonTop);\n            // The watermark cannot be positioned in this corner because the corner is not quite visible.\n            if (newBalloonRect.getIntersectionArea(visibleEditableElementRect) < newBalloonRect.getArea()) {\n                return OFF_THE_SCREEN_POSITION;\n            }\n        }\n        else {\n            const firstScrollableEditableElementAncestor = findClosestScrollableAncestor(focusedEditableElement);\n            if (firstScrollableEditableElementAncestor) {\n                const firstScrollableEditableElementAncestorRect = new Rect(firstScrollableEditableElementAncestor);\n                // The watermark cannot be positioned in this corner because the corner is \"not visible enough\".\n                if (visibleEditableElementRect.bottom + balloonRect.height / 2 > firstScrollableEditableElementAncestorRect.bottom) {\n                    return OFF_THE_SCREEN_POSITION;\n                }\n            }\n        }\n        return {\n            top: balloonTop,\n            left: balloonLeft,\n            name: `position_${config.position}-side_${config.side}`,\n            config: {\n                withArrow: false\n            }\n        };\n    };\n}\nfunction getNormalizedConfig(editor) {\n    const userConfig = editor.config.get('ui.poweredBy');\n    const position = userConfig && userConfig.position || 'border';\n    return {\n        position,\n        label: DEFAULT_LABEL,\n        verticalOffset: position === 'inside' ? 5 : 0,\n        horizontalOffset: 5,\n        side: editor.locale.contentLanguageDirection === 'ltr' ? 'right' : 'left',\n        ...userConfig\n    };\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/verifylicense\n */\nimport { releaseDate } from './version';\n/**\n * Checks whether the given string contains information that allows you to verify the license status.\n *\n * @param token The string to check.\n * @returns String that represents the state of given `token` parameter.\n */\nexport default function verifyLicense(token) {\n    // This function implements naive and partial license key check mechanism,\n    // used only to decide whether to show or hide the \"Powered by CKEditor\" logo.\n    //\n    // You can read the reasoning behind showing the logo to unlicensed (GPL) users\n    // in this thread: https://github.com/ckeditor/ckeditor5/issues/14082.\n    //\n    // We firmly believe in the values behind creating open-source software, even when that\n    // means keeping the license verification logic open for everyone to see.\n    //\n    // Please keep this code intact. Thank you for your understanding.\n    function oldTokenCheck(token) {\n        if (token.length >= 40 && token.length <= 255) {\n            return 'VALID';\n        }\n        else {\n            return 'INVALID';\n        }\n    }\n    // TODO: issue ci#3175\n    if (!token) {\n        return 'INVALID';\n    }\n    let decryptedData = '';\n    try {\n        decryptedData = atob(token);\n    }\n    catch (e) {\n        return 'INVALID';\n    }\n    const splittedDecryptedData = decryptedData.split('-');\n    const firstElement = splittedDecryptedData[0];\n    const secondElement = splittedDecryptedData[1];\n    if (!secondElement) {\n        return oldTokenCheck(token);\n    }\n    try {\n        atob(secondElement);\n    }\n    catch (e) {\n        try {\n            atob(firstElement);\n            if (!atob(firstElement).length) {\n                return oldTokenCheck(token);\n            }\n        }\n        catch (e) {\n            return oldTokenCheck(token);\n        }\n    }\n    if (firstElement.length < 40 || firstElement.length > 255) {\n        return 'INVALID';\n    }\n    let decryptedSecondElement = '';\n    try {\n        atob(firstElement);\n        decryptedSecondElement = atob(secondElement);\n    }\n    catch (e) {\n        return 'INVALID';\n    }\n    if (decryptedSecondElement.length !== 8) {\n        return 'INVALID';\n    }\n    const year = Number(decryptedSecondElement.substring(0, 4));\n    const monthIndex = Number(decryptedSecondElement.substring(4, 6)) - 1;\n    const day = Number(decryptedSecondElement.substring(6, 8));\n    const date = new Date(year, monthIndex, day);\n    if (date < releaseDate || isNaN(Number(date))) {\n        return 'INVALID';\n    }\n    return 'VALID';\n}\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"53\\\" height=\\\"10\\\" viewBox=\\\"0 0 53 10\\\"><path fill=\\\"#1C2331\\\" d=\\\"M31.724 1.492a15.139 15.139 0 0 0 .045 1.16 2.434 2.434 0 0 0-.687-.34 3.68 3.68 0 0 0-1.103-.166 2.332 2.332 0 0 0-1.14.255 1.549 1.549 0 0 0-.686.87c-.15.41-.225.98-.225 1.712 0 .939.148 1.659.444 2.161.297.503.792.754 1.487.754.452.015.9-.094 1.294-.316.296-.174.557-.4.771-.669l.14.852h1.282V.007h-1.623v1.485ZM31 6.496a1.77 1.77 0 0 1-.494.061.964.964 0 0 1-.521-.127.758.758 0 0 1-.296-.466 3.984 3.984 0 0 1-.093-.992 4.208 4.208 0 0 1 .098-1.052.753.753 0 0 1 .307-.477 1.08 1.08 0 0 1 .55-.122c.233-.004.466.026.69.089l.483.144v2.553c-.11.076-.213.143-.307.2a1.73 1.73 0 0 1-.417.189ZM35.68 0l-.702.004c-.322.002-.482.168-.48.497l.004.581c.002.33.164.493.486.49l.702-.004c.322-.002.481-.167.48-.496L36.165.49c-.002-.33-.164-.493-.486-.491ZM36.145 2.313l-1.612.01.034 5.482 1.613-.01-.035-5.482ZM39.623.79 37.989.8 38 2.306l-.946.056.006 1.009.949-.006.024 2.983c.003.476.143.844.419 1.106.275.26.658.39 1.148.387.132 0 .293-.01.483-.03.19-.02.38-.046.57-.08.163-.028.324-.068.482-.119l-.183-1.095-.702.004a.664.664 0 0 1-.456-.123.553.553 0 0 1-.14-.422l-.016-2.621 1.513-.01-.006-1.064-1.514.01-.01-1.503ZM46.226 2.388c-.41-.184-.956-.274-1.636-.27-.673.004-1.215.101-1.627.29-.402.179-.72.505-.888.91-.18.419-.268.979-.264 1.68.004.688.1 1.24.285 1.655.172.404.495.724.9.894.414.18.957.268 1.63.264.68-.004 1.224-.099 1.632-.284.4-.176.714-.501.878-.905.176-.418.263-.971.258-1.658-.004-.702-.097-1.261-.28-1.677a1.696 1.696 0 0 0-.888-.9Zm-.613 3.607a.77.77 0 0 1-.337.501 1.649 1.649 0 0 1-1.317.009.776.776 0 0 1-.343-.497 4.066 4.066 0 0 1-.105-1.02 4.136 4.136 0 0 1 .092-1.03.786.786 0 0 1 .337-.507 1.59 1.59 0 0 1 1.316-.008.79.79 0 0 1 .344.502c.078.337.113.683.105 1.03.012.343-.019.685-.092 1.02ZM52.114 2.07a2.67 2.67 0 0 0-1.128.278c-.39.191-.752.437-1.072.73l-.157-.846-1.273.008.036 5.572 1.623-.01-.024-3.78c.35-.124.646-.22.887-.286.26-.075.53-.114.8-.118l.45-.003.144-1.546-.286.001ZM22.083 7.426l-1.576-2.532a2.137 2.137 0 0 0-.172-.253 1.95 1.95 0 0 0-.304-.29.138.138 0 0 1 .042-.04 1.7 1.7 0 0 0 .328-.374l1.75-2.71c.01-.015.025-.028.024-.048-.01-.01-.021-.007-.031-.007L20.49 1.17a.078.078 0 0 0-.075.045l-.868 1.384c-.23.366-.46.732-.688 1.099a.108.108 0 0 1-.112.06c-.098-.005-.196-.001-.294-.002-.018 0-.038.006-.055-.007.002-.02.002-.039.005-.058a4.6 4.6 0 0 0 .046-.701V1.203c0-.02-.009-.032-.03-.03h-.033L16.93 1.17c-.084 0-.073-.01-.073.076v6.491c-.001.018.006.028.025.027h1.494c.083 0 .072.007.072-.071v-2.19c0-.055-.003-.11-.004-.166a3.366 3.366 0 0 0-.05-.417h.06c.104 0 .209.002.313-.002a.082.082 0 0 1 .084.05c.535.913 1.07 1.824 1.607 2.736a.104.104 0 0 0 .103.062c.554-.003 1.107-.002 1.66-.002l.069-.003-.019-.032-.188-.304ZM27.112 6.555c-.005-.08-.004-.08-.082-.08h-2.414c-.053 0-.106-.003-.159-.011a.279.279 0 0 1-.246-.209.558.558 0 0 1-.022-.15c0-.382 0-.762-.002-1.143 0-.032.007-.049.042-.044h2.504c.029.003.037-.012.034-.038V3.814c0-.089.013-.078-.076-.078h-2.44c-.07 0-.062.003-.062-.06v-.837c0-.047.004-.093.013-.14a.283.283 0 0 1 .241-.246.717.717 0 0 1 .146-.011h2.484c.024.002.035-.009.036-.033l.003-.038.03-.496c.01-.183.024-.365.034-.548.005-.085.003-.087-.082-.094-.218-.018-.437-.038-.655-.05a17.845 17.845 0 0 0-.657-.026 72.994 72.994 0 0 0-1.756-.016 1.7 1.7 0 0 0-.471.064 1.286 1.286 0 0 0-.817.655c-.099.196-.149.413-.145.633v3.875c0 .072.003.144.011.216a1.27 1.27 0 0 0 .711 1.029c.228.113.48.167.734.158.757-.005 1.515.002 2.272-.042.274-.016.548-.034.82-.053.03-.002.043-.008.04-.041-.008-.104-.012-.208-.019-.312a69.964 69.964 0 0 1-.05-.768ZM16.14 7.415l-.127-1.075c-.004-.03-.014-.04-.044-.037a13.125 13.125 0 0 1-.998.073c-.336.01-.672.02-1.008.016-.116-.001-.233-.014-.347-.039a.746.746 0 0 1-.45-.262c-.075-.1-.132-.211-.167-.33a3.324 3.324 0 0 1-.126-.773 9.113 9.113 0 0 1-.015-.749c0-.285.022-.57.065-.852.023-.158.066-.312.127-.46a.728.728 0 0 1 .518-.443 1.64 1.64 0 0 1 .397-.048c.628-.001 1.255.003 1.882.05.022.001.033-.006.036-.026l.003-.031.06-.55c.019-.177.036-.355.057-.532.004-.034-.005-.046-.04-.056a5.595 5.595 0 0 0-1.213-.21 10.783 10.783 0 0 0-.708-.02c-.24-.003-.48.01-.719.041a3.477 3.477 0 0 0-.625.14 1.912 1.912 0 0 0-.807.497c-.185.2-.33.433-.424.688a4.311 4.311 0 0 0-.24 1.096c-.031.286-.045.572-.042.86-.006.43.024.86.091 1.286.04.25.104.497.193.734.098.279.26.53.473.734.214.205.473.358.756.446.344.11.702.17 1.063.177a8.505 8.505 0 0 0 1.578-.083 6.11 6.11 0 0 0 .766-.18c.03-.008.047-.023.037-.057a.157.157 0 0 1-.003-.025Z\\\"/><path fill=\\\"#AFE229\\\" d=\\\"M6.016 6.69a1.592 1.592 0 0 0-.614.21c-.23.132-.422.32-.56.546-.044.072-.287.539-.287.539l-.836 1.528.009.006c.038.025.08.046.123.063.127.046.26.07.395.073.505.023 1.011-.007 1.517-.003.29.009.58.002.869-.022a.886.886 0 0 0 .395-.116.962.962 0 0 0 .312-.286c.056-.083.114-.163.164-.249.24-.408.48-.816.718-1.226.075-.128.148-.257.222-.386l.112-.192a1.07 1.07 0 0 0 .153-.518l-1.304.023s-1.258-.005-1.388.01Z\\\"/><path fill=\\\"#771BFF\\\" d=\\\"m2.848 9.044.76-1.39.184-.352c-.124-.067-.245-.14-.367-.21-.346-.204-.706-.384-1.045-.6a.984.984 0 0 1-.244-.207c-.108-.134-.136-.294-.144-.46-.021-.409-.002-.818-.009-1.227-.003-.195 0-.39.003-.585.004-.322.153-.553.427-.713l.833-.488c.22-.13.44-.257.662-.385.05-.029.105-.052.158-.077.272-.128.519-.047.76.085l.044.028c.123.06.242.125.358.196.318.178.635.357.952.537.095.056.187.117.275.184.194.144.254.35.266.578.016.284.007.569.006.853-.001.28.004.558 0 .838.592-.003 1.259 0 1.259 0l.723-.013c-.003-.292-.007-.584-.007-.876 0-.524.015-1.048-.016-1.571-.024-.42-.135-.8-.492-1.067a5.02 5.02 0 0 0-.506-.339A400.52 400.52 0 0 0 5.94.787C5.722.664 5.513.524 5.282.423 5.255.406 5.228.388 5.2.373 4.758.126 4.305-.026 3.807.21c-.097.046-.197.087-.29.14A699.896 699.896 0 0 0 .783 1.948c-.501.294-.773.717-.778 1.31-.004.36-.009.718-.001 1.077.016.754-.017 1.508.024 2.261.016.304.07.6.269.848.127.15.279.28.448.382.622.4 1.283.734 1.92 1.11l.183.109Z\\\"/></svg>\\n\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module utils/dom/findclosestscrollableancestor\n */\nimport global from './global';\n/**\n * Returns the closest scrollable ancestor of a DOM element.\n *\n * @param domElement DOM element.\n * @returns First ancestor of `domElement` that is scrollable or null if such ancestor doesn't exist.\n */\nexport default function findClosestScrollableAncestor(domElement) {\n    let element = domElement.parentElement;\n    if (!element) {\n        return null;\n    }\n    while (element.tagName != 'BODY') {\n        const overflow = element.style.overflowY || global.window.getComputedStyle(element).overflowY;\n        if (overflow === 'auto' || overflow === 'scroll') {\n            break;\n        }\n        element = element.parentElement;\n        if (!element) {\n            return null;\n        }\n    }\n    return element;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editorui\n */\n/* globals console */\nimport ComponentFactory from '../componentfactory';\nimport TooltipManager from '../tooltipmanager';\nimport PoweredBy from './poweredby';\nimport { ObservableMixin, isVisible, FocusTracker } from '@ckeditor/ckeditor5-utils';\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n */\nexport default class EditorUI extends ObservableMixin() {\n    /**\n     * Creates an instance of the editor UI class.\n     *\n     * @param editor The editor instance.\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Indicates the UI is ready. Set `true` after {@link #event:ready} event is fired.\n         *\n         * @readonly\n         * @default false\n         */\n        this.isReady = false;\n        /**\n         * Stores all editable elements used by the editor instance.\n         */\n        this._editableElementsMap = new Map();\n        /**\n         * All available & focusable toolbars.\n         */\n        this._focusableToolbarDefinitions = [];\n        const editingView = editor.editing.view;\n        this.editor = editor;\n        this.componentFactory = new ComponentFactory(editor);\n        this.focusTracker = new FocusTracker();\n        this.tooltipManager = new TooltipManager(editor);\n        this.poweredBy = new PoweredBy(editor);\n        this.set('viewportOffset', this._readViewportOffsetFromConfig());\n        this.once('ready', () => {\n            this.isReady = true;\n        });\n        // Informs UI components that should be refreshed after layout change.\n        this.listenTo(editingView.document, 'layoutChanged', this.update.bind(this));\n        this.listenTo(editingView, 'scrollToTheSelection', this._handleScrollToTheSelection.bind(this));\n        this._initFocusTracking();\n    }\n    /**\n     * The main (outermost) DOM element of the editor UI.\n     *\n     * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n     * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n     * it is the editable element itself (as there is no other wrapper). However, in\n     * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n     * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n     *\n     * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n     * considers to be its main DOM element.\n     */\n    get element() {\n        return null;\n    }\n    /**\n     * Fires the {@link module:ui/editorui/editorui~EditorUI#event:update `update`} event.\n     *\n     * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n     * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n     */\n    update() {\n        this.fire('update');\n    }\n    /**\n     * Destroys the UI.\n     */\n    destroy() {\n        this.stopListening();\n        this.focusTracker.destroy();\n        this.tooltipManager.destroy(this.editor);\n        this.poweredBy.destroy();\n        // Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n        for (const domElement of this._editableElementsMap.values()) {\n            domElement.ckeditorInstance = null;\n            this.editor.keystrokes.stopListening(domElement);\n        }\n        this._editableElementsMap = new Map();\n        this._focusableToolbarDefinitions = [];\n    }\n    /**\n     * Stores the native DOM editable element used by the editor under a unique name.\n     *\n     * Also, registers the element in the editor to maintain the accessibility of the UI. When the user is editing text in a focusable\n     * editable area, they can use the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke to navigate over editor toolbars. See {@link #addToolbar}.\n     *\n     * @param rootName The unique name of the editable element.\n     * @param domElement The native DOM editable element.\n     */\n    setEditableElement(rootName, domElement) {\n        this._editableElementsMap.set(rootName, domElement);\n        // Put a reference to the CKEditor instance in the editable native DOM element.\n        // It helps 3rd–party software (browser extensions, other libraries) access and recognize\n        // CKEditor 5 instances (editing roots) and use their API (there is no global editor\n        // instance registry).\n        if (!domElement.ckeditorInstance) {\n            domElement.ckeditorInstance = this.editor;\n        }\n        // Register the element, so it becomes available for Alt+F10 and Esc navigation.\n        this.focusTracker.add(domElement);\n        const setUpKeystrokeHandler = () => {\n            // The editing view of the editor is already listening to keystrokes from DOM roots (see: KeyObserver).\n            // Do not duplicate listeners.\n            if (this.editor.editing.view.getDomRoot(rootName)) {\n                return;\n            }\n            this.editor.keystrokes.listenTo(domElement);\n        };\n        // For editable elements set by features after EditorUI is ready (e.g. source editing).\n        if (this.isReady) {\n            setUpKeystrokeHandler();\n        }\n        // For editable elements set while the editor is being created (e.g. DOM roots).\n        else {\n            this.once('ready', setUpKeystrokeHandler);\n        }\n    }\n    /**\n     * Removes the editable from the editor UI. Removes all handlers added by {@link #setEditableElement}.\n     *\n     * @param rootName The name of the editable element to remove.\n     */\n    removeEditableElement(rootName) {\n        const domElement = this._editableElementsMap.get(rootName);\n        if (!domElement) {\n            return;\n        }\n        this._editableElementsMap.delete(rootName);\n        this.editor.keystrokes.stopListening(domElement);\n        this.focusTracker.remove(domElement);\n        domElement.ckeditorInstance = null;\n    }\n    /**\n     * Returns the editable editor element with the given name or null if editable does not exist.\n     *\n     * @param rootName The editable name.\n     */\n    getEditableElement(rootName = 'main') {\n        return this._editableElementsMap.get(rootName);\n    }\n    /**\n     * Returns array of names of all editor editable elements.\n     */\n    getEditableElementsNames() {\n        return this._editableElementsMap.keys();\n    }\n    /**\n     * Adds a toolbar to the editor UI. Used primarily to maintain the accessibility of the UI.\n     *\n     * Focusable toolbars can be accessed (focused) by users by pressing the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke.\n     * Successive keystroke presses navigate over available toolbars.\n     *\n     * @param toolbarView A instance of the toolbar to be registered.\n     */\n    addToolbar(toolbarView, options = {}) {\n        if (toolbarView.isRendered) {\n            this.focusTracker.add(toolbarView.element);\n            this.editor.keystrokes.listenTo(toolbarView.element);\n        }\n        else {\n            toolbarView.once('render', () => {\n                this.focusTracker.add(toolbarView.element);\n                this.editor.keystrokes.listenTo(toolbarView.element);\n            });\n        }\n        this._focusableToolbarDefinitions.push({ toolbarView, options });\n    }\n    /**\n     * Stores all editable elements used by the editor instance.\n     *\n     * @deprecated\n     */\n    get _editableElements() {\n        /**\n         * The {@link module:ui/editorui/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n         * deprecated and will be removed in the near future. Please use\n         * {@link module:ui/editorui/editorui~EditorUI#setEditableElement `setEditableElement()`} and\n         * {@link module:ui/editorui/editorui~EditorUI#getEditableElement `getEditableElement()`} methods instead.\n         *\n         * @error editor-ui-deprecated-editable-elements\n         * @param editorUI Editor UI instance the deprecated property belongs to.\n         */\n        console.warn('editor-ui-deprecated-editable-elements: ' +\n            'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.', { editorUI: this });\n        return this._editableElementsMap;\n    }\n    /**\n     * Returns viewport offsets object:\n     *\n     * ```js\n     * {\n     * \ttop: Number,\n     * \tright: Number,\n     * \tbottom: Number,\n     * \tleft: Number\n     * }\n     * ```\n     *\n     * Only top property is currently supported.\n     */\n    _readViewportOffsetFromConfig() {\n        const editor = this.editor;\n        const viewportOffsetConfig = editor.config.get('ui.viewportOffset');\n        if (viewportOffsetConfig) {\n            return viewportOffsetConfig;\n        }\n        // Not present in EditorConfig type, because it's legacy. Hence the `as` expression.\n        const legacyOffsetConfig = editor.config.get('toolbar.viewportTopOffset');\n        // Fall back to deprecated toolbar config.\n        if (legacyOffsetConfig) {\n            /**\n             * The {@link module:core/editor/editorconfig~EditorConfig#toolbar `EditorConfig#toolbar.viewportTopOffset`}\n             * property has been deprecated and will be removed in the near future. Please use\n             * {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset`} instead.\n             *\n             * @error editor-ui-deprecated-viewport-offset-config\n             */\n            console.warn('editor-ui-deprecated-viewport-offset-config: ' +\n                'The `toolbar.vieportTopOffset` configuration option is deprecated. ' +\n                'It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead.');\n            return { top: legacyOffsetConfig };\n        }\n        // More keys to come in the future.\n        return { top: 0 };\n    }\n    /**\n     * Starts listening for <kbd>Alt</kbd> + <kbd>F10</kbd> and <kbd>Esc</kbd> keystrokes in the context of focusable\n     * {@link #setEditableElement editable elements} and {@link #addToolbar toolbars}\n     * to allow users navigate across the UI.\n     */\n    _initFocusTracking() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        let lastFocusedForeignElement;\n        let candidateDefinitions;\n        // Focus the next focusable toolbar on <kbd>Alt</kbd> + <kbd>F10</kbd>.\n        editor.keystrokes.set('Alt+F10', (data, cancel) => {\n            const focusedElement = this.focusTracker.focusedElement;\n            // Focus moved out of a DOM element that\n            // * is not a toolbar,\n            // * does not belong to the editing view (e.g. source editing).\n            if (Array.from(this._editableElementsMap.values()).includes(focusedElement) &&\n                !Array.from(editingView.domRoots.values()).includes(focusedElement)) {\n                lastFocusedForeignElement = focusedElement;\n            }\n            const currentFocusedToolbarDefinition = this._getCurrentFocusedToolbarDefinition();\n            // * When focusing a toolbar for the first time, set the array of definitions for successive presses of Alt+F10.\n            // This ensures, the navigation works always the same and no pair of toolbars takes over\n            // (e.g. image and table toolbars when a selected image is inside a cell).\n            // * It could be that the focus went to the toolbar by clicking a toolbar item (e.g. a dropdown). In this case,\n            // there were no candidates so they must be obtained (#12339).\n            if (!currentFocusedToolbarDefinition || !candidateDefinitions) {\n                candidateDefinitions = this._getFocusableCandidateToolbarDefinitions();\n            }\n            // In a single Alt+F10 press, check all candidates but if none were focused, don't go any further.\n            // This prevents an infinite loop.\n            for (let i = 0; i < candidateDefinitions.length; i++) {\n                const candidateDefinition = candidateDefinitions.shift();\n                // Put the first definition to the back of the array. This allows circular navigation over all toolbars\n                // on successive presses of Alt+F10.\n                candidateDefinitions.push(candidateDefinition);\n                // Don't focus the same toolbar again. If you did, this would move focus from the nth focused toolbar item back to the\n                // first item as per ToolbarView#focus() if the user navigated inside the toolbar.\n                if (candidateDefinition !== currentFocusedToolbarDefinition &&\n                    this._focusFocusableCandidateToolbar(candidateDefinition)) {\n                    // Clean up after a current visible toolbar when switching to the next one.\n                    if (currentFocusedToolbarDefinition && currentFocusedToolbarDefinition.options.afterBlur) {\n                        currentFocusedToolbarDefinition.options.afterBlur();\n                    }\n                    break;\n                }\n            }\n            cancel();\n        });\n        // Blur the focused toolbar on <kbd>Esc</kbd> and bring the focus back to its origin.\n        editor.keystrokes.set('Esc', (data, cancel) => {\n            const focusedToolbarDef = this._getCurrentFocusedToolbarDefinition();\n            if (!focusedToolbarDef) {\n                return;\n            }\n            // Bring focus back to where it came from before focusing the toolbar:\n            // 1. If it came from outside the engine view (e.g. source editing), move it there.\n            if (lastFocusedForeignElement) {\n                lastFocusedForeignElement.focus();\n                lastFocusedForeignElement = null;\n            }\n            // 2. There are two possibilities left:\n            //   2.1. It could be that the focus went from an editable element in the view (root or nested).\n            //   2.2. It could be the focus went straight to the toolbar before even focusing the editing area.\n            // In either case, just focus the view editing. The focus will land where it belongs.\n            else {\n                editor.editing.view.focus();\n            }\n            // Clean up after the toolbar if there is anything to do there.\n            if (focusedToolbarDef.options.afterBlur) {\n                focusedToolbarDef.options.afterBlur();\n            }\n            cancel();\n        });\n    }\n    /**\n     * Returns definitions of toolbars that could potentially be focused, sorted by their importance for the user.\n     *\n     * Focusable toolbars candidates are either:\n     * * already visible,\n     * * have `beforeFocus()` set in their {@link module:ui/editorui/editorui~FocusableToolbarDefinition definition} that suggests that\n     * they might show up when called. Keep in mind that determining whether a toolbar will show up (and become focusable) is impossible\n     * at this stage because it depends on its implementation, that in turn depends on the editing context (selection).\n     *\n     * **Note**: Contextual toolbars take precedence over regular toolbars.\n     */\n    _getFocusableCandidateToolbarDefinitions() {\n        const definitions = [];\n        for (const toolbarDef of this._focusableToolbarDefinitions) {\n            const { toolbarView, options } = toolbarDef;\n            if (isVisible(toolbarView.element) || options.beforeFocus) {\n                definitions.push(toolbarDef);\n            }\n        }\n        // Contextual and already visible toolbars have higher priority. If both are true, the toolbar will always focus first.\n        // For instance, a selected widget toolbar vs inline editor toolbar: both are visible but the widget toolbar is contextual.\n        definitions.sort((defA, defB) => getToolbarDefinitionWeight(defA) - getToolbarDefinitionWeight(defB));\n        return definitions;\n    }\n    /**\n     * Returns a definition of the toolbar that is currently visible and focused (one of its children has focus).\n     *\n     * `null` is returned when no toolbar is currently focused.\n     */\n    _getCurrentFocusedToolbarDefinition() {\n        for (const definition of this._focusableToolbarDefinitions) {\n            if (definition.toolbarView.element && definition.toolbarView.element.contains(this.focusTracker.focusedElement)) {\n                return definition;\n            }\n        }\n        return null;\n    }\n    /**\n     * Focuses a focusable toolbar candidate using its definition.\n     *\n     * @param candidateToolbarDefinition A definition of the toolbar to focus.\n     * @returns `true` when the toolbar candidate was focused. `false` otherwise.\n     */\n    _focusFocusableCandidateToolbar(candidateToolbarDefinition) {\n        const { toolbarView, options: { beforeFocus } } = candidateToolbarDefinition;\n        if (beforeFocus) {\n            beforeFocus();\n        }\n        // If it didn't show up after beforeFocus(), it's not focusable at all.\n        if (!isVisible(toolbarView.element)) {\n            return false;\n        }\n        toolbarView.focus();\n        return true;\n    }\n    /**\n     * Provides an integration between {@link #viewportOffset} and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n     * It allows the UI-agnostic engine method to consider user-configured viewport offsets specific for the integration.\n     *\n     * @param evt The `scrollToTheSelection` event info.\n     * @param data The payload carried by the `scrollToTheSelection` event.\n     */\n    _handleScrollToTheSelection(evt, data) {\n        const configuredViewportOffset = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            ...this.viewportOffset\n        };\n        data.viewportOffset.top += configuredViewportOffset.top;\n        data.viewportOffset.bottom += configuredViewportOffset.bottom;\n        data.viewportOffset.left += configuredViewportOffset.left;\n        data.viewportOffset.right += configuredViewportOffset.right;\n    }\n}\n/**\n * Returns a number (weight) for a toolbar definition. Visible toolbars have a higher priority and so do\n * contextual toolbars (displayed in the context of a content, for instance, an image toolbar).\n *\n * A standard invisible toolbar is the heaviest. A visible contextual toolbar is the lightest.\n *\n * @param toolbarDef A toolbar definition to be weighted.\n */\nfunction getToolbarDefinitionWeight(toolbarDef) {\n    const { toolbarView, options } = toolbarDef;\n    let weight = 10;\n    // Prioritize already visible toolbars. They should get focused first.\n    if (isVisible(toolbarView.element)) {\n        weight--;\n    }\n    // Prioritize contextual toolbars. They are displayed at the selection.\n    if (options.isContextual) {\n        weight--;\n    }\n    return weight;\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./editorui.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/editoruiview\n */\nimport View from '../view';\nimport BodyCollection from './bodycollection';\nimport '../../theme/components/editorui/editorui.css';\n/**\n * The editor UI view class. Base class for the editor main views.\n */\nexport default class EditorUIView extends View {\n    /**\n     * Creates an instance of the editor UI view class.\n     *\n     * @param locale The locale instance.\n     */\n    constructor(locale) {\n        super(locale);\n        this.body = new BodyCollection(locale);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.body.attachToDom();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.body.detachFromDom();\n        return super.destroy();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../editoruiview';\nimport LabelView from '../../label/labelview';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n     * Creates an instance of the boxed editor UI view class.\n     *\n     * @param locale The locale instance..\n     */\n    constructor(locale) {\n        super(locale);\n        this.top = this.createCollection();\n        this.main = this.createCollection();\n        this._voiceLabelView = this._createVoiceLabel();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: locale.uiLanguageDirection,\n                lang: locale.uiLanguage,\n                'aria-labelledby': this._voiceLabelView.id\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__top',\n                            'ck-reset_all'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__main'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n     * Creates a voice label view instance.\n     */\n    _createVoiceLabel() {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('Rich Text Editor');\n        voiceLabel.extendTemplate({\n            attributes: {\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/editableuiview\n */\nimport View from '../view';\n/**\n * The editable UI view class.\n */\nexport default class EditableUIView extends View {\n    /**\n     * Creates an instance of EditableUIView class.\n     *\n     * @param locale The locale instance.\n     * @param editingView The editing view instance the editable is related to.\n     * @param editableElement The editable element. If not specified, this view\n     * should create it. Otherwise, the existing element should be used.\n     */\n    constructor(locale, editingView, editableElement) {\n        super(locale);\n        /**\n         * The name of the editable UI view.\n         */\n        this.name = null;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-content',\n                    'ck-editor__editable',\n                    'ck-rounded-corners'\n                ],\n                lang: locale.contentLanguage,\n                dir: locale.contentLanguageDirection\n            }\n        });\n        this.set('isFocused', false);\n        this._editableElement = editableElement;\n        this._hasExternalElement = !!this._editableElement;\n        this._editingView = editingView;\n    }\n    /**\n     * Renders the view by either applying the {@link #template} to the existing\n     * {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement} or assigning {@link #element}\n     * as {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement}.\n     */\n    render() {\n        super.render();\n        if (this._hasExternalElement) {\n            this.template.apply(this.element = this._editableElement);\n        }\n        else {\n            this._editableElement = this.element;\n        }\n        this.on('change:isFocused', () => this._updateIsFocusedClasses());\n        this._updateIsFocusedClasses();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._hasExternalElement) {\n            this.template.revert(this._editableElement);\n        }\n        super.destroy();\n    }\n    /**\n     * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n     * the view will not render its {@link #template}.\n     */\n    get hasExternalElement() {\n        return this._hasExternalElement;\n    }\n    /**\n     * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n     * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n     */\n    _updateIsFocusedClasses() {\n        const editingView = this._editingView;\n        if (editingView.isRenderingInProgress) {\n            updateAfterRender(this);\n        }\n        else {\n            update(this);\n        }\n        function update(view) {\n            editingView.change(writer => {\n                const viewRoot = editingView.document.getRoot(view.name);\n                writer.addClass(view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot);\n                writer.removeClass(view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot);\n            });\n        }\n        // In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n        // While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n        // callback and render is called inside the already pending render.\n        // We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n        // See https://github.com/ckeditor/ckeditor5/issues/1676.\n        function updateAfterRender(view) {\n            editingView.once('change:isRenderingInProgress', (evt, name, value) => {\n                if (!value) {\n                    update(view);\n                }\n                else {\n                    updateAfterRender(view);\n                }\n            });\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n     * Creates an instance of the InlineEditableUIView class.\n     *\n     * @param locale The locale instance.\n     * @param editingView The editing view instance the editable is related to.\n     * @param editableElement The editable element. If not specified, the\n     * {@link module:ui/editableui/editableuiview~EditableUIView}\n     * will create it. Otherwise, the existing element will be used.\n     * @param options Additional configuration of the view.\n     * @param options.label A function that gets called with the instance of this view as an argument\n     * and should return a string that represents the label of the editable for assistive technologies. If not provided,\n     * a default label generator is used.\n     */\n    constructor(locale, editingView, editableElement, options = {}) {\n        super(locale, editingView, editableElement);\n        const t = locale.t;\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n        this._generateLabel = options.label || (() => t('Editor editing area: %0', this.name));\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', this._generateLabel(this), viewRoot);\n        });\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./formheader.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/model\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport { extend } from 'lodash-es';\n/**\n * The base MVC model class.\n */\nexport default class Model extends ObservableMixin() {\n    /**\n     * Creates a new Model instance.\n     *\n     * @param attributes The model state attributes to be defined during the instance creation.\n     * @param properties The (out of state) properties to be appended to the instance during creation.\n     */\n    constructor(attributes, properties) {\n        super();\n        // Extend this instance with the additional (out of state) properties.\n        if (properties) {\n            extend(this, properties);\n        }\n        // Initialize the attributes.\n        if (attributes) {\n            this.set(attributes);\n        }\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./balloonrotator.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./fakepanel.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { CKEditorError, FocusTracker, Rect, toUnit } from '@ckeditor/ckeditor5-utils';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * The map of views and their stacks.\n         */\n        this._viewToStack = new Map();\n        /**\n         * The map of IDs and stacks.\n         */\n        this._idToStack = new Map();\n        /**\n         * The common balloon panel view.\n         */\n        this._view = null;\n        /**\n         * Rotator view embedded in the contextual balloon.\n         * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n         */\n        this._rotatorView = null;\n        /**\n         * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n         */\n        this._fakePanelsView = null;\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        this.set('visibleView', null);\n        this.set('_numberOfStacks', 0);\n        this.set('_singleViewMode', false);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        if (this._view) {\n            this._view.destroy();\n        }\n        if (this._rotatorView) {\n            this._rotatorView.destroy();\n        }\n        if (this._fakePanelsView) {\n            this._fakePanelsView.destroy();\n        }\n    }\n    /**\n     * The common balloon panel view.\n     */\n    get view() {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        return this._view;\n    }\n    /**\n     * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n     */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n     * Adds a new view to the stack and makes it visible if the current stack is visible\n     * or it is the first view in the balloon.\n     *\n     * @param data The configuration of the view.\n     * @param data.stackId The ID of the stack that the view is added to. Defaults to `'main'`.\n     * @param data.view The content of the balloon.\n     * @param data.position Positioning options.\n     * @param data.balloonClassName An additional CSS class added to the {@link #view balloon} when visible.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow. Defaults to `true`.\n     * @param data.singleViewMode Whether the view should be the only visible view even if other stacks were added. Defaults to `false`.\n     */\n    add(data) {\n        if (!this._view) {\n            this._createPanelView();\n        }\n        if (this.hasView(data.view)) {\n            /**\n             * Trying to add configuration of the same view more than once.\n             *\n             * @error contextualballoon-add-view-exist\n             */\n            throw new CKEditorError('contextualballoon-add-view-exist', [this, data]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[data.view, data]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n     * Removes the given view from the stack. If the removed view was visible,\n     * the view preceding it in the stack will become visible instead.\n     * When there is no view in the stack, the next stack will be displayed.\n     * When there are no more stacks, the balloon will hide.\n     *\n     * @param view A view to be removed from the balloon.\n     */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n             * Trying to remove the configuration of the view not defined in the stack.\n             *\n             * @error contextualballoon-remove-view-not-exist\n             */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist', [this, view]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                }\n                else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            }\n            else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        }\n        else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n     * Updates the position of the balloon using the position data of the first visible view in the stack.\n     * When new position data is given, the position data of the currently visible view will be updated.\n     *\n     * @param position Position options.\n     */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n     * Shows the last view from the stack of a given ID.\n     */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n             * Trying to show a stack that does not exist.\n             *\n             * @error contextualballoon-showstack-stack-not-exist\n             */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n     * Initializes view instances.\n     */\n    _createPanelView() {\n        this._view = new BalloonPanelView(this.editor.locale);\n        this.editor.ui.view.body.add(this._view);\n        this.editor.ui.focusTracker.add(this._view.element);\n        this._rotatorView = this._createRotatorView();\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n     * Returns the stack of the currently visible view.\n     */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n     * Returns the ID of the given stack.\n     */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n     * Shows the last view from the next stack.\n     */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Shows the last view from the previous stack.\n     */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n     * Creates a rotator view.\n     */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => (this.updatePosition()), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('%0 of %1', [current, numberOfStacks]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n     * Creates a fake panels view.\n     */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n     * Sets the view as the content of the balloon and attaches the balloon using position\n     * options of the first view.\n     *\n     * @param data Configuration.\n     * @param data.view The view to show in the balloon.\n     * @param data.balloonClassName Additional class name which will be added to the {@link #view balloon}.\n     * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow.\n     */\n    _showView({ view, balloonClassName = '', withArrow = true, singleViewMode = false }) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n    /**\n     * Returns position options of the last view in the stack.\n     * This keeps the balloon in the same position when the view is changed.\n     */\n    _getBalloonPosition() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        if (position) {\n            // Use the default limiter if none has been specified.\n            if (!position.limiter) {\n                // Don't modify the original options object.\n                position = Object.assign({}, position, {\n                    limiter: this.positionLimiter\n                });\n            }\n            // Don't modify the original options object.\n            position = Object.assign({}, position, {\n                viewportOffsetConfig: this.editor.ui.viewportOffset\n            });\n        }\n        return position;\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n */\nexport class RotatorView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        this.set('isNavigationVisible', true);\n        this.focusTracker = new FocusTracker();\n        this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n        this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: {\n                                class: [\n                                    'ck-balloon-rotator__counter'\n                                ]\n                            },\n                            children: [\n                                {\n                                    text: bind.to('counter')\n                                }\n                            ]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-balloon-rotator__content'\n                    },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n    }\n    /**\n     * Shows a given view.\n     *\n     * @param view The view to show.\n     */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n     * Hides the currently displayed view.\n     */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n     * Creates a navigation button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n/**\n * Displays additional layers under the balloon when multiple stacks are added to the balloon.\n */\nclass FakePanelsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.set('height', 0);\n        this.set('width', 0);\n        this.set('numberOfPanels', 0);\n        this.content = this.createCollection();\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            }\n            else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    /**\n     * Updates coordinates of fake panels.\n     */\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const { top, left } = this._balloonPanelView;\n            const { width, height } = new Rect(this._balloonPanelView.element);\n            Object.assign(this, { top, left, width, height });\n        }\n    }\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./stickypanel.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/sticky/stickypanelview\n */\nimport View from '../../view';\nimport Template from '../../template';\nimport { global, toUnit } from '@ckeditor/ckeditor5-utils';\nimport '../../../theme/components/panel/stickypanel.css';\nconst toPx = toUnit('px');\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('isActive', false);\n        this.set('isSticky', false);\n        this.set('limiterElement', null);\n        this.set('limiterBottomOffset', 50);\n        this.set('viewportTopOffset', 0);\n        this.set('_marginLeft', null);\n        this.set('_isStickyToTheLimiter', false);\n        this.set('_hasViewportTopOffset', false);\n        this.content = this.createCollection();\n        this._contentPanelPlaceholder = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__placeholder'\n                ],\n                style: {\n                    display: bind.to('isSticky', isSticky => isSticky ? 'block' : 'none'),\n                    height: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._panelRect.height) : null;\n                    })\n                }\n            }\n        }).render();\n        this._contentPanel = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel__content',\n                    // Toggle class of the panel when \"sticky\" state changes in the view.\n                    bind.if('isSticky', 'ck-sticky-panel__content_sticky'),\n                    bind.if('_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit')\n                ],\n                style: {\n                    width: bind.to('isSticky', isSticky => {\n                        return isSticky ? toPx(this._contentPanelPlaceholder.getBoundingClientRect().width) : null;\n                    }),\n                    top: bind.to('_hasViewportTopOffset', _hasViewportTopOffset => {\n                        return _hasViewportTopOffset ? toPx(this.viewportTopOffset) : null;\n                    }),\n                    bottom: bind.to('_isStickyToTheLimiter', _isStickyToTheLimiter => {\n                        return _isStickyToTheLimiter ? toPx(this.limiterBottomOffset) : null;\n                    }),\n                    marginLeft: bind.to('_marginLeft')\n                }\n            },\n            children: this.content\n        }).render();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-sticky-panel'\n                ]\n            },\n            children: [\n                this._contentPanelPlaceholder,\n                this._contentPanel\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Check if the panel should go into the sticky state immediately.\n        this._checkIfShouldBeSticky();\n        // Update sticky state of the panel as the window is being scrolled.\n        this.listenTo(global.window, 'scroll', () => {\n            this._checkIfShouldBeSticky();\n        });\n        // Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n        this.listenTo(this, 'change:isActive', () => {\n            this._checkIfShouldBeSticky();\n        });\n    }\n    /**\n     * Analyzes the environment to decide whether the panel should\n     * be sticky or not.\n     */\n    _checkIfShouldBeSticky() {\n        const panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\n        let limiterRect;\n        if (!this.limiterElement) {\n            this.isSticky = false;\n        }\n        else {\n            limiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\n            // The panel must be active to become sticky.\n            this.isSticky = this.isActive &&\n                // The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\n                limiterRect.top < this.viewportTopOffset &&\n                // The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\n                // There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\n                // it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\n                // would be positioned before the model#limiterElement.\n                this._panelRect.height + this.limiterBottomOffset < limiterRect.height;\n        }\n        // Stick the panel to the top edge of the viewport simulating CSS position:sticky.\n        // TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\n        if (this.isSticky) {\n            this._isStickyToTheLimiter =\n                limiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\n            this._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\n            this._marginLeft = this._isStickyToTheLimiter ? null : toPx(-global.window.scrollX);\n        }\n        // Detach the panel from the top edge of the viewport.\n        else {\n            this._isStickyToTheLimiter = false;\n            this._hasViewportTopOffset = false;\n            this._marginLeft = null;\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView, { generatePositions } from '../../panel/balloon/balloonpanelview';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { FocusTracker, Rect, ResizeObserver, env, global, toUnit } from '@ckeditor/ckeditor5-utils';\nimport { debounce } from 'lodash-es';\nconst toPx = toUnit('px');\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class BalloonToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BalloonToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n         *\n         * **Note:** Created in {@link #init}.\n         */\n        this._resizeObserver = null;\n        this._balloonConfig = normalizeToolbarConfig(editor.config.get('balloonToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.focusTracker = new FocusTracker();\n        // Wait for the EditorUI#init. EditableElement is not available before.\n        editor.ui.once('ready', () => {\n            this.focusTracker.add(editor.ui.getEditableElement());\n            this.focusTracker.add(this.toolbarView.element);\n        });\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this.show(true),\n            afterBlur: () => this.hide(),\n            isContextual: true\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this._fireSelectionChangeDebounced = debounce(() => this.fire('_selectionChangeDebounced'), 200);\n        // The appearance of the BalloonToolbar method is event–driven.\n        // It is possible to stop the #show event and this prevent the toolbar from showing up.\n        this.decorate('show');\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        // Show/hide the toolbar on editable focus/blur.\n        this.listenTo(this.focusTracker, 'change:isFocused', (evt, name, isFocused) => {\n            const isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n            if (!isFocused && isToolbarVisible) {\n                this.hide();\n            }\n            else if (isFocused) {\n                this.show();\n            }\n        });\n        // Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n        this.listenTo(selection, 'change:range', (evt, data) => {\n            if (data.directChange || selection.isCollapsed) {\n                this.hide();\n            }\n            // Fire internal `_selectionChangeDebounced` event to use it for showing\n            // the toolbar after the selection stops changing.\n            this._fireSelectionChangeDebounced();\n        });\n        // Show the toolbar when the selection stops changing.\n        this.listenTo(this, '_selectionChangeDebounced', () => {\n            if (this.editor.editing.view.document.isFocused) {\n                this.show();\n            }\n        });\n        if (!this._balloonConfig.shouldNotGroupWhenFull) {\n            this.listenTo(editor, 'ready', () => {\n                const editableElement = editor.ui.view.editable.element;\n                // Set #toolbarView's max-width on the initialization and update it on the editable resize.\n                this._resizeObserver = new ResizeObserver(editableElement, entry => {\n                    // The max-width equals 90% of the editable's width for the best user experience.\n                    // The value keeps the balloon very close to the boundaries of the editable and limits the cases\n                    // when the balloon juts out from the editable element it belongs to.\n                    this.toolbarView.maxWidth = toPx(entry.contentRect.width * .9);\n                });\n            });\n        }\n        // Listen to the toolbar view and whenever it changes its geometry due to some items being\n        // grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n        // means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n        // at the right selection in the content again.\n        // https://github.com/ckeditor/ckeditor5/issues/6444\n        this.listenTo(this.toolbarView, 'groupedItemsUpdate', () => {\n            this._updatePosition();\n        });\n    }\n    /**\n     * Creates toolbar components based on given configuration.\n     * This needs to be done when all plugins are ready.\n     */\n    afterInit() {\n        const factory = this.editor.ui.componentFactory;\n        this.toolbarView.fillFromConfig(this._balloonConfig, factory);\n    }\n    /**\n     * Creates the toolbar view instance.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor contextual toolbar');\n        toolbarView.render();\n        return toolbarView;\n    }\n    /**\n     * Shows the toolbar and attaches it to the selection.\n     *\n     * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n     *\n     * @param showForCollapsedSelection When set `true`, the toolbar will show despite collapsed selection in the\n     * editing view.\n     */\n    show(showForCollapsedSelection = false) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const schema = editor.model.schema;\n        // Do not add the toolbar to the balloon stack twice.\n        if (this._balloon.hasView(this.toolbarView)) {\n            return;\n        }\n        // Do not show the toolbar when the selection is collapsed.\n        if (selection.isCollapsed && !showForCollapsedSelection) {\n            return;\n        }\n        // Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n        // See https://github.com/ckeditor/ckeditor5/issues/6443.\n        if (selectionContainsOnlyMultipleSelectables(selection, schema)) {\n            return;\n        }\n        // Don not show the toolbar when all components inside are disabled\n        // see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n        if (Array.from(this.toolbarView.items).every((item) => item.isEnabled !== undefined && !item.isEnabled)) {\n            return;\n        }\n        // Update the toolbar position when the editor ui should be refreshed.\n        this.listenTo(this.editor.ui, 'update', () => {\n            this._updatePosition();\n        });\n        // Add the toolbar to the common editor contextual balloon.\n        this._balloon.add({\n            view: this.toolbarView,\n            position: this._getBalloonPositionData(),\n            balloonClassName: 'ck-toolbar-container'\n        });\n    }\n    /**\n     * Hides the toolbar.\n     */\n    hide() {\n        if (this._balloon.hasView(this.toolbarView)) {\n            this.stopListening(this.editor.ui, 'update');\n            this._balloon.remove(this.toolbarView);\n        }\n    }\n    /**\n     * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n     * to the selection.\n     */\n    _getBalloonPositionData() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const viewSelection = viewDocument.selection;\n        // Get direction of the selection.\n        const isBackward = viewDocument.selection.isBackward;\n        return {\n            // Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n            // as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n            // computed and hence, the target is defined as a function instead of a static value.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/195\n            target: () => {\n                const range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n                const rangeRects = Rect.getDomRangeRects(view.domConverter.viewRangeToDom(range));\n                // Select the proper range rect depending on the direction of the selection.\n                if (isBackward) {\n                    return rangeRects[0];\n                }\n                else {\n                    // Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n                    // another one preceding it. It is not rendered as a selection by the web browser anyway.\n                    // https://github.com/ckeditor/ckeditor5-ui/issues/308\n                    if (rangeRects.length > 1 && rangeRects[rangeRects.length - 1].width === 0) {\n                        rangeRects.pop();\n                    }\n                    return rangeRects[rangeRects.length - 1];\n                }\n            },\n            positions: this._getBalloonPositions(isBackward)\n        };\n    }\n    /**\n     * Updates the position of the {@link #_balloon} to make up for changes:\n     *\n     * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n     * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n     */\n    _updatePosition() {\n        this._balloon.updatePosition(this._getBalloonPositionData());\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.stopListening();\n        this._fireSelectionChangeDebounced.cancel();\n        this.toolbarView.destroy();\n        this.focusTracker.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Returns toolbar positions for the given direction of the selection.\n     */\n    _getBalloonPositions(isBackward) {\n        const isSafariIniOS = env.isSafari && env.isiOS;\n        // https://github.com/ckeditor/ckeditor5/issues/7707\n        const positions = isSafariIniOS ? generatePositions({\n            // 20px when zoomed out. Less then 20px when zoomed in; the \"radius\" of the native selection handle gets\n            // smaller as the user zooms in. No less than the default v-offset, though.\n            heightOffset: Math.max(BalloonPanelView.arrowHeightOffset, Math.round(20 / global.window.visualViewport.scale))\n        }) : BalloonPanelView.defaultPositions;\n        return isBackward ? [\n            positions.northWestArrowSouth,\n            positions.northWestArrowSouthWest,\n            positions.northWestArrowSouthEast,\n            positions.northWestArrowSouthMiddleEast,\n            positions.northWestArrowSouthMiddleWest,\n            positions.southWestArrowNorth,\n            positions.southWestArrowNorthWest,\n            positions.southWestArrowNorthEast,\n            positions.southWestArrowNorthMiddleWest,\n            positions.southWestArrowNorthMiddleEast\n        ] : [\n            positions.southEastArrowNorth,\n            positions.southEastArrowNorthEast,\n            positions.southEastArrowNorthWest,\n            positions.southEastArrowNorthMiddleEast,\n            positions.southEastArrowNorthMiddleWest,\n            positions.northEastArrowSouth,\n            positions.northEastArrowSouthEast,\n            positions.northEastArrowSouthWest,\n            positions.northEastArrowSouthMiddleEast,\n            positions.northEastArrowSouthMiddleWest\n        ];\n    }\n}\n/**\n * Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n * and nothing else.\n */\nfunction selectionContainsOnlyMultipleSelectables(selection, schema) {\n    // It doesn't contain multiple objects if there is only one range.\n    if (selection.rangeCount === 1) {\n        return false;\n    }\n    return [...selection.getRanges()].every(range => {\n        const element = range.getContainedElement();\n        return element && schema.isSelectable(element);\n    });\n}\n","import api from \"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../css-loader/dist/cjs.js!../../../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./blocktoolbar.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blockbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport { toUnit } from '@ckeditor/ckeditor5-utils';\nimport '../../../theme/components/toolbar/blocktoolbar.css';\nconst toPx = toUnit('px');\n/**\n * The block button view class.\n *\n * This view represents a button attached next to block element where the selection is anchored.\n *\n * See {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}.\n */\nexport default class BlockButtonView extends ButtonView {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Hide button on init.\n        this.isVisible = false;\n        this.isToggleable = true;\n        this.set('top', 0);\n        this.set('left', 0);\n        this.extendTemplate({\n            attributes: {\n                class: 'ck-block-toolbar-button',\n                style: {\n                    top: bind.to('top', val => toPx(val)),\n                    left: bind.to('left', val => toPx(val))\n                }\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n/* global window */\nimport { Plugin, icons } from '@ckeditor/ckeditor5-core';\nimport { Rect, ResizeObserver, getOptimalPosition, toUnit } from '@ckeditor/ckeditor5-utils';\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nconst toPx = toUnit('px');\nconst { pilcrow } = icons;\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * ```\n *  __ |\n * |  ||  This is a block of content that the\n *  ¯¯ |  button is attached to. This is a\n *     |  block of content that the button is\n *     |  attached to.\n * ```\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * ```css\n * .ck-block-toolbar-button {\n * \ttransform: translateX( -10px );\n * }\n * ```\n *\n * ```\n *  __   |\n * |  |  |  This is a block of content that the\n *  ¯¯   |  button is attached to. This is a\n *       |  block of content that the button is\n *       |  attached to.\n * ```\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * ```css\n * .ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \ttransform: translateX( 10px );\n * }\n * ```\n */\nexport default class BlockToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * An instance of the resize observer that allows to respond to changes in editable's geometry\n         * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n         *\n         * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n         * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n         *\n         * **Note:** Created in {@link #afterInit}.\n         */\n        this._resizeObserver = null;\n        this._blockToolbarConfig = normalizeToolbarConfig(this.editor.config.get('blockToolbar'));\n        this.toolbarView = this._createToolbarView();\n        this.panelView = this._createPanelView();\n        this.buttonView = this._createButtonView();\n        // Close the #panelView upon clicking outside of the plugin UI.\n        clickOutsideHandler({\n            emitter: this.panelView,\n            contextElements: [this.panelView.element, this.buttonView.element],\n            activator: () => this.panelView.isVisible,\n            callback: () => this._hidePanel()\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Hides panel on a direct selection change.\n        this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n            if (data.directChange) {\n                this._hidePanel();\n            }\n        });\n        this.listenTo(editor.ui, 'update', () => this._updateButton());\n        // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n        this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' });\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton());\n        // Reposition button on resize.\n        this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                // Keep correct position of button and panel on window#resize.\n                this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n            }\n            else {\n                // Stop repositioning button when is hidden.\n                this.buttonView.stopListening(window, 'resize');\n                // Hide the panel when the button disappears.\n                this._hidePanel();\n            }\n        });\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(this.toolbarView, {\n            beforeFocus: () => this._showPanel(),\n            afterBlur: () => this._hidePanel()\n        });\n    }\n    /**\n     * Fills the toolbar with its items based on the configuration.\n     *\n     * **Note:** This needs to be done after all plugins are ready.\n     */\n    afterInit() {\n        this.toolbarView.fillFromConfig(this._blockToolbarConfig, this.editor.ui.componentFactory);\n        // Hide panel before executing each button in the panel.\n        for (const item of this.toolbarView.items) {\n            item.on('execute', () => this._hidePanel(true), { priority: 'high' });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this.panelView.destroy();\n        this.buttonView.destroy();\n        this.toolbarView.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n     * Creates the {@link #toolbarView}.\n     */\n    _createToolbarView() {\n        const t = this.editor.locale.t;\n        const shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n        const toolbarView = new ToolbarView(this.editor.locale, {\n            shouldGroupWhenFull,\n            isFloating: true\n        });\n        toolbarView.ariaLabel = t('Editor block content toolbar');\n        return toolbarView;\n    }\n    /**\n     * Creates the {@link #panelView}.\n     */\n    _createPanelView() {\n        const editor = this.editor;\n        const panelView = new BalloonPanelView(editor.locale);\n        panelView.content.add(this.toolbarView);\n        panelView.class = 'ck-toolbar-container';\n        editor.ui.view.body.add(panelView);\n        editor.ui.focusTracker.add(panelView.element);\n        // Close #panelView on `Esc` press.\n        this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n            this._hidePanel(true);\n            cancel();\n        });\n        return panelView;\n    }\n    /**\n     * Creates the {@link #buttonView}.\n     */\n    _createButtonView() {\n        const editor = this.editor;\n        const t = editor.t;\n        const buttonView = new BlockButtonView(editor.locale);\n        buttonView.set({\n            label: t('Edit block'),\n            icon: pilcrow,\n            withText: false\n        });\n        // Bind the panelView observable properties to the buttonView.\n        buttonView.bind('isOn').to(this.panelView, 'isVisible');\n        buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible);\n        // Toggle the panelView upon buttonView#execute.\n        this.listenTo(buttonView, 'execute', () => {\n            if (!this.panelView.isVisible) {\n                this._showPanel();\n            }\n            else {\n                this._hidePanel(true);\n            }\n        });\n        editor.ui.view.body.add(buttonView);\n        editor.ui.focusTracker.add(buttonView.element);\n        return buttonView;\n    }\n    /**\n     * Shows or hides the button.\n     * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n     */\n    _updateButton() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        // Hides the button when the editor is not focused.\n        if (!editor.ui.focusTracker.isFocused) {\n            this._hideButton();\n            return;\n        }\n        // Hides the button when the selection is in non-editable place.\n        if (!editor.model.canEditAt(editor.model.document.selection)) {\n            this._hideButton();\n            return;\n        }\n        // Get the first selected block, button will be attached to this element.\n        const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0];\n        // Hides the button when there is no enabled item in toolbar for the current block element.\n        if (!modelTarget || Array.from(this.toolbarView.items).every((item) => !item.isEnabled)) {\n            this._hideButton();\n            return;\n        }\n        // Get DOM target element.\n        const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget));\n        // Show block button.\n        this.buttonView.isVisible = true;\n        // Make sure that the block toolbar panel is resized properly.\n        this._setupToolbarResize();\n        // Attach block button to target DOM element.\n        this._attachButtonToElement(domTarget);\n        // When panel is opened then refresh it position to be properly aligned with block button.\n        if (this.panelView.isVisible) {\n            this._showPanel();\n        }\n    }\n    /**\n     * Hides the button.\n     */\n    _hideButton() {\n        this.buttonView.isVisible = false;\n    }\n    /**\n     * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n     * If the toolbar is already visible, then it simply repositions it.\n     */\n    _showPanel() {\n        // Usually, the only way to show the toolbar is by pressing the block button. It makes it impossible for\n        // the toolbar to show up when the button is invisible (feature does not make sense for the selection then).\n        // The toolbar navigation using Alt+F10 does not access the button but shows the panel directly using this method.\n        // So we need to check whether this is possible first.\n        if (!this.buttonView.isVisible) {\n            return;\n        }\n        const wasVisible = this.panelView.isVisible;\n        // So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n        // positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n        // grouping works thanks to:\n        //\n        // * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n        // * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n        //\n        // Here are the possible scenarios:\n        //\n        // 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n        //    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n        //    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n        //    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n        //    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n        //    to the left and being displayed in the wrong place.\n        // 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n        //    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n        //    it is positioned using CSS \"left\" it will move.\n        // 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n        //    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n        //    items grouping state is stable and final.\n        //\n        // https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n        this.panelView.show();\n        const editableElement = this._getSelectedEditableElement();\n        this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n        this.panelView.pin({\n            target: this.buttonView.element,\n            limiter: editableElement\n        });\n        if (!wasVisible) {\n            this.toolbarView.items.get(0).focus();\n        }\n    }\n    /**\n     * Returns currently selected editable, based on the model selection.\n     */\n    _getSelectedEditableElement() {\n        const selectedModelRootName = this.editor.model.document.selection.getFirstRange().root.rootName;\n        return this.editor.ui.getEditableElement(selectedModelRootName);\n    }\n    /**\n     * Hides the {@link #toolbarView}.\n     *\n     * @param focusEditable When `true`, the editable will be focused after hiding the panel.\n     */\n    _hidePanel(focusEditable) {\n        this.panelView.isVisible = false;\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n     * Attaches the {@link #buttonView} to the target block of content.\n     *\n     * @param targetElement Target element.\n     */\n    _attachButtonToElement(targetElement) {\n        const contentStyles = window.getComputedStyle(targetElement);\n        const editableRect = new Rect(this._getSelectedEditableElement());\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        // When line height is not an integer then treat it as \"normal\".\n        // MDN says that 'normal' == ~1.2 on desktop browsers.\n        const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n        const position = getOptimalPosition({\n            element: this.buttonView.element,\n            target: targetElement,\n            positions: [\n                (contentRect, buttonRect) => {\n                    let left;\n                    if (this.editor.locale.uiLanguageDirection === 'ltr') {\n                        left = editableRect.left - buttonRect.width;\n                    }\n                    else {\n                        left = editableRect.right;\n                    }\n                    return {\n                        top: contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2,\n                        left\n                    };\n                }\n            ]\n        });\n        this.buttonView.top = position.top;\n        this.buttonView.left = position.left;\n    }\n    /**\n     * Creates a resize observer that observes selected editable and resizes the toolbar panel accordingly.\n     */\n    _setupToolbarResize() {\n        const editableElement = this._getSelectedEditableElement();\n        // Do this only if the automatic grouping is turned on.\n        if (!this._blockToolbarConfig.shouldNotGroupWhenFull) {\n            // If resize observer is attached to a different editable than currently selected editable, re-attach it.\n            if (this._resizeObserver && this._resizeObserver.element !== editableElement) {\n                this._resizeObserver.destroy();\n                this._resizeObserver = null;\n            }\n            if (!this._resizeObserver) {\n                this._resizeObserver = new ResizeObserver(editableElement, () => {\n                    this.toolbarView.maxWidth = this._getToolbarMaxWidth(editableElement);\n                });\n            }\n        }\n    }\n    /**\n     * Gets the {@link #toolbarView} max-width, based on given `editableElement` width plus the distance between the farthest\n     * edge of the {@link #buttonView} and the editable.\n     *\n     * @returns A maximum width that toolbar can have, in pixels.\n     */\n    _getToolbarMaxWidth(editableElement) {\n        const editableRect = new Rect(editableElement);\n        const buttonRect = new Rect(this.buttonView.element);\n        const isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n        const offset = isRTL ? (buttonRect.left - editableRect.right) + buttonRect.width : editableRect.left - buttonRect.left;\n        return toPx(editableRect.width + offset);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { EditorUI, normalizeToolbarConfig } from 'ckeditor5/src/ui';\nimport { enablePlaceholder } from 'ckeditor5/src/engine';\nimport { ElementReplacer, Rect } from 'ckeditor5/src/utils';\n/**\n * The classic editor UI class.\n */\nexport default class ClassicEditorUI extends EditorUI {\n    /**\n     * Creates an instance of the classic editor UI class.\n     *\n     * @param editor The editor instance.\n     * @param view The view of the UI.\n     */\n    constructor(editor, view) {\n        super(editor);\n        this.view = view;\n        this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n        this._elementReplacer = new ElementReplacer();\n        this.listenTo(editor.editing.view, 'scrollToTheSelection', this._handleScrollToTheSelectionWithStickyPanel.bind(this));\n    }\n    /**\n     * @inheritDoc\n     */\n    get element() {\n        return this.view.element;\n    }\n    /**\n     * Initializes the UI.\n     *\n     * @param replacementElement The DOM element that will be the source for the created editor.\n     */\n    init(replacementElement) {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the classic editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        view.editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        // If an element containing the initial data of the editor was provided, replace it with\n        // an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n        // can be such element.\n        if (replacementElement) {\n            this._elementReplacer.replace(replacementElement, this.element);\n        }\n        this._initPlaceholder();\n        this._initToolbar();\n        this.fire('ready');\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        this._elementReplacer.restore();\n        editingView.detachDomRoot(view.editable.name);\n        view.destroy();\n    }\n    /**\n     * Initializes the editor toolbar.\n     */\n    _initToolbar() {\n        const view = this.view;\n        // Set–up the sticky panel with toolbar.\n        view.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused');\n        view.stickyPanel.limiterElement = view.element;\n        view.stickyPanel.bind('viewportTopOffset').to(this, 'viewportOffset', ({ top }) => top || 0);\n        view.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n     * Enable the placeholder text on the editing root, if any was configured.\n     */\n    _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const sourceElement = editor.sourceElement;\n        let placeholderText;\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[this.view.editable.name];\n        }\n        if (!placeholderText && sourceElement && sourceElement.tagName.toLowerCase() === 'textarea') {\n            placeholderText = sourceElement.getAttribute('placeholder');\n        }\n        if (placeholderText) {\n            enablePlaceholder({\n                view: editingView,\n                element: editingRoot,\n                text: placeholderText,\n                isDirectHost: false,\n                keepOnFocus: true\n            });\n        }\n    }\n    /**\n     * Provides an integration between the sticky toolbar and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n     * It allows the UI-agnostic engine method to consider the geometry of the\n     * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel} that pins to the\n     * edge of the viewport and can obscure the user caret after scrolling the window.\n     *\n     * @param evt The `scrollToTheSelection` event info.\n     * @param data The payload carried by the `scrollToTheSelection` event.\n     * @param originalArgs The original arguments passed to `scrollViewportToShowTarget()` method (see implementation to learn more).\n     */\n    _handleScrollToTheSelectionWithStickyPanel(evt, data, originalArgs) {\n        const stickyPanel = this.view.stickyPanel;\n        if (stickyPanel.isSticky) {\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            data.viewportOffset.top += stickyPanelHeight;\n        }\n        else {\n            const scrollViewportOnPanelGettingSticky = () => {\n                this.editor.editing.view.scrollToTheSelection(originalArgs);\n            };\n            this.listenTo(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            // This works as a post-scroll-fixer because it's impossible predict whether the panel will be sticky after scrolling or not.\n            // Listen for a short period of time only and if the toolbar does not become sticky very soon, cancel the listener.\n            setTimeout(() => {\n                this.stopListening(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            }, 20);\n        }\n    }\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./classiceditor.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module editor-classic/classiceditoruiview\n */\nimport { BoxedEditorUIView, InlineEditableUIView, StickyPanelView, ToolbarView } from 'ckeditor5/src/ui';\nimport '../theme/classiceditor.css';\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n    /**\n     * Creates an instance of the classic editor UI view.\n     *\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param editingView The editing view instance this view is related to.\n     * @param options Configuration options for the view instance.\n     * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n     * in the main {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#toolbar toolbar}.\n     * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n     */\n    constructor(locale, editingView, options = {}) {\n        super(locale);\n        this.stickyPanel = new StickyPanelView(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        this.editable = new InlineEditableUIView(locale, editingView);\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n        this.stickyPanel.content.add(this.toolbar);\n        this.top.add(this.stickyPanel);\n        this.main.add(this.editable);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * An abstract watchdog class that handles most of the error handling process and the state of the underlying component.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and how to use it.\n *\n * @internal\n */\nexport default class Watchdog {\n    /**\n     * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.\n     */\n    constructor(config) {\n        /**\n         * An array of crashes saved as an object with the following properties:\n         *\n         * * `message`: `String`,\n         * * `stack`: `String`,\n         * * `date`: `Number`,\n         * * `filename`: `String | undefined`,\n         * * `lineno`: `Number | undefined`,\n         * * `colno`: `Number | undefined`,\n         */\n        this.crashes = [];\n        /**\n         * Specifies the state of the item watched by the watchdog. The state can be one of the following values:\n         *\n         * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.\n         * * `ready` &ndash; A state when the user can interact with the item.\n         * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`\n         * depending on how many and how frequent errors have been caught recently.\n         * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,\n         * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.\n         */\n        this.state = 'initializing';\n        /**\n         * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular\n         * approaches like `sinon.useFakeTimers()` do not work well with error handling.\n         */\n        this._now = Date.now;\n        this.crashes = [];\n        this._crashNumberLimit = typeof config.crashNumberLimit === 'number' ? config.crashNumberLimit : 3;\n        this._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === 'number' ? config.minimumNonErrorTimePeriod : 5000;\n        this._boundErrorHandler = evt => {\n            // `evt.error` is exposed by EventError while `evt.reason` is available in PromiseRejectionEvent.\n            const error = 'error' in evt ? evt.error : evt.reason;\n            // Note that `evt.reason` might be everything that is in the promise rejection.\n            // Similarly everything that is thrown lands in `evt.error`.\n            if (error instanceof Error) {\n                this._handleError(error, evt);\n            }\n        };\n        this._listeners = {};\n        if (!this._restart) {\n            throw new Error('The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. ' +\n                'Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.');\n        }\n    }\n    /**\n     * Destroys the watchdog and releases the resources.\n     */\n    destroy() {\n        this._stopErrorHandling();\n        this._listeners = {};\n    }\n    /**\n     * Starts listening to a specific event name by registering a callback that will be executed\n     * whenever an event with a given name fires.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param eventName The event name.\n     * @param callback A callback which will be added to event listeners.\n     */\n    on(eventName, callback) {\n        if (!this._listeners[eventName]) {\n            this._listeners[eventName] = [];\n        }\n        this._listeners[eventName].push(callback);\n    }\n    /**\n     * Stops listening to the specified event name by removing the callback from event listeners.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param eventName The event name.\n     * @param callback A callback which will be removed from event listeners.\n     */\n    off(eventName, callback) {\n        this._listeners[eventName] = this._listeners[eventName]\n            .filter(cb => cb !== callback);\n    }\n    /**\n     * Fires an event with a given event name and arguments.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     */\n    _fire(eventName, ...args) {\n        const callbacks = this._listeners[eventName] || [];\n        for (const callback of callbacks) {\n            callback.apply(this, [null, ...args]);\n        }\n    }\n    /**\n     * Starts error handling by attaching global error handlers.\n     */\n    _startErrorHandling() {\n        window.addEventListener('error', this._boundErrorHandler);\n        window.addEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Stops error handling by detaching global error handlers.\n     */\n    _stopErrorHandling() {\n        window.removeEventListener('error', this._boundErrorHandler);\n        window.removeEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Checks if an error comes from the watched item and restarts it.\n     * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.\n     *\n     * @fires error\n     * @param error Error.\n     * @param evt An error event.\n     */\n    _handleError(error, evt) {\n        // @if CK_DEBUG // const err = error as CKEditorError;\n        // @if CK_DEBUG // if ( err.is && err.is( 'CKEditorError' ) && err.context === undefined ) {\n        // @if CK_DEBUG // console.warn( 'The error is missing its context and Watchdog cannot restart the proper item.' );\n        // @if CK_DEBUG // }\n        if (this._shouldReactToError(error)) {\n            this.crashes.push({\n                message: error.message,\n                stack: error.stack,\n                // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events\n                filename: evt instanceof ErrorEvent ? evt.filename : undefined,\n                lineno: evt instanceof ErrorEvent ? evt.lineno : undefined,\n                colno: evt instanceof ErrorEvent ? evt.colno : undefined,\n                date: this._now()\n            });\n            const causesRestart = this._shouldRestart();\n            this.state = 'crashed';\n            this._fire('stateChange');\n            this._fire('error', { error, causesRestart });\n            if (causesRestart) {\n                this._restart();\n            }\n            else {\n                this.state = 'crashedPermanently';\n                this._fire('stateChange');\n            }\n        }\n    }\n    /**\n     * Checks whether an error should be handled by the watchdog.\n     *\n     * @param error An error that was caught by the error handling process.\n     */\n    _shouldReactToError(error) {\n        return (error.is &&\n            error.is('CKEditorError') &&\n            error.context !== undefined &&\n            // In some cases the watched item should not be restarted - e.g. during the item initialization.\n            // That's why the `null` was introduced as a correct error context which does cause restarting.\n            error.context !== null &&\n            // Do not react to errors if the watchdog is in states other than `ready`.\n            this.state === 'ready' &&\n            this._isErrorComingFromThisItem(error));\n    }\n    /**\n     * Checks if the watchdog should restart the underlying item.\n     */\n    _shouldRestart() {\n        if (this.crashes.length <= this._crashNumberLimit) {\n            return true;\n        }\n        const lastErrorTime = this.crashes[this.crashes.length - 1].date;\n        const firstMeaningfulErrorTime = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;\n        const averageNonErrorTimePeriod = (lastErrorTime - firstMeaningfulErrorTime) / this._crashNumberLimit;\n        return averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module watchdog/utils/getsubnodes\n */\n/* globals EventTarget, Event */\nexport default function getSubNodes(head, excludedProperties = new Set()) {\n    const nodes = [head];\n    // @if CK_DEBUG_WATCHDOG // const prevNodeMap = new Map();\n    // Nodes are stored to prevent infinite looping.\n    const subNodes = new Set();\n    let nodeIndex = 0;\n    while (nodes.length > nodeIndex) {\n        // Incrementing the iterator is much faster than changing size of the array with Array.prototype.shift().\n        const node = nodes[nodeIndex++];\n        if (subNodes.has(node) || !shouldNodeBeIncluded(node) || excludedProperties.has(node)) {\n            continue;\n        }\n        subNodes.add(node);\n        // Handle arrays, maps, sets, custom collections that implements `[ Symbol.iterator ]()`, etc.\n        if (Symbol.iterator in node) {\n            // The custom editor iterators might cause some problems if the editor is crashed.\n            try {\n                for (const n of node) {\n                    nodes.push(n);\n                    // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( n ) ) {\n                    // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( n, node );\n                    // @if CK_DEBUG_WATCHDOG // }\n                }\n            }\n            catch (err) {\n                // Do not log errors for broken structures\n                // since we are in the error handling process already.\n                // eslint-disable-line no-empty\n            }\n        }\n        else {\n            for (const key in node) {\n                // We share a reference via the protobuf library within the editors,\n                // hence the shared value should be skipped. Although, it's not a perfect\n                // solution since new places like that might occur in the future.\n                if (key === 'defaultValue') {\n                    continue;\n                }\n                nodes.push(node[key]);\n                // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( node[ key ] ) ) {\n                // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( node[ key ], node );\n                // @if CK_DEBUG_WATCHDOG // }\n            }\n        }\n    }\n    // @if CK_DEBUG_WATCHDOG // return { subNodes, prevNodeMap } as any;\n    return subNodes;\n}\nfunction shouldNodeBeIncluded(node) {\n    const type = Object.prototype.toString.call(node);\n    const typeOfNode = typeof node;\n    return !(typeOfNode === 'number' ||\n        typeOfNode === 'boolean' ||\n        typeOfNode === 'string' ||\n        typeOfNode === 'symbol' ||\n        typeOfNode === 'function' ||\n        type === '[object Date]' ||\n        type === '[object RegExp]' ||\n        type === '[object Module]' ||\n        node === undefined ||\n        node === null ||\n        // This flag is meant to exclude singletons shared across editor instances. So when an error is thrown in one editor,\n        // the other editors connected through the reference to the same singleton are not restarted. This is a temporary workaround\n        // until a better solution is found.\n        // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n        node._watchdogExcluded ||\n        // Skip native DOM objects, e.g. Window, nodes, events, etc.\n        node instanceof EventTarget ||\n        node instanceof Event);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module watchdog/utils/areconnectedthroughproperties\n */\n/* globals console */\nimport getSubNodes from './getsubnodes';\n/**\n * Traverses both structures to find out whether there is a reference that is shared between both structures.\n */\nexport default function areConnectedThroughProperties(target1, target2, excludedNodes = new Set()) {\n    if (target1 === target2 && isObject(target1)) {\n        return true;\n    }\n    // @if CK_DEBUG_WATCHDOG // return checkConnectionBetweenProps( target1, target2, excludedNodes );\n    const subNodes1 = getSubNodes(target1, excludedNodes);\n    const subNodes2 = getSubNodes(target2, excludedNodes);\n    for (const node of subNodes1) {\n        if (subNodes2.has(node)) {\n            return true;\n        }\n    }\n    return false;\n}\n/* istanbul ignore next -- @preserve */\n// eslint-disable-next-line\nfunction checkConnectionBetweenProps(target1, target2, excludedNodes) {\n    const { subNodes: subNodes1, prevNodeMap: prevNodeMap1 } = getSubNodes(target1, excludedNodes.subNodes);\n    const { subNodes: subNodes2, prevNodeMap: prevNodeMap2 } = getSubNodes(target2, excludedNodes.subNodes);\n    for (const sharedNode of subNodes1) {\n        if (subNodes2.has(sharedNode)) {\n            const connection = [];\n            connection.push(sharedNode);\n            let node = prevNodeMap1.get(sharedNode);\n            while (node && node !== target1) {\n                connection.push(node);\n                node = prevNodeMap1.get(node);\n            }\n            node = prevNodeMap2.get(sharedNode);\n            while (node && node !== target2) {\n                connection.unshift(node);\n                node = prevNodeMap2.get(node);\n            }\n            console.log('--------');\n            console.log({ target1 });\n            console.log({ sharedNode });\n            console.log({ target2 });\n            console.log({ connection });\n            return true;\n        }\n    }\n    return false;\n}\nfunction isObject(structure) {\n    return typeof structure === 'object' && structure !== null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties';\nimport Watchdog from './watchdog';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class EditorWatchdog extends Watchdog {\n    /**\n     * @param Editor The editor class.\n     * @param watchdogConfig The watchdog plugin configuration.\n     */\n    constructor(Editor, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * The current editor instance.\n         */\n        this._editor = null;\n        // this._editorClass = Editor;\n        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n        // Set default creator and destructor functions:\n        if (Editor) {\n            this._creator = ((elementOrData, config) => Editor.create(elementOrData, config));\n        }\n        this._destructor = editor => editor.destroy();\n    }\n    /**\n     * The current editor instance.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * @internal\n     */\n    get _item() {\n        return this._editor;\n    }\n    /**\n     * Sets the function that is responsible for the editor creation.\n     * It expects a function that should return a promise.\n     *\n     * ```ts\n     * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the editor destruction.\n     * Overrides the default destruction function, which destroys only the editor instance.\n     * It expects a function that should return a promise or `undefined`.\n     *\n     * ```ts\n     * watchdog.setDestructor( editor => {\n     * \t// Do something before the editor is destroyed.\n     *\n     * \treturn editor\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the editor is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n     * the state to `initializing`.\n     *\n     * @fires restart\n     */\n    _restart() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy();\n        })\n            .catch(err => {\n            console.error('An error happened during the editor destroying.', err);\n        })\n            .then(() => {\n            if (typeof this._elementOrData === 'string') {\n                return this.create(this._data, this._config, this._config.context);\n            }\n            else {\n                const updatedConfig = Object.assign({}, this._config, {\n                    initialData: this._data\n                });\n                return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n            }\n        })\n            .then(() => {\n            this._fire('restart');\n        });\n    }\n    /**\n     * Creates the editor instance and keeps it running, using the defined creator and destructor.\n     *\n     * @param elementOrData The editor source element or the editor data.\n     * @param config The editor configuration.\n     * @param context A context for the editor.\n     */\n    create(elementOrData = this._elementOrData, config = this._config, context) {\n        return Promise.resolve()\n            .then(() => {\n            super._startErrorHandling();\n            this._elementOrData = elementOrData;\n            // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n            // when an error occurs in one of these editors, the watchdog will restart all of them.\n            this._config = this._cloneEditorConfiguration(config) || {};\n            this._config.context = context;\n            return this._creator(elementOrData, this._config);\n        })\n            .then(editor => {\n            this._editor = editor;\n            editor.model.document.on('change:data', this._throttledSave);\n            this._lastDocumentVersion = editor.model.document.version;\n            this._data = this._getData();\n            this.state = 'ready';\n            this._fire('stateChange');\n        });\n    }\n    /**\n     * Destroys the watchdog and the current editor instance. It fires the callback\n     * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n     * It also sets the state to `destroyed`.\n     */\n    destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        });\n    }\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            // Save data if there is a remaining editor data change.\n            this._throttledSave.flush();\n            const editor = this._editor;\n            this._editor = null;\n            // Remove the `change:data` listener before destroying the editor.\n            // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n            // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n            editor.model.document.off('change:data', this._throttledSave);\n            return this._destructor(editor);\n        });\n    }\n    /**\n     * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n     * the moment of the crash.\n     */\n    _save() {\n        const version = this._editor.model.document.version;\n        try {\n            this._data = this._getData();\n            this._lastDocumentVersion = version;\n        }\n        catch (err) {\n            console.error(err, 'An error happened during restoring editor data. ' +\n                'Editor will be restored from the previously saved data.');\n        }\n    }\n    /**\n     * @internal\n     */\n    _setExcludedProperties(props) {\n        this._excludedProps = props;\n    }\n    /**\n     * Returns the editor data.\n     */\n    _getData() {\n        const data = {};\n        for (const rootName of this._editor.model.document.getRootNames()) {\n            data[rootName] = this._editor.data.get({ rootName });\n        }\n        return data;\n    }\n    /**\n     * Traverses the error context and the current editor to find out whether these structures are connected\n     * to each other via properties.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n    }\n    /**\n     * Clones the editor configuration.\n     */\n    _cloneEditorConfiguration(config) {\n        return cloneDeepWith(config, (value, key) => {\n            // Leave DOM references.\n            if (isElement(value)) {\n                return value;\n            }\n            if (key === 'context') {\n                return value;\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Watchdog from './watchdog';\nimport EditorWatchdog from './editorwatchdog';\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties';\nimport getSubNodes from './utils/getsubnodes';\nconst mainQueueId = Symbol('MainQueueId');\n/**\n * A watchdog for the {@link module:core/context~Context} class.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class ContextWatchdog extends Watchdog {\n    /**\n     * The context watchdog class constructor.\n     *\n     * ```ts\n     * const watchdog = new ContextWatchdog( Context );\n     *\n     * await watchdog.create( contextConfiguration );\n     *\n     * await watchdog.add( item );\n     * ```\n     *\n     * See the {@glink features/watchdog Watchdog feature guide} to learn more how to use this feature.\n     *\n     * @param Context The {@link module:core/context~Context} class.\n     * @param watchdogConfig The watchdog configuration.\n     */\n    constructor(Context, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * A map of internal watchdogs for added items.\n         */\n        this._watchdogs = new Map();\n        /**\n         * The current context instance.\n         */\n        this._context = null;\n        /**\n         * Context properties (nodes/references) that are gathered during the initial context creation\n         * and are used to distinguish the origin of an error.\n         */\n        this._contextProps = new Set();\n        /**\n         * An action queue, which is used to handle async functions queuing.\n         */\n        this._actionQueues = new ActionQueues();\n        this._watchdogConfig = watchdogConfig;\n        // Default creator and destructor.\n        this._creator = contextConfig => Context.create(contextConfig);\n        this._destructor = context => context.destroy();\n        this._actionQueues.onEmpty(() => {\n            if (this.state === 'initializing') {\n                this.state = 'ready';\n                this._fire('stateChange');\n            }\n        });\n    }\n    /**\n     * Sets the function that is responsible for the context creation.\n     * It expects a function that should return a promise (or `undefined`).\n     *\n     * ```ts\n     * watchdog.setCreator( config => Context.create( config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the context destruction.\n     * Overrides the default destruction function, which destroys only the context instance.\n     * It expects a function that should return a promise (or `undefined`).\n     *\n     * ```ts\n     * watchdog.setDestructor( context => {\n     * \t// Do something before the context is destroyed.\n     *\n     * \treturn context\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the context is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * The context instance. Keep in mind that this property might be changed when the context watchdog restarts,\n     * so do not keep this instance internally. Always operate on the `ContextWatchdog#context` property.\n     */\n    get context() {\n        return this._context;\n    }\n    /**\n     * Initializes the context watchdog. Once it is created, the watchdog takes care about\n     * recreating the context and the provided items, and starts the error handling mechanism.\n     *\n     * ```ts\n     * await watchdog.create( {\n     * \tplugins: []\n     * } );\n     * ```\n     *\n     * @param contextConfig The context configuration. See {@link module:core/context~Context}.\n     */\n    create(contextConfig = {}) {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this._contextConfig = contextConfig;\n            return this._create();\n        });\n    }\n    /**\n     * Returns an item instance with the given `itemId`.\n     *\n     * ```ts\n     * const editor1 = watchdog.getItem( 'editor1' );\n     * ```\n     *\n     * @param itemId The item ID.\n     * @returns The item instance or `undefined` if an item with a given ID has not been found.\n     */\n    getItem(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog._item;\n    }\n    /**\n     * Gets the state of the given item. See {@link #state} for a list of available states.\n     *\n     * ```ts\n     * const editor1State = watchdog.getItemState( 'editor1' );\n     * ```\n     *\n     * @param itemId Item ID.\n     * @returns The state of the item.\n     */\n    getItemState(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog.state;\n    }\n    /**\n     * Adds items to the watchdog. Once created, instances of these items will be available using the {@link #getItem} method.\n     *\n     * Items can be passed together as an array of objects:\n     *\n     * ```ts\n     * await watchdog.add( [ {\n     * \tid: 'editor1',\n     * \ttype: 'editor',\n     * \tsourceElementOrData: document.querySelector( '#editor' ),\n     * \tconfig: {\n     * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n     * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n     * \t},\n     * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n     * } ] );\n     * ```\n     *\n     * Or one by one as objects:\n     *\n     * ```ts\n     * await watchdog.add( {\n     * \tid: 'editor1',\n     * \ttype: 'editor',\n     * \tsourceElementOrData: document.querySelector( '#editor' ),\n     * \tconfig: {\n     * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n     * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n     * \t},\n     * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n     * ] );\n     * ```\n     *\n     * Then an instance can be retrieved using the {@link #getItem} method:\n     *\n     * ```ts\n     * const editor1 = watchdog.getItem( 'editor1' );\n     * ```\n     *\n     * Note that this method can be called multiple times, but for performance reasons it is better\n     * to pass all items together.\n     *\n     * @param itemConfigurationOrItemConfigurations An item configuration object or an array of item configurations.\n     */\n    add(itemConfigurationOrItemConfigurations) {\n        const itemConfigurations = toArray(itemConfigurationOrItemConfigurations);\n        return Promise.all(itemConfigurations.map(item => {\n            return this._actionQueues.enqueue(item.id, () => {\n                if (this.state === 'destroyed') {\n                    throw new Error('Cannot add items to destroyed watchdog.');\n                }\n                if (!this._context) {\n                    throw new Error('Context was not created yet. You should call the `ContextWatchdog#create()` method first.');\n                }\n                let watchdog;\n                if (this._watchdogs.has(item.id)) {\n                    throw new Error(`Item with the given id is already added: '${item.id}'.`);\n                }\n                if (item.type === 'editor') {\n                    watchdog = new EditorWatchdog(null, this._watchdogConfig);\n                    watchdog.setCreator(item.creator);\n                    watchdog._setExcludedProperties(this._contextProps);\n                    if (item.destructor) {\n                        watchdog.setDestructor(item.destructor);\n                    }\n                    this._watchdogs.set(item.id, watchdog);\n                    // Enqueue the internal watchdog errors within the main queue.\n                    // And propagate the internal `error` events as `itemError` event.\n                    watchdog.on('error', (evt, { error, causesRestart }) => {\n                        this._fire('itemError', { itemId: item.id, error });\n                        // Do not enqueue the item restart action if the item will not restart.\n                        if (!causesRestart) {\n                            return;\n                        }\n                        this._actionQueues.enqueue(item.id, () => new Promise(res => {\n                            const rethrowRestartEventOnce = () => {\n                                watchdog.off('restart', rethrowRestartEventOnce);\n                                this._fire('itemRestart', { itemId: item.id });\n                                res();\n                            };\n                            watchdog.on('restart', rethrowRestartEventOnce);\n                        }));\n                    });\n                    return watchdog.create(item.sourceElementOrData, item.config, this._context);\n                }\n                else {\n                    throw new Error(`Not supported item type: '${item.type}'.`);\n                }\n            });\n        }));\n    }\n    /**\n     * Removes and destroys item(s) with given ID(s).\n     *\n     * ```ts\n     * await watchdog.remove( 'editor1' );\n     * ```\n     *\n     * Or\n     *\n     * ```ts\n     * await watchdog.remove( [ 'editor1', 'editor2' ] );\n     * ```\n     *\n     * @param itemIdOrItemIds Item ID or an array of item IDs.\n     */\n    remove(itemIdOrItemIds) {\n        const itemIds = toArray(itemIdOrItemIds);\n        return Promise.all(itemIds.map(itemId => {\n            return this._actionQueues.enqueue(itemId, () => {\n                const watchdog = this._getWatchdog(itemId);\n                this._watchdogs.delete(itemId);\n                return watchdog.destroy();\n            });\n        }));\n    }\n    /**\n     * Destroys the context watchdog and all added items.\n     * Once the context watchdog is destroyed, new items cannot be added.\n     *\n     * ```ts\n     * await watchdog.destroy();\n     * ```\n     */\n    destroy() {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        });\n    }\n    /**\n     * Restarts the context watchdog.\n     */\n    _restart() {\n        return this._actionQueues.enqueue(mainQueueId, () => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy()\n                .catch(err => {\n                console.error('An error happened during destroying the context or items.', err);\n            })\n                .then(() => this._create())\n                .then(() => this._fire('restart'));\n        });\n    }\n    /**\n     * Initializes the context watchdog.\n     */\n    _create() {\n        return Promise.resolve()\n            .then(() => {\n            this._startErrorHandling();\n            return this._creator(this._contextConfig);\n        })\n            .then(context => {\n            this._context = context;\n            this._contextProps = getSubNodes(this._context);\n            return Promise.all(Array.from(this._watchdogs.values())\n                .map(watchdog => {\n                watchdog._setExcludedProperties(this._contextProps);\n                return watchdog.create(undefined, undefined, this._context);\n            }));\n        });\n    }\n    /**\n     * Destroys the context instance and all added items.\n     */\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            const context = this._context;\n            this._context = null;\n            this._contextProps = new Set();\n            return Promise.all(Array.from(this._watchdogs.values())\n                .map(watchdog => watchdog.destroy()))\n                // Context destructor destroys each editor.\n                .then(() => this._destructor(context));\n        });\n    }\n    /**\n     * Returns the watchdog for a given item ID.\n     *\n     * @param itemId Item ID.\n     */\n    _getWatchdog(itemId) {\n        const watchdog = this._watchdogs.get(itemId);\n        if (!watchdog) {\n            throw new Error(`Item with the given id was not registered: ${itemId}.`);\n        }\n        return watchdog;\n    }\n    /**\n     * Checks whether an error comes from the context instance and not from the item instances.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        for (const watchdog of this._watchdogs.values()) {\n            if (watchdog._isErrorComingFromThisItem(error)) {\n                return false;\n            }\n        }\n        return areConnectedThroughProperties(this._context, error.context);\n    }\n}\n/**\n * Manager of action queues that allows queuing async functions.\n */\nclass ActionQueues {\n    constructor() {\n        this._onEmptyCallbacks = [];\n        this._queues = new Map();\n        this._activeActions = 0;\n    }\n    /**\n     * Used to register callbacks that will be run when the queue becomes empty.\n     *\n     * @param onEmptyCallback A callback that will be run whenever the queue becomes empty.\n     */\n    onEmpty(onEmptyCallback) {\n        this._onEmptyCallbacks.push(onEmptyCallback);\n    }\n    /**\n     * It adds asynchronous actions (functions) to the proper queue and runs them one by one.\n     *\n     * @param queueId The action queue ID.\n     * @param action A function that should be enqueued.\n     */\n    enqueue(queueId, action) {\n        const isMainAction = queueId === mainQueueId;\n        this._activeActions++;\n        if (!this._queues.get(queueId)) {\n            this._queues.set(queueId, Promise.resolve());\n        }\n        // List all sources of actions that the current action needs to await for.\n        // For the main action wait for all other actions.\n        // For the item action wait only for the item queue and the main queue.\n        const awaitedActions = isMainAction ?\n            Promise.all(this._queues.values()) :\n            Promise.all([this._queues.get(mainQueueId), this._queues.get(queueId)]);\n        const queueWithAction = awaitedActions.then(action);\n        // Catch all errors in the main queue to stack promises even if an error occurred in the past.\n        const nonErrorQueue = queueWithAction.catch(() => { });\n        this._queues.set(queueId, nonErrorQueue);\n        return queueWithAction.finally(() => {\n            this._activeActions--;\n            if (this._queues.get(queueId) === nonErrorQueue && this._activeActions === 0) {\n                this._onEmptyCallbacks.forEach(cb => cb());\n            }\n        });\n    }\n}\n/**\n * Transforms any value to an array. If the provided value is already an array, it is returned unchanged.\n *\n * @param elementOrArray The value to transform to an array.\n * @returns An array created from data.\n */\nfunction toArray(elementOrArray) {\n    return Array.isArray(elementOrArray) ? elementOrArray : [elementOrArray];\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module editor-classic/classiceditor\n */\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport { Editor, Context, DataApiMixin, ElementApiMixin, attachToForm } from 'ckeditor5/src/core';\nimport { getDataFromElement, CKEditorError } from 'ckeditor5/src/utils';\nimport { ContextWatchdog, EditorWatchdog } from 'ckeditor5/src/watchdog';\nimport { isElement as _isElement } from 'lodash-es';\n/**\n * The {@glink installation/getting-started/predefined-builds#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink installation/getting-started/predefined-builds#classic-editor classic build}.\n *\n * {@glink installation/getting-started/predefined-builds Builds}\n * are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n */\nexport default class ClassicEditor extends DataApiMixin(ElementApiMixin(Editor)) {\n    /**\n     * Creates an instance of the classic editor.\n     *\n     * **Note:** do not use the constructor to create editor instances. Use the static\n     * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n     *\n     * @param sourceElementOrData The DOM element that will be the source for the created editor\n     * or the editor's initial data. For more information see\n     * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n     * @param config The editor configuration.\n     */\n    constructor(sourceElementOrData, config = {}) {\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n        }\n        this.model.document.createRoot();\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const view = new ClassicEditorUIView(this.locale, this.editing.view, {\n            shouldToolbarGroupWhenFull\n        });\n        this.ui = new ClassicEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n     * Destroys the editor instance, releasing all resources used by it.\n     *\n     * Updates the original editor element with the data if the\n     * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n     * configuration option is set to `true`.\n     */\n    destroy() {\n        if (this.sourceElement) {\n            this.updateSourceElement();\n        }\n        this.ui.destroy();\n        return super.destroy();\n    }\n    /**\n     * Creates a new classic editor instance.\n     *\n     * There are three ways how the editor can be initialized.\n     *\n     * # Replacing a DOM element (and loading data from it)\n     *\n     * You can initialize the editor using an existing DOM element:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( document.querySelector( '#editor' ) )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n     *\n     * # Creating a detached editor\n     *\n     * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n     * In this case, the editor will render an element that must be inserted into the DOM:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( '<p>Hello world!</p>' )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     *\n     * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n     * \t\tdocument.body.appendChild( editor.ui.element );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n     * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n     *\n     * # Replacing a DOM element (and data provided in `config.initialData`)\n     *\n     * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n     *\n     * ```ts\n     * ClassicEditor\n     * \t.create( document.querySelector( '#editor' ), {\n     * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n     * \t} )\n     * \t.then( editor => {\n     * \t\tconsole.log( 'Editor was initialized', editor );\n     * \t} )\n     * \t.catch( err => {\n     * \t\tconsole.error( err.stack );\n     * \t} );\n     * ```\n     *\n     * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n     * makes it difficult to set the content of the source element.\n     *\n     * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n     *\n     * # Configuring the editor\n     *\n     * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n     * customizing plugins, toolbar and more.\n     *\n     * # Using the editor from source\n     *\n     * The code samples listed in the previous sections of this documentation assume that you are using an\n     * {@glink installation/getting-started/predefined-builds editor build} (for example – `@ckeditor/ckeditor5-build-classic`).\n     *\n     * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n     * you need to define the list of\n     * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n     * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n     * source in the {@glink installation/advanced/alternative-setups/integrating-from-source-webpack dedicated guide}.\n     *\n     * @param sourceElementOrData The DOM element that will be the source for the created editor\n     * or the editor's initial data.\n     *\n     * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n     * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n     * in the DOM (the original one will be hidden and the editor will be injected next to it).\n     *\n     * If the {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n     * option is set to `true`, the editor data will be set back to the original element once the editor is destroyed and when a form,\n     * in which this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration\n     * with native web forms.\n     *\n     * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n     * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n     *\n     * @param config The editor configuration.\n     * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n     */\n    static create(sourceElementOrData, config = {}) {\n        return new Promise(resolve => {\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins()\n                .then(() => editor.ui.init(isElement(sourceElementOrData) ? sourceElementOrData : null))\n                .then(() => editor.data.init(editor.config.get('initialData')))\n                .then(() => editor.fire('ready'))\n                .then(() => editor));\n        });\n    }\n}\n/**\n * The {@link module:core/context~Context} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nClassicEditor.Context = Context;\n/**\n * The {@link module:watchdog/editorwatchdog~EditorWatchdog} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nClassicEditor.EditorWatchdog = EditorWatchdog;\n/**\n * The {@link module:watchdog/contextwatchdog~ContextWatchdog} class.\n *\n * Exposed as static editor field for easier access in editor builds.\n */\nClassicEditor.ContextWatchdog = ContextWatchdog;\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return _isElement(value);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals HTMLTextAreaElement */\n/**\n * @module utils/dom/getdatafromelement\n */\n/**\n * Gets data from a given source element.\n *\n * @param el The element from which the data will be retrieved.\n * @returns The data string.\n */\nexport default function getDataFromElement(el) {\n    if (el instanceof HTMLTextAreaElement) {\n        return el.value;\n    }\n    return el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/attachtoform\n */\nimport { isFunction } from 'lodash-es';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param editor Editor instance.\n */\nexport default function attachToForm(editor) {\n    if (!isFunction(editor.updateSourceElement)) {\n        /**\n         * The editor passed to `attachToForm()` must implement the\n         * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n         *\n         * @error attachtoform-missing-elementapi-interface\n         */\n        throw new CKEditorError('attachtoform-missing-elementapi-interface', editor);\n    }\n    const sourceElement = editor.sourceElement;\n    // Only when replacing a textarea which is inside of a form element.\n    if (isTextArea(sourceElement) && sourceElement.form) {\n        let originalSubmit;\n        const form = sourceElement.form;\n        const onSubmit = () => editor.updateSourceElement();\n        // Replace the original form#submit() to call a custom submit function first.\n        // Check if #submit is a function because the form might have an input named \"submit\".\n        if (isFunction(form.submit)) {\n            originalSubmit = form.submit;\n            form.submit = () => {\n                onSubmit();\n                originalSubmit.apply(form);\n            };\n        }\n        // Update the replaced textarea with data before each form#submit event.\n        form.addEventListener('submit', onSubmit);\n        // Remove the submit listener and revert the original submit method on\n        // editor#destroy.\n        editor.on('destroy', () => {\n            form.removeEventListener('submit', onSubmit);\n            if (originalSubmit) {\n                form.submit = originalSubmit;\n            }\n        });\n    }\n}\nfunction isTextArea(sourceElement) {\n    return !!sourceElement && sourceElement.tagName.toLowerCase() === 'textarea';\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module source-editing/utils/formathtml\n */\n/**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param input An HTML string to format.\n */\nexport function formatHtml(input) {\n    // A list of block-like elements around which the new lines should be inserted, and within which\n    // the indentation of their children should be increased.\n    // The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n    // a full list of HTML block-level elements.\n    // A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n    // Note that <pre> element is not listed on this list to avoid breaking whitespace formatting.\n    const elementsToFormat = [\n        { name: 'address', isVoid: false },\n        { name: 'article', isVoid: false },\n        { name: 'aside', isVoid: false },\n        { name: 'blockquote', isVoid: false },\n        { name: 'br', isVoid: true },\n        { name: 'details', isVoid: false },\n        { name: 'dialog', isVoid: false },\n        { name: 'dd', isVoid: false },\n        { name: 'div', isVoid: false },\n        { name: 'dl', isVoid: false },\n        { name: 'dt', isVoid: false },\n        { name: 'fieldset', isVoid: false },\n        { name: 'figcaption', isVoid: false },\n        { name: 'figure', isVoid: false },\n        { name: 'footer', isVoid: false },\n        { name: 'form', isVoid: false },\n        { name: 'h1', isVoid: false },\n        { name: 'h2', isVoid: false },\n        { name: 'h3', isVoid: false },\n        { name: 'h4', isVoid: false },\n        { name: 'h5', isVoid: false },\n        { name: 'h6', isVoid: false },\n        { name: 'header', isVoid: false },\n        { name: 'hgroup', isVoid: false },\n        { name: 'hr', isVoid: true },\n        { name: 'input', isVoid: true },\n        { name: 'li', isVoid: false },\n        { name: 'main', isVoid: false },\n        { name: 'nav', isVoid: false },\n        { name: 'ol', isVoid: false },\n        { name: 'p', isVoid: false },\n        { name: 'section', isVoid: false },\n        { name: 'table', isVoid: false },\n        { name: 'tbody', isVoid: false },\n        { name: 'td', isVoid: false },\n        { name: 'textarea', isVoid: false },\n        { name: 'th', isVoid: false },\n        { name: 'thead', isVoid: false },\n        { name: 'tr', isVoid: false },\n        { name: 'ul', isVoid: false }\n    ];\n    const elementNamesToFormat = elementsToFormat.map(element => element.name).join('|');\n    // It is not the fastest way to format the HTML markup but the performance should be good enough.\n    const lines = input\n        // Add new line before and after `<tag>` and `</tag>`.\n        // It may separate individual elements with two new lines, but this will be fixed below.\n        .replace(new RegExp(`</?(${elementNamesToFormat})( .*?)?>`, 'g'), '\\n$&\\n')\n        // Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n        .split('\\n');\n    let indentCount = 0;\n    return lines\n        .filter(line => line.length)\n        .map(line => {\n        if (isNonVoidOpeningTag(line, elementsToFormat)) {\n            return indentLine(line, indentCount++);\n        }\n        if (isClosingTag(line, elementsToFormat)) {\n            return indentLine(line, --indentCount);\n        }\n        return indentLine(line, indentCount);\n    })\n        .join('\\n');\n}\n/**\n * Checks, if an argument is an opening tag of a non-void element to be formatted.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */\nfunction isNonVoidOpeningTag(line, elementsToFormat) {\n    return elementsToFormat.some(element => {\n        if (element.isVoid) {\n            return false;\n        }\n        if (!new RegExp(`<${element.name}( .*?)?>`).test(line)) {\n            return false;\n        }\n        return true;\n    });\n}\n/**\n * Checks, if an argument is a closing tag.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */\nfunction isClosingTag(line, elementsToFormat) {\n    return elementsToFormat.some(element => {\n        return new RegExp(`</${element.name}>`).test(line);\n    });\n}\n/**\n * Indents a line by a specified number of characters.\n *\n * @param line Line to indent.\n * @param indentCount Number of characters to use for indentation.\n * @param indentChar Indentation character(s). 4 spaces by default.\n */\nfunction indentLine(line, indentCount, indentChar = '    ') {\n    // More about Math.max() here in https://github.com/ckeditor/ckeditor5/issues/10698.\n    return `${indentChar.repeat(Math.max(0, indentCount))}${line}`;\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./sourceediting.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module source-editing/sourceediting\n */\n/* global console */\nimport { Plugin, PendingActions } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { createElement, ElementReplacer } from 'ckeditor5/src/utils';\nimport { formatHtml } from './utils/formathtml';\nimport '../theme/sourceediting.css';\nimport sourceEditingIcon from '../theme/icons/source-editing.svg';\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n */\nexport default class SourceEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'SourceEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this.set('isSourceEditingMode', false);\n        this._elementReplacer = new ElementReplacer();\n        this._replacedRoots = new Map();\n        this._dataFromRoots = new Map();\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('sourceEditing', locale => {\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('Source'),\n                icon: sourceEditingIcon,\n                tooltip: true,\n                withText: true,\n                class: 'ck-source-editing-button'\n            });\n            buttonView.bind('isOn').to(this, 'isSourceEditingMode');\n            // The button should be disabled if one of the following conditions is met:\n            buttonView.bind('isEnabled').to(this, 'isEnabled', editor, 'isReadOnly', editor.plugins.get(PendingActions), 'hasAny', (isEnabled, isEditorReadOnly, hasAnyPendingActions) => {\n                // (1) The plugin itself is disabled.\n                if (!isEnabled) {\n                    return false;\n                }\n                // (2) The editor is in read-only mode.\n                if (isEditorReadOnly) {\n                    return false;\n                }\n                // (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n                // until the model is finally set.\n                if (hasAnyPendingActions) {\n                    return false;\n                }\n                return true;\n            });\n            this.listenTo(buttonView, 'execute', () => {\n                this.isSourceEditingMode = !this.isSourceEditingMode;\n            });\n            return buttonView;\n        });\n        // Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n        // integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n        if (this._isAllowedToHandleSourceEditingMode()) {\n            this.on('change:isSourceEditingMode', (evt, name, isSourceEditingMode) => {\n                if (isSourceEditingMode) {\n                    this._showSourceEditing();\n                    this._disableCommands();\n                }\n                else {\n                    this._hideSourceEditing();\n                    this._enableCommands();\n                }\n            });\n            this.on('change:isEnabled', (evt, name, isEnabled) => this._handleReadOnlyMode(!isEnabled));\n            this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly) => this._handleReadOnlyMode(isReadOnly));\n        }\n        // Update the editor data while calling editor.getData() in the source editing mode.\n        editor.data.on('get', () => {\n            if (this.isSourceEditingMode) {\n                this.updateEditorData();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const collaborationPluginNamesToWarn = [\n            'RealTimeCollaborativeEditing',\n            'CommentsEditing',\n            'TrackChangesEditing',\n            'RevisionHistory'\n        ];\n        // Currently, the basic integration with Collaboration Features is to display a warning in the console.\n        if (collaborationPluginNamesToWarn.some(pluginName => editor.plugins.has(pluginName))) {\n            console.warn('You initialized the editor with the source editing feature and at least one of the collaboration features. ' +\n                'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n                'that contains markers created by the collaboration features.');\n        }\n        // Restricted Editing integration can also lead to problems. Warn the user accordingly.\n        if (editor.plugins.has('RestrictedEditingModeEditing')) {\n            console.warn('You initialized the editor with the source editing feature and restricted editing feature. ' +\n                'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n                'that contains markers created by the restricted editing feature.');\n        }\n    }\n    /**\n     * Updates the source data in all hidden editing roots.\n     */\n    updateEditorData() {\n        const editor = this.editor;\n        const data = {};\n        for (const [rootName, domSourceEditingElementWrapper] of this._replacedRoots) {\n            const oldData = this._dataFromRoots.get(rootName);\n            const newData = domSourceEditingElementWrapper.dataset.value;\n            // Do not set the data unless some changes have been made in the meantime.\n            // This prevents empty undo steps after switching to the normal editor.\n            if (oldData !== newData) {\n                data[rootName] = newData;\n            }\n        }\n        if (Object.keys(data).length) {\n            editor.data.set(data, { batchType: { isUndoable: true } });\n        }\n    }\n    /**\n     * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n     * root.\n     *\n     * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n     * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n     * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n     * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n     * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n     * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n     * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n     * Since both children occupy the same grid cell, both have always the same height.\n     */\n    _showSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        model.change(writer => {\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n        });\n        // It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n        // main root, but this code may help understand and use this feature in external integrations.\n        for (const [rootName, domRootElement] of editingView.domRoots) {\n            const data = formatSource(editor.data.get({ rootName }));\n            const domSourceEditingElementTextarea = createElement(domRootElement.ownerDocument, 'textarea', {\n                rows: '1',\n                'aria-label': 'Source code editing area'\n            });\n            const domSourceEditingElementWrapper = createElement(domRootElement.ownerDocument, 'div', {\n                class: 'ck-source-editing-area',\n                'data-value': data\n            }, [domSourceEditingElementTextarea]);\n            domSourceEditingElementTextarea.value = data;\n            // Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n            domSourceEditingElementTextarea.setSelectionRange(0, 0);\n            // Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n            // wrapper's `data-value` property.\n            domSourceEditingElementTextarea.addEventListener('input', () => {\n                domSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n                editor.ui.update();\n            });\n            editingView.change(writer => {\n                const viewRoot = editingView.document.getRoot(rootName);\n                writer.addClass('ck-hidden', viewRoot);\n            });\n            // Register the element so it becomes available for Alt+F10 and Esc navigation.\n            editor.ui.setEditableElement('sourceEditing:' + rootName, domSourceEditingElementTextarea);\n            this._replacedRoots.set(rootName, domSourceEditingElementWrapper);\n            this._elementReplacer.replace(domRootElement, domSourceEditingElementWrapper);\n            this._dataFromRoots.set(rootName, data);\n        }\n        this._focusSourceEditing();\n    }\n    /**\n     * Restores all hidden editing roots and sets the source data in them.\n     */\n    _hideSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this.updateEditorData();\n        editingView.change(writer => {\n            for (const [rootName] of this._replacedRoots) {\n                writer.removeClass('ck-hidden', editingView.document.getRoot(rootName));\n            }\n        });\n        this._elementReplacer.restore();\n        this._replacedRoots.clear();\n        this._dataFromRoots.clear();\n        editingView.focus();\n    }\n    /**\n     * Focuses the textarea containing document source from the first editing root.\n     */\n    _focusSourceEditing() {\n        const editor = this.editor;\n        const [domSourceEditingElementWrapper] = this._replacedRoots.values();\n        const textarea = domSourceEditingElementWrapper.querySelector('textarea');\n        // The FocusObserver was disabled by View.render() while the DOM root was getting hidden and the replacer\n        // revealed the textarea. So it couldn't notice that the DOM root got blurred in the process.\n        // Let's sync this state manually here because otherwise Renderer will attempt to render selection\n        // in an invisible DOM root.\n        editor.editing.view.document.isFocused = false;\n        textarea.focus();\n    }\n    /**\n     * Disables all commands.\n     */\n    _disableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()) {\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n     * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n     */\n    _enableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()) {\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n     * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n     *\n     * @param isReadOnly Indicates whether all textarea elements should be read-only.\n     */\n    _handleReadOnlyMode(isReadOnly) {\n        if (!this.isSourceEditingMode) {\n            return;\n        }\n        for (const [, domSourceEditingElementWrapper] of this._replacedRoots) {\n            domSourceEditingElementWrapper.querySelector('textarea').readOnly = isReadOnly;\n        }\n    }\n    /**\n     * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n     * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n     */\n    _isAllowedToHandleSourceEditingMode() {\n        const editor = this.editor;\n        const editable = editor.ui.view.editable;\n        // Checks, if the editor's editable belongs to the editor's DOM tree.\n        return editable && !editable.hasExternalElement;\n    }\n}\n/**\n * Formats the content for a better readability.\n *\n * For a non-HTML source the unchanged input string is returned.\n *\n * @param input Input string to check.\n */\nfunction formatSource(input) {\n    if (!isHtml(input)) {\n        return input;\n    }\n    return formatHtml(input);\n}\n/**\n * Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n *\n * @param input Input string to check.\n */\nfunction isHtml(input) {\n    return input.startsWith('<');\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/clipboardobserver\n */\nimport { EventInfo } from '@ckeditor/ckeditor5-utils';\nimport { DataTransfer, DomEventObserver } from '@ckeditor/ckeditor5-engine';\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput},\n * * {@link module:engine/view/document~Document#event:paste},\n * * {@link module:engine/view/document~Document#event:copy},\n * * {@link module:engine/view/document~Document#event:cut},\n * * {@link module:engine/view/document~Document#event:drop},\n * * {@link module:engine/view/document~Document#event:dragover},\n * * {@link module:engine/view/document~Document#event:dragging},\n * * {@link module:engine/view/document~Document#event:dragstart},\n * * {@link module:engine/view/document~Document#event:dragend},\n * * {@link module:engine/view/document~Document#event:dragenter},\n * * {@link module:engine/view/document~Document#event:dragleave}.\n *\n * **Note**: This observer is not available by default (ckeditor5-engine does not add it on its own).\n * To make it available, it needs to be added to {@link module:engine/view/document~Document} by using\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. Alternatively, you can load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n */\nexport default class ClipboardObserver extends DomEventObserver {\n    constructor(view) {\n        super(view);\n        this.domEventType = [\n            'paste', 'copy', 'cut', 'drop', 'dragover', 'dragstart', 'dragend', 'dragenter', 'dragleave'\n        ];\n        const viewDocument = this.document;\n        this.listenTo(viewDocument, 'paste', handleInput('clipboardInput'), { priority: 'low' });\n        this.listenTo(viewDocument, 'drop', handleInput('clipboardInput'), { priority: 'low' });\n        this.listenTo(viewDocument, 'dragover', handleInput('dragging'), { priority: 'low' });\n        function handleInput(type) {\n            return (evt, data) => {\n                data.preventDefault();\n                const targetRanges = data.dropRange ? [data.dropRange] : null;\n                const eventInfo = new EventInfo(viewDocument, type);\n                viewDocument.fire(eventInfo, {\n                    dataTransfer: data.dataTransfer,\n                    method: evt.name,\n                    targetRanges,\n                    target: data.target,\n                    domEvent: data.domEvent\n                });\n                // If CKEditor handled the input, do not bubble the original event any further.\n                // This helps external integrations recognize that fact and act accordingly.\n                // https://github.com/ckeditor/ckeditor5-upload/issues/92\n                if (eventInfo.stop.called) {\n                    data.stopPropagation();\n                }\n            };\n        }\n    }\n    onDomEvent(domEvent) {\n        const nativeDataTransfer = 'clipboardData' in domEvent ? domEvent.clipboardData : domEvent.dataTransfer;\n        const cacheFiles = domEvent.type == 'drop' || domEvent.type == 'paste';\n        const evtData = {\n            dataTransfer: new DataTransfer(nativeDataTransfer, { cacheFiles })\n        };\n        if (domEvent.type == 'drop' || domEvent.type == 'dragover') {\n            evtData.dropRange = getDropViewRange(this.view, domEvent);\n        }\n        this.fire(domEvent.type, domEvent, evtData);\n    }\n}\nfunction getDropViewRange(view, domEvent) {\n    const domDoc = domEvent.target.ownerDocument;\n    const x = domEvent.clientX;\n    const y = domEvent.clientY;\n    let domRange;\n    // Webkit & Blink.\n    if (domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint(x, y)) {\n        domRange = domDoc.caretRangeFromPoint(x, y);\n    }\n    // FF.\n    else if (domEvent.rangeParent) {\n        domRange = domDoc.createRange();\n        domRange.setStart(domEvent.rangeParent, domEvent.rangeOffset);\n        domRange.collapse(true);\n    }\n    if (domRange) {\n        return view.domConverter.domRangeToView(domRange);\n    }\n    return null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = ['figcaption', 'li'];\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param viewItem View item to convert.\n * @returns Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText(viewItem) {\n    let text = '';\n    if (viewItem.is('$text') || viewItem.is('$textProxy')) {\n        // If item is `Text` or `TextProxy` simple take its text data.\n        text = viewItem.data;\n    }\n    else if (viewItem.is('element', 'img') && viewItem.hasAttribute('alt')) {\n        // Special case for images - use alt attribute if it is provided.\n        text = viewItem.getAttribute('alt');\n    }\n    else if (viewItem.is('element', 'br')) {\n        // A soft break should be converted into a single line break (#8045).\n        text = '\\n';\n    }\n    else {\n        // Other elements are document fragments, attribute elements or container elements.\n        // They don't have their own text value, so convert their children.\n        let prev = null;\n        for (const child of viewItem.getChildren()) {\n            const childText = viewToPlainText(child);\n            // Separate container element children with one or more new-line characters.\n            if (prev && (prev.is('containerElement') || child.is('containerElement'))) {\n                if (smallPaddingElements.includes(prev.name) ||\n                    smallPaddingElements.includes(child.name)) {\n                    text += '\\n';\n                }\n                else {\n                    text += '\\n\\n';\n                }\n            }\n            text += childText;\n            prev = child;\n        }\n    }\n    return text;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/clipboardpipeline\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { EventInfo } from '@ckeditor/ckeditor5-utils';\nimport ClipboardObserver from './clipboardobserver';\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext';\n// Input pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │\n//              │         paste        │          │         drop         │\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Retrieves text/html or text/plain from data.dataTransfer\n//                                 │  clipboardInput  │   and processes it to view.DocumentFragment.\n//                                 └─────────┬────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Converts view.DocumentFragment to model.DocumentFragment.\n//                               │  inputTransformation  │\n//                               └───────────┬───────────┘\n//                                           │\n//                                ┌──────────V──────────┐\n//                                │  ClipboardPipeline  │   Calls model.insertContent().\n//                                │   contentInsertion  │\n//                                └─────────────────────┘\n//\n//\n// Output pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │   Retrieves the selected model.DocumentFragment\n//              │         copy         │          │          cut         │   and converts it to view.DocumentFragment.\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Processes view.DocumentFragment to text/html and text/plain\n//                                 │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                                 └──────────────────┘\n//\n/**\n * The clipboard pipeline feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through a series of events in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with the serialized editor's data.\n *\n * # Input pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `paste` or `drop`\n *\n * 1. Translates the event data.\n * 2. Fires the {@link module:engine/view/document~Document#event:clipboardInput `view.Document#clipboardInput`} event.\n *\n * ## Event: `view.Document#clipboardInput`\n *\n * 1. If the `data.content` event field is already set (by some listener on a higher priority), it takes this content and fires the event\n *    from the last point.\n * 2. Otherwise, it retrieves `text/html` or `text/plain` from `data.dataTransfer`.\n * 3. Normalizes the raw data by applying simple filters on string data.\n * 4. Processes the raw data to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 5. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n *   `ClipboardPipeline#inputTransformation`} event with the view document fragment in the `data.content` event field.\n *\n * ## Event: `ClipboardPipeline#inputTransformation`\n *\n * 1. Converts {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} from the `data.content` field to\n *    {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`}.\n * 2. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion `ClipboardPipeline#contentInsertion`}\n *    event with the model document fragment in the `data.content` event field.\n *    **Note**: The `ClipboardPipeline#contentInsertion` event is fired within a model change block to allow other handlers\n *    to run in the same block without post-fixers called in between (i.e., the selection post-fixer).\n *\n * ## Event: `ClipboardPipeline#contentInsertion`\n *\n * 1. Calls {@link module:engine/model/model~Model#insertContent `model.insertContent()`} to insert `data.content`\n *    at the current selection position.\n *\n * # Output pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `copy`, `cut` or `dragstart`\n *\n * 1. Retrieves the selected {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`} by calling\n *    {@link module:engine/model/model~Model#getSelectedContent `model#getSelectedContent()`}.\n * 2. Converts the model document fragment to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`}.\n * 3. Fires the {@link module:engine/view/document~Document#event:clipboardOutput `view.Document#clipboardOutput`} event\n *    with the view document fragment in the `data.content` event field.\n *\n * ## Event: `view.Document#clipboardOutput`\n *\n * 1. Processes `data.content` to HTML and plain text with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 2. Updates the `data.dataTransfer` data for `text/html` and `text/plain` with the processed data.\n * 3. For the `cut` method, calls {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n *    on the current selection.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n */\nexport default class ClipboardPipeline extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ClipboardPipeline';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        view.addObserver(ClipboardObserver);\n        this._setupPasteDrop();\n        this._setupCopyCut();\n    }\n    /**\n     * The clipboard paste pipeline.\n     */\n    _setupPasteDrop() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Pasting is disabled when selection is in non-editable place.\n        // Dropping is disabled in drag and drop handler.\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n            if (data.method == 'paste' && !editor.model.canEditAt(editor.model.document.selection)) {\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n            const dataTransfer = data.dataTransfer;\n            let content;\n            // Some feature could already inject content in the higher priority event handler (i.e., codeBlock).\n            if (data.content) {\n                content = data.content;\n            }\n            else {\n                let contentData = '';\n                if (dataTransfer.getData('text/html')) {\n                    contentData = normalizeClipboardHtml(dataTransfer.getData('text/html'));\n                }\n                else if (dataTransfer.getData('text/plain')) {\n                    contentData = plainTextToHtml(dataTransfer.getData('text/plain'));\n                }\n                content = this.editor.data.htmlProcessor.toView(contentData);\n            }\n            const eventInfo = new EventInfo(this, 'inputTransformation');\n            this.fire(eventInfo, {\n                content,\n                dataTransfer,\n                targetRanges: data.targetRanges,\n                method: data.method\n            });\n            // If CKEditor handled the input, do not bubble the original event any further.\n            // This helps external integrations recognize this fact and act accordingly.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/92\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n        this.listenTo(this, 'inputTransformation', (evt, data) => {\n            if (data.content.isEmpty) {\n                return;\n            }\n            const dataController = this.editor.data;\n            // Convert the pasted content into a model document fragment.\n            // The conversion is contextual, but in this case an \"all allowed\" context is needed\n            // and for that we use the $clipboardHolder item.\n            const modelFragment = dataController.toModel(data.content, '$clipboardHolder');\n            if (modelFragment.childCount == 0) {\n                return;\n            }\n            evt.stop();\n            // Fire content insertion event in a single change block to allow other handlers to run in the same block\n            // without post-fixers called in between (i.e., the selection post-fixer).\n            model.change(() => {\n                this.fire('contentInsertion', {\n                    content: modelFragment,\n                    method: data.method,\n                    dataTransfer: data.dataTransfer,\n                    targetRanges: data.targetRanges\n                });\n            });\n        }, { priority: 'low' });\n        this.listenTo(this, 'contentInsertion', (evt, data) => {\n            data.resultRange = model.insertContent(data.content);\n        }, { priority: 'low' });\n    }\n    /**\n     * The clipboard copy/cut pipeline.\n     */\n    _setupCopyCut() {\n        const editor = this.editor;\n        const modelDocument = editor.model.document;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const onCopyCut = (evt, data) => {\n            const dataTransfer = data.dataTransfer;\n            data.preventDefault();\n            const content = editor.data.toView(editor.model.getSelectedContent(modelDocument.selection));\n            viewDocument.fire('clipboardOutput', {\n                dataTransfer,\n                content,\n                method: evt.name\n            });\n        };\n        this.listenTo(viewDocument, 'copy', onCopyCut, { priority: 'low' });\n        this.listenTo(viewDocument, 'cut', (evt, data) => {\n            // Cutting is disabled when selection is in non-editable place.\n            // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n            if (!editor.model.canEditAt(editor.model.document.selection)) {\n                data.preventDefault();\n            }\n            else {\n                onCopyCut(evt, data);\n            }\n        }, { priority: 'low' });\n        this.listenTo(viewDocument, 'clipboardOutput', (evt, data) => {\n            if (!data.content.isEmpty) {\n                data.dataTransfer.setData('text/html', this.editor.data.htmlProcessor.toData(data.content));\n                data.dataTransfer.setData('text/plain', viewToPlainText(data.content));\n            }\n            if (data.method == 'cut') {\n                editor.model.deleteContent(modelDocument.selection);\n            }\n        }, { priority: 'low' });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n * Removes all HTML comments. These are considered an internal thing and it makes little sense if they leak into the editor data.\n *\n * @param data The HTML data to normalize.\n * @returns Normalized HTML.\n */\nexport default function normalizeClipboardData(data) {\n    return data\n        .replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces) => {\n        // Handle the most popular and problematic case when even a single space becomes an nbsp;.\n        // Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n        if (spaces.length == 1) {\n            return ' ';\n        }\n        return spaces;\n    })\n        // Remove all HTML comments.\n        .replace(/<!--[\\s\\S]*?-->/g, '');\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param text The plain text to convert.\n * @returns HTML generated from the plain text.\n */\nexport default function plainTextToHtml(text) {\n    text = text\n        // Encode <>.\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        // Creates a paragraph for each double line break.\n        .replace(/\\r?\\n\\r?\\n/g, '</p><p>')\n        // Creates a line break for each single line break.\n        .replace(/\\r?\\n/g, '<br>')\n        // Replace tabs with four spaces.\n        .replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;')\n        // Preserve trailing spaces (only the first and last one – the rest is handled below).\n        .replace(/^\\s/, '&nbsp;')\n        .replace(/\\s$/, '&nbsp;')\n        // Preserve other subsequent spaces now.\n        .replace(/\\s\\s/g, ' &nbsp;');\n    if (text.includes('</p><p>') || text.includes('<br>')) {\n        // If we created paragraphs above, add the trailing ones.\n        text = `<p>${text}</p>`;\n    }\n    // TODO:\n    // * What about '\\nfoo' vs ' foo'?\n    return text;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n * ```ts\n * const buffer = new ChangeBuffer( model, LIMIT );\n *\n * // Later on in your feature:\n * buffer.batch.insert( pos, insertedCharacters );\n * buffer.input( insertedCharacters.length );\n * ```\n */\nexport default class ChangeBuffer {\n    /**\n     * Creates a new instance of the change buffer.\n     *\n     * @param limit The maximum number of atomic changes which can be contained in one batch.\n     */\n    constructor(model, limit = 20) {\n        /**\n         * The current batch instance.\n         */\n        this._batch = null;\n        this.model = model;\n        this._size = 0;\n        this.limit = limit;\n        this._isLocked = false;\n        // The function to be called in order to notify the buffer about batches which appeared in the document.\n        // The callback will check whether it is a new batch and in that case the buffer will be flushed.\n        //\n        // The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n        // should be added to a new batch. For instance, when the user types, then inserts an image, and then types again,\n        // the characters typed after inserting the image should be added to a different batch than the characters typed before.\n        this._changeCallback = (evt, batch) => {\n            if (batch.isLocal && batch.isUndoable && batch !== this._batch) {\n                this._reset(true);\n            }\n        };\n        this._selectionChangeCallback = () => {\n            this._reset();\n        };\n        this.model.document.on('change', this._changeCallback);\n        this.model.document.selection.on('change:range', this._selectionChangeCallback);\n        this.model.document.selection.on('change:attribute', this._selectionChangeCallback);\n    }\n    /**\n     * The current batch to which a feature should add its operations. Once the {@link #size}\n     * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n     */\n    get batch() {\n        if (!this._batch) {\n            this._batch = this.model.createBatch({ isTyping: true });\n        }\n        return this._batch;\n    }\n    /**\n     * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n     * the {@link #batch batch} is set to a new one.\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The input number of changes into the buffer. Once the {@link #size} is\n     * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n     *\n     * @param changeCount The number of atomic changes to input.\n     */\n    input(changeCount) {\n        this._size += changeCount;\n        if (this._size >= this.limit) {\n            this._reset(true);\n        }\n    }\n    /**\n     * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n     */\n    get isLocked() {\n        return this._isLocked;\n    }\n    /**\n     * Locks the buffer.\n     */\n    lock() {\n        this._isLocked = true;\n    }\n    /**\n     * Unlocks the buffer.\n     */\n    unlock() {\n        this._isLocked = false;\n    }\n    /**\n     * Destroys the buffer.\n     */\n    destroy() {\n        this.model.document.off('change', this._changeCallback);\n        this.model.document.selection.off('change:range', this._selectionChangeCallback);\n        this.model.document.selection.off('change:attribute', this._selectionChangeCallback);\n    }\n    /**\n     * Resets the change buffer.\n     *\n     * @param ignoreLock Whether internal lock {@link #isLocked} should be ignored.\n     */\n    _reset(ignoreLock = false) {\n        if (!this.isLocked || ignoreLock) {\n            this._batch = null;\n            this._size = 0;\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/inserttextcommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport ChangeBuffer from './utils/changebuffer';\n/**\n * The insert text command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n */\nexport default class InsertTextCommand extends Command {\n    /**\n     * Creates an instance of the command.\n     *\n     * @param undoStepSize The maximum number of atomic changes\n     * which can be contained in one batch in the command buffer.\n     */\n    constructor(editor, undoStepSize) {\n        super(editor);\n        this._buffer = new ChangeBuffer(editor.model, undoStepSize);\n        // Since this command may execute on different selectable than selection, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n     * The current change buffer.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._buffer.destroy();\n    }\n    /**\n     * Executes the input command. It replaces the content within the given range with the given text.\n     * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n     * at the beginning of the range (which after the removal is a collapsed range).\n     *\n     * @fires execute\n     * @param options The command options.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const text = options.text || '';\n        const textInsertions = text.length;\n        let selection = doc.selection;\n        if (options.selection) {\n            selection = options.selection;\n        }\n        else if (options.range) {\n            selection = model.createSelection(options.range);\n        }\n        // Stop executing if selectable is in non-editable place.\n        if (!model.canEditAt(selection)) {\n            return;\n        }\n        const resultRange = options.resultRange;\n        model.enqueueChange(this._buffer.batch, writer => {\n            this._buffer.lock();\n            model.deleteContent(selection);\n            if (text) {\n                model.insertContent(writer.createText(text, doc.selection.getAttributes()), selection);\n            }\n            if (resultRange) {\n                writer.setSelection(resultRange);\n            }\n            else if (!selection.is('documentSelection')) {\n                writer.setSelection(selection);\n            }\n            this._buffer.unlock();\n            this._buffer.input(textInsertions);\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/inserttextobserver\n */\nimport { env, EventInfo } from '@ckeditor/ckeditor5-utils';\nimport { DomEventData, Observer } from '@ckeditor/ckeditor5-engine';\nconst TYPING_INPUT_TYPES = [\n    // For collapsed range:\n    //\t- This one is a regular typing (all browsers, all systems).\n    //\t- This one is used by Chrome when typing accented letter – 2nd step when the user selects the accent (Mac).\n    // For non-collapsed range:\n    //\t- This one is used by Chrome when typing accented letter – when the selection box first appears (Mac).\n    //\t- This one is used by Safari when accepting spell check suggestions from the context menu (Mac).\n    'insertText',\n    // This one is used by Safari when typing accented letter (Mac).\n    // This one is used by Safari when accepting spell check suggestions from the autocorrection pop-up (Mac).\n    'insertReplacementText'\n];\n/**\n * Text insertion observer introduces the {@link module:engine/view/document~Document#event:insertText} event.\n */\nexport default class InsertTextObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        // On Android composition events should immediately be applied to the model. Rendering is not disabled.\n        // On non-Android the model is updated only on composition end.\n        // On Android we can't rely on composition start/end to update model.\n        if (env.isAndroid) {\n            TYPING_INPUT_TYPES.push('insertCompositionText');\n        }\n        const viewDocument = view.document;\n        viewDocument.on('beforeinput', (evt, data) => {\n            if (!this.isEnabled) {\n                return;\n            }\n            const { data: text, targetRanges, inputType, domEvent } = data;\n            if (!TYPING_INPUT_TYPES.includes(inputType)) {\n                return;\n            }\n            const eventInfo = new EventInfo(viewDocument, 'insertText');\n            viewDocument.fire(eventInfo, new DomEventData(view, domEvent, {\n                text,\n                selection: view.createSelection(targetRanges)\n            }));\n            // Stop the beforeinput event if `delete` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n        });\n        // Note: The priority must be lower than the CompositionObserver handler to call it after the renderer is unblocked.\n        viewDocument.on('compositionend', (evt, { data, domEvent }) => {\n            // On Android composition events are immediately applied to the model.\n            // On non-Android the model is updated only on composition end.\n            // On Android we can't rely on composition start/end to update model.\n            if (!this.isEnabled || env.isAndroid) {\n                return;\n            }\n            // In case of aborted composition.\n            if (!data) {\n                return;\n            }\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( `%c[InsertTextObserver]%c Fire insertText event, text: ${ JSON.stringify( data ) }`,\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', ''\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            // How do we know where to insert the composed text?\n            // The selection observer is blocked and the view is not updated with the composition changes.\n            // There were three options:\n            //   - Store the selection on `compositionstart` and use it now. This wouldn't work in RTC\n            //     where the view would change and the stored selection might get incorrect.\n            //     We'd need to fallback to the current view selection anyway.\n            //   - Use the current view selection. This is a bit weird and non-intuitive because\n            //     this isn't necessarily the selection on which the user started composing.\n            //     We cannot even know whether it's still collapsed (there might be some weird\n            //     editor feature that changed it in unpredictable ways for us). But it's by far\n            //     the simplest solution and should be stable (the selection is definitely correct)\n            //     and probably mostly predictable (features usually don't modify the selection\n            //     unless called explicitly by the user).\n            //   - Try to follow it from the `beforeinput` events. This would be really complex as each\n            //     `beforeinput` would come with just the range it's changing and we'd need to calculate that.\n            // We decided to go with the 2nd option for its simplicity and stability.\n            viewDocument.fire('insertText', new DomEventData(view, domEvent, {\n                text: data,\n                selection: viewDocument.selection\n            }));\n        }, { priority: 'lowest' });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/input\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { env } from '@ckeditor/ckeditor5-utils';\nimport InsertTextCommand from './inserttextcommand';\nimport InsertTextObserver from './inserttextobserver';\n/**\n * Handles text input coming from the keyboard or other input methods.\n */\nexport default class Input extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Input';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const modelSelection = model.document.selection;\n        view.addObserver(InsertTextObserver);\n        // TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n        const insertTextCommand = new InsertTextCommand(editor, editor.config.get('typing.undoStep') || 20);\n        // Register `insertText` command and add `input` command as an alias for backward compatibility.\n        editor.commands.add('insertText', insertTextCommand);\n        editor.commands.add('input', insertTextCommand);\n        this.listenTo(view.document, 'insertText', (evt, data) => {\n            // Rendering is disabled while composing so prevent events that will be rendered by the engine\n            // and should not be applied by the browser.\n            if (!view.document.isComposing) {\n                data.preventDefault();\n            }\n            const { text, selection: viewSelection, resultRange: viewResultRange } = data;\n            // If view selection was specified, translate it to model selection.\n            const modelRanges = Array.from(viewSelection.getRanges()).map(viewRange => {\n                return editor.editing.mapper.toModelRange(viewRange);\n            });\n            let insertText = text;\n            // Typing in English on Android is firing composition events for the whole typed word.\n            // We need to check the target range text to only apply the difference.\n            if (env.isAndroid) {\n                const selectedText = Array.from(modelRanges[0].getItems()).reduce((rangeText, node) => {\n                    return rangeText + (node.is('$textProxy') ? node.data : '');\n                }, '');\n                if (selectedText) {\n                    if (selectedText.length <= insertText.length) {\n                        if (insertText.startsWith(selectedText)) {\n                            insertText = insertText.substring(selectedText.length);\n                            modelRanges[0].start = modelRanges[0].start.getShiftedBy(selectedText.length);\n                        }\n                    }\n                    else {\n                        if (selectedText.startsWith(insertText)) {\n                            // TODO this should be mapped as delete?\n                            modelRanges[0].start = modelRanges[0].start.getShiftedBy(insertText.length);\n                            insertText = '';\n                        }\n                    }\n                }\n            }\n            const insertTextCommandData = {\n                text: insertText,\n                selection: model.createSelection(modelRanges)\n            };\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Execute insertText:',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', '',\n            // @if CK_DEBUG_TYPING // \t\tinsertText,\n            // @if CK_DEBUG_TYPING // \t\t`[${ modelRanges[ 0 ].start.path }]-[${ modelRanges[ 0 ].end.path }]`\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            if (viewResultRange) {\n                insertTextCommandData.resultRange = editor.editing.mapper.toModelRange(viewResultRange);\n            }\n            editor.execute('insertText', insertTextCommandData);\n        });\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this.listenTo(view.document, 'keydown', (evt, data) => {\n                if (modelSelection.isCollapsed || data.keyCode != 229 || !view.document.isComposing) {\n                    return;\n                }\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconst firstPositionPath = modelSelection.getFirstPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconst lastPositionPath = modelSelection.getLastPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c KeyDown 229 -> model.deleteContent()',\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', '',\n                // @if CK_DEBUG_TYPING // \t\t`[${ firstPositionPath }]-[${ lastPositionPath }]`\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                deleteSelectionContent(model, insertTextCommand);\n            });\n        }\n        else {\n            // Note: The priority must precede the CompositionObserver handler to call it before\n            // the renderer is blocked, because we want to render this change.\n            this.listenTo(view.document, 'compositionstart', () => {\n                if (modelSelection.isCollapsed) {\n                    return;\n                }\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconst firstPositionPath = modelSelection.getFirstPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconst lastPositionPath = modelSelection.getLastPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Composition start -> model.deleteContent()',\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', '',\n                // @if CK_DEBUG_TYPING // \t\t`[${ firstPositionPath }]-[${ lastPositionPath }]`\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                deleteSelectionContent(model, insertTextCommand);\n            });\n        }\n    }\n}\nfunction deleteSelectionContent(model, insertTextCommand) {\n    // By relying on the state of the input command we allow disabling the entire input easily\n    // by just disabling the input command. We could’ve used here the delete command but that\n    // would mean requiring the delete feature which would block loading one without the other.\n    // We could also check the editor.isReadOnly property, but that wouldn't allow to block\n    // the input without blocking other features.\n    if (!insertTextCommand.isEnabled) {\n        return;\n    }\n    const buffer = insertTextCommand.buffer;\n    buffer.lock();\n    model.enqueueChange(buffer.batch, () => {\n        model.deleteContent(model.document.selection);\n    });\n    buffer.unlock();\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/deletecommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { count } from '@ckeditor/ckeditor5-utils';\nimport ChangeBuffer from './utils/changebuffer';\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n */\nexport default class DeleteCommand extends Command {\n    /**\n     * Creates an instance of the command.\n     *\n     * @param direction The directionality of the delete describing in what direction it\n     * should consume the content when the selection is collapsed.\n     */\n    constructor(editor, direction) {\n        super(editor);\n        this.direction = direction;\n        this._buffer = new ChangeBuffer(editor.model, editor.config.get('typing.undoStep'));\n        // Since this command may execute on different selectable than selection, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n     * The current change buffer.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    /**\n     * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n     * or a piece of content in the {@link #direction defined direction}.\n     *\n     * @fires execute\n     * @param options The command options.\n     * @param options.unit See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n     * @param options.sequence A number describing which subsequent delete event it is without the key being released.\n     * See the {@link module:engine/view/document~Document#event:delete} event data.\n     * @param options.selection Selection to remove. If not set, current model selection will be used.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        model.enqueueChange(this._buffer.batch, writer => {\n            this._buffer.lock();\n            const selection = writer.createSelection(options.selection || doc.selection);\n            // Don't execute command when selection is in non-editable place.\n            if (!model.canEditAt(selection)) {\n                return;\n            }\n            const sequence = options.sequence || 1;\n            // Do not replace the whole selected content if selection was collapsed.\n            // This prevents such situation:\n            //\n            // <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n            // starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n            const doNotResetEntireContent = selection.isCollapsed;\n            // Try to extend the selection in the specified direction.\n            if (selection.isCollapsed) {\n                model.modifySelection(selection, {\n                    direction: this.direction,\n                    unit: options.unit,\n                    treatEmojiAsSingleUnit: true\n                });\n            }\n            // Check if deleting in an empty editor. See #61.\n            if (this._shouldEntireContentBeReplacedWithParagraph(sequence)) {\n                this._replaceEntireContentWithParagraph(writer);\n                return;\n            }\n            // Check if deleting in the first empty block.\n            // See https://github.com/ckeditor/ckeditor5/issues/8137.\n            if (this._shouldReplaceFirstBlockWithParagraph(selection, sequence)) {\n                this.editor.execute('paragraph', { selection });\n                return;\n            }\n            // If selection is still collapsed, then there's nothing to delete.\n            if (selection.isCollapsed) {\n                return;\n            }\n            let changeCount = 0;\n            selection.getFirstRange().getMinimalFlatRanges().forEach(range => {\n                changeCount += count(range.getWalker({ singleCharacters: true, ignoreElementEnd: true, shallow: true }));\n            });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[DeleteCommand]%c Delete content',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', '',\n            // @if CK_DEBUG_TYPING // \t\t`[${ selection.getFirstPosition()!.path }]-[${ selection.getLastPosition()!.path }]`, options\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            model.deleteContent(selection, {\n                doNotResetEntireContent,\n                direction: this.direction\n            });\n            this._buffer.input(changeCount);\n            writer.setSelection(selection);\n            this._buffer.unlock();\n        });\n    }\n    /**\n     * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n     * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n     * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n     *\n     * But, if the user pressed the key in an empty editable for the first time,\n     * we want to replace the entire content with a paragraph if:\n     *\n     * * the current limit element is empty,\n     * * the paragraph is allowed in the limit element,\n     * * the limit doesn't already have a paragraph inside.\n     *\n     * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n     *\n     * @param sequence A number describing which subsequent delete event it is without the key being released.\n     */\n    _shouldEntireContentBeReplacedWithParagraph(sequence) {\n        // Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n        if (sequence > 1) {\n            return false;\n        }\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const limitElement = model.schema.getLimitElement(selection);\n        // If a collapsed selection contains the whole content it means that the content is empty\n        // (from the user perspective).\n        const limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent(limitElement);\n        if (!limitElementIsEmpty) {\n            return false;\n        }\n        if (!model.schema.checkChild(limitElement, 'paragraph')) {\n            return false;\n        }\n        const limitElementFirstChild = limitElement.getChild(0);\n        // Does nothing if the limit element already contains only a paragraph.\n        // We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n        // because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n        if (limitElementFirstChild && limitElementFirstChild.is('element', 'paragraph')) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n     *\n     * @param writer The model writer.\n     */\n    _replaceEntireContentWithParagraph(writer) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const limitElement = model.schema.getLimitElement(selection);\n        const paragraph = writer.createElement('paragraph');\n        writer.remove(writer.createRangeIn(limitElement));\n        writer.insert(paragraph, limitElement);\n        writer.setSelection(paragraph, 0);\n    }\n    /**\n     * Checks if the selection is inside an empty element that is the first child of the limit element\n     * and should be replaced with a paragraph.\n     *\n     * @param selection The selection.\n     * @param sequence A number describing which subsequent delete event it is without the key being released.\n     */\n    _shouldReplaceFirstBlockWithParagraph(selection, sequence) {\n        const model = this.editor.model;\n        // Does nothing if user pressed and held the \"Backspace\" key or it was a \"Delete\" button.\n        if (sequence > 1 || this.direction != 'backward') {\n            return false;\n        }\n        if (!selection.isCollapsed) {\n            return false;\n        }\n        const position = selection.getFirstPosition();\n        const limitElement = model.schema.getLimitElement(position);\n        const limitElementFirstChild = limitElement.getChild(0);\n        // Only elements that are direct children of the limit element can be replaced.\n        // Unwrapping from a block quote should be handled in a dedicated feature.\n        if (position.parent != limitElementFirstChild) {\n            return false;\n        }\n        // A block should be replaced only if it was empty.\n        if (!selection.containsEntireContent(limitElementFirstChild)) {\n            return false;\n        }\n        // Replace with a paragraph only if it's allowed there.\n        if (!model.schema.checkChild(limitElement, 'paragraph')) {\n            return false;\n        }\n        // Does nothing if the limit element already contains only a paragraph.\n        if (limitElementFirstChild.name == 'paragraph') {\n            return false;\n        }\n        return true;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/deleteobserver\n */\nimport { env, keyCodes, isInsideCombinedSymbol, isInsideEmojiSequence, isInsideSurrogatePair } from '@ckeditor/ckeditor5-utils';\nimport { BubblingEventInfo, DomEventData, Observer } from '@ckeditor/ckeditor5-engine';\nconst DELETE_CHARACTER = 'character';\nconst DELETE_WORD = 'word';\nconst DELETE_CODE_POINT = 'codePoint';\nconst DELETE_SELECTION = 'selection';\nconst DELETE_BACKWARD = 'backward';\nconst DELETE_FORWARD = 'forward';\nconst DELETE_EVENT_TYPES = {\n    // --------------------------------------- Backward delete types -----------------------------------------------------\n    // This happens in Safari on Mac when some content is selected and Ctrl + K is pressed.\n    deleteContent: {\n        unit: DELETE_SELECTION,\n        // According to the Input Events Level 2 spec, this delete type has no direction\n        // but to keep things simple, let's default to backward.\n        direction: DELETE_BACKWARD\n    },\n    // Chrome and Safari on Mac: Backspace or Ctrl + H\n    deleteContentBackward: {\n        // This kind of deletions must be done on the code point-level instead of target range provided by the DOM beforeinput event.\n        // Take for instance \"👨‍👩‍👧‍👧\", it equals:\n        //\n        //\t* [ \"👨\", \"ZERO WIDTH JOINER\", \"👩\", \"ZERO WIDTH JOINER\", \"👧\", \"ZERO WIDTH JOINER\", \"👧\" ]\n        //\t* or simply \"\\u{1F468}\\u200D\\u{1F469}\\u200D\\u{1F467}\\u200D\\u{1F467}\"\n        //\n        // The range provided by the browser would cause the entire multi-byte grapheme to disappear while the user\n        // intention when deleting backwards (\"👨‍👩‍👧‍👧[]\", then backspace) is gradual \"decomposition\" (first to \"👨‍👩‍👧‍[]\",\n        // then to \"👨‍👩‍[]\", etc.).\n        //\n        //\t* \"👨‍👩‍👧‍👧[]\" + backward delete (by code point)  -> results in \"👨‍👩‍👧[]\", removed the last \"👧\" 👍\n        //\t* \"👨‍👩‍👧‍👧[]\" + backward delete (by character)  -> results in \"[]\", removed the whole grapheme 👎\n        //\n        // Deleting by code-point is simply a better UX. See \"deleteContentForward\" to learn more.\n        unit: DELETE_CODE_POINT,\n        direction: DELETE_BACKWARD\n    },\n    // On Mac: Option + Backspace.\n    // On iOS: Hold the backspace for a while and the whole words will start to disappear.\n    deleteWordBackward: {\n        unit: DELETE_WORD,\n        direction: DELETE_BACKWARD\n    },\n    // Safari on Mac: Cmd + Backspace\n    deleteHardLineBackward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_BACKWARD\n    },\n    // Chrome on Mac: Cmd + Backspace.\n    deleteSoftLineBackward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_BACKWARD\n    },\n    // --------------------------------------- Forward delete types -----------------------------------------------------\n    // Chrome on Mac: Fn + Backspace or Ctrl + D\n    // Safari on Mac: Ctrl + K or Ctrl + D\n    deleteContentForward: {\n        // Unlike backward delete, this delete must be performed by character instead of by code point, which\n        // provides the best UX for working with accented letters.\n        // Take, for example \"b̂\" (\"\\u0062\\u0302\", or [ \"LATIN SMALL LETTER B\", \"COMBINING CIRCUMFLEX ACCENT\" ]):\n        //\n        //\t* \"b̂[]\" + backward delete (by code point)  -> results in \"b[]\", removed the combining mark 👍\n        //\t* \"[]b̂\" + forward delete (by code point)   -> results in \"[]^\", a bare combining mark does that not make sense when alone 👎\n        //\t* \"[]b̂\" + forward delete (by character)    -> results in \"[]\", removed both \"b\" and the combining mark 👍\n        //\n        // See: \"deleteContentBackward\" to learn more.\n        unit: DELETE_CHARACTER,\n        direction: DELETE_FORWARD\n    },\n    // On Mac: Fn + Option + Backspace.\n    deleteWordForward: {\n        unit: DELETE_WORD,\n        direction: DELETE_FORWARD\n    },\n    // Chrome on Mac: Ctrl + K (you have to disable the Link plugin first, though, because it uses the same keystroke)\n    // This is weird that it does not work in Safari on Mac despite being listed in the official shortcuts listing\n    // on Apple's webpage.\n    deleteHardLineForward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_FORWARD\n    },\n    // At this moment there is no known way to trigger this event type but let's keep it for the symmetry with\n    // deleteSoftLineBackward.\n    deleteSoftLineForward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_FORWARD\n    }\n};\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n */\nexport default class DeleteObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        const document = view.document;\n        // It matters how many subsequent deletions were made, e.g. when the backspace key was pressed and held\n        // by the user for some time. For instance, if such scenario ocurred and the heading the selection was\n        // anchored to was the only content of the editor, it will not be converted into a paragraph (the user\n        // wanted to clean it up, not remove it, it's about UX). Check out the DeleteCommand implementation to learn more.\n        //\n        // Fun fact: Safari on Mac won't fire beforeinput for backspace in an empty heading (only content).\n        let sequence = 0;\n        document.on('keydown', () => {\n            sequence++;\n        });\n        document.on('keyup', () => {\n            sequence = 0;\n        });\n        document.on('beforeinput', (evt, data) => {\n            if (!this.isEnabled) {\n                return;\n            }\n            const { targetRanges, domEvent, inputType } = data;\n            const deleteEventSpec = DELETE_EVENT_TYPES[inputType];\n            if (!deleteEventSpec) {\n                return;\n            }\n            const deleteData = {\n                direction: deleteEventSpec.direction,\n                unit: deleteEventSpec.unit,\n                sequence\n            };\n            if (deleteData.unit == DELETE_SELECTION) {\n                deleteData.selectionToRemove = view.createSelection(targetRanges[0]);\n            }\n            // The default deletion unit for deleteContentBackward is a single code point\n            // but if the browser provides a wider target range then we should use it.\n            if (inputType === 'deleteContentBackward') {\n                // On Android, deleteContentBackward has sequence 1 by default.\n                if (env.isAndroid) {\n                    deleteData.sequence = 1;\n                }\n                // The beforeInput event wants more than a single character to be removed.\n                if (shouldUseTargetRanges(targetRanges)) {\n                    deleteData.unit = DELETE_SELECTION;\n                    deleteData.selectionToRemove = view.createSelection(targetRanges);\n                }\n            }\n            const eventInfo = new BubblingEventInfo(document, 'delete', targetRanges[0]);\n            document.fire(eventInfo, new DomEventData(view, domEvent, deleteData));\n            // Stop the beforeinput event if `delete` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n        });\n        // TODO: to be removed when https://bugs.chromium.org/p/chromium/issues/detail?id=1365311 is solved.\n        if (env.isBlink) {\n            enableChromeWorkaround(this);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n/**\n * Enables workaround for the issue https://github.com/ckeditor/ckeditor5/issues/11904.\n */\nfunction enableChromeWorkaround(observer) {\n    const view = observer.view;\n    const document = view.document;\n    let pressedKeyCode = null;\n    let beforeInputReceived = false;\n    document.on('keydown', (evt, { keyCode }) => {\n        pressedKeyCode = keyCode;\n        beforeInputReceived = false;\n    });\n    document.on('keyup', (evt, { keyCode, domEvent }) => {\n        const selection = document.selection;\n        const shouldFireDeleteEvent = observer.isEnabled &&\n            keyCode == pressedKeyCode &&\n            isDeleteKeyCode(keyCode) &&\n            !selection.isCollapsed &&\n            !beforeInputReceived;\n        pressedKeyCode = null;\n        if (shouldFireDeleteEvent) {\n            const targetRange = selection.getFirstRange();\n            const eventInfo = new BubblingEventInfo(document, 'delete', targetRange);\n            const deleteData = {\n                unit: DELETE_SELECTION,\n                direction: getDeleteDirection(keyCode),\n                selectionToRemove: selection\n            };\n            document.fire(eventInfo, new DomEventData(view, domEvent, deleteData));\n        }\n    });\n    document.on('beforeinput', (evt, { inputType }) => {\n        const deleteEventSpec = DELETE_EVENT_TYPES[inputType];\n        const isMatchingBeforeInput = isDeleteKeyCode(pressedKeyCode) &&\n            deleteEventSpec &&\n            deleteEventSpec.direction == getDeleteDirection(pressedKeyCode);\n        if (isMatchingBeforeInput) {\n            beforeInputReceived = true;\n        }\n    }, { priority: 'high' });\n    document.on('beforeinput', (evt, { inputType, data }) => {\n        const shouldIgnoreBeforeInput = pressedKeyCode == keyCodes.delete &&\n            inputType == 'insertText' &&\n            data == '\\x7f'; // Delete character :P\n        if (shouldIgnoreBeforeInput) {\n            evt.stop();\n        }\n    }, { priority: 'high' });\n    function isDeleteKeyCode(keyCode) {\n        return keyCode == keyCodes.backspace || keyCode == keyCodes.delete;\n    }\n    function getDeleteDirection(keyCode) {\n        return keyCode == keyCodes.backspace ? DELETE_BACKWARD : DELETE_FORWARD;\n    }\n}\n/**\n * Verifies whether the given target ranges cover more than a single character and should be used instead of a single code-point deletion.\n */\nfunction shouldUseTargetRanges(targetRanges) {\n    // The collapsed target range could happen for example while deleting inside an inline filler\n    // (it's mapped to collapsed position before an inline filler).\n    if (targetRanges.length != 1 || targetRanges[0].isCollapsed) {\n        return false;\n    }\n    const walker = targetRanges[0].getWalker({\n        direction: 'backward',\n        singleCharacters: true,\n        ignoreElementEnd: true\n    });\n    let count = 0;\n    for (const { nextPosition } of walker) {\n        // There is some element in the range so count it as a single character.\n        if (!nextPosition.parent.is('$text')) {\n            count++;\n        }\n        else {\n            const data = nextPosition.parent.data;\n            const offset = nextPosition.offset;\n            // Count combined symbols and emoji sequences as a single character.\n            if (isInsideSurrogatePair(data, offset) ||\n                isInsideCombinedSymbol(data, offset) ||\n                isInsideEmojiSequence(data, offset)) {\n                continue;\n            }\n            count++;\n        }\n        if (count > 1) {\n            return true;\n        }\n    }\n    return false;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/delete\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\n/**\n * The delete and backspace feature. Handles keys such as <kbd>Delete</kbd> and <kbd>Backspace</kbd>, other\n * keystrokes and user actions that result in deleting content in the editor.\n */\nexport default class Delete extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Delete';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const modelDocument = editor.model.document;\n        view.addObserver(DeleteObserver);\n        this._undoOnBackspace = false;\n        const deleteForwardCommand = new DeleteCommand(editor, 'forward');\n        // Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n        editor.commands.add('deleteForward', deleteForwardCommand);\n        editor.commands.add('forwardDelete', deleteForwardCommand);\n        editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n        this.listenTo(viewDocument, 'delete', (evt, data) => {\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            const { direction, sequence, selectionToRemove, unit } = data;\n            const commandName = direction === 'forward' ? 'deleteForward' : 'delete';\n            const commandData = { sequence };\n            if (unit == 'selection') {\n                const modelRanges = Array.from(selectionToRemove.getRanges()).map(viewRange => {\n                    return editor.editing.mapper.toModelRange(viewRange);\n                });\n                commandData.selection = editor.model.createSelection(modelRanges);\n            }\n            else {\n                commandData.unit = unit;\n            }\n            editor.execute(commandName, commandData);\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n        if (this.editor.plugins.has('UndoEditing')) {\n            this.listenTo(viewDocument, 'delete', (evt, data) => {\n                if (this._undoOnBackspace && data.direction == 'backward' && data.sequence == 1 && data.unit == 'codePoint') {\n                    this._undoOnBackspace = false;\n                    editor.execute('undo');\n                    data.preventDefault();\n                    evt.stop();\n                }\n            }, { context: '$capture' });\n            this.listenTo(modelDocument, 'change', () => {\n                this._undoOnBackspace = false;\n            });\n        }\n    }\n    /**\n     * If the next user action after calling this method is pressing backspace, it would undo the last change.\n     *\n     * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.\n     */\n    requestUndoOnBackspace() {\n        if (this.editor.plugins.has('UndoEditing')) {\n            this._undoOnBackspace = true;\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/typing\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport Input from './input';\nimport Delete from './delete';\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n */\nexport default class Typing extends Plugin {\n    static get requires() {\n        return [Input, Delete];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Typing';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/textwatcher\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport getLastTextLine from './utils/getlasttextline';\n/**\n * The text watcher feature.\n *\n * Fires the {@link module:typing/textwatcher~TextWatcher#event:matched:data `matched:data`},\n * {@link module:typing/textwatcher~TextWatcher#event:matched:selection `matched:selection`} and\n * {@link module:typing/textwatcher~TextWatcher#event:unmatched `unmatched`} events on typing or selection changes.\n */\nexport default class TextWatcher extends ObservableMixin() {\n    /**\n     * Creates a text watcher instance.\n     *\n     * @param testCallback See {@link module:typing/textwatcher~TextWatcher#testCallback}.\n     */\n    constructor(model, testCallback) {\n        super();\n        this.model = model;\n        this.testCallback = testCallback;\n        this._hasMatch = false;\n        this.set('isEnabled', true);\n        // Toggle text watching on isEnabled state change.\n        this.on('change:isEnabled', () => {\n            if (this.isEnabled) {\n                this._startListening();\n            }\n            else {\n                this.stopListening(model.document.selection);\n                this.stopListening(model.document);\n            }\n        });\n        this._startListening();\n    }\n    /**\n     * Flag indicating whether there is a match currently.\n     */\n    get hasMatch() {\n        return this._hasMatch;\n    }\n    /**\n     * Starts listening to the editor for typing and selection events.\n     */\n    _startListening() {\n        const model = this.model;\n        const document = model.document;\n        this.listenTo(document.selection, 'change:range', (evt, { directChange }) => {\n            // Indirect changes (i.e. when the user types or external changes are applied) are handled in the document's change event.\n            if (!directChange) {\n                return;\n            }\n            // Act only on collapsed selection.\n            if (!document.selection.isCollapsed) {\n                if (this.hasMatch) {\n                    this.fire('unmatched');\n                    this._hasMatch = false;\n                }\n                return;\n            }\n            this._evaluateTextBeforeSelection('selection');\n        });\n        this.listenTo(document, 'change:data', (evt, batch) => {\n            if (batch.isUndo || !batch.isLocal) {\n                return;\n            }\n            this._evaluateTextBeforeSelection('data', { batch });\n        });\n    }\n    /**\n     * Checks the editor content for matched text.\n     *\n     * @fires matched:data\n     * @fires matched:selection\n     * @fires unmatched\n     *\n     * @param suffix A suffix used for generating the event name.\n     * @param data Data object for event.\n     */\n    _evaluateTextBeforeSelection(suffix, data = {}) {\n        const model = this.model;\n        const document = model.document;\n        const selection = document.selection;\n        const rangeBeforeSelection = model.createRange(model.createPositionAt(selection.focus.parent, 0), selection.focus);\n        const { text, range } = getLastTextLine(rangeBeforeSelection, model);\n        const testResult = this.testCallback(text);\n        if (!testResult && this.hasMatch) {\n            this.fire('unmatched');\n        }\n        this._hasMatch = !!testResult;\n        if (testResult) {\n            const eventData = Object.assign(data, { text, range });\n            // If the test callback returns an object with additional data, assign the data as well.\n            if (typeof testResult == 'object') {\n                Object.assign(eventData, testResult);\n            }\n            this.fire(`matched:${suffix}`, eventData);\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module typing/texttransformation\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport TextWatcher from './textwatcher';\nimport { escapeRegExp } from 'lodash-es';\n// All named transformations.\nconst TRANSFORMATIONS = {\n    // Common symbols:\n    copyright: { from: '(c)', to: '©' },\n    registeredTrademark: { from: '(r)', to: '®' },\n    trademark: { from: '(tm)', to: '™' },\n    // Mathematical:\n    oneHalf: { from: /(^|[^/a-z0-9])(1\\/2)([^/a-z0-9])$/i, to: [null, '½', null] },\n    oneThird: { from: /(^|[^/a-z0-9])(1\\/3)([^/a-z0-9])$/i, to: [null, '⅓', null] },\n    twoThirds: { from: /(^|[^/a-z0-9])(2\\/3)([^/a-z0-9])$/i, to: [null, '⅔', null] },\n    oneForth: { from: /(^|[^/a-z0-9])(1\\/4)([^/a-z0-9])$/i, to: [null, '¼', null] },\n    threeQuarters: { from: /(^|[^/a-z0-9])(3\\/4)([^/a-z0-9])$/i, to: [null, '¾', null] },\n    lessThanOrEqual: { from: '<=', to: '≤' },\n    greaterThanOrEqual: { from: '>=', to: '≥' },\n    notEqual: { from: '!=', to: '≠' },\n    arrowLeft: { from: '<-', to: '←' },\n    arrowRight: { from: '->', to: '→' },\n    // Typography:\n    horizontalEllipsis: { from: '...', to: '…' },\n    enDash: { from: /(^| )(--)( )$/, to: [null, '–', null] },\n    emDash: { from: /(^| )(---)( )$/, to: [null, '—', null] },\n    // Quotations:\n    // English, US\n    quotesPrimary: { from: buildQuotesRegExp('\"'), to: [null, '“', null, '”'] },\n    quotesSecondary: { from: buildQuotesRegExp('\\''), to: [null, '‘', null, '’'] },\n    // English, UK\n    quotesPrimaryEnGb: { from: buildQuotesRegExp('\\''), to: [null, '‘', null, '’'] },\n    quotesSecondaryEnGb: { from: buildQuotesRegExp('\"'), to: [null, '“', null, '”'] },\n    // Polish\n    quotesPrimaryPl: { from: buildQuotesRegExp('\"'), to: [null, '„', null, '”'] },\n    quotesSecondaryPl: { from: buildQuotesRegExp('\\''), to: [null, '‚', null, '’'] }\n};\n// Transformation groups.\nconst TRANSFORMATION_GROUPS = {\n    symbols: ['copyright', 'registeredTrademark', 'trademark'],\n    mathematical: [\n        'oneHalf', 'oneThird', 'twoThirds', 'oneForth', 'threeQuarters',\n        'lessThanOrEqual', 'greaterThanOrEqual', 'notEqual',\n        'arrowLeft', 'arrowRight'\n    ],\n    typography: ['horizontalEllipsis', 'enDash', 'emDash'],\n    quotes: ['quotesPrimary', 'quotesSecondary']\n};\n// A set of default transformations provided by the feature.\nconst DEFAULT_TRANSFORMATIONS = [\n    'symbols',\n    'mathematical',\n    'typography',\n    'quotes'\n];\n/**\n * The text transformation plugin.\n */\nexport default class TextTransformation extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return ['Delete', 'Input'];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TextTransformation';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('typing', {\n            transformations: {\n                include: DEFAULT_TRANSFORMATIONS\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const model = this.editor.model;\n        const modelSelection = model.document.selection;\n        modelSelection.on('change:range', () => {\n            // Disable plugin when selection is inside a code block.\n            this.isEnabled = !modelSelection.anchor.parent.is('element', 'codeBlock');\n        });\n        this._enableTransformationWatchers();\n    }\n    /**\n     * Create new TextWatcher listening to the editor for typing and selection events.\n     */\n    _enableTransformationWatchers() {\n        const editor = this.editor;\n        const model = editor.model;\n        const deletePlugin = editor.plugins.get('Delete');\n        const normalizedTransformations = normalizeTransformations(editor.config.get('typing.transformations'));\n        const testCallback = (text) => {\n            for (const normalizedTransformation of normalizedTransformations) {\n                const from = normalizedTransformation.from;\n                const match = from.test(text);\n                if (match) {\n                    return { normalizedTransformation };\n                }\n            }\n        };\n        const watcher = new TextWatcher(editor.model, testCallback);\n        watcher.on('matched:data', (evt, data) => {\n            if (!data.batch.isTyping) {\n                return;\n            }\n            const { from, to } = data.normalizedTransformation;\n            const matches = from.exec(data.text);\n            const replaces = to(matches.slice(1));\n            const matchedRange = data.range;\n            let changeIndex = matches.index;\n            model.enqueueChange(writer => {\n                for (let i = 1; i < matches.length; i++) {\n                    const match = matches[i];\n                    const replaceWith = replaces[i - 1];\n                    if (replaceWith == null) {\n                        changeIndex += match.length;\n                        continue;\n                    }\n                    const replacePosition = matchedRange.start.getShiftedBy(changeIndex);\n                    const replaceRange = model.createRange(replacePosition, replacePosition.getShiftedBy(match.length));\n                    const attributes = getTextAttributesAfterPosition(replacePosition);\n                    model.insertContent(writer.createText(replaceWith, attributes), replaceRange);\n                    changeIndex += replaceWith.length;\n                }\n                model.enqueueChange(() => {\n                    deletePlugin.requestUndoOnBackspace();\n                });\n            });\n        });\n        watcher.bind('isEnabled').to(this);\n    }\n}\n/**\n * Normalizes the configuration `from` parameter value.\n * The normalized value for the `from` parameter is a RegExp instance. If the passed `from` is already a RegExp instance,\n * it is returned unchanged.\n */\nfunction normalizeFrom(from) {\n    if (typeof from == 'string') {\n        return new RegExp(`(${escapeRegExp(from)})$`);\n    }\n    // `from` is already a regular expression.\n    return from;\n}\n/**\n * Normalizes the configuration `to` parameter value.\n * The normalized value for the `to` parameter is a function that takes an array and returns an array. See more in the\n * configuration description. If the passed `to` is already a function, it is returned unchanged.\n */\nfunction normalizeTo(to) {\n    if (typeof to == 'string') {\n        return () => [to];\n    }\n    else if (to instanceof Array) {\n        return () => to;\n    }\n    // `to` is already a function.\n    return to;\n}\n/**\n * For given `position` returns attributes for the text that is after that position.\n * The text can be in the same text node as the position (`foo[]bar`) or in the next text node (`foo[]<$text bold=\"true\">bar</$text>`).\n */\nfunction getTextAttributesAfterPosition(position) {\n    const textNode = position.textNode ? position.textNode : position.nodeAfter;\n    return textNode.getAttributes();\n}\n/**\n * Returns a RegExp pattern string that detects a sentence inside a quote.\n *\n * @param quoteCharacter The character to create a pattern for.\n */\nfunction buildQuotesRegExp(quoteCharacter) {\n    return new RegExp(`(^|\\\\s)(${quoteCharacter})([^${quoteCharacter}]*)(${quoteCharacter})$`);\n}\n/**\n * Reads text transformation config and returns normalized array of transformations objects.\n */\nfunction normalizeTransformations(config) {\n    const extra = config.extra || [];\n    const remove = config.remove || [];\n    const isNotRemoved = (transformation) => !remove.includes(transformation);\n    const configured = config.include.concat(extra).filter(isNotRemoved);\n    return expandGroupsAndRemoveDuplicates(configured)\n        .filter(isNotRemoved) // Filter out 'remove' transformations as they might be set in group.\n        .map(transformation => (typeof transformation == 'string' && TRANSFORMATIONS[transformation] ? TRANSFORMATIONS[transformation] : transformation))\n        // Filter out transformations set as string that has not been found.\n        .filter((transformation) => typeof transformation === 'object')\n        .map(transformation => ({\n        from: normalizeFrom(transformation.from),\n        to: normalizeTo(transformation.to)\n    }));\n}\n/**\n * Reads definitions and expands named groups if needed to transformation names.\n * This method also removes duplicated named transformations if any.\n */\nfunction expandGroupsAndRemoveDuplicates(definitions) {\n    // Set is using to make sure that transformation names are not duplicated.\n    const definedTransformations = new Set();\n    for (const transformationOrGroup of definitions) {\n        if (typeof transformationOrGroup == 'string' && TRANSFORMATION_GROUPS[transformationOrGroup]) {\n            for (const transformation of TRANSFORMATION_GROUPS[transformationOrGroup]) {\n                definedTransformations.add(transformation);\n            }\n        }\n        else {\n            definedTransformations.add(transformationOrGroup);\n        }\n    }\n    return Array.from(definedTransformations);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Returns attributes that should be preserved on the enter keystroke.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param schema Model's schema.\n * @param allAttributes Attributes to filter.\n */\nexport function* getCopyOnEnterAttributes(schema, allAttributes) {\n    for (const attribute of allAttributes) {\n        if (attribute && schema.getAttributeProperties(attribute[0]).copyOnEnter) {\n            yield attribute;\n        }\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/entercommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * Enter command used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> keystroke.\n */\nexport default class EnterCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        this.editor.model.change(writer => {\n            this.enterBlock(writer);\n            this.fire('afterExecute', { writer });\n        });\n    }\n    /**\n     * Splits a block where the document selection is placed, in the way how the <kbd>Enter</kbd> key is expected to work:\n     *\n     * ```\n     * <p>Foo[]bar</p>   ->   <p>Foo</p><p>[]bar</p>\n     * <p>Foobar[]</p>   ->   <p>Foobar</p><p>[]</p>\n     * <p>Fo[ob]ar</p>   ->   <p>Fo</p><p>[]ar</p>\n     * ```\n     *\n     * In some cases, the split will not happen:\n     *\n     * ```\n     * // The selection parent is a limit element:\n     * <figcaption>A[bc]d</figcaption>   ->   <figcaption>A[]d</figcaption>\n     *\n     * // The selection spans over multiple elements:\n     * <h>x[x</h><p>y]y<p>   ->   <h>x</h><p>[]y</p>\n     * ```\n     *\n     * @param writer Writer to use when performing the enter action.\n     * @returns Boolean indicating if the block was split.\n     */\n    enterBlock(writer) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        const isSelectionEmpty = selection.isCollapsed;\n        const range = selection.getFirstRange();\n        const startElement = range.start.parent;\n        const endElement = range.end.parent;\n        // Don't touch the roots and other limit elements.\n        if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n            // Delete the selected content but only if inside a single limit element.\n            // Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n            // This is an edge case and it's hard to tell what should actually happen because such a selection\n            // is not entirely valid.\n            if (!isSelectionEmpty && startElement == endElement) {\n                model.deleteContent(selection);\n            }\n            return false;\n        }\n        if (isSelectionEmpty) {\n            const attributesToCopy = getCopyOnEnterAttributes(writer.model.schema, selection.getAttributes());\n            splitBlock(writer, range.start);\n            writer.setSelectionAttribute(attributesToCopy);\n            return true;\n        }\n        else {\n            const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n            const isContainedWithinOneElement = (startElement == endElement);\n            model.deleteContent(selection, { leaveUnmerged });\n            if (leaveUnmerged) {\n                // Partially selected elements.\n                //\n                // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n                if (isContainedWithinOneElement) {\n                    splitBlock(writer, selection.focus);\n                    return true;\n                }\n                // Selection over multiple elements.\n                //\n                // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n                else {\n                    writer.setSelection(endElement, 0);\n                }\n            }\n        }\n        return false;\n    }\n}\nfunction splitBlock(writer, splitPos) {\n    writer.split(splitPos);\n    writer.setSelection(splitPos.parent.nextSibling, 0);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/enterobserver\n */\nimport { Observer, DomEventData, BubblingEventInfo } from '@ckeditor/ckeditor5-engine';\nimport { env } from '@ckeditor/ckeditor5-utils';\nconst ENTER_EVENT_TYPES = {\n    insertParagraph: { isSoft: false },\n    insertLineBreak: { isSoft: true }\n};\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter `Document#enter`} event.\n */\nexport default class EnterObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        const doc = this.document;\n        let shiftPressed = false;\n        doc.on('keydown', (evt, data) => {\n            shiftPressed = data.shiftKey;\n        });\n        doc.on('beforeinput', (evt, data) => {\n            if (!this.isEnabled) {\n                return;\n            }\n            let inputType = data.inputType;\n            // See https://github.com/ckeditor/ckeditor5/issues/13321.\n            if (env.isSafari && shiftPressed && inputType == 'insertParagraph') {\n                inputType = 'insertLineBreak';\n            }\n            const domEvent = data.domEvent;\n            const enterEventSpec = ENTER_EVENT_TYPES[inputType];\n            if (!enterEventSpec) {\n                return;\n            }\n            const event = new BubblingEventInfo(doc, 'enter', data.targetRanges[0]);\n            doc.fire(event, new DomEventData(view, domEvent, {\n                isSoft: enterEventSpec.isSoft\n            }));\n            // Stop `beforeinput` event if `enter` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (event.stop.called) {\n                evt.stop();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/enter\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n/**\n * This plugin handles the <kbd>Enter</kbd> keystroke (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */\nexport default class Enter extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Enter';\n    }\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        view.addObserver(EnterObserver);\n        editor.commands.add('enter', new EnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data) => {\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The soft enter key is handled by the ShiftEnter plugin.\n            if (data.isSoft) {\n                return;\n            }\n            editor.execute('enter');\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/shiftentercommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n */\nexport default class ShiftEnterCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        model.change(writer => {\n            softBreakAction(model, writer, doc.selection);\n            this.fire('afterExecute', { writer });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.isEnabled = isEnabled(model.schema, doc.selection);\n    }\n}\n/**\n * Checks whether the ShiftEnter command should be enabled in the specified selection.\n */\nfunction isEnabled(schema, selection) {\n    // At this moment it is okay to support single range selections only.\n    // But in the future we may need to change that.\n    if (selection.rangeCount > 1) {\n        return false;\n    }\n    const anchorPos = selection.anchor;\n    // Check whether the break element can be inserted in the current selection anchor.\n    if (!anchorPos || !schema.checkChild(anchorPos, 'softBreak')) {\n        return false;\n    }\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    // Do not modify the content if selection is cross-limit elements.\n    if ((isInsideLimitElement(startElement, schema) || isInsideLimitElement(endElement, schema)) && startElement !== endElement) {\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n */\nfunction softBreakAction(model, writer, selection) {\n    const isSelectionEmpty = selection.isCollapsed;\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    const isContainedWithinOneElement = (startElement == endElement);\n    if (isSelectionEmpty) {\n        const attributesToCopy = getCopyOnEnterAttributes(model.schema, selection.getAttributes());\n        insertBreak(model, writer, range.end);\n        writer.removeSelectionAttribute(selection.getAttributeKeys());\n        writer.setSelectionAttribute(attributesToCopy);\n    }\n    else {\n        const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n        model.deleteContent(selection, { leaveUnmerged });\n        // Selection within one element:\n        //\n        // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n        if (isContainedWithinOneElement) {\n            insertBreak(model, writer, selection.focus);\n        }\n        // Selection over multiple elements.\n        //\n        // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n        //\n        // We chose not to insert a line break in this case because:\n        //\n        // * it's not a very common scenario,\n        // * it actually surprised me when I saw the \"expected behavior\" in real life.\n        //\n        // It's ok if the user will need to be more specific where they want the <br> to be inserted.\n        else {\n            // Move the selection to the 2nd element (last step of the example above).\n            if (leaveUnmerged) {\n                writer.setSelection(endElement, 0);\n            }\n        }\n    }\n}\nfunction insertBreak(model, writer, position) {\n    const breakLineElement = writer.createElement('softBreak');\n    model.insertContent(breakLineElement, position);\n    writer.setSelection(breakLineElement, 'after');\n}\n/**\n * Checks whether the specified `element` is a child of the limit element.\n *\n * Checking whether the `<p>` element is inside a limit element:\n *   - `<$root><p>Text.</p></$root> => false`\n *   - `<$root><limitElement><p>Text</p></limitElement></$root> => true`\n */\nfunction isInsideLimitElement(element, schema) {\n    // `$root` is a limit element but in this case is an invalid element.\n    if (element.is('rootElement')) {\n        return false;\n    }\n    return schema.isLimit(element) || isInsideLimitElement(element.parent, schema);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/shiftenter\n */\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */\nexport default class ShiftEnter extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ShiftEnter';\n    }\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Configure the schema.\n        schema.register('softBreak', {\n            allowWhere: '$text',\n            isInline: true\n        });\n        // Configure converters.\n        conversion.for('upcast')\n            .elementToElement({\n            model: 'softBreak',\n            view: 'br'\n        });\n        conversion.for('downcast')\n            .elementToElement({\n            model: 'softBreak',\n            view: (modelElement, { writer }) => writer.createEmptyElement('br')\n        });\n        view.addObserver(EnterObserver);\n        editor.commands.add('shiftEnter', new ShiftEnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data) => {\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The hard enter key is handled by the Enter plugin.\n            if (!data.isSoft) {\n                return;\n            }\n            editor.execute('shiftEnter');\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/highlightstack\n */\nimport { EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack extends EmitterMixin() {\n    constructor() {\n        super(...arguments);\n        this._stack = [];\n    }\n    /**\n     * Adds highlight descriptor to the stack.\n     *\n     * @fires change:top\n     */\n    add(descriptor, writer) {\n        const stack = this._stack;\n        // Save top descriptor and insert new one. If top is changed - fire event.\n        const oldTop = stack[0];\n        this._insertDescriptor(descriptor);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n     * Removes highlight descriptor from the stack.\n     *\n     * @fires change:top\n     * @param id Id of the descriptor to remove.\n     */\n    remove(id, writer) {\n        const stack = this._stack;\n        const oldTop = stack[0];\n        this._removeDescriptor(id);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n     * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n     * when descriptor with same id is already present.\n     */\n    _insertDescriptor(descriptor) {\n        const stack = this._stack;\n        const index = stack.findIndex(item => item.id === descriptor.id);\n        // Inserting exact same descriptor - do nothing.\n        if (compareDescriptors(descriptor, stack[index])) {\n            return;\n        }\n        // If descriptor with same id but with different information is on the stack - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n        // Find correct place to insert descriptor in the stack.\n        // It has different information (for example priority) so it must be re-inserted in correct place.\n        let i = 0;\n        while (stack[i] && shouldABeBeforeB(stack[i], descriptor)) {\n            i++;\n        }\n        stack.splice(i, 0, descriptor);\n    }\n    /**\n     * Removes descriptor with given id from the stack.\n     *\n     * @param id Descriptor's id.\n     */\n    _removeDescriptor(id) {\n        const stack = this._stack;\n        const index = stack.findIndex(item => item.id === id);\n        // If descriptor with same id is on the list - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n    }\n}\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */\nfunction compareDescriptors(a, b) {\n    return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n}\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */\nfunction shouldABeBeforeB(a, b) {\n    if (a.priority > b.priority) {\n        return true;\n    }\n    else if (a.priority < b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use classes to compare.\n    return classesToString(a.classes) > classesToString(b.classes);\n}\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n * sorted string.\n */\nfunction classesToString(classes) {\n    return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/utils\n */\nimport { CKEditorError, toArray } from '@ckeditor/ckeditor5-utils';\nimport { findOptimalInsertionRange as engineFindOptimalInsertionRange } from '@ckeditor/ckeditor5-engine';\nimport { IconView } from '@ckeditor/ckeditor5-ui';\nimport HighlightStack from './highlightstack';\nimport { getTypeAroundFakeCaretPosition } from './widgettypearound/utils';\nimport dragHandleIcon from '../theme/icons/drag-handle.svg';\n/**\n * CSS class added to each widget element.\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n/**\n * CSS class added to currently selected widget element.\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n */\nexport function isWidget(node) {\n    if (!node.is('element')) {\n        return false;\n    }\n    return !!node.getCustomProperty('widget');\n}\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */\nexport function toWidget(element, writer, options = {}) {\n    if (!element.is('containerElement')) {\n        /**\n         * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ContainerElement}\n         * instance.\n         *\n         * @error widget-to-widget-wrong-element-type\n         * @param element The view element passed to `toWidget()`.\n         */\n        throw new CKEditorError('widget-to-widget-wrong-element-type', null, { element });\n    }\n    writer.setAttribute('contenteditable', 'false', element);\n    writer.addClass(WIDGET_CLASS_NAME, element);\n    writer.setCustomProperty('widget', true, element);\n    element.getFillerOffset = getFillerOffset;\n    writer.setCustomProperty('widgetLabel', [], element);\n    if (options.label) {\n        setLabel(element, options.label);\n    }\n    if (options.hasSelectionHandle) {\n        addSelectionHandle(element, writer);\n    }\n    setHighlightHandling(element, writer);\n    return element;\n}\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */\nfunction addHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.addClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for (const key in descriptor.attributes) {\n            writer.setAttribute(key, descriptor.attributes[key], element);\n        }\n    }\n}\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */\nfunction removeHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.removeClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for (const key in descriptor.attributes) {\n            writer.removeAttribute(key, element);\n        }\n    }\n}\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */\nexport function setHighlightHandling(element, writer, add = addHighlight, remove = removeHighlight) {\n    const stack = new HighlightStack();\n    stack.on('change:top', (evt, data) => {\n        if (data.oldDescriptor) {\n            remove(element, data.oldDescriptor, data.writer);\n        }\n        if (data.newDescriptor) {\n            add(element, data.newDescriptor, data.writer);\n        }\n    });\n    const addHighlightCallback = (element, descriptor, writer) => stack.add(descriptor, writer);\n    const removeHighlightCallback = (element, id, writer) => stack.remove(id, writer);\n    writer.setCustomProperty('addHighlight', addHighlightCallback, element);\n    writer.setCustomProperty('removeHighlight', removeHighlightCallback, element);\n}\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */\nexport function setLabel(element, labelOrCreator) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    widgetLabel.push(labelOrCreator);\n}\n/**\n * Returns the label of the provided element.\n */\nexport function getLabel(element) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    return widgetLabel.reduce((prev, current) => {\n        if (typeof current === 'function') {\n            return prev ? prev + '. ' + current() : current();\n        }\n        else {\n            return prev ? prev + '. ' + current : current;\n        }\n    }, '');\n}\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @returns Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable(editable, writer, options = {}) {\n    writer.addClass(['ck-editor__editable', 'ck-editor__nested-editable'], editable);\n    writer.setAttribute('role', 'textbox', editable);\n    if (options.label) {\n        writer.setAttribute('aria-label', options.label, editable);\n    }\n    // Set initial contenteditable value.\n    writer.setAttribute('contenteditable', editable.isReadOnly ? 'false' : 'true', editable);\n    // Bind the contenteditable property to element#isReadOnly.\n    editable.on('change:isReadOnly', (evt, property, is) => {\n        writer.setAttribute('contenteditable', is ? 'false' : 'true', editable);\n    });\n    editable.on('change:isFocused', (evt, property, is) => {\n        if (is) {\n            writer.addClass('ck-editor__nested-editable_focused', editable);\n        }\n        else {\n            writer.removeClass('ck-editor__nested-editable_focused', editable);\n        }\n    });\n    setHighlightHandling(editable, writer);\n    return editable;\n}\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */\nexport function findOptimalInsertionRange(selection, model) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement) {\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(selection);\n        // If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n        // to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n        if (typeAroundFakeCaretPosition) {\n            return model.createRange(model.createPositionAt(selectedElement, typeAroundFakeCaretPosition));\n        }\n    }\n    return engineFindOptimalInsertionRange(selection, model);\n}\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */\nexport function viewToModelPositionOutsideModelElement(model, viewElementMatcher) {\n    return (evt, data) => {\n        const { mapper, viewPosition } = data;\n        const viewParent = mapper.findMappedViewAncestor(viewPosition);\n        if (!viewElementMatcher(viewParent)) {\n            return;\n        }\n        const modelParent = mapper.toModelElement(viewParent);\n        data.modelPosition = model.createPositionAt(modelParent, viewPosition.isAtStart ? 'before' : 'after');\n    };\n}\n/**\n * Default filler offset function applied to all widget elements.\n */\nfunction getFillerOffset() {\n    return null;\n}\n/**\n * Adds a drag handle to the widget.\n */\nfunction addSelectionHandle(widgetElement, writer) {\n    const selectionHandle = writer.createUIElement('div', { class: 'ck ck-widget__selection-handle' }, function (domDocument) {\n        const domElement = this.toDomElement(domDocument);\n        // Use the IconView from the ui library.\n        const icon = new IconView();\n        icon.set('content', dragHandleIcon);\n        // Render the icon view right away to append its #element to the selectionHandle DOM element.\n        icon.render();\n        domElement.appendChild(icon.element);\n        return domElement;\n    });\n    // Append the selection handle into the widget wrapper.\n    writer.insert(writer.createPositionAt(widgetElement, 0), selectionHandle);\n    writer.addClass(['ck-widget_with-selection-handle'], widgetElement);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgettypearound/utils\n */\nimport { isWidget } from '../utils';\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n */\nexport const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */\nexport function isTypeAroundWidget(viewElement, modelElement, schema) {\n    return !!viewElement && isWidget(viewElement) && !schema.isInline(modelElement);\n}\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n */\nexport function getClosestTypeAroundDomButton(domElement) {\n    return domElement.closest('.ck-widget__type-around__button');\n}\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @returns The position of the button.\n */\nexport function getTypeAroundButtonPosition(domElement) {\n    return domElement.classList.contains('ck-widget__type-around__button_before') ? 'before' : 'after';\n}\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n */\nexport function getClosestWidgetViewElement(domElement, domConverter) {\n    const widgetDomElement = domElement.closest('.ck-widget');\n    return domConverter.mapDomToView(widgetDomElement);\n}\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @returns The position of the fake caret or `null` when none is present.\n */\nexport function getTypeAroundFakeCaretPosition(selection) {\n    return selection.getAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./widgettypearound.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global DOMParser */\n/**\n * @module widget/widgettypearound/widgettypearound\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { Template } from '@ckeditor/ckeditor5-ui';\nimport { Enter } from '@ckeditor/ckeditor5-enter';\nimport { Delete } from '@ckeditor/ckeditor5-typing';\nimport { env, isForwardArrowKeyCode } from '@ckeditor/ckeditor5-utils';\nimport { isTypeAroundWidget, getClosestTypeAroundDomButton, getTypeAroundButtonPosition, getClosestWidgetViewElement, getTypeAroundFakeCaretPosition, TYPE_AROUND_SELECTION_ATTRIBUTE } from './utils';\nimport { isWidget } from '../utils';\nimport returnIcon from '../../theme/icons/return-arrow.svg';\nimport '../../theme/widgettypearound.css';\nconst POSSIBLE_INSERTION_POSITIONS = ['before', 'after'];\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString(returnIcon, 'image/svg+xml').firstChild;\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */\nexport default class WidgetTypeAround extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * A reference to the model widget element that has the fake caret active\n         * on either side of it. It is later used to remove CSS classes associated with the fake caret\n         * when the widget no longer needs it.\n         */\n        this._currentFakeCaretModelElement = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'WidgetTypeAround';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Enter, Delete];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        // Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n        // and lines visually disappear. All the interactions are disabled in individual plugin methods.\n        this.on('change:isEnabled', (evt, data, isEnabled) => {\n            editingView.change(writer => {\n                for (const root of editingView.document.roots) {\n                    if (isEnabled) {\n                        writer.removeClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    }\n                    else {\n                        writer.addClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    }\n                }\n            });\n            if (!isEnabled) {\n                editor.model.change(writer => {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        this._enableTypeAroundUIInjection();\n        this._enableInsertingParagraphsOnButtonClick();\n        this._enableInsertingParagraphsOnEnterKeypress();\n        this._enableInsertingParagraphsOnTypingKeystroke();\n        this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n        this._enableDeleteIntegration();\n        this._enableInsertContentIntegration();\n        this._enableInsertObjectIntegration();\n        this._enableDeleteContentIntegration();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._currentFakeCaretModelElement = null;\n    }\n    /**\n     * Inserts a new paragraph next to a widget element with the selection anchored in it.\n     *\n     * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n     * the viewport to the selection in the inserted paragraph.\n     *\n     * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n     * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n     */\n    _insertParagraph(widgetModelElement, position) {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const attributesToCopy = editor.model.schema.getAttributesWithProperty(widgetModelElement, 'copyOnReplace', true);\n        editor.execute('insertParagraph', {\n            position: editor.model.createPositionAt(widgetModelElement, position),\n            attributes: attributesToCopy\n        });\n        editingView.focus();\n        editingView.scrollToTheSelection();\n    }\n    /**\n     * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n     * when the plugin {@link #isEnabled is enabled}.\n     *\n     * @param emitter The object that fires the event.\n     * @param event The name of the event.\n     * @param callback The function to be called on event.\n     * @param options Additional options.\n     * @param options.priority The priority of this event callback. The higher the priority value the sooner\n     * the callback will be fired. Events having the same priority are called in the order they were added.\n     */\n    _listenToIfEnabled(emitter, event, callback, options) {\n        this.listenTo(emitter, event, (...args) => {\n            // Do not respond if the plugin is disabled.\n            if (this.isEnabled) {\n                callback(...args);\n            }\n        }, options);\n    }\n    /**\n     * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n     * does not expect a position. Instead, it performs the insertion next to a selected widget\n     * according to the `widget-type-around` model selection attribute value (fake caret position).\n     *\n     * Because this method requires the `widget-type-around` attribute to be set,\n     * the insertion can only happen when the widget's fake caret is active (e.g. activated\n     * using the keyboard).\n     *\n     * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n     */\n    _insertParagraphAccordingToFakeCaretPosition() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        if (!typeAroundFakeCaretPosition) {\n            return false;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[WidgetTypeAround]%c Fake caret -> insert paragraph',\n        // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const selectedModelElement = modelSelection.getSelectedElement();\n        this._insertParagraph(selectedModelElement, typeAroundFakeCaretPosition);\n        return true;\n    }\n    /**\n     * Creates a listener in the editing conversion pipeline that injects the widget type around\n     * UI into every single widget instance created in the editor.\n     *\n     * The UI is delivered as a {@link module:engine/view/uielement~UIElement}\n     * wrapper which renders DOM buttons that users can use to insert paragraphs.\n     */\n    _enableTypeAroundUIInjection() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.locale.t;\n        const buttonTitles = {\n            before: t('Insert paragraph before block'),\n            after: t('Insert paragraph after block')\n        };\n        editor.editing.downcastDispatcher.on('insert', (evt, data, conversionApi) => {\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            if (!viewElement) {\n                return;\n            }\n            // Filter out non-widgets and inline widgets.\n            if (isTypeAroundWidget(viewElement, data.item, schema)) {\n                injectUIIntoWidget(conversionApi.writer, buttonTitles, viewElement);\n                const widgetLabel = viewElement.getCustomProperty('widgetLabel');\n                widgetLabel.push(() => {\n                    return this.isEnabled ? t('Press Enter to type after or press Shift + Enter to type before the widget') : '';\n                });\n            }\n        }, { priority: 'low' });\n    }\n    /**\n     * Brings support for the fake caret that appears when either:\n     *\n     * * the selection moves to a widget from a position next to it using arrow keys,\n     * * the arrow key is pressed when the widget is already selected.\n     *\n     * The fake caret lets the user know that they can start typing or just press\n     * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n     *\n     * The fake caret disappears when the user changes the selection or the editor\n     * gets blurred.\n     *\n     * The whole idea is as follows:\n     *\n     * 1. A user does one of the 2 scenarios described at the beginning.\n     * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n     * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n     *    on which side of the widget it should appear.\n     * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n     *    fake caret on the view widget.\n     * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n     *    does the CSS class clean-up in the view.\n     * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n     *    attribute (the former also removes widget CSS classes).\n     */\n    _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        // This is the main listener responsible for the fake caret.\n        // Note: The priority must precede the default Widget class keydown handler (\"high\").\n        this._listenToIfEnabled(editingView.document, 'arrowKey', (evt, domEventData) => {\n            this._handleArrowKeyPress(evt, domEventData);\n        }, { context: [isWidget, '$text'], priority: 'high' });\n        // This listener makes sure the widget type around selection attribute will be gone from the model\n        // selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n        // (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n        // let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n        this._listenToIfEnabled(modelSelection, 'change:range', (evt, data) => {\n            // Do not reset the selection attribute when the change was indirect.\n            if (!data.directChange) {\n                return;\n            }\n            // Get rid of the widget type around attribute of the selection on every change:range.\n            // If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n            editor.model.change(writer => {\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // Get rid of the widget type around attribute of the selection on every document change\n        // that makes widget not selected any more (i.e. widget was removed).\n        this._listenToIfEnabled(model.document, 'change:data', () => {\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (selectedModelElement) {\n                const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n                if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                    return;\n                }\n            }\n            editor.model.change(writer => {\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // React to changes of the model selection attribute made by the arrow keys listener.\n        // If the block widget is selected and the attribute changes, downcast the attribute to special\n        // CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n        this._listenToIfEnabled(editor.editing.downcastDispatcher, 'selection', (evt, data, conversionApi) => {\n            const writer = conversionApi.writer;\n            if (this._currentFakeCaretModelElement) {\n                const selectedViewElement = conversionApi.mapper.toViewElement(this._currentFakeCaretModelElement);\n                if (selectedViewElement) {\n                    // Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n                    writer.removeClass(POSSIBLE_INSERTION_POSITIONS.map(positionToWidgetCssClass), selectedViewElement);\n                    this._currentFakeCaretModelElement = null;\n                }\n            }\n            const selectedModelElement = data.selection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = conversionApi.mapper.toViewElement(selectedModelElement);\n            if (!isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(data.selection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            writer.addClass(positionToWidgetCssClass(typeAroundFakeCaretPosition), selectedViewElement);\n            // Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n            // selection changes\n            this._currentFakeCaretModelElement = selectedModelElement;\n        });\n        this._listenToIfEnabled(editor.ui.focusTracker, 'change:isFocused', (evt, name, isFocused) => {\n            if (!isFocused) {\n                editor.model.change(writer => {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        function positionToWidgetCssClass(position) {\n            return `ck-widget_type-around_show-fake-caret_${position}`;\n        }\n    }\n    /**\n     * A listener executed on each \"keydown\" in the view document, a part of\n     * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n     *\n     * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n     * be deactivated).\n     *\n     * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n     * in this listener, and stopping and preventing the event that would normally be handled by the widget\n     * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n     * includes inline widgets, which are ignored by the widget type around plugin).\n     */\n    _handleArrowKeyPress(evt, domEventData) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        const keyCode = domEventData.keyCode;\n        const isForward = isForwardArrowKeyCode(keyCode, editor.locale.contentLanguageDirection);\n        const selectedViewElement = editingView.document.selection.getSelectedElement();\n        const selectedModelElement = editor.editing.mapper.toModelElement(selectedViewElement);\n        let shouldStopAndPreventDefault;\n        // Handle keyboard navigation when a type-around-compatible widget is currently selected.\n        if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget(isForward);\n        }\n        // Handle keyboard arrow navigation when the selection is next to a type-around-compatible widget\n        // and the widget is about to be selected.\n        else if (modelSelection.isCollapsed) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget(isForward);\n        }\n        // Handle collapsing a non-collapsed selection that is wider than on a single widget.\n        else if (!domEventData.shiftKey) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection(isForward);\n        }\n        if (shouldStopAndPreventDefault) {\n            domEventData.preventDefault();\n            evt.stop();\n        }\n    }\n    /**\n     * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n     * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n     * selection attribute and the direction of the pressed arrow key.\n     *\n     * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n     * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n     * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n     * process the event any further. Returns `false` otherwise.\n     */\n    _handleArrowKeyPressOnSelectedWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        return model.change(writer => {\n            // If the fake caret is displayed...\n            if (typeAroundFakeCaretPosition) {\n                const isLeavingWidget = typeAroundFakeCaretPosition === (isForward ? 'after' : 'before');\n                // If the keyboard arrow works against the value of the selection attribute...\n                // then remove the selection attribute but prevent default DOM actions\n                // and do not let the Widget plugin listener move the selection. This brings\n                // the widget back to the state, for instance, like if was selected using the mouse.\n                //\n                // **Note**: If leaving the widget when the fake caret is active, then the default\n                // Widget handler will change the selection and, in turn, this will automatically discard\n                // the selection attribute.\n                if (!isLeavingWidget) {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                    return true;\n                }\n            }\n            // If the fake caret wasn't displayed, let's set it now according to the direction of the arrow\n            // key press. This also means we cannot let the Widget plugin listener move the selection.\n            else {\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n                return true;\n            }\n            return false;\n        });\n    }\n    /**\n     * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n     * to one and upon the fake caret should become active for this widget upon arrow keypress\n     * (AKA entering/selecting the widget).\n     *\n     * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n     * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n     * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n     *\n     * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n     * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n     * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n     * process the event any further. Returns `false` otherwise.\n     */\n    _handleArrowKeyPressWhenSelectionNextToAWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const widgetPlugin = editor.plugins.get('Widget');\n        // This is the widget the selection is about to be set on.\n        const modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection(isForward);\n        const viewElementNextToSelection = editor.editing.mapper.toViewElement(modelElementNextToSelection);\n        if (isTypeAroundWidget(viewElementNextToSelection, modelElementNextToSelection, schema)) {\n            model.change(writer => {\n                widgetPlugin._setSelectionOverElement(modelElementNextToSelection);\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after');\n            });\n            // The change() block above does the same job as the Widget plugin. The event can\n            // be safely canceled.\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n     * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n     *\n     * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n     * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n     * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n     * process the event any further. Returns `false` otherwise.\n     */\n    _handleArrowKeyPressWhenNonCollapsedSelection(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const mapper = editor.editing.mapper;\n        const modelSelection = model.document.selection;\n        const selectedModelNode = isForward ?\n            modelSelection.getLastPosition().nodeBefore :\n            modelSelection.getFirstPosition().nodeAfter;\n        const selectedViewNode = mapper.toViewElement(selectedModelNode);\n        // There is a widget at the collapse position so collapse the selection to the fake caret on it.\n        if (isTypeAroundWidget(selectedViewNode, selectedModelNode, schema)) {\n            model.change(writer => {\n                writer.setSelection(selectedModelNode, 'on');\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n            });\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Registers a `mousedown` listener for the view document which intercepts events\n     * coming from the widget type around UI, which happens when a user clicks one of the buttons\n     * that insert a paragraph next to a widget.\n     */\n    _enableInsertingParagraphsOnButtonClick() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'mousedown', (evt, domEventData) => {\n            const button = getClosestTypeAroundDomButton(domEventData.domTarget);\n            if (!button) {\n                return;\n            }\n            const buttonPosition = getTypeAroundButtonPosition(button);\n            const widgetViewElement = getClosestWidgetViewElement(button, editingView.domConverter);\n            const widgetModelElement = editor.editing.mapper.toModelElement(widgetViewElement);\n            this._insertParagraph(widgetModelElement, buttonPosition);\n            domEventData.preventDefault();\n            evt.stop();\n        });\n    }\n    /**\n     * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n     * near the widget when either:\n     *\n     * * The fake caret was first activated using the arrow keys,\n     * * The entire widget is selected in the model.\n     *\n     * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n     * attribute (see {@link #_handleArrowKeyPress}).\n     *\n     * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n     * was pressed or not.\n     */\n    _enableInsertingParagraphsOnEnterKeypress() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'enter', (evt, domEventData) => {\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const selectedModelElement = selection.getSelectedElement();\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            const schema = editor.model.schema;\n            let wasHandled;\n            // First check if the widget is selected and there's a type around selection attribute associated\n            // with the fake caret that would tell where to insert a new paragraph.\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                wasHandled = true;\n            }\n            // Then, if there is no selection attribute associated with the fake caret, check if the widget\n            // simply is selected and create a new paragraph according to the keystroke (Shift+)Enter.\n            else if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                this._insertParagraph(selectedModelElement, domEventData.isSoft ? 'before' : 'after');\n                wasHandled = true;\n            }\n            if (wasHandled) {\n                domEventData.preventDefault();\n                evt.stop();\n            }\n        }, { context: isWidget });\n    }\n    /**\n     * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n     * to insert a paragraph next to a widget when the fake caret was activated using arrow\n     * keys but it responds to typing instead of <kbd>Enter</kbd>.\n     *\n     * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n     * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n     * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n     *\n     * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n     * and another one for actual typing. It is not a disaster but this may need to be fixed\n     * sooner or later.\n     */\n    _enableInsertingParagraphsOnTypingKeystroke() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Note: The priority must precede the default Input plugin insertText handler.\n        this._listenToIfEnabled(viewDocument, 'insertText', (evt, data) => {\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                // The view selection in the event data contains the widget. If the new paragraph\n                // was inserted, modify the view selection passed along with the insertText event\n                // so the default event handler in the Input plugin starts typing inside the paragraph.\n                // Otherwise, the typing would be over the widget.\n                data.selection = viewDocument.selection;\n            }\n        }, { priority: 'high' });\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this._listenToIfEnabled(viewDocument, 'keydown', (evt, data) => {\n                if (data.keyCode == 229) {\n                    this._insertParagraphAccordingToFakeCaretPosition();\n                }\n            });\n        }\n        else {\n            // Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n            this._listenToIfEnabled(viewDocument, 'compositionstart', () => {\n                this._insertParagraphAccordingToFakeCaretPosition();\n            }, { priority: 'high' });\n        }\n    }\n    /**\n     * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n     * is pressed and the fake caret is currently active.\n     *\n     * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n     * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n     * before or after a widget (depending on the content surrounding the widget).\n     */\n    _enableDeleteIntegration() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        const schema = model.schema;\n        this._listenToIfEnabled(editingView.document, 'delete', (evt, domEventData) => {\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(model.document.selection);\n            // This listener handles only these cases when the fake caret is active.\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            const direction = domEventData.direction;\n            const selectedModelWidget = model.document.selection.getSelectedElement();\n            const isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n            const isDeleteForward = direction == 'forward';\n            const shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n            if (shouldDeleteEntireWidget) {\n                editor.execute('delete', {\n                    selection: model.createSelection(selectedModelWidget, 'on')\n                });\n            }\n            else {\n                const range = schema.getNearestSelectionRange(model.createPositionAt(selectedModelWidget, typeAroundFakeCaretPosition), direction);\n                // If there is somewhere to move selection to, then there will be something to delete.\n                if (range) {\n                    // If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n                    if (!range.isCollapsed) {\n                        model.change(writer => {\n                            writer.setSelection(range);\n                            editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                        });\n                    }\n                    else {\n                        const probe = model.createSelection(range.start);\n                        model.modifySelection(probe, { direction });\n                        // If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n                        // If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n                        if (!probe.focus.isEqual(range.start)) {\n                            model.change(writer => {\n                                writer.setSelection(range);\n                                editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                            });\n                        }\n                        // If there is no non-collapsed range to be deleted then we are sure that there is an empty element\n                        // next to a widget that should be removed. \"delete\" and \"deleteForward\" commands cannot get rid of it\n                        // so calling Model#deleteContent here manually.\n                        else {\n                            const deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor(schema, range.start.parent);\n                            model.deleteContent(model.createSelection(deepestEmptyRangeAncestor, 'on'), {\n                                doNotAutoparagraph: true\n                            });\n                        }\n                    }\n                }\n            }\n            // If some content was deleted, don't let the handler from the Widget plugin kick in.\n            // If nothing was deleted, then the default handler will have nothing to do anyway.\n            domEventData.preventDefault();\n            evt.stop();\n        }, { context: isWidget });\n    }\n    /**\n     * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n     * content near a widget when the fake caret is first activated using the arrow keys.\n     *\n     * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n     */\n    _enableInsertContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertContent', (evt, [content, selectable]) => {\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            evt.stop();\n            return model.change(writer => {\n                const selectedElement = documentSelection.getSelectedElement();\n                const position = model.createPositionAt(selectedElement, typeAroundFakeCaretPosition);\n                const selection = writer.createSelection(position);\n                const result = model.insertContent(content, selection);\n                writer.setSelection(selection);\n                return result;\n            });\n        }, { priority: 'high' });\n    }\n    /**\n     * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n     * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n     * to reflect user's intent of desired insertion position.\n     *\n     * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n     */\n    _enableInsertObjectIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertObject', (evt, args) => {\n            const [, selectable, options = {}] = args;\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            options.findOptimalPosition = typeAroundFakeCaretPosition;\n            args[3] = options;\n        }, { priority: 'high' });\n    }\n    /**\n     * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n     * caret is active.\n     *\n     * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n     * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n     * plain text pasting.\n     */\n    _enableDeleteContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'deleteContent', (evt, [selection]) => {\n            if (selection && !selection.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            // Disable removing the selection content while pasting plain text.\n            if (typeAroundFakeCaretPosition) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    }\n}\n/**\n * Injects the type around UI into a view widget instance.\n */\nfunction injectUIIntoWidget(viewWriter, buttonTitles, widgetViewElement) {\n    const typeAroundWrapper = viewWriter.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__type-around'\n    }, function (domDocument) {\n        const wrapperDomElement = this.toDomElement(domDocument);\n        injectButtons(wrapperDomElement, buttonTitles);\n        injectFakeCaret(wrapperDomElement);\n        return wrapperDomElement;\n    });\n    // Inject the type around wrapper into the widget's wrapper.\n    viewWriter.insert(viewWriter.createPositionAt(widgetViewElement, 'end'), typeAroundWrapper);\n}\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */\nfunction injectButtons(wrapperDomElement, buttonTitles) {\n    for (const position of POSSIBLE_INSERTION_POSITIONS) {\n        const buttonTemplate = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-widget__type-around__button',\n                    `ck-widget__type-around__button_${position}`\n                ],\n                title: buttonTitles[position],\n                'aria-hidden': 'true'\n            },\n            children: [\n                wrapperDomElement.ownerDocument.importNode(RETURN_ARROW_ICON_ELEMENT, true)\n            ]\n        });\n        wrapperDomElement.appendChild(buttonTemplate.render());\n    }\n}\nfunction injectFakeCaret(wrapperDomElement) {\n    const caretTemplate = new Template({\n        tag: 'div',\n        attributes: {\n            class: [\n                'ck',\n                'ck-widget__type-around__fake-caret'\n            ]\n        }\n    });\n    wrapperDomElement.appendChild(caretTemplate.render());\n}\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */\nfunction getDeepestEmptyElementAncestor(schema, element) {\n    let deepestEmptyAncestor = element;\n    for (const ancestor of element.getAncestors({ parentFirst: true })) {\n        if (ancestor.childCount > 1 || schema.isLimit(ancestor)) {\n            break;\n        }\n        deepestEmptyAncestor = ancestor;\n    }\n    return deepestEmptyAncestor;\n}\n","export default \"<svg viewBox=\\\"0 0 10 8\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/verticalnavigation\n */\nimport { keyCodes, Rect } from '@ckeditor/ckeditor5-utils';\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */\nexport default function verticalNavigationHandler(editing) {\n    const model = editing.model;\n    return (evt, data) => {\n        const arrowUpPressed = data.keyCode == keyCodes.arrowup;\n        const arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n        const expandSelection = data.shiftKey;\n        const selection = model.document.selection;\n        if (!arrowUpPressed && !arrowDownPressed) {\n            return;\n        }\n        const isForward = arrowDownPressed;\n        // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n        // Selection for sure will not approach any object.\n        if (expandSelection && selectionWillShrink(selection, isForward)) {\n            return;\n        }\n        // Find a range between selection and closest limit element.\n        const range = findTextRangeFromSelection(editing, selection, isForward);\n        // There is no selection position inside the limit element.\n        if (!range) {\n            return;\n        }\n        // If already at the edge of a limit element.\n        if (range.isCollapsed) {\n            // A collapsed selection at limit edge - nothing more to do.\n            if (selection.isCollapsed) {\n                return;\n            }\n            // A non collapsed selection is at the limit edge while expanding the selection - let others do their stuff.\n            else if (expandSelection) {\n                return;\n            }\n        }\n        // If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n        //\n        // We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n        // of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n        if (range.isCollapsed || isSingleLineRange(editing, range, isForward)) {\n            model.change(writer => {\n                const newPosition = isForward ? range.end : range.start;\n                if (expandSelection) {\n                    const newSelection = model.createSelection(selection.anchor);\n                    newSelection.setFocus(newPosition);\n                    writer.setSelection(newSelection);\n                }\n                else {\n                    writer.setSelection(newPosition);\n                }\n            });\n            evt.stop();\n            data.preventDefault();\n            data.stopPropagation();\n        }\n    };\n}\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */\nfunction findTextRangeFromSelection(editing, selection, isForward) {\n    const model = editing.model;\n    if (isForward) {\n        const startPosition = selection.isCollapsed ? selection.focus : selection.getLastPosition();\n        const endPosition = getNearestNonInlineLimit(model, startPosition, 'forward');\n        // There is no limit element, browser should handle this.\n        if (!endPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const lastRangePosition = getNearestTextPosition(model.schema, range, 'backward');\n        if (lastRangePosition) {\n            return model.createRange(startPosition, lastRangePosition);\n        }\n        return null;\n    }\n    else {\n        const endPosition = selection.isCollapsed ? selection.focus : selection.getFirstPosition();\n        const startPosition = getNearestNonInlineLimit(model, endPosition, 'backward');\n        // There is no limit element, browser should handle this.\n        if (!startPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const firstRangePosition = getNearestTextPosition(model.schema, range, 'forward');\n        if (firstRangePosition) {\n            return model.createRange(firstRangePosition, endPosition);\n        }\n        return null;\n    }\n}\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */\nfunction getNearestNonInlineLimit(model, startPosition, direction) {\n    const schema = model.schema;\n    const range = model.createRangeIn(startPosition.root);\n    const walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n    for (const { previousPosition, item, type } of range.getWalker({ startPosition, direction })) {\n        if (schema.isLimit(item) && !schema.isInline(item)) {\n            return previousPosition;\n        }\n        // Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n        if (type == walkerValueType && schema.isBlock(item)) {\n            return null;\n        }\n    }\n    return null;\n}\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */\nfunction getNearestTextPosition(schema, range, direction) {\n    const position = direction == 'backward' ? range.end : range.start;\n    if (schema.checkChild(position, '$text')) {\n        return position;\n    }\n    for (const { nextPosition } of range.getWalker({ direction })) {\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    return null;\n}\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */\nfunction isSingleLineRange(editing, modelRange, isForward) {\n    const model = editing.model;\n    const domConverter = editing.view.domConverter;\n    // Wrapped lines contain exactly the same position at the end of current line\n    // and at the beginning of next line. That position's client rect is at the end\n    // of current line. In case of caret at first position of the last line that 'dual'\n    // position would be detected as it's not the last line.\n    if (isForward) {\n        const probe = model.createSelection(modelRange.start);\n        model.modifySelection(probe);\n        // If the new position is at the end of the container then we can't use this position\n        // because it would provide incorrect result for eg caption of image and selection\n        // just before end of it. Also in this case there is no \"dual\" position.\n        if (!probe.focus.isAtEnd && !modelRange.start.isEqual(probe.focus)) {\n            modelRange = model.createRange(probe.focus, modelRange.end);\n        }\n    }\n    const viewRange = editing.mapper.toViewRange(modelRange);\n    const domRange = domConverter.viewRangeToDom(viewRange);\n    const rects = Rect.getDomRangeRects(domRange);\n    let boundaryVerticalPosition;\n    for (const rect of rects) {\n        if (boundaryVerticalPosition === undefined) {\n            boundaryVerticalPosition = Math.round(rect.bottom);\n            continue;\n        }\n        // Let's check if this rect is in new line.\n        if (Math.round(rect.top) >= boundaryVerticalPosition) {\n            return false;\n        }\n        boundaryVerticalPosition = Math.max(boundaryVerticalPosition, Math.round(rect.bottom));\n    }\n    return true;\n}\nfunction selectionWillShrink(selection, isForward) {\n    return !selection.isCollapsed && selection.isBackward == isForward;\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./widget.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widget\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { MouseObserver } from '@ckeditor/ckeditor5-engine';\nimport { Delete } from '@ckeditor/ckeditor5-typing';\nimport { env, getLocalizedArrowKeyCodeDirection } from '@ckeditor/ckeditor5-utils';\nimport WidgetTypeAround from './widgettypearound/widgettypearound';\nimport verticalNavigationHandler from './verticalnavigation';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport '../theme/widget.css';\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */\nexport default class Widget extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * Holds previously selected widgets.\n         */\n        this._previouslySelected = new Set();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Widget';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [WidgetTypeAround, Delete];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Model to view selection converter.\n        // Converts selection placed over widget element to fake selection.\n        //\n        // By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n        // child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n        // next to an inline widget: the view selection contains both the widget and the marker.\n        //\n        // This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n        // in these cases based on the model:\n        //\n        //\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n        //\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n        //\n        // Thanks to this:\n        //\n        // * fake selection can be set correctly,\n        // * any logic depending on (View)Selection#getSelectedElement() also works OK.\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/9524.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi) => {\n            const viewWriter = conversionApi.writer;\n            const modelSelection = data.selection;\n            // The collapsed selection can't contain any widget.\n            if (modelSelection.isCollapsed) {\n                return;\n            }\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            if (!isWidget(selectedViewElement)) {\n                return;\n            }\n            if (!conversionApi.consumable.consume(modelSelection, 'selection')) {\n                return;\n            }\n            viewWriter.setSelection(viewWriter.createRangeOn(selectedViewElement), {\n                fake: true,\n                label: getLabel(selectedViewElement)\n            });\n        });\n        // Mark all widgets inside the selection with the css class.\n        // This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi) => {\n            // Remove selected class from previously selected widgets.\n            this._clearPreviouslySelectedWidgets(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            const viewSelection = viewWriter.document.selection;\n            let lastMarked = null;\n            for (const range of viewSelection.getRanges()) {\n                // Note: There could be multiple selected widgets in a range but no fake selection.\n                // All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n                for (const value of range) {\n                    const node = value.item;\n                    // Do not mark nested widgets in selected one. See: #4594\n                    if (isWidget(node) && !isChild(node, lastMarked)) {\n                        viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n                        this._previouslySelected.add(node);\n                        lastMarked = node;\n                    }\n                }\n            }\n        }, { priority: 'low' });\n        // If mouse down is pressed on widget - create selection over whole widget.\n        view.addObserver(MouseObserver);\n        this.listenTo(viewDocument, 'mousedown', (...args) => this._onMousedown(...args));\n        // There are two keydown listeners working on different priorities. This allows other\n        // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n        // and customize the behavior even further in different content/selection scenarios.\n        //\n        // * The first listener handles changing the selection on arrow key press\n        // if the widget is selected or if the selection is next to a widget and the widget\n        // should become selected upon the arrow key press.\n        //\n        // * The second (late) listener makes sure the default browser action on arrow key press is\n        // prevented when a widget is selected. This prevents the selection from being moved\n        // from a fake selection container.\n        this.listenTo(viewDocument, 'arrowKey', (...args) => {\n            this._handleSelectionChangeOnArrowKeyPress(...args);\n        }, { context: [isWidget, '$text'] });\n        this.listenTo(viewDocument, 'arrowKey', (...args) => {\n            this._preventDefaultOnArrowKeyPress(...args);\n        }, { context: '$root' });\n        this.listenTo(viewDocument, 'arrowKey', verticalNavigationHandler(this.editor.editing), { context: '$text' });\n        // Handle custom delete behaviour.\n        this.listenTo(viewDocument, 'delete', (evt, data) => {\n            if (this._handleDelete(data.direction == 'forward')) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, { context: '$root' });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n     */\n    _onMousedown(eventInfo, domEventData) {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        let element = domEventData.target;\n        // Do nothing for single or double click inside nested editable.\n        if (isInsideNestedEditable(element)) {\n            // But at least triple click inside nested editable causes broken selection in Safari.\n            // For such event, we select the entire nested editable element.\n            // See: https://github.com/ckeditor/ckeditor5/issues/1463.\n            if ((env.isSafari || env.isGecko) && domEventData.domEvent.detail >= 3) {\n                const mapper = editor.editing.mapper;\n                const viewElement = element.is('attributeElement') ?\n                    element.findAncestor(element => !element.is('attributeElement')) : element;\n                const modelElement = mapper.toModelElement(viewElement);\n                domEventData.preventDefault();\n                this.editor.model.change(writer => {\n                    writer.setSelection(modelElement, 'in');\n                });\n            }\n            return;\n        }\n        // If target is not a widget element - check if one of the ancestors is.\n        if (!isWidget(element)) {\n            element = element.findAncestor(isWidget);\n            if (!element) {\n                return;\n            }\n        }\n        // On Android selection would jump to the first table cell, on other devices\n        // we can't block it (and don't need to) because of drag and drop support.\n        if (env.isAndroid) {\n            domEventData.preventDefault();\n        }\n        // Focus editor if is not focused already.\n        if (!viewDocument.isFocused) {\n            view.focus();\n        }\n        // Create model selection over widget.\n        const modelElement = editor.editing.mapper.toModelElement(element);\n        this._setSelectionOverElement(modelElement);\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n     * the model selection when:\n     *\n     * * arrow key is pressed when the widget is selected,\n     * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n     *\n     * See {@link #_preventDefaultOnArrowKeyPress}.\n     */\n    _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n        const keyCode = domEventData.keyCode;\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        const objectElement = modelSelection.getSelectedElement();\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, this.editor.locale.contentLanguageDirection);\n        const isForward = direction == 'down' || direction == 'right';\n        const isVerticalNavigation = direction == 'up' || direction == 'down';\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n            const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n            if (newRange) {\n                model.change(writer => {\n                    writer.setSelection(newRange);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Handle collapsing of the selection when there is any widget on the edge of selection.\n        // This is needed because browsers have problems with collapsing such selection.\n        if (!modelSelection.isCollapsed && !domEventData.shiftKey) {\n            const firstPosition = modelSelection.getFirstPosition();\n            const lastPosition = modelSelection.getLastPosition();\n            const firstSelectedNode = firstPosition.nodeAfter;\n            const lastSelectedNode = lastPosition.nodeBefore;\n            if (firstSelectedNode && schema.isObject(firstSelectedNode) || lastSelectedNode && schema.isObject(lastSelectedNode)) {\n                model.change(writer => {\n                    writer.setSelection(isForward ? lastPosition : firstPosition);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Return if not collapsed.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        // If selection is next to object element.\n        const objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n        if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n            // Do not select an inline widget while handling up/down arrow.\n            if (schema.isInline(objectElementNextToSelection) && isVerticalNavigation) {\n                return;\n            }\n            this._setSelectionOverElement(objectElementNextToSelection);\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n     * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n     * container.\n     *\n     * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n     */\n    _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const objectElement = model.document.selection.getSelectedElement();\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n     * Handles delete keys: backspace and delete.\n     *\n     * @param isForward Set to true if delete was performed in forward direction.\n     * @returns Returns `true` if keys were handled correctly.\n     */\n    _handleDelete(isForward) {\n        const modelDocument = this.editor.model.document;\n        const modelSelection = modelDocument.selection;\n        // Do nothing when the read only mode is enabled.\n        if (!this.editor.model.canEditAt(modelSelection)) {\n            return;\n        }\n        // Do nothing on non-collapsed selection.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        const objectElement = this._getObjectElementNextToSelection(isForward);\n        if (objectElement) {\n            this.editor.model.change(writer => {\n                let previousNode = modelSelection.anchor.parent;\n                // Remove previous element if empty.\n                while (previousNode.isEmpty) {\n                    const nodeToRemove = previousNode;\n                    previousNode = nodeToRemove.parent;\n                    writer.remove(nodeToRemove);\n                }\n                this._setSelectionOverElement(objectElement);\n            });\n            return true;\n        }\n    }\n    /**\n     * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n     *\n     * @internal\n     */\n    _setSelectionOverElement(element) {\n        this.editor.model.change(writer => {\n            writer.setSelection(writer.createRangeOn(element));\n        });\n    }\n    /**\n     * Checks if {@link module:engine/model/element~Element element} placed next to the current\n     * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n     * {@link module:engine/model/schema~Schema schema} as `object`.\n     *\n     * @internal\n     * @param forward Direction of checking.\n     */\n    _getObjectElementNextToSelection(forward) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n        // to its current state after undo.\n        const probe = model.createSelection(modelSelection);\n        model.modifySelection(probe, { direction: forward ? 'forward' : 'backward' });\n        // The selection didn't change so there is nothing there.\n        if (probe.isEqual(modelSelection)) {\n            return null;\n        }\n        const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n        if (!!objectElement && schema.isObject(objectElement)) {\n            return objectElement;\n        }\n        return null;\n    }\n    /**\n     * Removes CSS class from previously selected widgets.\n     */\n    _clearPreviouslySelectedWidgets(writer) {\n        for (const widget of this._previouslySelected) {\n            writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n        }\n        this._previouslySelected.clear();\n    }\n}\n/**\n * Returns `true` when element is a nested editable or is placed inside one.\n */\nfunction isInsideNestedEditable(element) {\n    let currentElement = element;\n    while (currentElement) {\n        if (currentElement.is('editableElement') && !currentElement.is('rootElement')) {\n            return true;\n        }\n        // Click on nested widget should select it.\n        if (isWidget(currentElement)) {\n            return false;\n        }\n        currentElement = currentElement.parent;\n    }\n    return false;\n}\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */\nfunction isChild(element, parent) {\n    if (!parent) {\n        return false;\n    }\n    return Array.from(element.getAncestors()).includes(parent);\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize/resizerstate\n */\nimport { ObservableMixin, Rect } from '@ckeditor/ckeditor5-utils';\n/**\n * Stores the internal state of a single resizable object.\n */\nexport default class ResizeState extends ObservableMixin() {\n    /**\n     * @param options Resizer options.\n     */\n    constructor(options) {\n        super();\n        this.set('activeHandlePosition', null);\n        this.set('proposedWidthPercents', null);\n        this.set('proposedWidth', null);\n        this.set('proposedHeight', null);\n        this.set('proposedHandleHostWidth', null);\n        this.set('proposedHandleHostHeight', null);\n        this._options = options;\n        this._referenceCoordinates = null;\n    }\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     */\n    get originalWidth() {\n        return this._originalWidth;\n    }\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     */\n    get originalHeight() {\n        return this._originalHeight;\n    }\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     */\n    get originalWidthPercents() {\n        return this._originalWidthPercents;\n    }\n    /**\n     * A width to height ratio of the resized image.\n     */\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n    /**\n     *\n     * @param domResizeHandle The handle used to calculate the reference point.\n     */\n    begin(domResizeHandle, domHandleHost, domResizeHost) {\n        const clientRect = new Rect(domHandleHost);\n        this.activeHandlePosition = getHandlePosition(domResizeHandle);\n        this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n        this._originalWidth = clientRect.width;\n        this._originalHeight = clientRect.height;\n        this._aspectRatio = clientRect.width / clientRect.height;\n        const widthStyle = domResizeHost.style.width;\n        if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n            this._originalWidthPercents = parseFloat(widthStyle);\n        }\n        else {\n            this._originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n        }\n    }\n    update(newSize) {\n        this.proposedWidth = newSize.width;\n        this.proposedHeight = newSize.height;\n        this.proposedWidthPercents = newSize.widthPercents;\n        this.proposedHandleHostWidth = newSize.handleHostWidth;\n        this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n}\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n */\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n    const domResizeHostParent = domResizeHost.parentElement;\n    // Need to use computed style as it properly excludes parent's paddings from the returned value.\n    let parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n    // Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n    // and try to get width from next ancestor.\n    // https://github.com/ckeditor/ckeditor5/issues/10776\n    const ancestorLevelLimit = 5;\n    let currentLevel = 0;\n    let checkedElement = domResizeHostParent;\n    while (isNaN(parentWidth)) {\n        checkedElement = checkedElement.parentElement;\n        if (++currentLevel > ancestorLevelLimit) {\n            return 0;\n        }\n        parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(checkedElement).width);\n    }\n    return resizeHostRect.width / parentWidth * 100;\n}\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n    const elementRect = new Rect(element);\n    const positionParts = resizerPosition.split('-');\n    const ret = {\n        x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n        y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n    };\n    ret.x += element.ownerDocument.defaultView.scrollX;\n    ret.y += element.ownerDocument.defaultView.scrollY;\n    return ret;\n}\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */\nfunction getResizerHandleClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */\nfunction getHandlePosition(domHandle) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n    for (const position of resizerPositions) {\n        if (domHandle.classList.contains(getResizerHandleClass(position))) {\n            return position;\n        }\n    }\n}\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */\nfunction getOppositePosition(position) {\n    const parts = position.split('-');\n    const replacements = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n    };\n    return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize/resizer\n */\nimport { Template } from '@ckeditor/ckeditor5-ui';\nimport { Rect, ObservableMixin, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport ResizeState from './resizerstate';\nimport SizeView from './sizeview';\n/**\n * Represents a resizer for a single resizable object.\n */\nexport default class Resizer extends ObservableMixin() {\n    /**\n     * @param options Resizer options.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A wrapper that is controlled by the resizer. This is usually a widget element.\n         */\n        this._viewResizerWrapper = null;\n        this._options = options;\n        this.set('isEnabled', true);\n        this.set('isSelected', false);\n        this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected) => isEnabled && isSelected);\n        this.decorate('begin');\n        this.decorate('cancel');\n        this.decorate('commit');\n        this.decorate('updateSize');\n        this.on('commit', event => {\n            // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n            // cleaned up (#5195).\n            if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n                this._cleanup();\n                event.stop();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n     *\n     * Note that a new state is created for each resize transaction.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Makes resizer visible in the UI.\n     */\n    show() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.removeClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n     * Hides resizer in the UI.\n     */\n    hide() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.addClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n     * Attaches the resizer to the DOM.\n     */\n    attach() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const widgetElement = this._options.viewElement;\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            const viewResizerWrapper = writer.createUIElement('div', {\n                class: 'ck ck-reset_all ck-widget__resizer'\n            }, function (domDocument) {\n                const domElement = this.toDomElement(domDocument);\n                that._appendHandles(domElement);\n                that._appendSizeUI(domElement);\n                return domElement;\n            });\n            // Append the resizer wrapper to the widget's wrapper.\n            writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n            writer.addClass('ck-widget_with-resizer', widgetElement);\n            this._viewResizerWrapper = viewResizerWrapper;\n            if (!this.isVisible) {\n                this.hide();\n            }\n        });\n        this.on('change:isVisible', () => {\n            if (this.isVisible) {\n                this.show();\n                this.redraw();\n            }\n            else {\n                this.hide();\n            }\n        });\n    }\n    /**\n     * Starts the resizing process.\n     *\n     * Creates a new {@link #state} for the current process.\n     *\n     * @fires begin\n     * @param domResizeHandle Clicked handle.\n     */\n    begin(domResizeHandle) {\n        this._state = new ResizeState(this._options);\n        this._sizeView._bindToState(this._options, this.state);\n        this._initialViewWidth = this._options.viewElement.getStyle('width');\n        this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n    }\n    /**\n     * Updates the proposed size based on `domEventData`.\n     *\n     * @fires updateSize\n     */\n    updateSize(domEventData) {\n        const newSize = this._proposeNewSize(domEventData);\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            const unit = this._options.unit || '%';\n            const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n            writer.setStyle('width', newWidth, this._options.viewElement);\n        });\n        // Get an actual image width, and:\n        // * reflect this size to the resize wrapper\n        // * apply this **real** size to the state\n        const domHandleHost = this._getHandleHost();\n        const domHandleHostRect = new Rect(domHandleHost);\n        const handleHostWidth = Math.round(domHandleHostRect.width);\n        const handleHostHeight = Math.round(domHandleHostRect.height);\n        // Handle max-width limitation.\n        const domResizeHostRect = new Rect(domHandleHost);\n        newSize.width = Math.round(domResizeHostRect.width);\n        newSize.height = Math.round(domResizeHostRect.height);\n        this.redraw(domHandleHostRect);\n        this.state.update({\n            ...newSize,\n            handleHostWidth,\n            handleHostHeight\n        });\n    }\n    /**\n     * Applies the geometry proposed with the resizer.\n     *\n     * @fires commit\n     */\n    commit() {\n        const unit = this._options.unit || '%';\n        const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n        // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n        this._options.editor.editing.view.change(() => {\n            this._cleanup();\n            this._options.onCommit(newValue);\n        });\n    }\n    /**\n     * Cancels and rejects the proposed resize dimensions, hiding the UI.\n     *\n     * @fires cancel\n     */\n    cancel() {\n        this._cleanup();\n    }\n    /**\n     * Destroys the resizer.\n     */\n    destroy() {\n        this.cancel();\n    }\n    /**\n     * Redraws the resizer.\n     *\n     * @param handleHostRect Handle host rectangle might be given to improve performance.\n     */\n    redraw(handleHostRect) {\n        const domWrapper = this._domResizerWrapper;\n        // Refresh only if resizer exists in the DOM.\n        if (!existsInDom(domWrapper)) {\n            return;\n        }\n        const widgetWrapper = domWrapper.parentElement;\n        const handleHost = this._getHandleHost();\n        const resizerWrapper = this._viewResizerWrapper;\n        const currentDimensions = [\n            resizerWrapper.getStyle('width'),\n            resizerWrapper.getStyle('height'),\n            resizerWrapper.getStyle('left'),\n            resizerWrapper.getStyle('top')\n        ];\n        let newDimensions;\n        if (widgetWrapper.isSameNode(handleHost)) {\n            const clientRect = handleHostRect || new Rect(handleHost);\n            newDimensions = [\n                clientRect.width + 'px',\n                clientRect.height + 'px',\n                undefined,\n                undefined\n            ];\n        }\n        // In case a resizing host is not a widget wrapper, we need to compensate\n        // for any additional offsets the resize host might have. E.g. wrapper padding\n        // or simply another editable. By doing that the border and resizers are shown\n        // only around the resize host.\n        else {\n            newDimensions = [\n                handleHost.offsetWidth + 'px',\n                handleHost.offsetHeight + 'px',\n                handleHost.offsetLeft + 'px',\n                handleHost.offsetTop + 'px'\n            ];\n        }\n        // Make changes to the view only if the resizer should actually get new dimensions.\n        // Otherwise, if View#change() was always called, this would cause EditorUI#update\n        // loops because the WidgetResize plugin listens to EditorUI#update and updates\n        // the resizer.\n        // https://github.com/ckeditor/ckeditor5/issues/7633\n        if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n            this._options.editor.editing.view.change(writer => {\n                writer.setStyle({\n                    width: newDimensions[0],\n                    height: newDimensions[1],\n                    left: newDimensions[2],\n                    top: newDimensions[3]\n                }, resizerWrapper);\n            });\n        }\n    }\n    containsHandle(domElement) {\n        return this._domResizerWrapper.contains(domElement);\n    }\n    static isResizeHandle(domElement) {\n        return domElement.classList.contains('ck-widget__resizer__handle');\n    }\n    /**\n     * Cleans up the context state.\n     */\n    _cleanup() {\n        this._sizeView._dismiss();\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n        });\n    }\n    /**\n     * Calculates the proposed size as the resize handles are dragged.\n     *\n     * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n     */\n    _proposeNewSize(domEventData) {\n        const state = this.state;\n        const currentCoordinates = extractCoordinates(domEventData);\n        const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n        // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n        // meaning that it has been shrunk.\n        //\n        // +----------------+--+\n        // |                |  |\n        // |       img      |  |\n        // |  /handle host  |  |\n        // +----------------+  | ^\n        // |                   | | - enlarge y\n        // +-------------------+ v\n        // \t\t\t\t\t<-->\n        // \t\t\t\t\t enlarge x\n        const enlargement = {\n            x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n            y: (currentCoordinates.y - state.originalHeight) - state._referenceCoordinates.y\n        };\n        if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n            enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n        }\n        // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n        // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n        if (isCentered) {\n            enlargement.x *= 2;\n        }\n        // const resizeHost = this._getResizeHost();\n        // The size proposed by the user. It does not consider the aspect ratio.\n        let width = Math.abs(state.originalWidth + enlargement.x);\n        let height = Math.abs(state.originalHeight + enlargement.y);\n        // Dominant determination must take the ratio into account.\n        const dominant = width / state.aspectRatio > height ? 'width' : 'height';\n        if (dominant == 'width') {\n            height = width / state.aspectRatio;\n        }\n        else {\n            width = height * state.aspectRatio;\n        }\n        return {\n            width: Math.round(width),\n            height: Math.round(height),\n            widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * width * 100) / 100, 100)\n        };\n    }\n    /**\n     * Obtains the resize host.\n     *\n     * Resize host is an object that receives dimensions which are the result of resizing.\n     */\n    _getResizeHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getResizeHost(widgetWrapper);\n    }\n    /**\n     * Obtains the handle host.\n     *\n     * Handle host is an object that the handles are aligned to.\n     *\n     * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n     * contains an image and a caption. Only the image should be surrounded with handles.\n     */\n    _getHandleHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getHandleHost(widgetWrapper);\n    }\n    /**\n     * DOM container of the entire resize UI.\n     *\n     * Note that this property will have a value only after the element bound with the resizer is rendered\n     * (otherwise `null`).\n     */\n    get _domResizerWrapper() {\n        return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n    }\n    /**\n     * Renders the resize handles in the DOM.\n     *\n     * @param domElement The resizer wrapper.\n     */\n    _appendHandles(domElement) {\n        const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n        for (const currentPosition of resizerPositions) {\n            domElement.appendChild((new Template({\n                tag: 'div',\n                attributes: {\n                    class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n                }\n            }).render()));\n        }\n    }\n    /**\n     * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n     */\n    _appendSizeUI(domElement) {\n        this._sizeView = new SizeView();\n        // Make sure icon#element is rendered before passing to appendChild().\n        this._sizeView.render();\n        domElement.appendChild(this._sizeView.element);\n    }\n}\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */\nfunction getResizerClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n    return {\n        x: event.pageX,\n        y: event.pageY\n    };\n}\nfunction existsInDom(element) {\n    return element && element.ownerDocument && element.ownerDocument.contains(element);\n}\n","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./widgetresize.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../css-loader/dist/cjs.js!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./clipboard.css\";\n\nvar options = {\"injectType\":\"singletonStyleTag\",\"attributes\":{\"data-cke\":true}};\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/dragdrop\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { LiveRange, MouseObserver } from '@ckeditor/ckeditor5-engine';\nimport { Widget, isWidget } from '@ckeditor/ckeditor5-widget';\nimport { env, uid, delay } from '@ckeditor/ckeditor5-utils';\nimport ClipboardPipeline from './clipboardpipeline';\nimport ClipboardObserver from './clipboardobserver';\nimport { throttle } from 'lodash-es';\nimport '../theme/clipboard.css';\n// Drag and drop events overview:\n//\n//                ┌──────────────────┐\n//                │     mousedown    │   Sets the draggable attribute.\n//                └─────────┬────────┘\n//                          │\n//                          └─────────────────────┐\n//                          │                     │\n//                          │           ┌─────────V────────┐\n//                          │           │      mouseup     │   Dragging did not start, removes the draggable attribute.\n//                          │           └──────────────────┘\n//                          │\n//                ┌─────────V────────┐   Retrieves the selected model.DocumentFragment\n//                │     dragstart    │   and converts it to view.DocumentFragment.\n//                └─────────┬────────┘\n//                          │\n//                ┌─────────V────────┐   Processes view.DocumentFragment to text/html and text/plain\n//                │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                └─────────┬────────┘\n//                          │\n//                          │   DOM dragover\n//                          ┌────────────┐\n//                          │            │\n//                ┌─────────V────────┐   │\n//                │     dragging     │   │   Updates the drop target marker.\n//                └─────────┬────────┘   │\n//                          │            │\n//            ┌─────────────└────────────┘\n//            │             │            │\n//            │   ┌─────────V────────┐   │\n//            │   │     dragleave    │   │   Removes the drop target marker.\n//            │   └─────────┬────────┘   │\n//            │             │            │\n//        ┌───│─────────────┘            │\n//        │   │             │            │\n//        │   │   ┌─────────V────────┐   │\n//        │   │   │     dragenter    │   │   Focuses the editor view.\n//        │   │   └─────────┬────────┘   │\n//        │   │             │            │\n//        │   │             └────────────┘\n//        │   │\n//        │   └─────────────┐\n//        │   │             │\n//        │   │   ┌─────────V────────┐\n//        └───┐   │       drop       │   (The default handler of the clipboard pipeline).\n//            │   └─────────┬────────┘\n//            │             │\n//            │   ┌─────────V────────┐   Resolves the final data.targetRanges.\n//            │   │  clipboardInput  │   Aborts if dropping on dragged content.\n//            │   └─────────┬────────┘\n//            │             │\n//            │   ┌─────────V────────┐\n//            │   │  clipboardInput  │   (The default handler of the clipboard pipeline).\n//            │   └─────────┬────────┘\n//            │             │\n//            │ ┌───────────V───────────┐\n//            │ │  inputTransformation  │   (The default handler of the clipboard pipeline).\n//            │ └───────────┬───────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   Updates the document selection to drop range.\n//            │  └──────────┬──────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   (The default handler of the clipboard pipeline).\n//            │  └──────────┬──────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   Removes the content from the original range if the insertion was successful.\n//            │  └──────────┬──────────┘\n//            │             │\n//            └─────────────┐\n//                          │\n//                ┌─────────V────────┐\n//                │      dragend     │   Removes the drop marker and cleans the state.\n//                └──────────────────┘\n//\n/**\n * The drag and drop feature. It works on top of the {@link module:clipboard/clipboardpipeline~ClipboardPipeline}.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n */\nexport default class DragDrop extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'DragDrop';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ClipboardPipeline, Widget];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        this._draggedRange = null;\n        this._draggingUid = '';\n        this._draggableElement = null;\n        this._updateDropMarkerThrottled = throttle(targetRange => this._updateDropMarker(targetRange), 40);\n        this._removeDropMarkerDelayed = delay(() => this._removeDropMarker(), 40);\n        this._clearDraggableAttributesDelayed = delay(() => this._clearDraggableAttributes(), 40);\n        if (editor.plugins.has('DragDropExperimental')) {\n            this.forceDisabled('DragDropExperimental');\n            return;\n        }\n        view.addObserver(ClipboardObserver);\n        view.addObserver(MouseObserver);\n        this._setupDragging();\n        this._setupContentInsertionIntegration();\n        this._setupClipboardInputIntegration();\n        this._setupDropMarker();\n        this._setupDraggableAttributeHandling();\n        this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly) => {\n            if (isReadOnly) {\n                this.forceDisabled('readOnlyMode');\n            }\n            else {\n                this.clearForceDisabled('readOnlyMode');\n            }\n        });\n        this.on('change:isEnabled', (evt, name, isEnabled) => {\n            if (!isEnabled) {\n                this._finalizeDragging(false);\n            }\n        });\n        if (env.isAndroid) {\n            this.forceDisabled('noAndroidSupport');\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        if (this._draggedRange) {\n            this._draggedRange.detach();\n            this._draggedRange = null;\n        }\n        this._updateDropMarkerThrottled.cancel();\n        this._removeDropMarkerDelayed.cancel();\n        this._clearDraggableAttributesDelayed.cancel();\n        return super.destroy();\n    }\n    /**\n     * Drag and drop events handling.\n     */\n    _setupDragging() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelDocument = model.document;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // The handler for the drag start; it is responsible for setting data transfer object.\n        this.listenTo(viewDocument, 'dragstart', (evt, data) => {\n            const selection = modelDocument.selection;\n            // Don't drag the editable element itself.\n            if (data.target && data.target.is('editableElement')) {\n                data.preventDefault();\n                return;\n            }\n            // TODO we could clone this node somewhere and style it to match editing view but without handles,\n            //  selection outline, WTA buttons, etc.\n            // data.dataTransfer._native.setDragImage( data.domTarget, 0, 0 );\n            // Check if this is dragstart over the widget (but not a nested editable).\n            const draggableWidget = data.target ? findDraggableWidget(data.target) : null;\n            if (draggableWidget) {\n                const modelElement = editor.editing.mapper.toModelElement(draggableWidget);\n                this._draggedRange = LiveRange.fromRange(model.createRangeOn(modelElement));\n                // Disable toolbars so they won't obscure the drop area.\n                if (editor.plugins.has('WidgetToolbarRepository')) {\n                    const widgetToolbarRepository = editor.plugins.get('WidgetToolbarRepository');\n                    widgetToolbarRepository.forceDisabled('dragDrop');\n                }\n            }\n            // If this was not a widget we should check if we need to drag some text content.\n            else if (!viewDocument.selection.isCollapsed) {\n                const selectedElement = viewDocument.selection.getSelectedElement();\n                if (!selectedElement || !isWidget(selectedElement)) {\n                    this._draggedRange = LiveRange.fromRange(selection.getFirstRange());\n                }\n            }\n            if (!this._draggedRange) {\n                data.preventDefault();\n                return;\n            }\n            this._draggingUid = uid();\n            const canEditAtDraggedRange = this.isEnabled && editor.model.canEditAt(this._draggedRange);\n            data.dataTransfer.effectAllowed = canEditAtDraggedRange ? 'copyMove' : 'copy';\n            data.dataTransfer.setData('application/ckeditor5-dragging-uid', this._draggingUid);\n            const draggedSelection = model.createSelection(this._draggedRange.toRange());\n            const content = editor.data.toView(model.getSelectedContent(draggedSelection));\n            viewDocument.fire('clipboardOutput', {\n                dataTransfer: data.dataTransfer,\n                content,\n                method: 'dragstart'\n            });\n            if (!canEditAtDraggedRange) {\n                this._draggedRange.detach();\n                this._draggedRange = null;\n                this._draggingUid = '';\n            }\n        }, { priority: 'low' });\n        // The handler for finalizing drag and drop. It should always be triggered after dragging completes\n        // even if it was completed in a different application.\n        // Note: This is not fired if source text node got removed while downcasting a marker.\n        this.listenTo(viewDocument, 'dragend', (evt, data) => {\n            this._finalizeDragging(!data.dataTransfer.isCanceled && data.dataTransfer.dropEffect == 'move');\n        }, { priority: 'low' });\n        // Dragging over the editable.\n        this.listenTo(viewDocument, 'dragenter', () => {\n            if (!this.isEnabled) {\n                return;\n            }\n            view.focus();\n        });\n        // Dragging out of the editable.\n        this.listenTo(viewDocument, 'dragleave', () => {\n            // We do not know if the mouse left the editor or just some element in it, so let us wait a few milliseconds\n            // to check if 'dragover' is not fired.\n            this._removeDropMarkerDelayed();\n        });\n        // Handler for moving dragged content over the target area.\n        this.listenTo(viewDocument, 'dragging', (evt, data) => {\n            if (!this.isEnabled) {\n                data.dataTransfer.dropEffect = 'none';\n                return;\n            }\n            this._removeDropMarkerDelayed.cancel();\n            const targetRange = findDropTargetRange(editor, data.targetRanges, data.target);\n            // Do not drop if target place is not editable.\n            if (!editor.model.canEditAt(targetRange)) {\n                data.dataTransfer.dropEffect = 'none';\n                return;\n            }\n            // If this is content being dragged from another editor, moving out of current editor instance\n            // is not possible until 'dragend' event case will be fixed.\n            if (!this._draggedRange) {\n                data.dataTransfer.dropEffect = 'copy';\n            }\n            // In Firefox it is already set and effect allowed remains the same as originally set.\n            if (!env.isGecko) {\n                if (data.dataTransfer.effectAllowed == 'copy') {\n                    data.dataTransfer.dropEffect = 'copy';\n                }\n                else if (['all', 'copyMove'].includes(data.dataTransfer.effectAllowed)) {\n                    data.dataTransfer.dropEffect = 'move';\n                }\n            }\n            /* istanbul ignore else -- @preserve */\n            if (targetRange) {\n                this._updateDropMarkerThrottled(targetRange);\n            }\n        }, { priority: 'low' });\n    }\n    /**\n     * Integration with the `clipboardInput` event.\n     */\n    _setupClipboardInputIntegration() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Update the event target ranges and abort dropping if dropping over itself.\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n            if (data.method != 'drop') {\n                return;\n            }\n            const targetRange = findDropTargetRange(editor, data.targetRanges, data.target);\n            // The dragging markers must be removed after searching for the target range because sometimes\n            // the target lands on the marker itself.\n            this._removeDropMarker();\n            /* istanbul ignore if -- @preserve */\n            if (!targetRange || !editor.model.canEditAt(targetRange)) {\n                this._finalizeDragging(false);\n                evt.stop();\n                return;\n            }\n            // Since we cannot rely on the drag end event, we must check if the local drag range is from the current drag and drop\n            // or it is from some previous not cleared one.\n            if (this._draggedRange && this._draggingUid != data.dataTransfer.getData('application/ckeditor5-dragging-uid')) {\n                this._draggedRange.detach();\n                this._draggedRange = null;\n                this._draggingUid = '';\n            }\n            // Do not do anything if some content was dragged within the same document to the same position.\n            const isMove = getFinalDropEffect(data.dataTransfer) == 'move';\n            if (isMove && this._draggedRange && this._draggedRange.containsRange(targetRange, true)) {\n                this._finalizeDragging(false);\n                evt.stop();\n                return;\n            }\n            // Override the target ranges with the one adjusted to the best one for a drop.\n            data.targetRanges = [editor.editing.mapper.toViewRange(targetRange)];\n        }, { priority: 'high' });\n    }\n    /**\n     * Integration with the `contentInsertion` event of the clipboard pipeline.\n     */\n    _setupContentInsertionIntegration() {\n        const clipboardPipeline = this.editor.plugins.get(ClipboardPipeline);\n        clipboardPipeline.on('contentInsertion', (evt, data) => {\n            if (!this.isEnabled || data.method !== 'drop') {\n                return;\n            }\n            // Update the selection to the target range in the same change block to avoid selection post-fixing\n            // and to be able to clone text attributes for plain text dropping.\n            const ranges = data.targetRanges.map(viewRange => this.editor.editing.mapper.toModelRange(viewRange));\n            this.editor.model.change(writer => writer.setSelection(ranges));\n        }, { priority: 'high' });\n        clipboardPipeline.on('contentInsertion', (evt, data) => {\n            if (!this.isEnabled || data.method !== 'drop') {\n                return;\n            }\n            // Remove dragged range content, remove markers, clean after dragging.\n            const isMove = getFinalDropEffect(data.dataTransfer) == 'move';\n            // Whether any content was inserted (insertion might fail if the schema is disallowing some elements\n            // (for example an image caption allows only the content of a block but not blocks themselves.\n            // Some integrations might not return valid range (i.e., table pasting).\n            const isSuccess = !data.resultRange || !data.resultRange.isCollapsed;\n            this._finalizeDragging(isSuccess && isMove);\n        }, { priority: 'lowest' });\n    }\n    /**\n     * Adds listeners that add the `draggable` attribute to the elements while the mouse button is down so the dragging could start.\n     */\n    _setupDraggableAttributeHandling() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Add the 'draggable' attribute to the widget while pressing the selection handle.\n        // This is required for widgets to be draggable. In Chrome it will enable dragging text nodes.\n        this.listenTo(viewDocument, 'mousedown', (evt, data) => {\n            // The lack of data can be caused by editor tests firing fake mouse events. This should not occur\n            // in real-life scenarios but this greatly simplifies editor tests that would otherwise fail a lot.\n            if (env.isAndroid || !data) {\n                return;\n            }\n            this._clearDraggableAttributesDelayed.cancel();\n            // Check if this is a mousedown over the widget (but not a nested editable).\n            let draggableElement = findDraggableWidget(data.target);\n            // Note: There is a limitation that if more than a widget is selected (a widget and some text)\n            // and dragging starts on the widget, then only the widget is dragged.\n            // If this was not a widget then we should check if we need to drag some text content.\n            // In Chrome set a 'draggable' attribute on closest editable to allow immediate dragging of the selected text range.\n            // In Firefox this is not needed. In Safari it makes the whole editable draggable (not just textual content).\n            // Disabled in read-only mode because draggable=\"true\" + contenteditable=\"false\" results\n            // in not firing selectionchange event ever, which makes the selection stuck in read-only mode.\n            if (env.isBlink && !draggableElement && !viewDocument.selection.isCollapsed) {\n                const selectedElement = viewDocument.selection.getSelectedElement();\n                if (!selectedElement || !isWidget(selectedElement)) {\n                    const editableElement = viewDocument.selection.editableElement;\n                    if (editableElement && !editableElement.isReadOnly) {\n                        draggableElement = editableElement;\n                    }\n                }\n            }\n            if (draggableElement) {\n                view.change(writer => {\n                    writer.setAttribute('draggable', 'true', draggableElement);\n                });\n                // Keep the reference to the model element in case the view element gets removed while dragging.\n                this._draggableElement = editor.editing.mapper.toModelElement(draggableElement);\n            }\n        });\n        // Remove the draggable attribute in case no dragging started (only mousedown + mouseup).\n        this.listenTo(viewDocument, 'mouseup', () => {\n            if (!env.isAndroid) {\n                this._clearDraggableAttributesDelayed();\n            }\n        });\n    }\n    /**\n     * Removes the `draggable` attribute from the element that was used for dragging.\n     */\n    _clearDraggableAttributes() {\n        const editing = this.editor.editing;\n        editing.view.change(writer => {\n            // Remove 'draggable' attribute.\n            if (this._draggableElement && this._draggableElement.root.rootName != '$graveyard') {\n                writer.removeAttribute('draggable', editing.mapper.toViewElement(this._draggableElement));\n            }\n            this._draggableElement = null;\n        });\n    }\n    /**\n     * Creates downcast conversion for the drop target marker.\n     */\n    _setupDropMarker() {\n        const editor = this.editor;\n        // Drop marker conversion for hovering over widgets.\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: 'drop-target',\n            view: {\n                classes: ['ck-clipboard-drop-target-range']\n            }\n        });\n        // Drop marker conversion for in text drop target.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: 'drop-target',\n            view: (data, { writer }) => {\n                const inText = editor.model.schema.checkChild(data.markerRange.start, '$text');\n                if (!inText) {\n                    return;\n                }\n                return writer.createUIElement('span', { class: 'ck ck-clipboard-drop-target-position' }, function (domDocument) {\n                    const domElement = this.toDomElement(domDocument);\n                    // Using word joiner to make this marker as high as text and also making text not break on marker.\n                    domElement.append('\\u2060', domDocument.createElement('span'), '\\u2060');\n                    return domElement;\n                });\n            }\n        });\n    }\n    /**\n     * Updates the drop target marker to the provided range.\n     *\n     * @param targetRange The range to set the marker to.\n     */\n    _updateDropMarker(targetRange) {\n        const editor = this.editor;\n        const markers = editor.model.markers;\n        editor.model.change(writer => {\n            if (markers.has('drop-target')) {\n                if (!markers.get('drop-target').getRange().isEqual(targetRange)) {\n                    writer.updateMarker('drop-target', { range: targetRange });\n                }\n            }\n            else {\n                writer.addMarker('drop-target', {\n                    range: targetRange,\n                    usingOperation: false,\n                    affectsData: false\n                });\n            }\n        });\n    }\n    /**\n     * Removes the drop target marker.\n     */\n    _removeDropMarker() {\n        const model = this.editor.model;\n        this._removeDropMarkerDelayed.cancel();\n        this._updateDropMarkerThrottled.cancel();\n        if (model.markers.has('drop-target')) {\n            model.change(writer => {\n                writer.removeMarker('drop-target');\n            });\n        }\n    }\n    /**\n     * Deletes the dragged content from its original range and clears the dragging state.\n     *\n     * @param moved Whether the move succeeded.\n     */\n    _finalizeDragging(moved) {\n        const editor = this.editor;\n        const model = editor.model;\n        this._removeDropMarker();\n        this._clearDraggableAttributes();\n        if (editor.plugins.has('WidgetToolbarRepository')) {\n            const widgetToolbarRepository = editor.plugins.get('WidgetToolbarRepository');\n            widgetToolbarRepository.clearForceDisabled('dragDrop');\n        }\n        this._draggingUid = '';\n        if (!this._draggedRange) {\n            return;\n        }\n        // Delete moved content.\n        if (moved && this.isEnabled) {\n            model.deleteContent(model.createSelection(this._draggedRange), { doNotAutoparagraph: true });\n        }\n        this._draggedRange.detach();\n        this._draggedRange = null;\n    }\n}\n/**\n * Returns fixed selection range for given position and target element.\n */\nfunction findDropTargetRange(editor, targetViewRanges, targetViewElement) {\n    const model = editor.model;\n    const mapper = editor.editing.mapper;\n    let range = null;\n    const targetViewPosition = targetViewRanges ? targetViewRanges[0].start : null;\n    // A UIElement is not a valid drop element, use parent (this could be a drop marker or any other UIElement).\n    if (targetViewElement.is('uiElement')) {\n        targetViewElement = targetViewElement.parent;\n    }\n    // Quick win if the target is a widget (but not a nested editable).\n    range = findDropTargetRangeOnWidget(editor, targetViewElement);\n    if (range) {\n        return range;\n    }\n    // The easiest part is over, now we need to move to the model space.\n    // Find target model element and position.\n    const targetModelElement = getClosestMappedModelElement(editor, targetViewElement);\n    const targetModelPosition = targetViewPosition ? mapper.toModelPosition(targetViewPosition) : null;\n    // There is no target position while hovering over an empty table cell.\n    // In Safari, target position can be empty while hovering over a widget (e.g., a page-break).\n    // Find the drop position inside the element.\n    if (!targetModelPosition) {\n        return findDropTargetRangeInElement(editor, targetModelElement);\n    }\n    // Check if target position is between blocks and adjust drop position to the next object.\n    // This is because while hovering over a root element next to a widget the target position can jump in crazy places.\n    range = findDropTargetRangeBetweenBlocks(editor, targetModelPosition, targetModelElement);\n    if (range) {\n        return range;\n    }\n    // Try fixing selection position.\n    // In Firefox, the target position lands before widgets but in other browsers it tends to land after a widget.\n    range = model.schema.getNearestSelectionRange(targetModelPosition, env.isGecko ? 'forward' : 'backward');\n    if (range) {\n        return range;\n    }\n    // There is no valid selection position inside the current limit element so find a closest object ancestor.\n    // This happens if the model position lands directly in the <table> element itself (view target element was a `<td>`\n    // so a nested editable, but view target position was directly in the `<figure>` element).\n    return findDropTargetRangeOnAncestorObject(editor, targetModelPosition.parent);\n}\n/**\n * Returns fixed selection range for a given position and a target element if it is over the widget but not over its nested editable.\n */\nfunction findDropTargetRangeOnWidget(editor, targetViewElement) {\n    const model = editor.model;\n    const mapper = editor.editing.mapper;\n    // Quick win if the target is a widget.\n    if (isWidget(targetViewElement)) {\n        return model.createRangeOn(mapper.toModelElement(targetViewElement));\n    }\n    // Check if we are deeper over a widget (but not over a nested editable).\n    if (!targetViewElement.is('editableElement')) {\n        // Find a closest ancestor that is either a widget or an editable element...\n        const ancestor = targetViewElement.findAncestor(node => isWidget(node) || node.is('editableElement'));\n        // ...and if the widget was closer then it is a drop target.\n        if (isWidget(ancestor)) {\n            return model.createRangeOn(mapper.toModelElement(ancestor));\n        }\n    }\n    return null;\n}\n/**\n * Returns fixed selection range inside a model element.\n */\nfunction findDropTargetRangeInElement(editor, targetModelElement) {\n    const model = editor.model;\n    const schema = model.schema;\n    const positionAtElementStart = model.createPositionAt(targetModelElement, 0);\n    return schema.getNearestSelectionRange(positionAtElementStart, 'forward');\n}\n/**\n * Returns fixed selection range for a given position and a target element if the drop is between blocks.\n */\nfunction findDropTargetRangeBetweenBlocks(editor, targetModelPosition, targetModelElement) {\n    const model = editor.model;\n    // Check if target is between blocks.\n    if (!model.schema.checkChild(targetModelElement, '$block')) {\n        return null;\n    }\n    // Find position between blocks.\n    const positionAtElementStart = model.createPositionAt(targetModelElement, 0);\n    // Get the common part of the path (inside the target element and the target position).\n    const commonPath = targetModelPosition.path.slice(0, positionAtElementStart.path.length);\n    // Position between the blocks.\n    const betweenBlocksPosition = model.createPositionFromPath(targetModelPosition.root, commonPath);\n    const nodeAfter = betweenBlocksPosition.nodeAfter;\n    // Adjust drop position to the next object.\n    // This is because while hovering over a root element next to a widget the target position can jump in crazy places.\n    if (nodeAfter && model.schema.isObject(nodeAfter)) {\n        return model.createRangeOn(nodeAfter);\n    }\n    return null;\n}\n/**\n * Returns a selection range on the ancestor object.\n */\nfunction findDropTargetRangeOnAncestorObject(editor, element) {\n    const model = editor.model;\n    let currentElement = element;\n    while (currentElement) {\n        if (model.schema.isObject(currentElement)) {\n            return model.createRangeOn(currentElement);\n        }\n        currentElement = currentElement.parent;\n    }\n    /* istanbul ignore next -- @preserve */\n    return null;\n}\n/**\n * Returns the closest model element for the specified view element.\n */\nfunction getClosestMappedModelElement(editor, element) {\n    const mapper = editor.editing.mapper;\n    const view = editor.editing.view;\n    const targetModelElement = mapper.toModelElement(element);\n    if (targetModelElement) {\n        return targetModelElement;\n    }\n    // Find mapped ancestor if the target is inside not mapped element (for example inline code element).\n    const viewPosition = view.createPositionBefore(element);\n    const viewElement = mapper.findMappedViewAncestor(viewPosition);\n    return mapper.toModelElement(viewElement);\n}\n/**\n * Returns the drop effect that should be a result of dragging the content.\n * This function is handling a quirk when checking the effect in the 'drop' DOM event.\n */\nfunction getFinalDropEffect(dataTransfer) {\n    if (env.isGecko) {\n        return dataTransfer.dropEffect;\n    }\n    return ['all', 'copyMove'].includes(dataTransfer.effectAllowed) ? 'move' : 'copy';\n}\n/**\n * Returns a widget element that should be dragged.\n */\nfunction findDraggableWidget(target) {\n    // This is directly an editable so not a widget for sure.\n    if (target.is('editableElement')) {\n        return null;\n    }\n    // TODO: Let's have a isWidgetSelectionHandleDomElement() helper in ckeditor5-widget utils.\n    if (target.hasClass('ck-widget__selection-handle')) {\n        return target.findAncestor(isWidget);\n    }\n    // Direct hit on a widget.\n    if (isWidget(target)) {\n        return target;\n    }\n    // Find closest ancestor that is either a widget or an editable element...\n    const ancestor = target.findAncestor(node => isWidget(node) || node.is('editableElement'));\n    // ...and if closer was the widget then enable dragging it.\n    if (isWidget(ancestor)) {\n        return ancestor;\n    }\n    return null;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/pasteplaintext\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport ClipboardObserver from './clipboardobserver';\nimport ClipboardPipeline from './clipboardpipeline';\n/**\n * The plugin detects the user's intention to paste plain text.\n *\n * For example, it detects the <kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> keystroke.\n */\nexport default class PastePlainText extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'PastePlainText';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ClipboardPipeline];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const selection = model.document.selection;\n        let shiftPressed = false;\n        view.addObserver(ClipboardObserver);\n        this.listenTo(viewDocument, 'keydown', (evt, data) => {\n            shiftPressed = data.shiftKey;\n        });\n        editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data) => {\n            // Plain text can be determined based on the event flag (#7799) or auto-detection (#1006). If detected,\n            // preserve selection attributes on pasted items.\n            if (!shiftPressed && !isPlainTextFragment(data.content, model.schema)) {\n                return;\n            }\n            model.change(writer => {\n                // Formatting attributes should be preserved.\n                const textAttributes = Array.from(selection.getAttributes())\n                    .filter(([key]) => model.schema.getAttributeProperties(key).isFormatting);\n                if (!selection.isCollapsed) {\n                    model.deleteContent(selection, { doNotAutoparagraph: true });\n                }\n                // Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n                // For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n                // of a link.\n                textAttributes.push(...selection.getAttributes());\n                const range = writer.createRangeIn(data.content);\n                for (const item of range.getItems()) {\n                    if (item.is('$textProxy')) {\n                        writer.setAttributes(textAttributes, item);\n                    }\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if specified `documentFragment` represents a plain text.\n */\nfunction isPlainTextFragment(documentFragment, schema) {\n    if (documentFragment.childCount > 1) {\n        return false;\n    }\n    const child = documentFragment.getChild(0);\n    if (schema.isObject(child)) {\n        return false;\n    }\n    return Array.from(child.getAttributeKeys()).length == 0;\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/clipboard\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport ClipboardPipeline from './clipboardpipeline';\nimport DragDrop from './dragdrop';\nimport PastePlainText from './pasteplaintext';\n/**\n * The clipboard feature.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n * * {@link module:clipboard/clipboardpipeline~ClipboardPipeline}\n * * {@link module:clipboard/dragdrop~DragDrop}\n * * {@link module:clipboard/pasteplaintext~PastePlainText}\n */\nexport default class Clipboard extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Clipboard';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ClipboardPipeline, DragDrop, PastePlainText];\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module clipboard/lineview\n */\n/* istanbul ignore file -- @preserve */\nimport { View } from '@ckeditor/ckeditor5-ui';\nimport { toUnit } from '@ckeditor/ckeditor5-utils';\nconst toPx = toUnit('px');\n/**\n * The horizontal drop target line view.\n */\nexport default class LineView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.set({\n            isVisible: false,\n            left: null,\n            top: null,\n            width: null\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-clipboard-drop-target-line',\n                    bind.if('isVisible', 'ck-hidden', value => !value)\n                ],\n                style: {\n                    left: bind.to('left', left => toPx(left)),\n                    top: bind.to('top', top => toPx(top)),\n                    width: bind.to('width', width => toPx(width))\n                }\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module select-all/selectallcommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/tutorials/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n */\nexport default class SelectAllCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        let scopeElement = model.schema.getLimitElement(selection);\n        // If an entire scope is selected, or the selection's ancestor is not a scope yet,\n        // browse through ancestors to find the enclosing parent scope.\n        if (selection.containsEntireContent(scopeElement) || !isSelectAllScope(model.schema, scopeElement)) {\n            do {\n                scopeElement = scopeElement.parent;\n                // Do nothing, if the entire `root` is already selected.\n                if (!scopeElement) {\n                    return;\n                }\n            } while (!isSelectAllScope(model.schema, scopeElement));\n        }\n        model.change(writer => {\n            writer.setSelection(scopeElement, 'in');\n        });\n    }\n}\n/**\n * Checks whether the element is a valid select-all scope. Returns true, if the element is a\n * {@link module:engine/model/schema~Schema#isLimit limit}, and can contain any text or paragraph.\n *\n * @param schema Schema to check against.\n * @param element Model element.\n */\nfunction isSelectAllScope(schema, element) {\n    return schema.isLimit(element) && (schema.checkChild(element, '$text') || schema.checkChild(element, 'paragraph'));\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module select-all/selectallediting\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils';\nimport SelectAllCommand from './selectallcommand';\nconst SELECT_ALL_KEYSTROKE = parseKeystroke('Ctrl+A');\n/**\n * The select all editing feature.\n *\n * It registers the `'selectAll'` {@link module:select-all/selectallcommand~SelectAllCommand command}\n * and the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke listener which executes it.\n */\nexport default class SelectAllEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'SelectAllEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        editor.commands.add('selectAll', new SelectAllCommand(editor));\n        this.listenTo(viewDocument, 'keydown', (eventInfo, domEventData) => {\n            if (getCode(domEventData) === SELECT_ALL_KEYSTROKE) {\n                editor.execute('selectAll');\n                domEventData.preventDefault();\n            }\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module select-all/selectallui\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui';\nimport selectAllIcon from '../theme/icons/select-all.svg';\n/**\n * The select all UI feature.\n *\n * It registers the `'selectAll'` UI button in the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}. When clicked, the button\n * executes the {@link module:select-all/selectallcommand~SelectAllCommand select all command}.\n */\nexport default class SelectAllUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'SelectAllUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('selectAll', locale => {\n            const command = editor.commands.get('selectAll');\n            const view = new ButtonView(locale);\n            const t = locale.t;\n            view.set({\n                label: t('Select all'),\n                icon: selectAllIcon,\n                keystroke: 'Ctrl+A',\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            // Execute the command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute('selectAll');\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module select-all/selectall\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport SelectAllEditing from './selectallediting';\nimport SelectAllUI from './selectallui';\n/**\n * The select all feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature}\n * and the {@link module:select-all/selectallui~SelectAllUI select all UI feature}.\n *\n * Please refer to the documentation of individual features to learn more.\n */\nexport default class SelectAll extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [SelectAllEditing, SelectAllUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'SelectAll';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/basecommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { transformSets, NoOperation } from '@ckeditor/ckeditor5-engine';\n/**\n * Base class for the undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n */\nexport default class BaseCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * Stack of items stored by the command. These are pairs of:\n         *\n         * * {@link module:engine/model/batch~Batch batch} saved by the command,\n         * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n         */\n        this._stack = [];\n        /**\n         * Stores all batches that were created by this command.\n         *\n         * @internal\n         */\n        this._createdBatches = new WeakSet();\n        // Refresh state, so the command is inactive right after initialization.\n        this.refresh();\n        // This command should not depend on selection change.\n        this._isEnabledBasedOnSelection = false;\n        // Set the transparent batch for the `editor.data.set()` call if the\n        // batch type is not set already.\n        this.listenTo(editor.data, 'set', (evt, data) => {\n            // Create a shallow copy of the options to not change the original args.\n            // And make sure that an object is assigned to data[ 1 ].\n            data[1] = { ...data[1] };\n            const options = data[1];\n            // If batch type is not set, default to non-undoable batch.\n            if (!options.batchType) {\n                options.batchType = { isUndoable: false };\n            }\n        }, { priority: 'high' });\n        // Clear the stack for the `transparent` batches.\n        this.listenTo(editor.data, 'set', (evt, data) => {\n            // We can assume that the object exists and it has a `batchType` property.\n            // It was ensured with a higher priority listener before.\n            const options = data[1];\n            if (!options.batchType.isUndoable) {\n                this.clearStack();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.isEnabled = this._stack.length > 0;\n    }\n    /**\n     * Returns all batches created by this command.\n     */\n    get createdBatches() {\n        return this._createdBatches;\n    }\n    /**\n     * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n     * created by the editor which this command is registered to.\n     *\n     * @param batch The batch to add.\n     */\n    addBatch(batch) {\n        const docSelection = this.editor.model.document.selection;\n        const selection = {\n            ranges: docSelection.hasOwnRange ? Array.from(docSelection.getRanges()) : [],\n            isBackward: docSelection.isBackward\n        };\n        this._stack.push({ batch, selection });\n        this.refresh();\n    }\n    /**\n     * Removes all items from the stack.\n     */\n    clearStack() {\n        this._stack = [];\n        this.refresh();\n    }\n    /**\n     * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n     *\n     * @param ranges Ranges to be restored.\n     * @param isBackward A flag describing whether the restored range was selected forward or backward.\n     * @param operations Operations which has been applied since selection has been stored.\n     */\n    _restoreSelection(ranges, isBackward, operations) {\n        const model = this.editor.model;\n        const document = model.document;\n        // This will keep the transformed selection ranges.\n        const selectionRanges = [];\n        // Transform all ranges from the restored selection.\n        const transformedRangeGroups = ranges.map(range => range.getTransformedByOperations(operations));\n        const allRanges = transformedRangeGroups.flat();\n        for (const rangeGroup of transformedRangeGroups) {\n            // While transforming there could appear ranges that are contained by other ranges, we shall ignore them.\n            const transformed = rangeGroup\n                .filter(range => range.root != document.graveyard)\n                .filter(range => !isRangeContainedByAnyOtherRange(range, allRanges));\n            // All the transformed ranges ended up in graveyard.\n            if (!transformed.length) {\n                continue;\n            }\n            // After the range got transformed, we have an array of ranges. Some of those\n            // ranges may be \"touching\" -- they can be next to each other and could be merged.\n            normalizeRanges(transformed);\n            // For each `range` from `ranges`, we take only one transformed range.\n            // This is because we want to prevent situation where single-range selection\n            // got transformed to multi-range selection.\n            selectionRanges.push(transformed[0]);\n        }\n        // @if CK_DEBUG_ENGINE // console.log( `Restored selection by undo: ${ selectionRanges.join( ', ' ) }` );\n        // `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n        if (selectionRanges.length) {\n            model.change(writer => {\n                writer.setSelection(selectionRanges, { backward: isBackward });\n            });\n        }\n    }\n    /**\n     * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n     * This is a helper method for {@link #execute}.\n     *\n     * @param batchToUndo The batch to be undone.\n     * @param undoingBatch The batch that will contain undoing changes.\n     */\n    _undo(batchToUndo, undoingBatch) {\n        const model = this.editor.model;\n        const document = model.document;\n        // All changes done by the command execution will be saved as one batch.\n        this._createdBatches.add(undoingBatch);\n        const operationsToUndo = batchToUndo.operations.slice().filter(operation => operation.isDocumentOperation);\n        operationsToUndo.reverse();\n        // We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n        // we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n        for (const operationToUndo of operationsToUndo) {\n            const nextBaseVersion = operationToUndo.baseVersion + 1;\n            const historyOperations = Array.from(document.history.getOperations(nextBaseVersion));\n            const transformedSets = transformSets([operationToUndo.getReversed()], historyOperations, {\n                useRelations: true,\n                document: this.editor.model.document,\n                padWithNoOps: false,\n                forceWeakRemove: true\n            });\n            const reversedOperations = transformedSets.operationsA;\n            // After reversed operation has been transformed by all history operations, apply it.\n            for (let operation of reversedOperations) {\n                // Do not apply any operation on non-editable space.\n                const affectedSelectable = operation.affectedSelectable;\n                if (affectedSelectable && !model.canEditAt(affectedSelectable)) {\n                    operation = new NoOperation(operation.baseVersion);\n                }\n                // Before applying, add the operation to the `undoingBatch`.\n                undoingBatch.addOperation(operation);\n                model.applyOperation(operation);\n                document.history.setOperationAsUndone(operationToUndo, operation);\n            }\n        }\n    }\n}\n/**\n * Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n *\n * @param ranges Ranges to be normalized.\n */\nfunction normalizeRanges(ranges) {\n    ranges.sort((a, b) => a.start.isBefore(b.start) ? -1 : 1);\n    for (let i = 1; i < ranges.length; i++) {\n        const previousRange = ranges[i - 1];\n        const joinedRange = previousRange.getJoined(ranges[i], true);\n        if (joinedRange) {\n            // Replace the ranges on the list with the new joined range.\n            i--;\n            ranges.splice(i, 2, joinedRange);\n        }\n    }\n}\nfunction isRangeContainedByAnyOtherRange(range, ranges) {\n    return ranges.some(otherRange => otherRange !== range && otherRange.containsRange(range, true));\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */\nexport default class UndoCommand extends BaseCommand {\n    /**\n     * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n     * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n     * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n     *\n     * @fires execute\n     * @fires revert\n     * @param batch A batch that should be undone. If not set, the last added batch will be undone.\n     */\n    execute(batch = null) {\n        // If batch is not given, set `batchIndex` to the last index in command stack.\n        const batchIndex = batch ? this._stack.findIndex(a => a.batch == batch) : this._stack.length - 1;\n        const item = this._stack.splice(batchIndex, 1)[0];\n        const undoingBatch = this.editor.model.createBatch({ isUndo: true });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not\n        // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(undoingBatch, () => {\n            this._undo(item.batch, undoingBatch);\n            const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n            this.fire('revert', item.batch, undoingBatch);\n        });\n        this.refresh();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/redocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */\nexport default class RedoCommand extends BaseCommand {\n    /**\n     * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n     * the command's stack, applies the reverted and transformed version on the\n     * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n     * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n     *\n     * @fires execute\n     */\n    execute() {\n        const item = this._stack.pop();\n        const redoingBatch = this.editor.model.createBatch({ isUndo: true });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n        // operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(redoingBatch, () => {\n            const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n            const nextBaseVersion = lastOperation.baseVersion + 1;\n            const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n            this._undo(item.batch, redoingBatch);\n        });\n        this.refresh();\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoediting\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n */\nexport default class UndoEditing extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * Keeps track of which batches were registered in undo.\n         */\n        this._batchRegistry = new WeakSet();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'UndoEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Create commands.\n        this._undoCommand = new UndoCommand(editor);\n        this._redoCommand = new RedoCommand(editor);\n        // Register command to the editor.\n        editor.commands.add('undo', this._undoCommand);\n        editor.commands.add('redo', this._redoCommand);\n        this.listenTo(editor.model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            // Do not register batch if the operation is not a document operation.\n            // This prevents from creating empty undo steps, where all operations where non-document operations.\n            // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n            // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n            // Such operations should not be reversed.\n            if (!operation.isDocumentOperation) {\n                return;\n            }\n            const batch = operation.batch;\n            const isRedoBatch = this._redoCommand.createdBatches.has(batch);\n            const isUndoBatch = this._undoCommand.createdBatches.has(batch);\n            const wasProcessed = this._batchRegistry.has(batch);\n            // Skip the batch if it was already processed.\n            if (wasProcessed) {\n                return;\n            }\n            // Add the batch to the registry so it will not be processed again.\n            this._batchRegistry.add(batch);\n            if (!batch.isUndoable) {\n                return;\n            }\n            if (isRedoBatch) {\n                // If this batch comes from `redoCommand`, add it to the `undoCommand` stack.\n                this._undoCommand.addBatch(batch);\n            }\n            else if (!isUndoBatch) {\n                // If the batch comes neither  from `redoCommand` nor from `undoCommand` then it is a new, regular batch.\n                // Add the batch to the `undoCommand` stack and clear the `redoCommand` stack.\n                this._undoCommand.addBatch(batch);\n                this._redoCommand.clearStack();\n            }\n        }, { priority: 'highest' });\n        this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch) => {\n            this._redoCommand.addBatch(undoingBatch);\n        });\n        editor.keystrokes.set('CTRL+Z', 'undo');\n        editor.keystrokes.set('CTRL+Y', 'redo');\n        editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n    }\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m5.042 9.367 2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\";","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m14.958 9.367-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n */\nexport default class UndoUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'UndoUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n     * Creates a button for the specified command.\n     *\n     * @param name Command name.\n     * @param label Button label.\n     * @param keystroke Command keystroke.\n     * @param Icon Source of the icon.\n     */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => {\n                editor.execute(name);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undo\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and the {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is an explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever an {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n * ```\n *    History                            Undo stack\n * ==============             ==================================\n * [operation A1]                      [  batch A  ]\n * [operation B1]                      [  batch B  ]\n * [operation B2]                      [  batch C  ]\n * [operation C1]\n * [operation C2]\n * [operation B3]\n * [operation C3]\n * ```\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n * ```\n *      History                             Undo stack\n * =================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]             [   processing undoing batch C   ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * ```\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * ```\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * the batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]                      [ batch Crr ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * [ operation C1'r]\n * [ operation C2'r]\n * [ operation C3rr]\n * ```\n */\nexport default class Undo extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [UndoEditing, UndoUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Undo';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/attributecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n */\nexport default class AttributeCommand extends Command {\n    /**\n     * @param attributeKey Attribute that will be set by the command.\n     */\n    constructor(editor, attributeKey) {\n        super(editor);\n        this.attributeKey = attributeKey;\n    }\n    /**\n     * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = this._getValueFromFirstAllowedNode();\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n    }\n    /**\n     * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n     *\n     * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n     *\n     * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n     *\n     * * If the selection is on a range, the command applies the attribute to all nodes in that range\n     * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n     * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n     * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n     * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n     * that the selection inherits all attributes from a node if it is in an empty node).\n     *\n     * @fires execute\n     * @param options Command options.\n     * @param options.forceValue If set, it will force the command behavior. If `true`,\n     * the command will apply the attribute, otherwise the command will remove the attribute.\n     * If not set, the command will look for its current value to decide what it should do.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const value = (options.forceValue === undefined) ? !this.value : options.forceValue;\n        model.change(writer => {\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute(this.attributeKey, true);\n                }\n                else {\n                    writer.removeSelectionAttribute(this.attributeKey);\n                }\n            }\n            else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n                for (const range of ranges) {\n                    if (value) {\n                        writer.setAttribute(this.attributeKey, value, range);\n                    }\n                    else {\n                        writer.removeAttribute(this.attributeKey, range);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Checks the attribute value of the first node in the selection that allows the attribute.\n     * For the collapsed selection returns the selection attribute.\n     *\n     * @returns The attribute value.\n     */\n    _getValueFromFirstAllowedNode() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (selection.isCollapsed) {\n            return selection.hasAttribute(this.attributeKey);\n        }\n        for (const range of selection.getRanges()) {\n            for (const item of range.getItems()) {\n                if (schema.checkAttribute(item, this.attributeKey)) {\n                    return item.hasAttribute(this.attributeKey);\n                }\n            }\n        }\n        return false;\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AttributeCommand from '../attributecommand';\nconst BOLD = 'bold';\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n */\nexport default class BoldEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BoldEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow bold attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: BOLD });\n        editor.model.schema.setAttributeProperties(BOLD, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: BOLD,\n            view: 'strong',\n            upcastAlso: [\n                'b',\n                viewElement => {\n                    const fontWeight = viewElement.getStyle('font-weight');\n                    if (!fontWeight) {\n                        return null;\n                    }\n                    // Value of the `font-weight` attribute can be defined as a string or a number.\n                    if (fontWeight == 'bold' || Number(fontWeight) >= 600) {\n                        return {\n                            name: true,\n                            styles: ['font-weight']\n                        };\n                    }\n                    return null;\n                }\n            ]\n        });\n        // Create bold command.\n        editor.commands.add(BOLD, new AttributeCommand(editor, BOLD));\n        // Set the Ctrl+B keystroke.\n        editor.keystrokes.set('CTRL+B', BOLD);\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n */\nexport default class BoldUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BoldUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Bold'),\n                icon: icons.bold,\n                keystroke: 'CTRL+B',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute(BOLD);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AttributeCommand from '../attributecommand';\nconst ITALIC = 'italic';\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n */\nexport default class ItalicEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ItalicEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow italic attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: ITALIC });\n        editor.model.schema.setAttributeProperties(ITALIC, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: ITALIC,\n            view: 'i',\n            upcastAlso: [\n                'em',\n                {\n                    styles: {\n                        'font-style': 'italic'\n                    }\n                }\n            ]\n        });\n        // Create italic command.\n        editor.commands.add(ITALIC, new AttributeCommand(editor, ITALIC));\n        // Set the Ctrl+I keystroke.\n        editor.keystrokes.set('CTRL+I', ITALIC);\n    }\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m9.586 14.633.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n */\nexport default class ItalicUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ItalicUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Italic'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute(ITALIC);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n","import ClassicEditorBase from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\r\nimport SourceEditing from '@ckeditor/ckeditor5-source-editing/src/sourceediting';\r\nimport Essentials from \"@ckeditor/ckeditor5-essentials/src/essentials\";\r\nimport Bold from \"@ckeditor/ckeditor5-basic-styles/src/bold\";\r\nimport Italic from \"@ckeditor/ckeditor5-basic-styles/src/italic\";\r\n\r\nexport default class ClassicEditor extends ClassicEditorBase {\r\n}\r\n\r\n// Plugins to include in the build.\r\nClassicEditor.builtinPlugins = [\r\n  Essentials,\r\n  SourceEditing,\r\n  Bold,\r\n  Italic,\r\n];\r\n\r\n// Editor configuration.\r\nClassicEditor.defaultConfig = {\r\n  ...ClassicEditor.defaultConfig,\r\n  toolbar: {\r\n    items: [\r\n      'bold',\r\n      'italic',\r\n      'sourceEditing',\r\n    ]\r\n  },\r\n  // This value must be kept in sync with the language defined in webpack.config.js.\r\n  language: 'en'\r\n};\r\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module essentials/essentials\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Clipboard } from 'ckeditor5/src/clipboard';\nimport { Enter, ShiftEnter } from 'ckeditor5/src/enter';\nimport { SelectAll } from 'ckeditor5/src/select-all';\nimport { Typing } from 'ckeditor5/src/typing';\nimport { Undo } from 'ckeditor5/src/undo';\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:select-all/selectall~SelectAll},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n */\nexport default class Essentials extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Clipboard, Enter, SelectAll, ShiftEnter, Typing, Undo];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Essentials';\n    }\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.5 0 5 4.5v15.003h-16V0h11zM3 1.5v3.25l-1.497 1-.003 8 1.5 1v3.254L7.685 18l-.001 1.504H17.5V8.002L16 9.428l-.004-4.22-4.222-3.692L3 1.5z\\\"/><path d=\\\"M4.06 6.64a.75.75 0 0 1 .958 1.15l-.085.07L2.29 9.75l2.646 1.89c.302.216.4.62.232.951l-.058.095a.75.75 0 0 1-.951.232l-.095-.058-3.5-2.5V9.14l3.496-2.5zm4.194 6.22a.75.75 0 0 1-.958-1.149l.085-.07 2.643-1.89-2.646-1.89a.75.75 0 0 1-.232-.952l.058-.095a.75.75 0 0 1 .95-.232l.096.058 3.5 2.5v1.22l-3.496 2.5zm7.644-.836 2.122 2.122-5.825 5.809-2.125-.005.003-2.116zm2.539-1.847 1.414 1.414a.5.5 0 0 1 0 .707l-1.06 1.06-2.122-2.12 1.061-1.061a.5.5 0 0 1 .707 0z\\\"/></svg>\";","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n */\nexport default class Bold extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [BoldEditing, BoldUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Bold';\n    }\n}\n","/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n */\nexport default class Italic extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ItalicEditing, ItalicUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Italic';\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","self","cssKeywords","reverseKeywords","key","Object","keys","convert","rgb","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","keyword","ansi16","ansi256","hcg","apple","gray","model","Error","length","defineProperty","value","r","g","b","min","Math","max","delta","h","s","l","rdif","gdif","bdif","v","diff","diffc","c","w","k","reversed","currentClosestKeyword","currentClosestDistance","Infinity","distance","y","x","z","t2","t3","val","t1","i","smin","lmin","hi","floor","f","p","q","t","vmin","sl","wh","bl","ratio","n","m","y2","x2","z2","a","atan2","PI","sqrt","hr","cos","sin","args","saturation","round","ansi","color","mult","rem","string","toString","toUpperCase","substring","match","colorString","split","map","char","join","integer","parseInt","chroma","grayscale","hue","pure","mg","conversions","route","forEach","fromModel","routes","toModel","fn","wrappedFn","arg0","result","len","conversion","wrapRounded","raw","wrapRaw","link","from","to","wrapConversion","graph","path","parent","cur","unshift","models","buildGraph","queue","current","pop","adjacents","adjacent","node","deriveBFS","___CSS_LOADER_EXPORT___","push","id","cssWithMappingToString","list","this","item","content","concat","modules","mediaQuery","dedupe","alreadyImportedModules","_i","_arrayLikeToArray","arr","arr2","Array","_item","isArray","_arrayWithHoles","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","_iterableToArrayLimit","o","minLen","prototype","slice","constructor","name","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","sourceURLs","sources","source","sourceRoot","memo","getTarget","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","stylesInDom","getIndexByIdentifier","identifier","modulesToDom","options","idCountMap","identifiers","base","count","index","obj","css","media","sourceMap","references","updater","addStyle","insertStyleElement","style","createElement","attributes","nonce","setAttribute","insert","appendChild","textStore","replaceText","replacement","filter","Boolean","applyToSingletonTag","remove","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","applyToTag","removeAttribute","firstChild","singleton","singletonCounter","update","styleIndex","bind","parentNode","removeStyleElement","newObj","all","atob","lastIdentifiers","newList","newLastIdentifiers","_index","splice","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","d","definition","enumerable","get","globalThis","Function","prop","hasOwnProperty","nc","userAgent","navigator","toLowerCase","getUserAgent","isMac","isWindows","indexOf","isGecko","isSafari","isiOS","maxTouchPoints","isAndroid","isBlink","features","isRegExpUnicodePropertySupported","isSupported","search","RegExp","error","fastDiff","cmp","atomicChanges","arrayA","arrayB","changeIndexes","arr1","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","lastIndex","cutAndReverse","findChangeBoundaryIndexes","newLength","fill","changeIndexesToAtomicChanges","newArray","type","values","howMany","changeIndexesToChanges","reverse","aLength","bLength","_insert","_delete","tmp","es","fp","snake","y1","dir","EventInfo","stop","spy","called","off","HEX_NUMBERS","_","r1","random","r2","r3","r4","priority","normal","highest","high","low","lowest","objects","objectToInsert","errorName","context","super","processedObjects","WeakSet","has","add","getLinkToDocumentationMessage","getErrorMessage","is","static","message","stack","console","warn","documentationMessage","formatConsoleArguments","releaseDate","Date","windowOrGlobal","CKEDITOR_VERSION","_listeningTo","_emitterId","_delegations","defaultEmitterClass","EmitterMixin","on","event","callback","listenTo","once","wasFired","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","listener","_addEventListener","addEventListener","removeEventListener","fire","eventOrInfo","eventInfo","getCallbacksForEvent","callbackArgs","apply","_removeEventListener","delegations","destinations","passAllDestinations","fireDelegatedEvents","return","delegate","events","nameOrFunction","Map","eventName","set","stopDelegating","delete","clear","getEvents","childEventName","newEventNodes","childEvents","substr","lastIndexOf","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","_events","eventNode","callbacksLists","childCallbacksLists","fireArgs","delegatedInfo","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","decoratedMethods","decoratedOriginal","defaultObservableClass","ObservableMixin","property","initObservable","properties","configurable","oldValue","newValue","bindProperties","isStringArray","Set","size","boundProperties","propertyName","bindings","binding","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbind","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","decorate","methodName","originalMethod","object","evt","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","updateBoundObservableProperty","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","attribute","observableAndAttributePairs","getBindingTargets","every","propertyValue","ElementReplacer","_replacedElements","replace","element","newElement","display","nextSibling","restore","iterable","isIterable","global","freeSelf","objectProto","nativeObjectToString","symToStringTag","isOwn","tag","unmasked","doc","children","namespace","xmlns","createElementNS","child","func","transform","arg","getPrototypeOf","funcProto","funcToString","objectCtorString","proto","Ctor","other","array","ListCache","entries","entry","__data__","uid","maskSrcKey","exec","reIsHostCtor","reIsNative","Hash","MapCache","Stack","pairs","LARGE_ARRAY_SIZE","objValue","props","customizer","isNew","propertyIsEnumerable","arguments","freeExports","nodeType","freeModule","Buffer","isBuffer","reIsUint","typedArrayTags","freeProcess","require","types","nodeIsTypedArray","inherited","isArr","isArg","isBuff","isType","skipIndexes","iteratee","String","isProto","allocUnsafe","buffer","isDeep","copy","nativeGetSymbols","getOwnPropertySymbols","predicate","resIndex","symbol","offset","keysFunc","symbolsFunc","promiseTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","arrayBuffer","byteLength","reFlags","symbolProto","symbolValueOf","valueOf","typedArray","byteOffset","regexp","dataView","objectCreate","create","nodeIsMap","nodeIsSet","cloneableTags","baseClone","bitmask","isFlat","isFull","input","isFunc","stacked","subValue","Config","configurations","defaultConfigurations","_config","cloneConfig","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","parts","part","configuration","leaveDOMReferences","isNode","defaultView","Document","ownerDocument","Node","isWindow","stringifiedObject","proxyOptions","capture","useCapture","passive","usePassive","proxyEmitter","_getProxyEmitter","ProxyEmitter","proxyEmitters","_getAllProxyEmitters","proxy","listeningEmitter","listenedToEmitterId","listeningTo","_getEmitterListenedTo","getProxyEmitterId","_domNode","_options","attach","_domListeners","domListener","_createDomListener","detach","removeListener","domEvt","getNodeUID","option","sort","globalVar","getAncestors","nodes","currentNode","DOCUMENT_NODE","isText","isRange","getBorderWidths","getComputedStyle","top","borderTopWidth","right","borderRightWidth","bottom","borderBottomWidth","left","borderLeftWidth","rectProperties","isSourceRange","_source","writable","isDomElement","rangeRects","getDomRangeRects","copyRectProperties","getBoundingRect","getBoundingClientRect","innerWidth","innerHeight","width","height","clone","moveTo","moveBy","getIntersection","anotherRect","rect","getIntersectionArea","getArea","getVisible","visibleRect","isBody","absolutelyPositionedChildElement","commonAncestorContainer","HTMLElement","getElementPosition","overflow","parentRect","intersectionRect","isEqual","contains","intersectRect","excludeScrollbarsAndBorders","scrollBarWidth","scrollBarHeight","direction","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","offsetHeight","range","rects","clientRects","getClientRects","startContainer","boundingRectData","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","rectangleCount","body","position","_observerInstance","_createObserver","_element","_callback","_addElementCallback","observe","destroy","_deleteElementCallback","_elementCallbacks","_getElementCallbacks","unobserve","toUnit","unit","previousSibling","insertAt","parentElement","nodeToInsert","isComment","COMMENT_NODE","isVisible","positions","limiter","fitInViewport","viewportOffsetConfig","positionedElementAncestor","offsetParent","getPositionedAncestor","elementRect","targetRect","bestPosition","viewportRect","assign","getConstrainedViewportRect","positionOptions","limiterRect","elementRectArea","positionInstances","positioningFunction","PositionObject","maxFitFactor","limiterIntersectionArea","viewportIntersectionArea","fitFactor","getBestPosition","getRectForAbsolutePositioning","scrollX","scrollY","positioningFunctionOutput","config","_positioningFunctionCorrdinates","_absoluteRect","_rect","limiterViewportIntersectRect","_cachedRect","_cachedAbsoluteRect","ancestorPosition","ancestorBorderWidths","moveX","moveY","scrollLeft","scrollTop","shiftRectToCompensatePositionedAncestor","scrollWindowToShowRect","alignToTop","forceScroll","viewportOffset","targetShiftedDownRect","targetShiftedUpRect","forceScrollToTop","allRectsFitInViewport","initialScrollX","initialScrollY","isAbove","isBelow","isLeftOf","isRightOf","scrollTo","scrollAncestorsToShowRect","getRect","ancestorOffset","parentWindow","getWindow","targetFitsInTarget","firstRect","secondRect","elementOrRange","getParentElement","getRectRelativeToWindow","relativeWindow","targetWindow","currentWindow","frame","frameElement","frameRect","modifiersToGlyphsMac","ctrl","cmd","alt","shift","modifiersToGlyphsNonMac","keyCodes","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","code","fromCharCode","charCodeAt","generateKnownKeyCodes","keyCodeNames","fromEntries","charAt","getCode","keyCode","altKey","ctrlKey","shiftKey","metaKey","parseKeystroke","keystroke","trim","splitKeystrokeText","endsWith","getEnvKeyCode","reduce","sum","getEnvKeystrokeText","keystrokeCode","modifiers","glyph","getLocalizedArrowKeyCodeDirection","contentLanguageDirection","isLtrContent","RTL_LANGUAGE_CODES","getLanguageDirection","languageCode","includes","Locale","uiLanguage","contentLanguage","uiLanguageDirection","_t","language","quantity","plural","interpolateString","numberOfLanguages","messageId","dictionary","hasTranslation","getPluralForm","translation","_translate","Collection","initialItemsOrOptions","hasInitialItems","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","_getItemIdBeforeAdding","first","last","addMany","items","itemId","currentItemIndex","added","removed","idOrIndex","itemOrId","getIndex","subject","_remove","ctx","find","_bindToCollection","removedItems","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","addItem","externalItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","itemDoesNotExist","iteratorItem","_elements","_nextEventLoopTimeout","_focus","_blur","focusedElement","clearTimeout","isFocused","setTimeout","_listener","keyEvtData","preventDefault","stopPropagation","press","toMap","objectToMap","wait","timer","delayed","cancel","isInsideSurrogatePair","character","isLowSurrogateHalf","isInsideCombinedSymbol","EMOJI_PATTERN","flagSequence","emoji","buildEmojiRegexp","isInsideEmojiSequence","matches","matchAll","some","ViewCollection","initialItems","view","_renderViewIntoCollectionParent","_parentElement","setParent","elementOrDocFragment","dest","evtName","isRendered","render","locale","_viewCollections","_unboundChildren","createCollection","collection","bindTemplate","_bindTemplate","views","registerChild","deregisterChild","setTemplate","template","extendTemplate","getViews","_revertData","revert","def","normalize","_isRendered","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","if","valueIfTrue","TemplateIfBinding","isInvalid","text","_renderText","_renderElement","ns","_renderAttributes","_renderElementChildren","_setUpListeners","textContent","hasTemplateBinding","_bindToObservable","schema","getTextUpdater","attrName","domAttrValue","getAttribute","attrValue","attrNs","isNamespaced","valueToBind","shouldExtend","getAttributeUpdater","_renderStyleAttribute","prev","arrayValueReducer","isFalsy","setAttributeNS","styles","styleName","styleValue","getStyleUpdater","container","createDocumentFragment","childIndex","isViewCollection","childRevertData","eventListeners","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","getValue","getValueSchemaValue","el","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","extendObjectValueArray","ext","childDef","BodyCollection","bodyCollectionContainer","_bodyCollectionContainer","attachToDom","class","wrapper","detachFromDom","childElementCount","viewBox","_updateXMLContent","_colorFillPaths","svg","DOMParser","parseFromString","presentationalAttributeNames","fillColor","querySelectorAll","_focusDelayed","ariaLabelUid","labelView","_createLabelView","iconView","keystrokeView","_createKeystrokeView","_getTooltipString","role","tabindex","isToggleable","click","isEnabled","focus","mousedown","mouseup","icon","withKeystroke","ariaLabelledBy","tooltip","label","toggleSwitchView","_createToggleView","for","DropdownPanelView","selectstart","tagName","toLocaleLowerCase","childView","dropdownPanel","focusLast","lastChild","DropdownView","buttonView","panelView","keystrokes","focusTracker","isOpen","panelPosition","_getOptimalPosition","_panelPositions","closeDropdown","south","north","southEast","southWest","northEast","northWest","southMiddleEast","southMiddleWest","northMiddleEast","northMiddleWest","defaultPanelPositions","buttonRect","panelRect","DropdownButtonView","arrowView","_createArrowView","focusables","keystrokeHandler","actions","isFocusable","_getFocusableItem","previous","viewIndex","focused","focusFirst","focusNext","focusPrevious","step","collectionLength","ToolbarSeparatorView","ToolbarLineBreakView","removeItems","editor","_disableStack","forceDisabled","forceDisable","clearForceDisabled","isContextPlugin","_affectsData","_isEnabledBasedOnSelection","refresh","affectsData","isReadOnly","canEditAt","selection","execute","PluginCollection","availablePlugins","contextPlugins","_plugins","_context","_availablePlugins","PluginConstructor","pluginName","_contextPlugins","pluginInstance","plugin","init","plugins","pluginsToRemove","pluginsSubstitutions","that","findAvailablePluginConstructors","processed","isPluginConstructor","requires","validatePlugins","pluginConstructors","getPluginConstructors","isPluginRemoved","pluginItem","pluginToReplace","indexInPluginConstructors","substitutePlugins","pluginInstances","_add","loadPlugins","initPlugins","then","removedPlugin","getPluginName","parentPluginConstructor","missingPlugin","requiredBy","checkMissingPlugin","checkContextPlugin","checkRemovedPlugin","method","promise","Promise","resolve","promises","plugin1","plugin2","Context","_contextOwner","defaultConfig","builtinPlugins","languageConfig","ui","editors","Plugin","_addEditor","isContextOwner","_removeEditor","_getEditorConfig","names","documentPlaceholders","updateDocumentPlaceholders","writer","placeholders","directHostElements","wasViewModified","isDirectHost","updatePlaceholder","hostElement","getChildPlaceholderHostSubstitute","childCount","keepOnFocus","isAttached","hasContent","getChildren","selectionAnchor","anchor","isComposing","needsPlaceholder","hasClass","addClass","showPlaceholder","removeClass","hidePlaceholder","getChild","TypeCheckable","pos","getChildIndex","getPath","ancestors","includeSelf","parentFirst","getCommonAncestor","ancestorsA","ancestorsB","isBefore","thisPath","nodePath","isAfter","_removeChildren","_fireChange","toJSON","json","_textData","_data","isSimilar","otherNode","_clone","TextProxy","textNode","offsetInText","offsetSize","isPartial","Matcher","pattern","_patterns","singleElement","isElementMatching","results","getElementName","matchName","patterns","attributeKeys","getAttributeKeys","matchPatterns","matchAttributes","classes","getClassNames","matchClasses","getStyleNames","getStyle","matchStyles","valueGetter","normalizedPatterns","normalizePatterns","normalizedItems","patternKey","patternValue","itemKey","isKeyMatched","itemValue","isValueMatched","reIsDeepProp","reIsPlainProp","memoize","resolver","memoized","cache","Cache","rePropName","reEscapeChar","stringToPath","number","quote","subString","symbolToString","baseToString","start","end","defaultValue","srcIndex","mergeFunc","srcValue","isCommon","isTyped","baseMerge","thisArg","nativeMax","nativeNow","now","lastCalled","stamp","remaining","otherArgs","assigner","guard","nested","StylesMap","styleProcessor","_styles","_styleProcessor","isEmpty","setTo","inlineStyle","parsedStyles","stylesString","quoteType","propertyNameStart","propertyValueStart","stylesMap","parseInlineStyles","toNormalizedForm","propertyDescriptor","getReducedForm","nameOrObject","valueOrObject","toPath","_cleanEmptyObjectsOnPath","getNormalized","_getStylesEntries","getAsString","expand","pathParts","parentPath","parentObject","StylesProcessor","_normalizers","_extractors","_reducers","_consumables","appendStyleValue","normalizer","extractor","normalizedValue","reducer","expandedStyleNames","styleNamesKeysSet","getRelatedStyles","setNormalizer","setExtractor","callbackOrPath","setReducer","setStyleRelation","shorthandName","styleNames","_mapStyleNames","alsoName","stylesObject","nameOrPath","valueToSet","attrs","_unsafeAttributesToRender","_customProperties","_attrs","attrsMap","parseAttributes","_children","_insertChild","_classes","classString","parseClasses","stylesProcessor","hasAttribute","otherElement","className","getNormalizedStyle","hasStyle","findAncestor","matcher","getCustomProperty","getIdentity","shouldRenderUnsafeAttribute","attributeName","deep","childrenClone","cloned","getFillerOffset","_appendChild","_setAttribute","stringValue","_removeAttribute","_addClass","_removeClass","_setStyle","_removeStyle","_setCustomProperty","_removeCustomProperty","classesSet","classesString","classArray","ContainerElement","EditableElement","editableElement","rootNameSymbol","RootEditableElement","rootName","_name","TreeWalker","boundaries","startPosition","_position","singleCharacters","shallow","ignoreElementEnd","_boundaryStartParent","_boundaryEndParent","skip","nextResult","prevPosition","_next","_previous","previousPosition","isAtEnd","_formatReturnValue","charactersCount","textLength","textProxy","isAtStart","startOffset","nextPosition","nodeAfter","nodeBefore","endOffset","editable","getShiftedBy","shifted","_createAt","getLastMatchingPosition","treeWalker","otherPosition","compareWith","otherPath","getWalker","itemOrPosition","_createBefore","_createAfter","isCollapsed","getEnlarged","enlargeTrimSkip","getTrimmed","nodeAfterStart","nodeBeforeEnd","otherRange","containsPosition","containsRange","loose","containsStart","containsEnd","getDifference","ranges","isIntersecting","commonRangeStart","commonRangeEnd","getContainedElement","startElement","endElement","_createFromParentsAndOffsets","_createFromPositionAndShift","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","isFake","fakeSelectionLabel","rangeCount","isBackward","getFirstRange","getLastRange","getFirstPosition","firstRange","getLastPosition","lastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","rangeB","getSelectedElement","selectable","placeOrOffset","_setRanges","_setFakeOptions","DocumentSelection","fake","backward","setFocus","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","_selection","_setTo","_setFocus","BubblingEventInfo","startRange","_eventPhase","_currentTarget","eventPhase","currentTarget","contextsSymbol","BubblingEmitterMixin","eventArgs","eventContexts","getBubblingContexts","updateEventInfo","fireListenerFor","selectedElement","isCustomContext","getCustomContext","startParent","endParent","startPath","endPath","getDeeperRangeParent","contexts","mixin","_postFixers","roots","getRoot","registerPostFixer","postFixer","_callPostFixers","wasFixed","AttributeElement","_priority","_id","_clonesGroup","getElementsWithSameId","nonUiChildrenCount","DEFAULT_PRIORITY","EmptyElement","UIElement","domDocument","domConverter","toDomElement","domElement","RawElement","DowncastWriter","_cloneGroups","_slotFactory","setSelection","setSelectionFocus","createText","createAttributeElement","attributeElement","renderUnsafeAttributes","createContainerElement","childrenOrOptions","containerElement","createEditableElement","createEmptyElement","emptyElement","createUIElement","renderFunction","uiElement","createRawElement","rawElement","setStyle","removeStyle","setCustomProperty","removeCustomProperty","breakAttributes","positionOrRange","_breakAttributes","_breakAttributesRange","breakContainer","sourceRange","targetPosition","move","mergeAttributes","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeTextNodes","mergeContainers","newPosition","validateNodesToInsert","nodeGroups","groups","lastGroup","_insertNodes","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","mergePosition","walker","rangeToRemove","ancestor","countBefore","wrap","_wrapPosition","viewSelection","_wrapRange","unwrap","newRange","_unwrapChildren","rename","newName","viewElement","getAttributes","clearClonedElementsGroup","groupName","createPositionAt","createPositionAfter","createPositionBefore","createRange","createRangeOn","createRangeIn","createSelection","createSlot","modeOrFilter","_registerSlotFactory","slotFactory","_clearSlotFactory","insertionPosition","getParentContainer","breakTextNode","_addToClonedElementsGroup","endPosition","_wrapChildren","wrapElement","wrapPositions","isAttribute","_wrapAttributeElement","newAttribute","offsetChange","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","fakeElement","wrapRange","toWrap","canBeJoined","toUnwrap","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","textToMove","nodeBeforeLength","validNodesToInsert","errorContext","validNode","endContainer","NBSP_FILLER","MARKED_NBSP_FILLER","span","dataset","ckeFiller","innerText","BR_FILLER","fillerBr","INLINE_FILLER","repeat","startsWithFiller","domNode","isInlineFiller","domText","getDataWithoutFiller","jumpOverInlineFiller","domSelection","domTarget","getSelection","getRangeAt","collapsed","domParent","domOffset","collapse","Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","isSelecting","markToSync","mapViewToDom","inlineFillerPosition","isInlineFillerRenderingPossible","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","domPositionToView","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","viewPositionToDom","addInlineFiller","_updateFocus","_updateSelection","actualDomChildren","expectedDomChildren","viewChildrenToDom","withChildren","_diffNodeLists","_findUpdateActions","areSimilarElements","counter","equal","action","insertIndex","deleteIndex","viewChild","_updateElementMappings","unbindDomElement","bindElements","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","isEditable","viewText","findCorrespondingDomText","expectedText","viewToDom","filler","updateTextNode","domAttrKeys","attr","viewAttrKeys","setDomElementAttribute","removeDomElementAttribute","previousDomNode","areTextNodes","nodesToUnbind","_markDescendantTextToSync","domToView","domChildList","fakeSelectionContainer","childList","filterOutFakeSelectionContainer","sameNodes","actualDom","expectedDom","comparator","newActions","actualSlice","expectedSlice","viewNode","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","isConnected","_updateDomSelection","createFakeSelectionContainer","bindFakeSelection","_fakeSelectionNeedsUpdate","domRange","removeAllRanges","selectNodeContents","addRange","_domSelectionNeedsUpdate","extend","ELEMENT_NODE","childAtOffset","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","anchorNode","activeDomElement","activeElement","mapDomToView","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","actualDomChild","expectedDomChild","isBlockFiller","actualText","insertData","deleteData","BR_FILLER_REF","NBSP_FILLER_REF","MARKED_NBSP_FILLER_REF","UNSAFE_ATTRIBUTE_NAME_PREFIX","UNSAFE_ELEMENT_REPLACEMENT_ATTRIBUTE","DomConverter","blockFillerMode","renderingMode","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","_rawContentElementMatcher","_encounteredRawContentDomNodes","preElements","blockElements","inlineObjectElements","unsafeElements","_domDocument","viewDocumentSelection","fakeSelectionToView","bindDocumentFragments","domFragment","viewFragment","shouldRenderAttribute","attributeKey","attributeValue","elementName","startsWith","setContentOf","html","innerHTML","fragment","bodyChildNodes","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","getAttributeNames","_shouldRenameElement","_logUnsafeElement","replaceWith","_createReplacementDomElement","append","textData","_processDataFromViewText","createComment","relatedViewElement","isValidAttributeName","fillerPositionOffset","_getBlockFiller","transparentRendering","viewRangeToDom","viewRange","domStart","domEnd","setStart","setEnd","viewPosition","viewParent","domBefore","domAfter","getHostViewElement","skipComments","_processDataFromDomText","isDocumentFragment","_createViewElement","_isViewElementWithRawContent","rawContent","domChildrenToView","domChild","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","viewEnd","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","documentFragmentOrElement","viewEditable","domEditable","scrollPositions","forEachDomElementAncestor","DOCUMENT_FRAGMENT_NODE","isEqualNode","hasBlockParent","isNbspBlockFiller","anchorOffset","focusNode","focusOffset","_isDomSelectionPositionCorrect","registerRawContentMatcher","prevNode","_getTouchingInlineViewNode","_nodeEndsWithSpace","nextStartsWithSpace","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","isNextNodeInlineObjectElement","isNextNodeStartingWithSpace","getNext","stepInto","stepOver","skipChildren","returnNode","_isBlockElement","_isInlineObjectElement","viewName","keepOriginalCase","originalDomElement","newDomElement","Observer","_isEnabled","enable","disable","checkShouldIgnoreEventFromTarget","DomEventData","domEvent","additionalData","domEventType","onDomEvent","stopObserving","eventType","KeyObserver","reWhitespace","reTrimStart","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isBinary","nativeMin","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","flush","FakeSelectionObserver","_fireSelectionChangeDoneDebounced","_handleSelectionMove","newSelection","oldSelection","SetCache","equalFunc","arrLength","othLength","arrStacked","othStacked","seen","arrValue","othValue","compared","othIndex","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","objStacked","skipCtor","objCtor","othCtor","baseIsEqual","MutationObserver","characterData","subtree","renderer","_renderer","_domElements","_mutationObserver","_onMutations","takeRecords","disconnect","domMutations","mutatedTextNodes","elementsWithMutatedChildren","mutation","_isBogusBrMutation","hasMutations","viewChildren","newViewChildren","forceRender","addedNode","removedNodes","addedNodes","child1","child2","FocusObserver","_isFocusChanging","_renderTimeoutId","change","selectedEditable","SelectionObserver","mutationObserver","getObserver","focusObserver","_documents","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_documentIsSelectingInactivityTimeoutDebounced","_loopbackCounter","endDocumentIsSelecting","_handleSelectionChange","clearInterval","_reportInfiniteLoop","newViewSelection","hasDomSelection","CompositionObserver","DataTransfer","nativeDataTransfer","_files","cacheFiles","getFiles","_native","files","getData","setData","effectAllowed","dropEffect","setDragImage","image","isCanceled","mozUserCancelled","kind","getAsFile","InputObserver","domTargetRanges","getTargetRanges","viewDocument","dataTransfer","targetRanges","inputType","partTargetRanges","dataPart","ArrowKeysObserver","TabObserver","domRoots","_initialDomRootAttributes","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","domSelectionCollapsed","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","jumpOverUiElement","_render","attachDomRoot","viewRoot","initialDomRootAttributes","updateContenteditableAttribute","observer","detachDomRoot","getDomRoot","ObserverConstructor","disableObservers","enableObservers","scrollToTheSelection","originalArgs","currentFrame","normalizeViewportOffset","firstAncestorToScroll","scrollViewportToShowTarget","isRenderingInProgress","callbackResult","_disableRendering","flag","getChildStartOffset","_deep","_setAttributesTo","_clearAttributes","NodeList","_nodes","maxOffset","getNode","getNodeIndex","getNodeStartOffset","indexToOffset","offsetToIndex","totalOffset","nodeList","newTarget","spliceArray","_removeNodes","indexStart","getNodeByPath","relativePath","parentName","fromJSON","stickiness","_visitedParent","prevVisitedParent","textNodeAtPosition","getTextNodeAtPosition","getNodeAfterPosition","formatReturnValue","offsetInTextNode","getNodeBeforePosition","newOffset","getParentPath","getCommonPath","diffAt","isTouching","commonLevel","level","checkTouchingBranch","checkOnlyZeroes","hasSameParentAs","getTransformedByOperation","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","_getTransformedByMove","sourcePosition","movedRange","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","combined","graveyard","idx","checkOnlyMaxOffset","containsItem","getJoined","shouldJoin","getMinimalFlatRanges","posParent","getTransformedByOperations","operations","j","spread","newPos","moveRange","differenceSet","difference","common","transformedCommon","newStart","newEnd","ref","refIndex","Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","_elementToMarkerNames","_deferredBindingRemovals","_unboundMarkerNames","viewContainer","modelPosition","findPositionIn","viewBlock","findMappedViewAncestor","modelParent","modelOffset","_toModelOffset","modelElement","unbindViewElement","toModelElement","markerName","defer","unbindModelElement","toViewElement","bindElementToMarker","elements","unbindElementFromMarkerName","nameToElements","elementToNames","flushUnboundMarkerNames","markerNames","flushDeferredBindings","clearBindings","toModelRange","toModelPosition","toViewRange","modelRange","toViewPosition","mapper","isPhantom","markerNameToElements","boundElements","registerViewToModelLength","viewElementName","lengthCallback","viewOffset","getModelLength","expectedOffset","lastLength","_moveViewPositionToTextNode","ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","_getSymbolForTextProxy","consume","itemConsumables","verifyAllConsumed","eventGroup","consumables","canConsume","eventPrefix","description","startMap","endMap","_addSymbolForTextProxy","DowncastDispatcher","conversionApi","_conversionApi","dispatcher","_firedEventsMap","convertChanges","differ","markers","_createConversionApi","getRefreshedItems","getMarkersToRemove","_convertMarkerRemove","changes","_reduceChanges","getChanges","_convertInsert","_convertReinsert","_convertRemove","_convertAttribute","attributeOldValue","attributeNewValue","markerRange","getRange","_convertMarkerAdd","getMarkersToAdd","consumable","convertSelection","markersAtSelection","getMarkersAtPosition","_addConsumablesForSelection","marker","shouldMarkerChangeBeConverted","doNotAddConsumables","_addConsumablesForInsert","walkerValueToEventData","_testAndFire","_addConsumablesForRange","walkerValues","reconversion","getItems","getEventName","eventsFiredForConversion","eventsFiredForItem","_testAndFireAddAttributes","refreshedItems","convertItem","convertChildren","convertAttributes","canReuseView","anyNewRange","oldRange","_replaceAllRanges","directChange","_popRange","visited","startBlock","getParentBlock","isStartBlockSelected","block","isUnvisitedTopBlock","endBlock","isEndBlockSelected","containsEntireContent","limitStartPosition","limitEndPosition","_checkRange","_removeAllRanges","isUnvisitedBlock","isBlock","isTopBlockInRange","hasParentLimit","isLimit","parentBlock","findAncestorBlock","bindWithDocument","toRange","isDocumentOperation","boundariesChanged","contentChanged","doesOperationChangeRangeContent","storePrefix","LiveSelection","hasOwnRange","isGravityOverridden","getSelectedBlocks","updateMarkers","_updateAttributes","observeMarkers","prefixOrName","_getStoredAttributes","getStoredAttributes","_overrideGravity","overrideGravity","_restoreGravity","restoreGravity","_attributePriority","_selectionRestorePosition","_hasChangedRange","_overriddenGravityRegister","_observedMarkers","_model","_document","_fixGraveyardSelection","_validateSelectionRanges","_updateMarker","batch","changeParent","enqueueChange","storedAttributes","clearAttributesStoredInElement","_getDefaultRange","overrideUid","liveRange","_prepareRange","_validateSelectionRange","changed","markerGroup","selectionRange","oldMarkers","hasMarker","contained","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","newKey","oldKey","realKey","getTextAttributes","isObject","getNearestSelectionRange","isInline","checkAttribute","ConversionHelpers","dispatchers","_dispatchers","conversionHelper","DowncastHelpers","elementToElement","normalizeModelElementConfig","normalizeToElementConfig","elementCreator","consumer","defaultConsumer","preflight","reinsertOrConvertNodes","insertElement","createConsumer","converterPriority","createChangeReducer","downcastElementToElement","elementToStructure","checkChild","slotsMap","slot","createSlotFactory","childrenInSlots","flat","uniqueChildrenInSlots","validateSlotsChildren","toViewPositionMapping","currentSlot","currentSlotNodes","fillSlots","downcastElementToStructure","attributeToElement","modelValue","getFromAttributeCreator","oldViewElement","newViewElement","viewWriter","downcastAttributeToElement","attributeToAttribute","normalizeToAttributeConfig","attributeCreator","oldAttribute","downcastAttributeToAttribute","markerToElement","isOpening","viewStartElement","viewEndElement","downcastMarkerToElement","markerToHighlight","highlightDescriptor","descriptor","prepareDescriptor","createViewElementFromHighlightDescriptor","rangeAfterWrap","addHighlightCallback","highlightElement","viewHighlightElement","removeHighlightCallback","removeHighlight","downcastMarkerToHighlight","markerToData","viewCreator","viewMarkerData","handleMarkerBoundary","viewData","removeMarkerFromAttribute","removeMarkerData","downcastMarkerToData","isStart","elementAfter","elementBefore","insertMarkerAsAttribute","insertMarkerAsElement","viewElementType","modelData","viewElementDefinition","createViewElementFromDefinition","modelAttributeValue","shouldReplace","createChangeReducerCallback","reducedChanges","reconvertedElements","changeIndex","positionRelation","modelNodes","modelChildNode","reinsertNode","modelNode","viewChildNode","autoParagraphEmptyRoots","getRootNames","isParagraphable","nodeOrType","createContext","wrapInParagraph","paragraph","UpcastHelpers","upcastElementToElement","elementToAttribute","normalizeModelAttributeConfig","converter","prepareToAttributeConverter","getViewElementNameFromConfig","upcastElementToAttribute","viewKey","normalized","normalizeViewAttributeKeyValueConfig","upcastAttributeToAttribute","elementToMarker","normalizeElementToMarkerModelConfig","upcastElementToMarker","dataToMarker","normalizedConfig","converterStart","prepareToElementConverter","normalizeDataToMarkerConfig","converterEnd","basePriority","maxPriority","priorityFactor","addMarkerElements","markerViewNames","markerViewName","modelCursor","viewItem","upcastAttributeToMarker","upcastDataToMarker","viewConfig","matcherResult","getModelElement","safeInsert","updateConversionResult","viewAttributeKeyToCopy","defaultModelValue","configToTest","onlyViewNameIsDefined","modelKey","attributeWasSet","modelAttribute","setAttributeOn","tryFixingRange","originalPosition","nearestSelectionRange","ancestorObject","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","getLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","fixedStart","isSelectable","fixedEnd","isStartInLimit","isEndInLimit","bothInSameParent","expandStart","expandEnd","findOutermostLimitAncestor","tryFixingNonCollapsedRage","startingNode","isLimitNode","EditingController","downcastDispatcher","modelSelection","convertSelectionChange","correctedRange","modelEnd","brokenPosition","reconvertMarker","markerOrName","currentMarker","_refresh","reconvertItem","_refreshItem","ViewConsumable","elementConsumables","ViewElementConsumables","instance","consumablesFromElement","createFrom","CONSUMABLE_TYPES","_canConsumeName","_test","_consume","_revert","consumableName","toConsume","Schema","_sourceDefinitions","_attributeProperties","SchemaContext","getDefinition","register","itemName","_clearCache","getDefinitions","_compiledDefinitions","_compile","isRegistered","isContent","_checkContextMatch","allowAttributes","checkMerge","positionOrBaseElement","elementToMerge","addChildCheck","retValue","addAttributeCheck","setAttributeProperties","getAttributeProperties","selectionOrRangeOrPosition","rangeCommonAncestor","checkAttributeInSelection","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","limitElement","forward","combineWalkers","findAllowedParent","setAllowedAttributes","removeDisallowedAttributes","removeDisallowedAttributeFromNode","positionsInRange","getPositions","getAttributesWithProperty","attributeProperties","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowChildren","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","setupAllowChildren","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","allowChildren","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","inheritAllFrom","makeInheritAllWork","allowChildrenItem","allowedChildren","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","allowedParentItemName","ctxItem","UpcastDispatcher","_splitParts","_cursorParents","_modelCursor","_emptyElementsToKeep","store","_convertItem","positionOrElement","_convertChildren","_safeInsert","_updateConversionResult","splitToAllowedParent","_splitToAllowedParent","getSplitParts","_getSplitParts","keepEmptyElement","_keepEmptyElement","contextDefinition","createContextTree","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","elementOrModelCursor","nextModelCursor","splitResult","savedCursorParent","allowedParent","treeWalkerValue","originalPart","splitPart","_registerSplitPair","cursorParent","anyRemoved","BasicHtmlWriter","getHtml","implementation","createHTMLDocument","HtmlDataProcessor","domParser","htmlWriter","toData","toView","_toDom","useFillerType","DataController","upcastDispatcher","htmlProcessor","processor","_viewWriter","isUndoable","_checkIfRootsExists","ignoreWhitespaces","modelElementOrFragment","viewDocumentFragment","elementRange","isMarkerCollapsed","isMarkerAtElementBoundary","updatedMarkerRange","n1","n2","localeCompare","_getMarkersRelativeToElement","version","initialData","main","modelRoot","parse","newData","batchType","removeSelectionAttribute","viewElementOrFragment","addStyleProcessorRules","rootNames","Conversion","downcastDispatchers","upcastDispatchers","_helpers","_downcast","_createConversionHelpers","isDowncast","_upcast","addAlias","alias","_getAllUpcastDefinitions","helpers","upcastAlso","_getUpcastDefinition","upcastAlsoItem","Operation","baseVersion","_validate","__className","normalizedNodes","_normalizeNodes","_splitNodeAtPosition","_mergeNodesAtIndex","_move","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","nodeA","nodeB","iteratorA","iteratorB","MoveOperation","affectedSelectable","getMovedRangeStart","getReversed","newTargetPosition","sourceElement","targetElement","sourceOffset","targetOffset","_execute","InsertOperation","shouldReceiveAttributes","gyPosition","originalNodes","SplitOperation","MergeOperation","splitElement","mergedElement","MarkerOperation","_markers","_set","AttributeOperation","NoOperation","RenameOperation","oldName","RootAttributeOperation","RootOperation","isAdd","createRoot","_isAttached","OperationFactory","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","getTransformation","transformSets","operationsA","operationsB","contextFactory","ContextFactory","useRelations","forceWeakRemove","setOriginalOperations","originalOperations","nextTransformIndex","op","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","history","_useRelations","_forceWeakRemove","_relations","takeFrom","originalOperation","_setRelation","affectedLeft","affectedRight","side","wasInLeftElement","wasStartBeforeMergedElement","wasEndBeforeMergedElement","wasInRightElement","aIsStrong","aWasUndone","_wasUndone","bWasUndone","abRelation","_getRelation","baRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","moveOp","diffs","_breakRangeByMoveOperation","aNewRange","aToGraveyard","bToGraveyard","aIsWeak","removedRange","mergeInside","mergeSplittingElement","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","splitNodesMoveTargetPath","splitNodesMoveTarget","splitNodesMove","extraRename","splitPath","getInsertionPosition","additionalSplit","rangeToMove","gyElementMoved","newParentPosition","newTargetPath","splitAtTarget","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","LivePosition","toPosition","oldPosition","Batch","isLocal","isUndo","isTyping","addOperation","Differ","markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changedRoots","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_refreshedItems","_markerCollection","bufferOperation","operationToBuffer","_isInInsertedElement","_markInsert","_markAttribute","sourceParentInserted","targetParentInserted","_markRemove","getMarkersIntersectingRange","markerData","bufferMarkerChange","graveyardParent","mergedIntoElement","_bufferRootStateChange","_bufferRootAttributeChange","oldMarkerData","newMarkerData","buffered","getChangedMarkers","hasDataChanges","markerAdded","markerRemoved","markerChanged","includeChangesInGraveyard","diffSet","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevIndex","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","getChangedRoots","diffItem","state","reset","attrEntry","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","elementSnapshot","snapshot","oldChildrenLength","oldChildrenHandled","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","_baseVersionToOperationIndex","_version","_gaps","lastOperation","historyVersion","getOperations","fromBaseVersion","toBaseVersion","firstOperation","inclusiveTo","gapFrom","gapTo","fromIndex","toIndex","getOperation","operationIndex","setOperationAsUndone","undoneOperation","undoingOperation","isUndoingOperation","RootElement","graveyardName","_hasSelectionChangedFromTheLastChangeBlock","removeMarker","includeDetached","_handleChangeBlock","_hasDocumentChangedFromTheLastChangeBlock","_getDefaultRoot","defaultRoot","createPositionFromPath","validateTextNodePosition","rangeBoundary","MarkerCollection","Marker","managedUsingOperations","oldMarker","hasChanged","_attachLiveRange","_managedUsingOperations","_destroyMarker","prefix","_detachLiveRange","_liveRange","getStart","getEnd","DetachOperation","Writer","cloneElement","_assertWriterUsedCorrectly","isSameTree","applyOperation","rangeRootPosition","usingOperation","updateMarker","addMarker","insertText","itemOrPositionOrOffset","appendText","appendElement","itemOrRange","setAttributeOnRange","setAttributeOnItem","setAttributes","clearAttributes","removeAttributesFromItem","_addOperationForAffectedMarkers","applyRemoveOperation","merge","_merge","_mergeDetached","renameOperation","firstSplitElement","firstCopyElement","elementOrString","shiftedRange","applyMarkerOperation","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","addRoot","detachRoot","rootOrName","setSelectionAttribute","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","overrideSelectionGravity","restoreSelectionGravity","storeKey","_currentWriter","isAffected","affectedInLeftElement","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","valueBefore","valueAfter","lastSplitPosition","previousValue","rootA","rootB","deleteContent","selRange","doNotResetEntireContent","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","attributesForAutoparagraph","doNotAutoparagraph","ignoreMarkers","modifySelection","newEndPosition","skippedRange","fromPosition","getLivePositionsForSelectedBlocks","leaveUnmerged","checkShouldMerge","startAncestor","endAncestor","positionA","positionB","getAncestorsJustBelowCommonAncestor","mergeBranchesRight","mergeBranchesLeft","mergeBranches","collapseSelectionAt","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","commonAncestor","parentToRemove","mergeRight","leftPos","rightPos","rangeToCheck","isCrossingLimitElement","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","Insertion","_firstNode","_lastNode","_lastAutoParagraph","_filterAttributesOf","_affectedStart","_affectedEnd","_nodeToSelect","canMergeWith","_documentFragment","_documentFragmentPosition","handleNodes","_handleNode","_insertPartialFragment","_updateLastNodeFromAutoParagraph","_mergeOnRight","positionAfterLastNode","positionAfterNode","_setAffectedBoundaries","getSelectionRange","getAffectedRange","_handleObject","isAllowed","_checkAndAutoParagraphToAllowedPosition","_checkAndSplitToAllowedPosition","_appendToFragment","_handleDisallowedNode","livePosition","_mergeOnLeft","_tryAutoparagraphing","_canMergeLeft","mergePosLeft","_canMergeRight","mergePosRight","_getAllowedIn","tempPos","contextElement","childNode","tryExtendingTo","isForward","treatEmojiAsSingleUnit","isAtNodeBoundary","isAtWordBoundary","getCorrectWordBreakPosition","getCorrectPosition","getSearchRange","searchEnd","offsetToCheck","Model","_pendingChanges","childDefinition","rangesToMerge","rangeIndexesToRemove","currentRangeIndex","previousRanges","previousRangeIndex","previousRange","mergedRange","mergeIntersectingRanges","selectionPostFixer","insertion","fakeMarkerElements","nodesToInsert","markersPosition","posA","posB","isAtBeginning","selectionLiveRange","markersData","isStartBoundary","elementPosition","rangeOnInsertion","affectedRange","insertContent","originalSelection","insertionSelection","findOptimalPosition","place","firstBlock","positionAfter","findOptimalInsertionRange","firstSelectedBlock","attributesToCopy","elementToInsert","insertionPositionParent","paragraphAttributes","nextElement","updateSelection","insertObject","_runPendingChanges","batchOrType","rest","normalizeSelectable","getSelectedContent","frag","commonPath","commonParent","flatSubtreeRange","leftExcessRange","rangeOrElement","intersectingMarker","createBatch","createOperationFromJSON","ret","currentBatch","callbackReturnValue","CommandCollection","_commands","commandName","command","commandParams","commands","EditingKeystrokeHandler","evtData","Editor","_readOnlyLocks","editing","enableReadOnlyMode","lockId","disableReadOnlyMode","removePlugins","extraPlugins","readyPromise","DataApiMixin","ElementApiMixin","updateSourceElement","shouldUpdateSourceElement","isSourceElementTextArea","HTMLTextAreaElement","setDataInElement","PendingActions","_actions","hasAny","icons","bold","caption","check","cog","eraser","lowVision","importExport","plus","alignBottom","alignMiddle","alignTop","alignLeft","alignCenter","alignRight","alignJustify","objectLeft","objectCenter","objectRight","objectFullWidth","objectInline","objectBlockLeft","objectBlockRight","objectSizeFull","objectSizeLarge","objectSizeSmall","objectSizeMedium","pencil","pilcrow","threeVerticalDots","NESTED_TOOLBAR_ICONS","itemsView","ItemsView","isRtl","_focusCycler","shouldGroupWhenFull","isFloating","maxWidth","_behavior","DynamicGrouping","StaticLayout","fillFromConfig","itemsOrConfig","_buildItemsFromConfig","normalizedRemoveItems","_cleanItemsConfiguration","_createNestedToolbarDropdown","filteredItems","_cleanSeparatorsAndLineBreaks","nonSeparatorPredicate","firstCommandItemIndex","findIndex","lastCommandItemIndex","componentFactory","withText","dropdownView","addToolbarToDropdown","toolbarView","resizeObserver","cachedPadding","shouldUpdateGroupingOnNextResize","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","_updateFocusCycleableItems","changeData","removedItem","currentIndex","addedItem","_updateGrouping","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","initialGroupedItemsCount","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","lastChildRect","toolbarRect","computedStyle","paddingProperty","previousWidth","contentRect","dropdown","tooltipPosition","SplitButtonView","actionView","_createActionView","ButtonClass","activator","contextElements","composedPath","contextElementsList","closeDropdownOnClickOutside","closeDropdownOnExecute","closeDropdownOnBlur","focusDropdownContentsOnArrows","focusDropdownButtonOnClose","focusDropdownPanelOnOpen","addDefaultBehavior","buttonsOrCallback","addToolbarToOpenDropdown","enableActiveItemFocusOnDropdownOpen","childSelectorCallback","childToFocus","focusChildOnDropdownOpen","isOn","buttons","ariaLabel","isCompact","isVertical","clamp","digits","pow","hexToRgba","hsvaToHslString","hsva","hh","hsvaToHsla","format","equalColorObjects","second","tpl","detail","dispatchEvent","CustomEvent","bubbles","hasTouched","isTouch","pointerMove","pointer","touches","getMove","pageX","pageXOffset","pageY","pageYOffset","Slider","aria","xy","cloneNode","dragging","toggleEvent","handleEvent","isValid","button","keyMove","setProperty","Hue","Saturation","$isSame","$color","$hsva","$update","$parts","$css","$sliders","ColorPicker","observedAttributes","newColor","newHsva","colorModel","toHsva","attachShadow","mode","slider","connectedCallback","defaultColor","attributeChangedCallback","_attr","_oldVal","newVal","fromAttr","oldHsva","fromHsva","rgbaToHsva","alphaHex","rgbaToHex","hsvaToRgba","HexBase","customElements","ComponentFactory","_components","originalName","toPx","defaultLimiterElement","_pinWhenIsVisibleCallback","show","hide","attachTo","defaultPositions","southArrowNorth","southArrowNorthMiddleWest","southArrowNorthMiddleEast","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthMiddleWest","northArrowSouthMiddleEast","northArrowSouthWest","northArrowSouthEast","viewportStickyNorth","optimalPosition","withArrow","pin","unpin","_startPinning","_stopPinning","getDomElement","limiterElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","sideOffset","arrowSideOffset","heightOffset","arrowHeightOffset","stickyVerticalOffset","northWestArrowSouthWest","balloonRect","getNorthTop","northWestArrowSouthMiddleWest","northWestArrowSouth","northWestArrowSouthMiddleEast","northWestArrowSouthEast","northEastArrowSouthWest","northEastArrowSouthMiddleWest","northEastArrowSouth","northEastArrowSouthMiddleEast","northEastArrowSouthEast","southWestArrowNorthWest","getSouthTop","southWestArrowNorthMiddleWest","southWestArrowNorth","southWestArrowNorthMiddleEast","southWestArrowNorthEast","southEastArrowNorthWest","southEastArrowNorthMiddleWest","southEastArrowNorth","southEastArrowNorthMiddleEast","southEastArrowNorthEast","westArrowEast","eastArrowWest","BALLOON_CLASS","TooltipManager","_currentElementWithTooltip","_currentTooltipPosition","_resizeObserver","_editors","_instance","tooltipTextView","balloonPanelView","_pinTooltipDebounced","_pinTooltip","_onEnterOrFocus","_onLeaveOrBlur","_onScroll","_watchdogExcluded","editorBodyViewCollection","_unpinTooltip","defaultBalloonPositions","sw","se","elementWithTooltipAttribute","getDescendantWithTooltip","ckeTooltipText","ckeTooltipPosition","cssClass","ckeTooltipClass","relatedTarget","descendantWithTooltip","relatedDescendantWithTooltip","targetDomElement","bodyViewCollection","getPositioningFunctions","_updateTooltipPosition","closest","OFF_THE_SCREEN_POSITION","PoweredBy","_balloonView","_lastFocusedEditableElement","_showBalloonThrottled","_showBalloon","_handleEditorReady","balloon","token","oldTokenCheck","decryptedData","splittedDecryptedData","firstElement","secondElement","decryptedSecondElement","year","monthIndex","day","date","isNaN","verifyLicense","_updateLastFocusedEditableElement","_hideBalloon","_createBalloonView","poweredByConfig","getNormalizedConfig","PoweredByView","attachOptions","focusedEditableElement","getLowerCornerPosition","rootRect","horizontalOffset","getLowerRightCornerPosition","getLowerLeftCornerPosition","getBalloonAttachOptions","editableEditorElements","getEditableElementsNames","getEditableElement","isColorInherited","ICON_WIDTH","ICON_HEIGHT","href","dragstart","getBalloonLeft","editableElementRect","visibleEditableElementRect","balloonTop","verticalOffset","balloonLeft","newBalloonRect","firstScrollableEditableElementAncestor","overflowY","findClosestScrollableAncestor","firstScrollableEditableElementAncestorRect","userConfig","EditorUI","isReady","_editableElementsMap","_focusableToolbarDefinitions","editingView","tooltipManager","poweredBy","_readViewportOffsetFromConfig","_handleScrollToTheSelection","_initFocusTracking","ckeditorInstance","setEditableElement","setUpKeystrokeHandler","removeEditableElement","addToolbar","_editableElements","editorUI","legacyOffsetConfig","lastFocusedForeignElement","candidateDefinitions","currentFocusedToolbarDefinition","_getCurrentFocusedToolbarDefinition","_getFocusableCandidateToolbarDefinitions","candidateDefinition","_focusFocusableCandidateToolbar","afterBlur","focusedToolbarDef","definitions","toolbarDef","beforeFocus","defA","defB","getToolbarDefinitionWeight","candidateToolbarDefinition","configuredViewportOffset","weight","isContextual","EditorUIView","BoxedEditorUIView","_voiceLabelView","_createVoiceLabel","lang","voiceLabel","EditableUIView","_editableElement","_hasExternalElement","_editingView","_updateIsFocusedClasses","hasExternalElement","updateAfterRender","InlineEditableUIView","_generateLabel","StickyPanelView","_contentPanelPlaceholder","isSticky","_panelRect","_contentPanel","_hasViewportTopOffset","viewportTopOffset","_isStickyToTheLimiter","limiterBottomOffset","marginLeft","_checkIfShouldBeSticky","_limiterRect","isActive","_marginLeft","ClassicEditorUI","_toolbarConfig","_elementReplacer","_handleScrollToTheSelectionWithStickyPanel","replacementElement","editingRoot","_initPlaceholder","_initToolbar","stickyPanel","toolbar","placeholderText","placeholder","enablePlaceholder","stickyPanelHeight","scrollViewportOnPanelGettingSticky","ClassicEditorUIView","shouldToolbarGroupWhenFull","Watchdog","crashes","_now","_crashNumberLimit","crashNumberLimit","_minimumNonErrorTimePeriod","minimumNonErrorTimePeriod","_boundErrorHandler","reason","_handleError","_listeners","_restart","_stopErrorHandling","cb","_fire","_startErrorHandling","_shouldReactToError","filename","ErrorEvent","lineno","colno","causesRestart","_shouldRestart","_isErrorComingFromThisItem","excludedProperties","subNodes","nodeIndex","shouldNodeBeIncluded","typeOfNode","EventTarget","Event","areConnectedThroughProperties","target1","target2","excludedNodes","structure","subNodes1","subNodes2","EditorWatchdog","watchdogConfig","_editor","_throttledSave","_save","saveInterval","_creator","elementOrData","_destructor","setCreator","creator","setDestructor","destructor","_destroy","catch","_elementOrData","updatedConfig","_cloneEditorConfiguration","_lastDocumentVersion","_getData","_setExcludedProperties","_excludedProps","mainQueueId","ActionQueues","_onEmptyCallbacks","_queues","_activeActions","onEmpty","onEmptyCallback","enqueue","queueId","isMainAction","queueWithAction","nonErrorQueue","finally","elementOrArray","sourceElementOrData","getInitialData","isTextArea","form","originalSubmit","onSubmit","submit","attachToForm","indentLine","line","indentCount","indentChar","ContextWatchdog","_watchdogs","_contextProps","_actionQueues","_watchdogConfig","contextConfig","_contextConfig","_create","_getWatchdog","getItemState","itemConfigurationOrItemConfigurations","itemConfigurations","watchdog","res","rethrowRestartEventOnce","itemIdOrItemIds","itemIds","COMMAND_FORCE_DISABLE_ID","formatSource","isHtml","elementsToFormat","isVoid","elementNamesToFormat","lines","isNonVoidOpeningTag","isClosingTag","formatHtml","handleInput","dropRange","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","getDropViewRange","smallPaddingElements","viewToPlainText","childText","_setupPasteDrop","_setupCopyCut","contentData","fullMatch","spaces","modelFragment","resultRange","modelDocument","onCopyCut","ChangeBuffer","limit","_batch","_size","_isLocked","_changeCallback","_reset","_selectionChangeCallback","isLocked","lock","unlock","ignoreLock","InsertTextCommand","undoStepSize","_buffer","textInsertions","TYPING_INPUT_TYPES","InsertTextObserver","Input","insertTextCommand","viewResultRange","modelRanges","selectedText","rangeText","insertTextCommandData","deleteSelectionContent","DeleteCommand","sequence","_shouldEntireContentBeReplacedWithParagraph","_replaceEntireContentWithParagraph","_shouldReplaceFirstBlockWithParagraph","limitElementFirstChild","DELETE_WORD","DELETE_SELECTION","DELETE_BACKWARD","DELETE_FORWARD","DELETE_EVENT_TYPES","deleteContentBackward","deleteWordBackward","deleteHardLineBackward","deleteSoftLineBackward","deleteContentForward","deleteWordForward","deleteHardLineForward","deleteSoftLineForward","DeleteObserver","deleteEventSpec","selectionToRemove","shouldUseTargetRanges","pressedKeyCode","beforeInputReceived","isDeleteKeyCode","getDeleteDirection","shouldFireDeleteEvent","targetRange","enableChromeWorkaround","Delete","_undoOnBackspace","deleteForwardCommand","commandData","requestUndoOnBackspace","Typing","testCallback","_hasMatch","_startListening","hasMatch","_evaluateTextBeforeSelection","suffix","rangeBeforeSelection","getLastTextLine","testResult","eventData","buildQuotesRegExp","quoteCharacter","getCopyOnEnterAttributes","allAttributes","copyOnEnter","EnterCommand","enterBlock","isSelectionEmpty","splitBlock","isContainedWithinOneElement","splitPos","ENTER_EVENT_TYPES","isSoft","insertLineBreak","EnterObserver","shiftPressed","enterEventSpec","Enter","ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","ShiftEnter","_stack","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","shouldABeBeforeB","WIDGET_SELECTED_CLASS_NAME","TYPE_AROUND_SELECTION_ATTRIBUTE","isTypeAroundWidget","POSSIBLE_INSERTION_POSITIONS","RETURN_ARROW_ICON_ELEMENT","PLUGIN_DISABLED_EDITING_ROOT_CLASS","WidgetTypeAround","_currentFakeCaretModelElement","_enableTypeAroundUIInjection","_enableInsertingParagraphsOnButtonClick","_enableInsertingParagraphsOnEnterKeypress","_enableInsertingParagraphsOnTypingKeystroke","_enableTypeAroundFakeCaretActivationUsingKeyboardArrows","_enableDeleteIntegration","_enableInsertContentIntegration","_enableInsertObjectIntegration","_enableDeleteContentIntegration","_insertParagraph","widgetModelElement","_listenToIfEnabled","_insertParagraphAccordingToFakeCaretPosition","typeAroundFakeCaretPosition","selectedModelElement","buttonTitles","before","after","widgetViewElement","typeAroundWrapper","wrapperDomElement","buttonTemplate","title","importNode","injectButtons","caretTemplate","injectFakeCaret","injectUIIntoWidget","positionToWidgetCssClass","domEventData","_handleArrowKeyPress","selectedViewElement","localizedKeyCodeDirection","isForwardArrowKeyCode","shouldStopAndPreventDefault","_handleArrowKeyPressOnSelectedWidget","_handleArrowKeyPressWhenSelectionNextToAWidget","_handleArrowKeyPressWhenNonCollapsedSelection","widgetPlugin","modelElementNextToSelection","_getObjectElementNextToSelection","_setSelectionOverElement","selectedModelNode","buttonPosition","classList","widgetDomElement","getClosestWidgetViewElement","wasHandled","selectedModelWidget","isDeleteForward","probe","deepestEmptyRangeAncestor","deepestEmptyAncestor","getDeepestEmptyElementAncestor","documentSelection","getNearestNonInlineLimit","walkerValueType","getNearestTextPosition","_previouslySelected","_clearPreviouslySelectedWidgets","lastMarked","_onMousedown","_handleSelectionChangeOnArrowKeyPress","_preventDefaultOnArrowKeyPress","arrowUpPressed","arrowDownPressed","expandSelection","selectionWillShrink","lastRangePosition","firstRangePosition","findTextRangeFromSelection","boundaryVerticalPosition","isSingleLineRange","verticalNavigationHandler","_handleDelete","currentElement","isInsideNestedEditable","objectElement","isVerticalNavigation","firstPosition","lastPosition","firstSelectedNode","lastSelectedNode","objectElementNextToSelection","previousNode","nodeToRemove","widget","_referenceCoordinates","originalWidth","_originalWidth","originalHeight","_originalHeight","originalWidthPercents","_originalWidthPercents","aspectRatio","_aspectRatio","begin","domResizeHandle","domHandleHost","domResizeHost","clientRect","Rect","activeHandlePosition","domHandle","resizerPositions","getResizerHandleClass","getHandlePosition","resizerPosition","positionParts","getAbsoluteBoundaryPoint","replacements","getOppositePosition","widthStyle","parseFloat","resizeHostRect","domResizeHostParent","parentWidth","currentLevel","checkedElement","calculateHostPercentageWidth","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","_viewResizerWrapper","isSelected","_cleanup","_state","widgetElement","viewResizerWrapper","_appendHandles","_appendSizeUI","redraw","ResizeState","_sizeView","_bindToState","_initialViewWidth","_getHandleHost","_getResizeHost","updateSize","_proposeNewSize","newWidth","domHandleHostRect","domResizeHostRect","commit","onCommit","handleHostRect","domWrapper","_domResizerWrapper","widgetWrapper","handleHost","resizerWrapper","currentDimensions","newDimensions","isSameNode","offsetLeft","offsetTop","compareArrays","containsHandle","_dismiss","currentCoordinates","isCentered","enlargement","abs","getResizeHost","getHandleHost","Template","SizeView","DragDrop","_draggedRange","_draggingUid","_draggableElement","_updateDropMarkerThrottled","_updateDropMarker","_removeDropMarkerDelayed","_removeDropMarker","_clearDraggableAttributesDelayed","_clearDraggableAttributes","_setupDragging","_setupContentInsertionIntegration","_setupClipboardInputIntegration","_setupDropMarker","_setupDraggableAttributeHandling","_finalizeDragging","draggableWidget","findDraggableWidget","canEditAtDraggedRange","draggedSelection","findDropTargetRange","getFinalDropEffect","clipboardPipeline","isMove","isSuccess","draggableElement","moved","targetViewRanges","targetViewElement","targetViewPosition","findDropTargetRangeOnWidget","targetModelElement","getClosestMappedModelElement","targetModelPosition","positionAtElementStart","findDropTargetRangeBetweenBlocks","findDropTargetRangeOnAncestorObject","findDropTargetRangeInElement","PastePlainText","isPlainTextFragment","textAttributes","isFormatting","Clipboard","SelectAllCommand","scopeElement","isSelectAllScope","SELECT_ALL_KEYSTROKE","SelectAllEditing","SelectAllUI","SelectAll","BaseCommand","_createdBatches","clearStack","createdBatches","addBatch","docSelection","_restoreSelection","selectionRanges","transformedRangeGroups","allRanges","rangeGroup","isRangeContainedByAnyOtherRange","normalizeRanges","_undo","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","reversedOperations","joinedRange","UndoCommand","batchIndex","RedoCommand","redoingBatch","UndoEditing","_batchRegistry","_undoCommand","_redoCommand","isRedoBatch","isUndoBatch","undoneBatch","UndoUI","localizedUndoIcon","undo","redo","localizedRedoIcon","_addButton","Icon","Undo","AttributeCommand","_getValueFromFirstAllowedNode","forceValue","getValidRanges","BOLD","BoldEditing","fontWeight","BoldUI","ITALIC","ItalicEditing","ItalicUI","ClassicEditor","_replacedRoots","_dataFromRoots","isEditorReadOnly","hasAnyPendingActions","isSourceEditingMode","_isAllowedToHandleSourceEditingMode","_showSourceEditing","_disableCommands","_hideSourceEditing","_enableCommands","_handleReadOnlyMode","updateEditorData","afterInit","domSourceEditingElementWrapper","oldData","domRootElement","domSourceEditingElementTextarea","rows","setSelectionRange","_focusSourceEditing","textarea","readOnly"],"sourceRoot":""}